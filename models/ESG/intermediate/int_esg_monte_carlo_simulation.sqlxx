-- models/ESG/intermediate/int_esg_monte_carlo_simulation.sql
{{ 
    config(
        materialized='table',
        pre_hook="SET max_memory_usage = 6000000000"  
    )
}}

WITH simulation_parameters AS (
    SELECT 
        1000 AS n_scenarios,  -- Number of Monte Carlo scenarios
        42 AS random_seed
),

-- Generate scenarios with all uncertainty parameters
monte_carlo_scenarios AS (
    {{ generate_monte_carlo_samples(n_samples=1000, seed=42) }}
),

-- Get base data for calculation
base_data AS (
    SELECT
        p.date,
        p.node_category,
        p.country_code,
        p.estimated_total_nodes,
        p.avg_power_watts,
        p.pue_mean,
        ci.carbon_intensity_mean,
        
        -- Standard deviations for uncertainty
        (p.nodes_upper_95 - p.nodes_lower_95) / (2 * 1.96) AS nodes_std,
        p.power_std_dev,
        p.pue_std_dev,
        ci.carbon_intensity_std
        
    FROM {{ ref('int_esg_dynamic_power_consumption') }} p
    JOIN {{ ref('int_esg_carbon_intensity_ensemble') }} ci
        ON p.date = ci.date
        AND p.country_code = ci.country_code
        AND ci.hour = 12  -- Use noon as representative
    WHERE p.date = today() - 1  -- Calculate for yesterday
),

-- Calculate emissions for each scenario
scenario_calculations AS (
    SELECT
        s.scenario_id,
        b.date,
        b.node_category,
        b.country_code,
        
        -- Sample from distributions
        greatest(1, b.estimated_total_nodes * s.node_count_multiplier) AS sampled_nodes,
        greatest(10, b.avg_power_watts * s.power_variance) AS sampled_power,
        greatest(1.0, b.pue_mean + (s.pue_residential - 1.0) * b.pue_std_dev) AS sampled_pue,
        greatest(10, b.carbon_intensity_mean * s.ci_temporal_factor) AS sampled_ci,
        
        -- Calculate emissions for this scenario
        greatest(1, b.estimated_total_nodes * s.node_count_multiplier) *
        greatest(10, b.avg_power_watts * s.power_variance) *
        greatest(1.0, b.pue_mean + (s.pue_residential - 1.0) * b.pue_std_dev) *
        greatest(10, b.carbon_intensity_mean * s.ci_temporal_factor) *
        24 / 1000000000 AS co2_tonnes  -- Convert to tonnes CO2
        
    FROM base_data b
    CROSS JOIN monte_carlo_scenarios s
),

-- Aggregate scenario results
scenario_statistics AS (
    SELECT
        date,
        node_category,
        country_code,
        
        -- Statistical measures
        COUNT(*) AS n_scenarios,
        AVG(co2_tonnes) AS mean_emissions,
        stddevPop(co2_tonnes) AS std_emissions,
        
        -- Percentiles for confidence intervals
        quantile(0.025)(co2_tonnes) AS p2_5,
        quantile(0.05)(co2_tonnes) AS p5,
        quantile(0.10)(co2_tonnes) AS p10,
        quantile(0.25)(co2_tonnes) AS p25,
        quantile(0.50)(co2_tonnes) AS p50_median,
        quantile(0.75)(co2_tonnes) AS p75,
        quantile(0.90)(co2_tonnes) AS p90,
        quantile(0.95)(co2_tonnes) AS p95,
        quantile(0.975)(co2_tonnes) AS p97_5,
        
        -- Distribution characteristics
        MIN(co2_tonnes) AS min_emissions,
        MAX(co2_tonnes) AS max_emissions,
        
        -- Coefficient of variation
        stddevPop(co2_tonnes) / AVG(co2_tonnes) AS cv,
        
        -- Component-wise statistics for attribution
        AVG(sampled_nodes) AS mean_nodes,
        stddevPop(sampled_nodes) AS std_nodes,
        AVG(sampled_power) AS mean_power,
        stddevPop(sampled_power) AS std_power,
        AVG(sampled_pue) AS mean_pue,
        stddevPop(sampled_pue) AS std_pue,
        AVG(sampled_ci) AS mean_ci,
        stddevPop(sampled_ci) AS std_ci
        
    FROM scenario_calculations
    GROUP BY date, node_category, country_code
)

SELECT
    date,
    node_category,
    country_code,
    n_scenarios,
    
    -- Point estimates
    round(mean_emissions, 6) AS co2_tonnes_mean,
    round(std_emissions, 6) AS co2_tonnes_std,
    round(cv, 3) AS coefficient_of_variation,
    
    -- Confidence intervals
    round(p2_5, 6) AS co2_tonnes_ci_lower_95,
    round(p97_5, 6) AS co2_tonnes_ci_upper_95,
    round(p5, 6) AS co2_tonnes_ci_lower_90,
    round(p95, 6) AS co2_tonnes_ci_upper_90,
    
    -- Percentiles for box plots
    round(min_emissions, 6) AS co2_tonnes_min,
    round(p25, 6) AS co2_tonnes_q1,
    round(p50_median, 6) AS co2_tonnes_median,
    round(p75, 6) AS co2_tonnes_q3,
    round(max_emissions, 6) AS co2_tonnes_max,
    
    -- Uncertainty attribution (simplified - proper Sobol indices would be better)
    round(100 * pow(std_nodes/mean_nodes, 2) / 
        (pow(std_nodes/mean_nodes, 2) + pow(std_power/mean_power, 2) + 
         pow(std_pue/mean_pue, 2) + pow(std_ci/mean_ci, 2)), 1) AS node_uncertainty_pct,
    
    round(100 * pow(std_power/mean_power, 2) / 
        (pow(std_nodes/mean_nodes, 2) + pow(std_power/mean_power, 2) + 
         pow(std_pue/mean_pue, 2) + pow(std_ci/mean_ci, 2)), 1) AS power_uncertainty_pct,
    
    round(100 * pow(std_pue/mean_pue, 2) / 
        (pow(std_nodes/mean_nodes, 2) + pow(std_power/mean_power, 2) + 
         pow(std_pue/mean_pue, 2) + pow(std_ci/mean_ci, 2)), 1) AS pue_uncertainty_pct,
    
    round(100 * pow(std_ci/mean_ci, 2) / 
        (pow(std_nodes/mean_nodes, 2) + pow(std_power/mean_power, 2) + 
         pow(std_pue/mean_pue, 2) + pow(std_ci/mean_ci, 2)), 1) AS ci_uncertainty_pct

FROM scenario_statistics