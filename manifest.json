{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-10-15T13:37:53.833825Z", "invocation_id": "1d06db99-109f-4758-b796-f4e02bfeca3e", "env": {}, "project_name": "gnosis_dbt", "project_id": "f2ce69c8e27864dcb10780c0a29359d2", "user_id": "5b34c850-50ae-4d7a-90ca-1ea6a7e84d85", "send_anonymous_usage_stats": true, "adapter_type": "clickhouse"}, "nodes": {"model.gnosis_dbt.stg_crawlers_data__country_codes": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__country_codes", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/staging/stg_crawlers_data__country_codes.sql", "original_file_path": "models/ESG/staging/stg_crawlers_data__country_codes.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__country_codes", "fqn": ["gnosis_dbt", "ESG", "staging", "stg_crawlers_data__country_codes"], "alias": "stg_crawlers_data__country_codes", "checksum": {"name": "sha256", "checksum": "1a86cf00b69b021814b17a2d6db60d0970e588203a739f62794100adb8886d47"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "production", "crawlers_data"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data"], "description": "A staging model providing country code mappings, including region and sub-region classifications.", "columns": {"name": {"name": "name", "description": "The country's name.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "alpha-2": {"name": "alpha-2", "description": "The ISO 3166-1 alpha-2 country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "alpha-3": {"name": "alpha-3", "description": "The ISO 3166-1 alpha-3 country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country-code": {"name": "country-code", "description": "The numeric country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "iso_3166-2": {"name": "iso_3166-2", "description": "The ISO 3166-2 subdivision code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "The region classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub-region": {"name": "sub-region", "description": "The sub-region classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "intermediate-region": {"name": "intermediate-region", "description": "The intermediate region classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region-code": {"name": "region-code", "description": "The code representing the region.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub-region-code": {"name": "sub-region-code", "description": "The code representing the sub-region.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "intermediate-region-code": {"name": "intermediate-region-code", "description": "The code representing the intermediate region.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "crawlers_data"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535476.893396, "relation_name": "`dbt`.`stg_crawlers_data__country_codes`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data']\n    )\n}}\n\n\nSELECT\n    \"name\",\n    \"alpha-2\",\n    \"alpha-3\",\n    \"country-code\",\n    \"iso_3166-2\",\n    \"region\",\n    \"sub-region\",\n    \"intermediate-region\",\n    \"region-code\",\n    \"sub-region-code\",\n    \"intermediate-region-code\"\nFROM\n    {{ source('crawlers_data','country_codes') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "country_codes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.country_codes"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/staging/stg_crawlers_data__country_codes.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    \"name\",\n    \"alpha-2\",\n    \"alpha-3\",\n    \"country-code\",\n    \"iso_3166-2\",\n    \"region\",\n    \"sub-region\",\n    \"intermediate-region\",\n    \"region-code\",\n    \"sub-region-code\",\n    \"intermediate-region-code\"\nFROM\n    `crawlers_data`.`country_codes`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__ember_electricity_data": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__ember_electricity_data", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/staging/stg_crawlers_data__ember_electricity_data.sql", "original_file_path": "models/ESG/staging/stg_crawlers_data__ember_electricity_data.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__ember_electricity_data", "fqn": ["gnosis_dbt", "ESG", "staging", "stg_crawlers_data__ember_electricity_data"], "alias": "stg_crawlers_data__ember_electricity_data", "checksum": {"name": "sha256", "checksum": "01cc88d2ef77445e723e88a6cfac0892c5de7671fe6e951bdbb6a73abec3234a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "production", "crawlers_data"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data"], "description": "A staging model for Ember Electricity Data, containing regional and category information, with temporal and value metrics used for analysis.", "columns": {"Date": {"name": "Date", "description": "The date of the data record, in UTC timestamp.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "OECD": {"name": "OECD", "description": "OECD membership indicator (e.g., 'Yes' or 'No').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "ISO 3 code representing the country or region.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change": {"name": "change", "description": "YoY absolute change in electricity data.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "G7": {"name": "G7", "description": "G7 membership indicator (e.g., 'Yes' or 'No').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Area": {"name": "Area", "description": "The geographical area name.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "EU": {"name": "EU", "description": "European Union membership indicator (e.g., 'Yes' or 'No').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "Ember region classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ASEAN": {"name": "ASEAN", "description": "ASEAN membership indicator (e.g., 'Yes' or 'No').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "G20": {"name": "G20", "description": "G20 membership indicator (e.g., 'Yes' or 'No').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Subcategory": {"name": "Subcategory", "description": "Subcategory of the variable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Variable": {"name": "Variable", "description": "The variable name related to electricity data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Category": {"name": "Category", "description": "The category classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Value": {"name": "Value", "description": "The measured value of the variable.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Unit": {"name": "Unit", "description": "The measurement unit.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of data (e.g., 'actual', 'forecast').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Continent": {"name": "Continent", "description": "Continent classification.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "crawlers_data"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535476.9014132, "relation_name": "`dbt`.`stg_crawlers_data__ember_electricity_data`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data']\n    )\n}}\n\n\nSELECT\n    \"Area\",\n    \"ISO 3 code\",\n    \"Date\",\n    \"Area type\",\n    \"Continent\",\n    \"Ember region\",\n    \"EU\" ,\n    \"OECD\",\n    \"G20\",\n    \"G7\",\n    \"ASEAN\",\n    \"Category\",\n    \"Subcategory\",\n    \"Variable\",\n    \"Unit\",\n    \"Value\",\n    \"YoY absolute change\",\n    \"YoY % change\" \nFROM\n    {{ source('crawlers_data','ember_electricity_data') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "ember_electricity_data"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.ember_electricity_data"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/staging/stg_crawlers_data__ember_electricity_data.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    \"Area\",\n    \"ISO 3 code\",\n    \"Date\",\n    \"Area type\",\n    \"Continent\",\n    \"Ember region\",\n    \"EU\" ,\n    \"OECD\",\n    \"G20\",\n    \"G7\",\n    \"ASEAN\",\n    \"Category\",\n    \"Subcategory\",\n    \"Variable\",\n    \"Unit\",\n    \"Value\",\n    \"YoY absolute change\",\n    \"YoY % change\" \nFROM\n    `crawlers_data`.`ember_electricity_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_node_client_distribution": {"database": "dbt", "schema": "dbt", "name": "int_esg_node_client_distribution", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_node_client_distribution.sql", "original_file_path": "models/ESG/intermediate/int_esg_node_client_distribution.sql", "unique_id": "model.gnosis_dbt.int_esg_node_client_distribution", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_node_client_distribution"], "alias": "int_esg_node_client_distribution", "checksum": {"name": "sha256", "checksum": "6dbe8a35df472f4c9046bae529096d9477fef27d9d7ae5dad4c84c91b86cd695"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "nodes", "production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, node_category, client_type)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "(date, node_category, client_type)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "esg", "nodes"], "description": "Business-facing model providing client distribution metrics per node category, including estimated client nodes, percentage breakdowns, and rankings, based on classification and client data sources.", "columns": {"date": {"name": "date", "description": "Date of the data snapshot, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "node_category": {"name": "node_category", "description": "Category of nodes, e.g., validator type or classification label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_total_nodes": {"name": "estimated_total_nodes", "description": "Estimated total number of nodes in the category.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_lower_95": {"name": "nodes_lower_95", "description": "Lower bound of 95% confidence interval for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_upper_95": {"name": "nodes_upper_95", "description": "Upper bound of 95% confidence interval for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "scaling_factor": {"name": "scaling_factor", "description": "Scaling factor applied during classification.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_type": {"name": "client_type", "description": "Type of client, e.g., consensus or execution client with label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "observed_client_nodes": {"name": "observed_client_nodes", "description": "Number of observed client nodes for the given type.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "observed_client_percentage": {"name": "observed_client_percentage", "description": "Percentage of client nodes relative to total observed in the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_client_nodes": {"name": "estimated_client_nodes", "description": "Estimated number of client nodes in the category.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_nodes_lower_95": {"name": "client_nodes_lower_95", "description": "Lower bound estimate of client nodes at 95% confidence.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_nodes_upper_95": {"name": "client_nodes_upper_95", "description": "Upper bound estimate of client nodes at 95% confidence.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_efficiency_factor": {"name": "client_efficiency_factor", "description": "Efficiency factor for the client type relative to baseline.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_client_percentage": {"name": "category_client_percentage", "description": "Percentage of estimated client nodes within the node category.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_client_percentage": {"name": "global_client_percentage", "description": "Percentage of estimated client nodes across all categories.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank_in_category": {"name": "rank_in_category", "description": "Rank of the client type within its node category based on estimated nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_rank": {"name": "global_rank", "description": "Global rank of the client type across all categories.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the metrics were calculated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "(date, node_category, client_type)", "partition_by": "toStartOfMonth(date)", "order_by": "(date, node_category, client_type)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535476.9533515, "relation_name": "`dbt`.`int_esg_node_client_distribution`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='(date, node_category, client_type)',\n        partition_by='toStartOfMonth(date)',\n        order_by='(date, node_category, client_type)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','esg','nodes']\n    )\n}}\n\nWITH node_classification AS (\n    -- Get total nodes per category from classification model\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        scaling_factor\n    FROM {{ ref('int_esg_node_classification') }}\n    {% if is_incremental() %}\n        WHERE date > (SELECT MAX(date) FROM {{ this }})\n    {% endif %}\n),\n\n-- Combine client data from both DiscV4 (execution) and DiscV5 (consensus)\ncombined_client_data AS (\n    -- DiscV5 Consensus clients\n    SELECT\n        date,\n        'consensus_' || label AS client_type,\n        value AS observed_client_nodes\n    FROM {{ ref('int_p2p_discv5_clients_daily') }}\n    WHERE metric = 'Clients' \n        AND value > 0\n        AND label NOT IN ('Unknown', '')\n        {% if is_incremental() %}\n            AND date > (SELECT MAX(date) FROM {{ this }}) - INTERVAL 1 DAY\n        {% endif %}\n    \n    UNION ALL\n    \n    -- DiscV4 Execution clients  \n    SELECT\n        date,\n        'execution_' || label AS client_type,\n        value AS observed_client_nodes\n    FROM {{ ref('int_p2p_discv4_clients_daily') }}\n    WHERE metric = 'Clients'\n        AND value > 0  \n        AND label NOT IN ('Unknown', '')\n        {% if is_incremental() %}\n            AND date > (SELECT MAX(date) FROM {{ this }}) - INTERVAL 1 DAY\n        {% endif %}\n),\n\n-- Calculate client distribution percentages\nobserved_client_distribution AS (\n    SELECT\n        date,\n        client_type,\n        observed_client_nodes,\n        round(100.0 * observed_client_nodes / SUM(observed_client_nodes) OVER (PARTITION BY date), 3) AS observed_client_percentage\n    FROM combined_client_data\n),\n\n-- Apply client distribution to each node category\nclient_distribution_by_category AS (\n    SELECT\n        nc.date,\n        nc.node_category, \n        ocd.client_type,\n        ocd.observed_client_nodes,\n        ocd.observed_client_percentage,\n        \n        -- Calculate client nodes for this category\n        -- Each client gets same percentage of each category\n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.estimated_total_nodes\n        )) AS estimated_client_nodes,\n        \n        -- Proportional bounds\n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.nodes_lower_95\n        )) AS client_nodes_lower_95,\n        \n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.nodes_upper_95\n        )) AS client_nodes_upper_95,\n        \n        -- Client efficiency factors\n        CASE \n            -- Consensus client efficiency (relative to baseline)\n            WHEN ocd.client_type = 'consensus_Lighthouse' THEN 0.95\n            WHEN ocd.client_type = 'consensus_Nimbus' THEN 0.85  \n            WHEN ocd.client_type = 'consensus_Teku' THEN 1.15\n            WHEN ocd.client_type = 'consensus_Prysm' THEN 1.05\n            WHEN ocd.client_type = 'consensus_Lodestar' THEN 1.10\n            \n            -- Execution client efficiency (relative to baseline)\n            WHEN ocd.client_type = 'execution_Erigon' THEN 0.95\n            WHEN ocd.client_type = 'execution_Nethermind' THEN 1.00\n            WHEN ocd.client_type = 'execution_Besu' THEN 1.02\n            WHEN ocd.client_type = 'execution_Geth' THEN 0.98\n            \n            -- Default for other/unknown clients\n            ELSE 1.0\n        END AS client_efficiency_factor,\n        \n        nc.scaling_factor\n        \n    FROM node_classification nc\n    JOIN observed_client_distribution ocd ON nc.date = ocd.date\n    WHERE nc.estimated_total_nodes > 0\n),\n\n-- Calculate final metrics with rankings\nfinal_client_distribution AS (\n    SELECT\n        date,\n        node_category,\n        client_type,\n        estimated_client_nodes,\n        client_nodes_lower_95,\n        client_nodes_upper_95,\n        client_efficiency_factor,\n        \n        -- Percentage within this node category\n        round(100.0 * estimated_client_nodes / \n              NULLIF(SUM(estimated_client_nodes) OVER (PARTITION BY date, node_category), 0), 2\n        ) AS category_client_percentage,\n        \n        -- Global percentage across all categories  \n        round(100.0 * estimated_client_nodes /\n              NULLIF(SUM(estimated_client_nodes) OVER (PARTITION BY date), 0), 2\n        ) AS global_client_percentage,\n        \n        -- Ranking within category\n        ROW_NUMBER() OVER (\n            PARTITION BY date, node_category \n            ORDER BY estimated_client_nodes DESC, client_type\n        ) AS rank_in_category,\n        \n        -- Global ranking\n        ROW_NUMBER() OVER (\n            PARTITION BY date \n            ORDER BY estimated_client_nodes DESC, node_category, client_type\n        ) AS global_rank\n        \n    FROM client_distribution_by_category\n    WHERE estimated_client_nodes > 0\n)\n\nSELECT\n    date,\n    node_category,\n    client_type,\n    estimated_client_nodes,\n    client_nodes_lower_95,\n    client_nodes_upper_95,\n    client_efficiency_factor,\n    category_client_percentage,\n    global_client_percentage,\n    rank_in_category,\n    global_rank,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM final_client_distribution\nORDER BY date, node_category, estimated_client_nodes DESC", "language": "sql", "refs": [{"name": "int_esg_node_classification", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_esg_node_classification", "model.gnosis_dbt.int_p2p_discv5_clients_daily", "model.gnosis_dbt.int_p2p_discv4_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_node_client_distribution.sql", "compiled": true, "compiled_code": "\n\nWITH node_classification AS (\n    -- Get total nodes per category from classification model\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        scaling_factor\n    FROM `dbt`.`int_esg_node_classification`\n    \n        WHERE date > (SELECT MAX(date) FROM `dbt`.`int_esg_node_client_distribution`)\n    \n),\n\n-- Combine client data from both DiscV4 (execution) and DiscV5 (consensus)\ncombined_client_data AS (\n    -- DiscV5 Consensus clients\n    SELECT\n        date,\n        'consensus_' || label AS client_type,\n        value AS observed_client_nodes\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE metric = 'Clients' \n        AND value > 0\n        AND label NOT IN ('Unknown', '')\n        \n            AND date > (SELECT MAX(date) FROM `dbt`.`int_esg_node_client_distribution`) - INTERVAL 1 DAY\n        \n    \n    UNION ALL\n    \n    -- DiscV4 Execution clients  \n    SELECT\n        date,\n        'execution_' || label AS client_type,\n        value AS observed_client_nodes\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE metric = 'Clients'\n        AND value > 0  \n        AND label NOT IN ('Unknown', '')\n        \n            AND date > (SELECT MAX(date) FROM `dbt`.`int_esg_node_client_distribution`) - INTERVAL 1 DAY\n        \n),\n\n-- Calculate client distribution percentages\nobserved_client_distribution AS (\n    SELECT\n        date,\n        client_type,\n        observed_client_nodes,\n        round(100.0 * observed_client_nodes / SUM(observed_client_nodes) OVER (PARTITION BY date), 3) AS observed_client_percentage\n    FROM combined_client_data\n),\n\n-- Apply client distribution to each node category\nclient_distribution_by_category AS (\n    SELECT\n        nc.date,\n        nc.node_category, \n        ocd.client_type,\n        ocd.observed_client_nodes,\n        ocd.observed_client_percentage,\n        \n        -- Calculate client nodes for this category\n        -- Each client gets same percentage of each category\n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.estimated_total_nodes\n        )) AS estimated_client_nodes,\n        \n        -- Proportional bounds\n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.nodes_lower_95\n        )) AS client_nodes_lower_95,\n        \n        toUInt64(round(\n            ocd.observed_client_percentage / 100.0 * nc.nodes_upper_95\n        )) AS client_nodes_upper_95,\n        \n        -- Client efficiency factors\n        CASE \n            -- Consensus client efficiency (relative to baseline)\n            WHEN ocd.client_type = 'consensus_Lighthouse' THEN 0.95\n            WHEN ocd.client_type = 'consensus_Nimbus' THEN 0.85  \n            WHEN ocd.client_type = 'consensus_Teku' THEN 1.15\n            WHEN ocd.client_type = 'consensus_Prysm' THEN 1.05\n            WHEN ocd.client_type = 'consensus_Lodestar' THEN 1.10\n            \n            -- Execution client efficiency (relative to baseline)\n            WHEN ocd.client_type = 'execution_Erigon' THEN 0.95\n            WHEN ocd.client_type = 'execution_Nethermind' THEN 1.00\n            WHEN ocd.client_type = 'execution_Besu' THEN 1.02\n            WHEN ocd.client_type = 'execution_Geth' THEN 0.98\n            \n            -- Default for other/unknown clients\n            ELSE 1.0\n        END AS client_efficiency_factor,\n        \n        nc.scaling_factor\n        \n    FROM node_classification nc\n    JOIN observed_client_distribution ocd ON nc.date = ocd.date\n    WHERE nc.estimated_total_nodes > 0\n),\n\n-- Calculate final metrics with rankings\nfinal_client_distribution AS (\n    SELECT\n        date,\n        node_category,\n        client_type,\n        estimated_client_nodes,\n        client_nodes_lower_95,\n        client_nodes_upper_95,\n        client_efficiency_factor,\n        \n        -- Percentage within this node category\n        round(100.0 * estimated_client_nodes / \n              NULLIF(SUM(estimated_client_nodes) OVER (PARTITION BY date, node_category), 0), 2\n        ) AS category_client_percentage,\n        \n        -- Global percentage across all categories  \n        round(100.0 * estimated_client_nodes /\n              NULLIF(SUM(estimated_client_nodes) OVER (PARTITION BY date), 0), 2\n        ) AS global_client_percentage,\n        \n        -- Ranking within category\n        ROW_NUMBER() OVER (\n            PARTITION BY date, node_category \n            ORDER BY estimated_client_nodes DESC, client_type\n        ) AS rank_in_category,\n        \n        -- Global ranking\n        ROW_NUMBER() OVER (\n            PARTITION BY date \n            ORDER BY estimated_client_nodes DESC, node_category, client_type\n        ) AS global_rank\n        \n    FROM client_distribution_by_category\n    WHERE estimated_client_nodes > 0\n)\n\nSELECT\n    date,\n    node_category,\n    client_type,\n    estimated_client_nodes,\n    client_nodes_lower_95,\n    client_nodes_upper_95,\n    client_efficiency_factor,\n    category_client_percentage,\n    global_client_percentage,\n    rank_in_category,\n    global_rank,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM final_client_distribution\nORDER BY date, node_category, estimated_client_nodes DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_node_geographic_distribution": {"database": "dbt", "schema": "dbt", "name": "int_esg_node_geographic_distribution", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_node_geographic_distribution.sql", "original_file_path": "models/ESG/intermediate/int_esg_node_geographic_distribution.sql", "unique_id": "model.gnosis_dbt.int_esg_node_geographic_distribution", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_node_geographic_distribution"], "alias": "int_esg_node_geographic_distribution", "checksum": {"name": "sha256", "checksum": "9f56a68f6ddfc59ec9e82369ffe09b00054c5aa72ba7e86e61e43a33e96a4989"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "nodes", "production", "esg", "nodes"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, node_category, country_code)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "(date, node_category, country_code)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "esg", "nodes"], "description": "This model provides a detailed distribution of nodes across countries and regions, including estimated counts, confidence bounds, and rankings, for each node category and date.", "columns": {"date": {"name": "date", "description": "The date of the data snapshot, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "node_category": {"name": "node_category", "description": "The category of nodes, representing different classifications.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The ISO alpha-2 country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "The full name of the country.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "The region to which the country belongs.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub_region": {"name": "sub_region", "description": "The sub-region within the main region.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code_alpha3": {"name": "country_code_alpha3", "description": "The ISO alpha-3 country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_total_nodes": {"name": "estimated_total_nodes", "description": "The estimated total number of nodes in the country, as a UInt64.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_lower_95": {"name": "nodes_lower_95", "description": "The lower bound of the 95% confidence interval for node count.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_upper_95": {"name": "nodes_upper_95", "description": "The upper bound of the 95% confidence interval for node count.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_percentage": {"name": "category_percentage", "description": "The percentage of total nodes within the category that are in this country.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_percentage": {"name": "global_percentage", "description": "The percentage of total nodes across all categories and countries for the date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank_in_category": {"name": "rank_in_category", "description": "The ranking of the country within its node category based on estimated nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "global_rank": {"name": "global_rank", "description": "The ranking of the country globally based on estimated nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the data was computed.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "nodes"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "(date, node_category, country_code)", "partition_by": "toStartOfMonth(date)", "order_by": "(date, node_category, country_code)"}, "created_at": 1760535476.9564734, "relation_name": "`dbt`.`int_esg_node_geographic_distribution`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='(date, node_category, country_code)',\n        partition_by='toStartOfMonth(date)',\n        order_by='(date, node_category, country_code)',\n        tags=['production','esg','nodes']\n    )\n}}\n\nWITH node_classification AS (\n    -- Get node classification data\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        geographic_distribution\n    FROM {{ ref('int_esg_node_classification') }}\n    {% if is_incremental() %}\n        WHERE date > (SELECT MAX(date) FROM {{ this }})\n    {% endif %}\n),\n\n-- Parse geographic distribution JSON\ngeographic_parsed AS (\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        \n        -- Parse JSON array of country distributions\n        JSONExtract(geographic_distribution, 'Array(Tuple(String, UInt32))') AS country_array\n    FROM node_classification\n),\n\ngeographic_expanded AS (\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95, \n        nodes_upper_95,\n        \n        -- Unpack country data\n        arrayJoin(country_array) AS country_tuple,\n        tupleElement(country_tuple, 1) AS country_code,\n        tupleElement(country_tuple, 2) AS estimated_nodes\n        \n    FROM geographic_parsed\n    WHERE length(country_array) > 0\n),\n\n-- Add country metadata from country_codes table\ncountry_enriched AS (\n    SELECT\n        g.date,\n        g.node_category,\n        g.country_code,\n        g.estimated_nodes,\n        \n        -- Calculate bounds proportionally\n        round(toFloat64(g.estimated_nodes) * g.nodes_lower_95 / g.estimated_total_nodes) AS nodes_lower_95,\n        round(toFloat64(g.estimated_nodes) * g.nodes_upper_95 / g.estimated_total_nodes) AS nodes_upper_95,\n        \n        -- Country percentage within this category\n        round(100.0 * g.estimated_nodes / g.estimated_total_nodes, 2) AS category_percentage,\n        \n        -- Get country metadata from reference table\n        COALESCE(cc.name, 'Unknown') AS country_name,\n        COALESCE(cc.region, 'Other') AS region,\n        cc.`sub-region` AS sub_region,\n        cc.`alpha-3` AS country_code_alpha3\n        \n    FROM geographic_expanded g\n    LEFT JOIN {{ ref('stg_crawlers_data__country_codes') }} cc\n        ON g.country_code = cc.`alpha-2`\n    WHERE g.estimated_nodes > 0  -- Only include countries with nodes\n)\n\nSELECT\n    date,\n    node_category,\n    country_code,\n    country_name,\n    region,\n    sub_region,\n    country_code_alpha3,\n    estimated_nodes AS estimated_total_nodes,\n    nodes_lower_95,\n    nodes_upper_95,\n    category_percentage,\n    \n    -- Overall percentage across all categories\n    round(100.0 * estimated_nodes / SUM(estimated_nodes) OVER (PARTITION BY date), 2) AS global_percentage,\n    \n    -- Ranking within category\n    ROW_NUMBER() OVER (PARTITION BY date, node_category ORDER BY estimated_nodes DESC) AS rank_in_category,\n    \n    -- Ranking globally\n    ROW_NUMBER() OVER (PARTITION BY date ORDER BY estimated_nodes DESC) AS global_rank,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM country_enriched\nORDER BY date, node_category, estimated_nodes DESC", "language": "sql", "refs": [{"name": "int_esg_node_classification", "package": null, "version": null}, {"name": "stg_crawlers_data__country_codes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_esg_node_classification", "model.gnosis_dbt.stg_crawlers_data__country_codes"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_node_geographic_distribution.sql", "compiled": true, "compiled_code": "\n\nWITH node_classification AS (\n    -- Get node classification data\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        geographic_distribution\n    FROM `dbt`.`int_esg_node_classification`\n    \n        WHERE date > (SELECT MAX(date) FROM `dbt`.`int_esg_node_geographic_distribution`)\n    \n),\n\n-- Parse geographic distribution JSON\ngeographic_parsed AS (\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        \n        -- Parse JSON array of country distributions\n        JSONExtract(geographic_distribution, 'Array(Tuple(String, UInt32))') AS country_array\n    FROM node_classification\n),\n\ngeographic_expanded AS (\n    SELECT\n        date,\n        node_category,\n        estimated_total_nodes,\n        nodes_lower_95, \n        nodes_upper_95,\n        \n        -- Unpack country data\n        arrayJoin(country_array) AS country_tuple,\n        tupleElement(country_tuple, 1) AS country_code,\n        tupleElement(country_tuple, 2) AS estimated_nodes\n        \n    FROM geographic_parsed\n    WHERE length(country_array) > 0\n),\n\n-- Add country metadata from country_codes table\ncountry_enriched AS (\n    SELECT\n        g.date,\n        g.node_category,\n        g.country_code,\n        g.estimated_nodes,\n        \n        -- Calculate bounds proportionally\n        round(toFloat64(g.estimated_nodes) * g.nodes_lower_95 / g.estimated_total_nodes) AS nodes_lower_95,\n        round(toFloat64(g.estimated_nodes) * g.nodes_upper_95 / g.estimated_total_nodes) AS nodes_upper_95,\n        \n        -- Country percentage within this category\n        round(100.0 * g.estimated_nodes / g.estimated_total_nodes, 2) AS category_percentage,\n        \n        -- Get country metadata from reference table\n        COALESCE(cc.name, 'Unknown') AS country_name,\n        COALESCE(cc.region, 'Other') AS region,\n        cc.`sub-region` AS sub_region,\n        cc.`alpha-3` AS country_code_alpha3\n        \n    FROM geographic_expanded g\n    LEFT JOIN `dbt`.`stg_crawlers_data__country_codes` cc\n        ON g.country_code = cc.`alpha-2`\n    WHERE g.estimated_nodes > 0  -- Only include countries with nodes\n)\n\nSELECT\n    date,\n    node_category,\n    country_code,\n    country_name,\n    region,\n    sub_region,\n    country_code_alpha3,\n    estimated_nodes AS estimated_total_nodes,\n    nodes_lower_95,\n    nodes_upper_95,\n    category_percentage,\n    \n    -- Overall percentage across all categories\n    round(100.0 * estimated_nodes / SUM(estimated_nodes) OVER (PARTITION BY date), 2) AS global_percentage,\n    \n    -- Ranking within category\n    ROW_NUMBER() OVER (PARTITION BY date, node_category ORDER BY estimated_nodes DESC) AS rank_in_category,\n    \n    -- Ranking globally\n    ROW_NUMBER() OVER (PARTITION BY date ORDER BY estimated_nodes DESC) AS global_rank,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM country_enriched\nORDER BY date, node_category, estimated_nodes DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_carbon_intensity_ensemble": {"database": "dbt", "schema": "dbt", "name": "int_esg_carbon_intensity_ensemble", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_carbon_intensity_ensemble.sql", "original_file_path": "models/ESG/intermediate/int_esg_carbon_intensity_ensemble.sql", "unique_id": "model.gnosis_dbt.int_esg_carbon_intensity_ensemble", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_carbon_intensity_ensemble"], "alias": "int_esg_carbon_intensity_ensemble", "checksum": {"name": "sha256", "checksum": "d15d15c0c1b36ddd3bb501e11cf57c2cc5323d366c975247424613974640b076"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "carbon_intensity", "production", "esg", "carbon_intensity"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(month_date, country_code)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "(month_date, country_code)", "partition_by": "toStartOfYear(month_date)"}, "tags": ["production", "esg", "carbon_intensity"], "description": "This model provides monthly estimates of carbon intensity with uncertainty modeling, seasonal adjustments, and confidence intervals for ESG analysis.", "columns": {"month_date": {"name": "month_date", "description": "The first day of the month for the carbon intensity measurement.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "ISO 3 code or 'WORLD' for aggregate data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continent": {"name": "continent", "description": "Continent associated with the country, e.g., Europe, Asia.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity_mean": {"name": "carbon_intensity_mean", "description": "Estimated average carbon intensity in gCO2/kWh, seasonally adjusted.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity_std": {"name": "carbon_intensity_std", "description": "Standard deviation representing combined temporal and measurement uncertainty.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ci_lower_95": {"name": "ci_lower_95", "description": "Lower bound of the 95% confidence interval.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ci_upper_95": {"name": "ci_upper_95", "description": "Upper bound of the 95% confidence interval.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ci_lower_90": {"name": "ci_lower_90", "description": "Lower bound of the 90% confidence interval.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ci_upper_90": {"name": "ci_upper_90", "description": "Upper bound of the 90% confidence interval.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "coefficient_of_variation": {"name": "coefficient_of_variation", "description": "Ratio of the combined uncertainty to the mean, indicating relative variability.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "uncertainty_category": {"name": "uncertainty_category", "description": "Qualitative assessment of uncertainty: Low, Medium, or High.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_carbon_intensity": {"name": "base_carbon_intensity", "description": "Raw base carbon intensity in gCO2/kWh before seasonal adjustment.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temporal_std": {"name": "temporal_std", "description": "Standard deviation due to temporal variation.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_std": {"name": "measurement_std", "description": "Standard deviation due to measurement uncertainty.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "seasonal_adjustment": {"name": "seasonal_adjustment", "description": "Seasonal adjustment factor applied to the base carbon intensity.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sources_used": {"name": "sources_used", "description": "List of data sources contributing to the estimate.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "confidence_score": {"name": "confidence_score", "description": "Confidence score assigned to the estimate based on data quality.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_sources": {"name": "n_sources", "description": "Number of data sources used.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the estimate was calculated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "carbon_intensity"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "(month_date, country_code)", "partition_by": "toStartOfYear(month_date)", "order_by": "(month_date, country_code)"}, "created_at": 1760535476.9268222, "relation_name": "`dbt`.`int_esg_carbon_intensity_ensemble`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='(month_date, country_code)',\n        partition_by='toStartOfYear(month_date)',\n        order_by='(month_date, country_code)',  \n        tags=['production','esg','carbon_intensity']\n    )\n}}\n\nWITH ember_monthly AS (\n    -- Monthly carbon intensity from Ember with enhanced uncertainty\n    SELECT\n        toDate(\"Date\") AS month_date,\n        CASE \n            WHEN \"Area\" = 'World' THEN 'WORLD'  -- World average as special country code\n            ELSE \"ISO 3 code\"\n        END AS country_code,\n        \"Value\" AS carbon_intensity_gco2_kwh,\n        COALESCE(\"Continent\", 'World') AS continent,\n        'ember' AS source,\n        0.85 AS base_confidence\n    FROM {{ ref('stg_crawlers_data__ember_electricity_data') }}\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n        AND (\n            (\"ISO 3 code\" IS NOT NULL AND \"ISO 3 code\" != '') OR \n            (\"Area\" = 'World')  -- Include World data\n        )\n        AND \"Value\" IS NOT NULL\n        AND \"Value\" > 0\n        {{ apply_monthly_incremental_filter('\"Date\"','month_date','true') }}\n),\n\n-- Enhanced uncertainty modeling for monthly data\nuncertainty_enhanced AS (\n    SELECT\n        month_date,\n        country_code,\n        continent,\n        carbon_intensity_gco2_kwh AS base_ci,\n        \n        -- Calculate temporal uncertainty based on grid characteristics\n        -- Higher uncertainty for countries with more variable generation\n        carbon_intensity_gco2_kwh * (\n            CASE \n                -- High renewable countries have more temporal variation\n                WHEN carbon_intensity_gco2_kwh < 100 THEN 0.25  -- Low carbon grids (solar/wind heavy)\n                WHEN carbon_intensity_gco2_kwh < 300 THEN 0.20  -- Medium carbon grids  \n                WHEN carbon_intensity_gco2_kwh < 600 THEN 0.15  -- High carbon grids (more stable)\n                ELSE 0.12  -- Very high carbon grids (coal/gas baseload)\n            END\n        ) AS temporal_uncertainty,\n        \n        -- Data quality uncertainty (monthly averages hide daily/hourly variation)\n        carbon_intensity_gco2_kwh * 0.10 AS measurement_uncertainty,\n        \n        -- Continent-based seasonal adjustment factors\n        CASE continent\n            -- Europe & Asia (mostly Northern Hemisphere, heating-dominant)\n            WHEN 'Europe' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.18  -- Winter heating peak\n                    WHEN month(month_date) IN (6, 7, 8) THEN 0.92   -- Summer low + solar\n                    WHEN month(month_date) IN (3, 4, 11) THEN 1.08  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- Asia (mix of climates, but mostly Northern Hemisphere)\n            WHEN 'Asia' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.12  -- Winter (heating + industrial)\n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.08   -- Summer (cooling demand)\n                    WHEN month(month_date) IN (4, 5, 9, 10) THEN 1.05  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- North America (heating-dominant north, cooling-dominant south)\n            WHEN 'North America' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.15  -- Winter heating\n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.12   -- Summer cooling\n                    WHEN month(month_date) IN (4, 5, 9, 10) THEN 1.03  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- Oceania (Southern Hemisphere - reversed seasons)\n            WHEN 'Oceania' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.15   -- Southern winter\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.95  -- Southern summer\n                    WHEN month(month_date) IN (3, 4, 9, 10) THEN 1.05  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- South America (Southern Hemisphere + tropical)\n            WHEN 'South America' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.10   -- Southern winter (milder)\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.98  -- Southern summer\n                    ELSE 1.0\n                END\n                \n            -- Africa (mix of Northern/Southern + tropical, minimal variation)\n            WHEN 'Africa' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.05   -- Slight dry season effect\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.98  -- Wet season\n                    ELSE 1.0\n                END\n                \n            -- World/Default (minimal adjustment)\n            ELSE 1.0\n        END AS seasonal_factor,\n        \n        source,\n        base_confidence\n        \n    FROM ember_monthly\n),\n\n-- Final aggregation with confidence intervals\nfinal_estimates AS (\n    SELECT\n        month_date,\n        country_code,\n        \n        -- Point estimates with seasonal adjustment\n        round(base_ci * seasonal_factor, 2) AS carbon_intensity_mean,\n        \n        -- Combined uncertainty (temporal + measurement)\n        round(sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS carbon_intensity_std,\n        \n        -- Confidence intervals for Monte Carlo sampling\n        round(greatest(0, base_ci * seasonal_factor - 1.96 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2))), 2) AS ci_lower_95,\n        round(base_ci * seasonal_factor + 1.96 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS ci_upper_95,\n        \n        round(greatest(0, base_ci * seasonal_factor - 1.645 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2))), 2) AS ci_lower_90,\n        round(base_ci * seasonal_factor + 1.645 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS ci_upper_90,\n        \n        -- Coefficient of variation for uncertainty assessment\n        round(sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor), 3) AS coefficient_of_variation,\n        \n        -- Raw values for diagnostics\n        round(base_ci, 2) AS base_carbon_intensity,\n        round(temporal_uncertainty, 2) AS temporal_std,\n        round(measurement_uncertainty, 2) AS measurement_std,\n        round(seasonal_factor, 3) AS seasonal_adjustment,\n        continent,\n        \n        -- Data quality indicators\n        arrayPushFront([], source) AS sources_used,\n        base_confidence AS confidence_score,\n        1 AS n_sources,\n        \n        -- Uncertainty category for diagnostics\n        CASE \n            WHEN sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor) < 0.15 THEN 'Low'\n            WHEN sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor) < 0.25 THEN 'Medium' \n            ELSE 'High'\n        END AS uncertainty_category\n        \n    FROM uncertainty_enhanced\n)\n\nSELECT\n    month_date,\n    country_code,\n    \n    -- Core metrics for carbon footprint calculation\n    carbon_intensity_mean,\n    carbon_intensity_std,\n    ci_lower_95,\n    ci_upper_95,\n    ci_lower_90,\n    ci_upper_90,\n    \n    -- Uncertainty analysis\n    coefficient_of_variation,\n    uncertainty_category,\n    \n    -- Component breakdown for diagnostics\n    base_carbon_intensity,\n    temporal_std,\n    measurement_std,\n    seasonal_adjustment,\n    \n    -- Data provenance and quality\n    sources_used,\n    confidence_score,\n    n_sources,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM final_estimates", "language": "sql", "refs": [{"name": "stg_crawlers_data__ember_electricity_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_crawlers_data__ember_electricity_data"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_carbon_intensity_ensemble.sql", "compiled": true, "compiled_code": "\n\nWITH ember_monthly AS (\n    -- Monthly carbon intensity from Ember with enhanced uncertainty\n    SELECT\n        toDate(\"Date\") AS month_date,\n        CASE \n            WHEN \"Area\" = 'World' THEN 'WORLD'  -- World average as special country code\n            ELSE \"ISO 3 code\"\n        END AS country_code,\n        \"Value\" AS carbon_intensity_gco2_kwh,\n        COALESCE(\"Continent\", 'World') AS continent,\n        'ember' AS source,\n        0.85 AS base_confidence\n    FROM `dbt`.`stg_crawlers_data__ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n        AND (\n            (\"ISO 3 code\" IS NOT NULL AND \"ISO 3 code\" != '') OR \n            (\"Area\" = 'World')  -- Include World data\n        )\n        AND \"Value\" IS NOT NULL\n        AND \"Value\" > 0\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(\"Date\")) >= (\n      SELECT\n        max(toStartOfMonth(month_date))\n      FROM `dbt`.`int_esg_carbon_intensity_ensemble`\n    )\n  \n\n),\n\n-- Enhanced uncertainty modeling for monthly data\nuncertainty_enhanced AS (\n    SELECT\n        month_date,\n        country_code,\n        continent,\n        carbon_intensity_gco2_kwh AS base_ci,\n        \n        -- Calculate temporal uncertainty based on grid characteristics\n        -- Higher uncertainty for countries with more variable generation\n        carbon_intensity_gco2_kwh * (\n            CASE \n                -- High renewable countries have more temporal variation\n                WHEN carbon_intensity_gco2_kwh < 100 THEN 0.25  -- Low carbon grids (solar/wind heavy)\n                WHEN carbon_intensity_gco2_kwh < 300 THEN 0.20  -- Medium carbon grids  \n                WHEN carbon_intensity_gco2_kwh < 600 THEN 0.15  -- High carbon grids (more stable)\n                ELSE 0.12  -- Very high carbon grids (coal/gas baseload)\n            END\n        ) AS temporal_uncertainty,\n        \n        -- Data quality uncertainty (monthly averages hide daily/hourly variation)\n        carbon_intensity_gco2_kwh * 0.10 AS measurement_uncertainty,\n        \n        -- Continent-based seasonal adjustment factors\n        CASE continent\n            -- Europe & Asia (mostly Northern Hemisphere, heating-dominant)\n            WHEN 'Europe' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.18  -- Winter heating peak\n                    WHEN month(month_date) IN (6, 7, 8) THEN 0.92   -- Summer low + solar\n                    WHEN month(month_date) IN (3, 4, 11) THEN 1.08  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- Asia (mix of climates, but mostly Northern Hemisphere)\n            WHEN 'Asia' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.12  -- Winter (heating + industrial)\n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.08   -- Summer (cooling demand)\n                    WHEN month(month_date) IN (4, 5, 9, 10) THEN 1.05  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- North America (heating-dominant north, cooling-dominant south)\n            WHEN 'North America' THEN\n                CASE \n                    WHEN month(month_date) IN (12, 1, 2) THEN 1.15  -- Winter heating\n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.12   -- Summer cooling\n                    WHEN month(month_date) IN (4, 5, 9, 10) THEN 1.03  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- Oceania (Southern Hemisphere - reversed seasons)\n            WHEN 'Oceania' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.15   -- Southern winter\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.95  -- Southern summer\n                    WHEN month(month_date) IN (3, 4, 9, 10) THEN 1.05  -- Shoulder seasons\n                    ELSE 1.0\n                END\n                \n            -- South America (Southern Hemisphere + tropical)\n            WHEN 'South America' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.10   -- Southern winter (milder)\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.98  -- Southern summer\n                    ELSE 1.0\n                END\n                \n            -- Africa (mix of Northern/Southern + tropical, minimal variation)\n            WHEN 'Africa' THEN\n                CASE \n                    WHEN month(month_date) IN (6, 7, 8) THEN 1.05   -- Slight dry season effect\n                    WHEN month(month_date) IN (12, 1, 2) THEN 0.98  -- Wet season\n                    ELSE 1.0\n                END\n                \n            -- World/Default (minimal adjustment)\n            ELSE 1.0\n        END AS seasonal_factor,\n        \n        source,\n        base_confidence\n        \n    FROM ember_monthly\n),\n\n-- Final aggregation with confidence intervals\nfinal_estimates AS (\n    SELECT\n        month_date,\n        country_code,\n        \n        -- Point estimates with seasonal adjustment\n        round(base_ci * seasonal_factor, 2) AS carbon_intensity_mean,\n        \n        -- Combined uncertainty (temporal + measurement)\n        round(sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS carbon_intensity_std,\n        \n        -- Confidence intervals for Monte Carlo sampling\n        round(greatest(0, base_ci * seasonal_factor - 1.96 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2))), 2) AS ci_lower_95,\n        round(base_ci * seasonal_factor + 1.96 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS ci_upper_95,\n        \n        round(greatest(0, base_ci * seasonal_factor - 1.645 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2))), 2) AS ci_lower_90,\n        round(base_ci * seasonal_factor + 1.645 * sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)), 2) AS ci_upper_90,\n        \n        -- Coefficient of variation for uncertainty assessment\n        round(sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor), 3) AS coefficient_of_variation,\n        \n        -- Raw values for diagnostics\n        round(base_ci, 2) AS base_carbon_intensity,\n        round(temporal_uncertainty, 2) AS temporal_std,\n        round(measurement_uncertainty, 2) AS measurement_std,\n        round(seasonal_factor, 3) AS seasonal_adjustment,\n        continent,\n        \n        -- Data quality indicators\n        arrayPushFront([], source) AS sources_used,\n        base_confidence AS confidence_score,\n        1 AS n_sources,\n        \n        -- Uncertainty category for diagnostics\n        CASE \n            WHEN sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor) < 0.15 THEN 'Low'\n            WHEN sqrt(pow(temporal_uncertainty, 2) + pow(measurement_uncertainty, 2)) / (base_ci * seasonal_factor) < 0.25 THEN 'Medium' \n            ELSE 'High'\n        END AS uncertainty_category\n        \n    FROM uncertainty_enhanced\n)\n\nSELECT\n    month_date,\n    country_code,\n    \n    -- Core metrics for carbon footprint calculation\n    carbon_intensity_mean,\n    carbon_intensity_std,\n    ci_lower_95,\n    ci_upper_95,\n    ci_lower_90,\n    ci_upper_90,\n    \n    -- Uncertainty analysis\n    coefficient_of_variation,\n    uncertainty_category,\n    \n    -- Component breakdown for diagnostics\n    base_carbon_intensity,\n    temporal_std,\n    measurement_std,\n    seasonal_adjustment,\n    \n    -- Data provenance and quality\n    sources_used,\n    confidence_score,\n    n_sources,\n    \n    -- Metadata\n    now() AS calculated_at\n    \nFROM final_estimates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_node_classification": {"database": "dbt", "schema": "dbt", "name": "int_esg_node_classification", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_node_classification.sql", "original_file_path": "models/ESG/intermediate/int_esg_node_classification.sql", "unique_id": "model.gnosis_dbt.int_esg_node_classification", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_node_classification"], "alias": "int_esg_node_classification", "checksum": {"name": "sha256", "checksum": "ec97c235753017f4b7a42335777b85f214b7342784e3009d8da88509c4f6cedb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "nodes", "production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, node_category)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "(date, node_category)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "esg", "nodes"], "description": "A model classifying nodes into categories based on observed peer data, with associated confidence scores, distribution metrics, and geographic insights.", "columns": {"observation_date": {"name": "observation_date", "description": "Date of the peer observation in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier for the peer node.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ip_address": {"name": "ip_address", "description": "The IP address associated with the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_type": {"name": "client_type", "description": "Client software or type used by the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "Country code of the peer, ISO Alpha-2.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "generic_provider": {"name": "generic_provider", "description": "The cloud or hosting provider associated with the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_seen_that_day": {"name": "last_seen_that_day", "description": "Timestamp of the last observation for the peer on that day.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "node_category": {"name": "node_category", "description": "Classified category of the node: cloud_hosted, professional_operator, home_staker, or unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_confidence": {"name": "classification_confidence", "description": "Confidence score (0 to 1) indicating classification certainty.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "observed_nodes": {"name": "observed_nodes", "description": "Count of distinct peers observed on the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_total_nodes": {"name": "estimated_total_nodes", "description": "Estimated total number of nodes in the category after scaling.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_lower_95": {"name": "nodes_lower_95", "description": "Lower bound estimate (95% confidence) for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_upper_95": {"name": "nodes_upper_95", "description": "Upper bound estimate (95% confidence) for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sample_coverage": {"name": "sample_coverage", "description": "Proportion of the network sampled, scaled between 0 and 1.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "scaling_factor": {"name": "scaling_factor", "description": "Factor used to scale observed nodes to estimate total nodes.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_percentage": {"name": "category_percentage", "description": "Percentage share of the category within total estimated nodes for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_nodes_estimated": {"name": "hidden_nodes_estimated", "description": "Estimated number of hidden nodes in the category.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_nodes_percentage": {"name": "hidden_nodes_percentage", "description": "Percentage of hidden nodes relative to total estimated nodes.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "geographic_distribution": {"name": "geographic_distribution", "description": "JSON array of tuples with country codes and estimated nodes.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_countries": {"name": "top_countries", "description": "String listing top five countries by estimated nodes, separated by commas.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the report was generated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "(date, node_category)", "order_by": "(date, node_category)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535476.9470944, "relation_name": "`dbt`.`int_esg_node_classification`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='(date, node_category)',\n        order_by='(date, node_category)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','esg','nodes']\n    )\n}}\n\n\nWITH latest_observations AS (\n    SELECT \n        toDate(visit_ended_at) as observation_date,\n        peer_id,\n        argMax(ip, visit_ended_at) AS ip_address,\n        argMax(client, visit_ended_at) AS client_type,\n        argMax(peer_country, visit_ended_at) AS country_code,\n        argMax(generic_provider, visit_ended_at) AS generic_provider,\n        argMax(peer_org, visit_ended_at) AS peer_org,\n        MAX(visit_ended_at) AS last_seen_that_day\n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE \n        empty(dial_errors) = 1 \n        AND crawl_error IS NULL\n        AND toStartOfDay(visit_ended_at) < today()\n        {% if is_incremental() %}\n            AND toDate(visit_ended_at) > (SELECT MAX(date) FROM {{ this }})\n        {% endif %}\n    GROUP BY observation_date, peer_id\n),\n\nnode_categories AS (\n    SELECT\n        observation_date,\n        peer_id,\n        ip_address,\n        client_type,\n        country_code,\n        generic_provider,\n        peer_org,\n        \n        -- Classify nodes into operational archetypes based on generic_provider\n        CASE\n            WHEN generic_provider IN ('AWS', 'Google', 'Azure', 'Oracle Cloud', 'Alibaba Cloud') \n                THEN 'cloud_hosted'\n            WHEN generic_provider IN ('DigitalOcean', 'OVHcloud', 'Hetzner', 'Scaleway', 'Linode', 'Vultr', \n                                    'Equinix Metal', 'Hosting/CDN (Other)') \n                THEN 'cloud_hosted'\n            WHEN generic_provider = 'Carrier/Transit' \n                THEN 'professional_operator'\n            WHEN lower(peer_org) LIKE '%datacenter%' \n                OR lower(peer_org) LIKE '%data center%'\n                OR lower(peer_org) LIKE '%hosting%'\n                OR lower(peer_org) LIKE '%server%'\n                THEN 'professional_operator'\n            WHEN generic_provider = 'Public ISP (Home/Office)' \n                THEN 'home_staker'\n            WHEN lower(peer_org) LIKE '%telecom%'\n                OR lower(peer_org) LIKE '%broadband%'\n                OR lower(peer_org) LIKE '%cable%'\n                OR lower(peer_org) LIKE '%fiber%'\n                OR lower(peer_org) LIKE '%residential%'\n                THEN 'home_staker'\n            ELSE 'unknown'\n        END AS node_category,\n        \n        CASE\n            WHEN generic_provider IN ('AWS', 'Google', 'Azure', 'Oracle Cloud', 'Alibaba Cloud') THEN 0.95\n            WHEN generic_provider IN ('DigitalOcean', 'OVHcloud', 'Hetzner', 'Scaleway', 'Linode', 'Vultr') THEN 0.90\n            WHEN generic_provider = 'Public ISP (Home/Office)' THEN 0.80\n            WHEN generic_provider = 'Hosting/CDN (Other)' THEN 0.75\n            WHEN generic_provider = 'Carrier/Transit' THEN 0.70\n            WHEN generic_provider = 'Unknown' THEN 0.30\n            ELSE 0.50\n        END AS classification_confidence\n        \n    FROM latest_observations\n),\n\ndaily_distribution AS (\n    SELECT\n        observation_date AS date,\n        node_category,\n        COUNT(DISTINCT peer_id) AS observed_nodes,\n        AVG(classification_confidence) AS avg_confidence\n    FROM node_categories\n    GROUP BY observation_date, node_category\n),\n\nchao1_data AS (\n    SELECT\n        p.observation_date,\n        p.observed_successful_nodes,\n        p.enhanced_total_reachable,\n        p.connection_success_rate_pct\n    FROM {{ ref('int_esg_node_population_chao1') }} p\n    WHERE 1=1\n        {% if is_incremental() %}\n            AND p.observation_date > (SELECT MAX(date) FROM {{ this }})\n        {% endif %}\n),\n\nscaled_distribution AS (\n    SELECT\n        d.date,\n        d.node_category,\n        d.observed_nodes,\n        d.avg_confidence,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(greatest(toFloat64(d.observed_nodes), \n                    toFloat64(d.observed_nodes) * c.enhanced_total_reachable / c.observed_successful_nodes))\n            ELSE d.observed_nodes\n        END AS estimated_total_nodes,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(greatest(toFloat64(d.observed_nodes), \n                    toFloat64(d.observed_nodes) * c.enhanced_total_reachable * 0.85 / c.observed_successful_nodes))\n            ELSE toUInt64(d.observed_nodes * 0.85)\n        END AS nodes_lower_95,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(toFloat64(d.observed_nodes) * c.enhanced_total_reachable * 1.15 / c.observed_successful_nodes)\n            ELSE toUInt64(d.observed_nodes * 1.15)\n        END AS nodes_upper_95,\n        \n        COALESCE(c.connection_success_rate_pct / 100.0, 0.75) AS sample_coverage,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                round(toFloat64(c.enhanced_total_reachable) / c.observed_successful_nodes, 3)\n            ELSE 1.0\n        END AS scaling_factor\n        \n    FROM daily_distribution d\n    LEFT JOIN chao1_data c ON d.date = c.observation_date\n),\n\ngeographic_distribution AS (\n    SELECT\n        observation_date AS date,\n        node_category,\n        country_code,\n        COUNT(DISTINCT peer_id) AS country_observed_nodes\n    FROM node_categories\n    WHERE country_code IS NOT NULL AND country_code != '' AND country_code != 'Unknown'\n    GROUP BY observation_date, node_category, country_code\n),\n\ngeographic_scaled AS (\n    SELECT\n        g.date,\n        g.node_category,\n        g.country_code,\n        g.country_observed_nodes,\n        \n        CASE \n            WHEN s.scaling_factor > 0 THEN\n                toUInt64(toFloat64(g.country_observed_nodes) * s.scaling_factor)\n            ELSE g.country_observed_nodes\n        END AS country_estimated_nodes\n        \n    FROM geographic_distribution g\n    JOIN scaled_distribution s\n        ON g.date = s.date AND g.node_category = s.node_category\n)\n\nSELECT\n    s.date,\n    s.node_category,\n    s.observed_nodes,\n    s.estimated_total_nodes,\n    s.nodes_lower_95,\n    s.nodes_upper_95,\n    s.avg_confidence,\n    s.sample_coverage,\n    s.scaling_factor,\n    \n    round(100.0 * s.estimated_total_nodes / \n          SUM(s.estimated_total_nodes) OVER (PARTITION BY s.date), 2) AS category_percentage,\n    \n    s.estimated_total_nodes - s.observed_nodes AS hidden_nodes_estimated,\n    round(100.0 * (s.estimated_total_nodes - s.observed_nodes) / s.estimated_total_nodes, 2) AS hidden_nodes_percentage,\n    \n    CASE \n        WHEN COUNT(g.country_code) > 0 THEN\n            toJSONString(groupArray((g.country_code, g.country_estimated_nodes)))\n        ELSE '[]'\n    END AS geographic_distribution,\n    \n    CASE \n        WHEN COUNT(g.country_code) > 0 THEN\n            arrayStringConcat(\n                arraySlice(\n                    arrayMap(x -> tupleElement(x, 1),\n                        arraySort(x -> -tupleElement(x, 2),\n                            groupArray((g.country_code, g.country_estimated_nodes))\n                        )\n                    ), 1, 5\n                ), ', '\n            )\n        ELSE 'No geographic data'\n    END AS top_countries,\n    \n    now() AS calculated_at\n    \nFROM scaled_distribution s\nLEFT JOIN geographic_scaled g\n    ON s.date = g.date AND s.node_category = g.node_category\n\nGROUP BY \n    s.date, s.node_category, s.observed_nodes, s.estimated_total_nodes,\n    s.nodes_lower_95, s.nodes_upper_95, s.avg_confidence, s.sample_coverage, s.scaling_factor\n\nORDER BY s.date, s.estimated_total_nodes DESC", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}, {"name": "int_esg_node_population_chao1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_p2p_discv5_peers", "model.gnosis_dbt.int_esg_node_population_chao1"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_node_classification.sql", "compiled": true, "compiled_code": "\n\n\nWITH latest_observations AS (\n    SELECT \n        toDate(visit_ended_at) as observation_date,\n        peer_id,\n        argMax(ip, visit_ended_at) AS ip_address,\n        argMax(client, visit_ended_at) AS client_type,\n        argMax(peer_country, visit_ended_at) AS country_code,\n        argMax(generic_provider, visit_ended_at) AS generic_provider,\n        argMax(peer_org, visit_ended_at) AS peer_org,\n        MAX(visit_ended_at) AS last_seen_that_day\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE \n        empty(dial_errors) = 1 \n        AND crawl_error IS NULL\n        AND toStartOfDay(visit_ended_at) < today()\n        \n            AND toDate(visit_ended_at) > (SELECT MAX(date) FROM `dbt`.`int_esg_node_classification`)\n        \n    GROUP BY observation_date, peer_id\n),\n\nnode_categories AS (\n    SELECT\n        observation_date,\n        peer_id,\n        ip_address,\n        client_type,\n        country_code,\n        generic_provider,\n        peer_org,\n        \n        -- Classify nodes into operational archetypes based on generic_provider\n        CASE\n            WHEN generic_provider IN ('AWS', 'Google', 'Azure', 'Oracle Cloud', 'Alibaba Cloud') \n                THEN 'cloud_hosted'\n            WHEN generic_provider IN ('DigitalOcean', 'OVHcloud', 'Hetzner', 'Scaleway', 'Linode', 'Vultr', \n                                    'Equinix Metal', 'Hosting/CDN (Other)') \n                THEN 'cloud_hosted'\n            WHEN generic_provider = 'Carrier/Transit' \n                THEN 'professional_operator'\n            WHEN lower(peer_org) LIKE '%datacenter%' \n                OR lower(peer_org) LIKE '%data center%'\n                OR lower(peer_org) LIKE '%hosting%'\n                OR lower(peer_org) LIKE '%server%'\n                THEN 'professional_operator'\n            WHEN generic_provider = 'Public ISP (Home/Office)' \n                THEN 'home_staker'\n            WHEN lower(peer_org) LIKE '%telecom%'\n                OR lower(peer_org) LIKE '%broadband%'\n                OR lower(peer_org) LIKE '%cable%'\n                OR lower(peer_org) LIKE '%fiber%'\n                OR lower(peer_org) LIKE '%residential%'\n                THEN 'home_staker'\n            ELSE 'unknown'\n        END AS node_category,\n        \n        CASE\n            WHEN generic_provider IN ('AWS', 'Google', 'Azure', 'Oracle Cloud', 'Alibaba Cloud') THEN 0.95\n            WHEN generic_provider IN ('DigitalOcean', 'OVHcloud', 'Hetzner', 'Scaleway', 'Linode', 'Vultr') THEN 0.90\n            WHEN generic_provider = 'Public ISP (Home/Office)' THEN 0.80\n            WHEN generic_provider = 'Hosting/CDN (Other)' THEN 0.75\n            WHEN generic_provider = 'Carrier/Transit' THEN 0.70\n            WHEN generic_provider = 'Unknown' THEN 0.30\n            ELSE 0.50\n        END AS classification_confidence\n        \n    FROM latest_observations\n),\n\ndaily_distribution AS (\n    SELECT\n        observation_date AS date,\n        node_category,\n        COUNT(DISTINCT peer_id) AS observed_nodes,\n        AVG(classification_confidence) AS avg_confidence\n    FROM node_categories\n    GROUP BY observation_date, node_category\n),\n\nchao1_data AS (\n    SELECT\n        p.observation_date,\n        p.observed_successful_nodes,\n        p.enhanced_total_reachable,\n        p.connection_success_rate_pct\n    FROM `dbt`.`int_esg_node_population_chao1` p\n    WHERE 1=1\n        \n            AND p.observation_date > (SELECT MAX(date) FROM `dbt`.`int_esg_node_classification`)\n        \n),\n\nscaled_distribution AS (\n    SELECT\n        d.date,\n        d.node_category,\n        d.observed_nodes,\n        d.avg_confidence,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(greatest(toFloat64(d.observed_nodes), \n                    toFloat64(d.observed_nodes) * c.enhanced_total_reachable / c.observed_successful_nodes))\n            ELSE d.observed_nodes\n        END AS estimated_total_nodes,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(greatest(toFloat64(d.observed_nodes), \n                    toFloat64(d.observed_nodes) * c.enhanced_total_reachable * 0.85 / c.observed_successful_nodes))\n            ELSE toUInt64(d.observed_nodes * 0.85)\n        END AS nodes_lower_95,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                toUInt64(toFloat64(d.observed_nodes) * c.enhanced_total_reachable * 1.15 / c.observed_successful_nodes)\n            ELSE toUInt64(d.observed_nodes * 1.15)\n        END AS nodes_upper_95,\n        \n        COALESCE(c.connection_success_rate_pct / 100.0, 0.75) AS sample_coverage,\n        \n        CASE \n            WHEN c.observed_successful_nodes > 0 AND c.enhanced_total_reachable > 0 THEN\n                round(toFloat64(c.enhanced_total_reachable) / c.observed_successful_nodes, 3)\n            ELSE 1.0\n        END AS scaling_factor\n        \n    FROM daily_distribution d\n    LEFT JOIN chao1_data c ON d.date = c.observation_date\n),\n\ngeographic_distribution AS (\n    SELECT\n        observation_date AS date,\n        node_category,\n        country_code,\n        COUNT(DISTINCT peer_id) AS country_observed_nodes\n    FROM node_categories\n    WHERE country_code IS NOT NULL AND country_code != '' AND country_code != 'Unknown'\n    GROUP BY observation_date, node_category, country_code\n),\n\ngeographic_scaled AS (\n    SELECT\n        g.date,\n        g.node_category,\n        g.country_code,\n        g.country_observed_nodes,\n        \n        CASE \n            WHEN s.scaling_factor > 0 THEN\n                toUInt64(toFloat64(g.country_observed_nodes) * s.scaling_factor)\n            ELSE g.country_observed_nodes\n        END AS country_estimated_nodes\n        \n    FROM geographic_distribution g\n    JOIN scaled_distribution s\n        ON g.date = s.date AND g.node_category = s.node_category\n)\n\nSELECT\n    s.date,\n    s.node_category,\n    s.observed_nodes,\n    s.estimated_total_nodes,\n    s.nodes_lower_95,\n    s.nodes_upper_95,\n    s.avg_confidence,\n    s.sample_coverage,\n    s.scaling_factor,\n    \n    round(100.0 * s.estimated_total_nodes / \n          SUM(s.estimated_total_nodes) OVER (PARTITION BY s.date), 2) AS category_percentage,\n    \n    s.estimated_total_nodes - s.observed_nodes AS hidden_nodes_estimated,\n    round(100.0 * (s.estimated_total_nodes - s.observed_nodes) / s.estimated_total_nodes, 2) AS hidden_nodes_percentage,\n    \n    CASE \n        WHEN COUNT(g.country_code) > 0 THEN\n            toJSONString(groupArray((g.country_code, g.country_estimated_nodes)))\n        ELSE '[]'\n    END AS geographic_distribution,\n    \n    CASE \n        WHEN COUNT(g.country_code) > 0 THEN\n            arrayStringConcat(\n                arraySlice(\n                    arrayMap(x -> tupleElement(x, 1),\n                        arraySort(x -> -tupleElement(x, 2),\n                            groupArray((g.country_code, g.country_estimated_nodes))\n                        )\n                    ), 1, 5\n                ), ', '\n            )\n        ELSE 'No geographic data'\n    END AS top_countries,\n    \n    now() AS calculated_at\n    \nFROM scaled_distribution s\nLEFT JOIN geographic_scaled g\n    ON s.date = g.date AND s.node_category = g.node_category\n\nGROUP BY \n    s.date, s.node_category, s.observed_nodes, s.estimated_total_nodes,\n    s.nodes_lower_95, s.nodes_upper_95, s.avg_confidence, s.sample_coverage, s.scaling_factor\n\nORDER BY s.date, s.estimated_total_nodes DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_dynamic_power_consumption": {"database": "dbt", "schema": "dbt", "name": "int_esg_dynamic_power_consumption", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_dynamic_power_consumption.sql", "original_file_path": "models/ESG/intermediate/int_esg_dynamic_power_consumption.sql", "unique_id": "model.gnosis_dbt.int_esg_dynamic_power_consumption", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_dynamic_power_consumption"], "alias": "int_esg_dynamic_power_consumption", "checksum": {"name": "sha256", "checksum": "7e32c7afe5dcabf1a44f905d74ab8abb84972c97075f1b200fa70e4c097c4e88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "power_consumption", "production", "esg", "power_consumption"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, node_category, country_code)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "(date, node_category, country_code)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "esg", "power_consumption"], "description": "This model calculates the dynamic power consumption and associated carbon emissions for different node categories across various regions and countries, incorporating efficiency factors, CCRI empirical data, and robust fallback mechanisms for carbon intensity data.", "columns": {"nodes_lower_95": {"name": "nodes_lower_95", "description": "Lower bound of the 95% confidence interval for estimated total nodes", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "ISO 3-letter country code", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub_region": {"name": "sub_region", "description": "Sub-region within the country", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "node_category": {"name": "node_category", "description": "Category of node (e.g., home_staker, professional_operator, cloud_hosted)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "Name of the country", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_total_nodes": {"name": "estimated_total_nodes", "description": "Estimated total number of nodes", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_upper_95": {"name": "nodes_upper_95", "description": "Upper bound of the 95% confidence interval for estimated total nodes", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code_alpha3": {"name": "country_code_alpha3", "description": "ISO 3-letter country code (alpha-3)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "Geographic region", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "Date of the data point", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_power_watts_per_node": {"name": "avg_power_watts_per_node", "description": "Average power consumption per node in watts", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "power_std_dev_per_node": {"name": "power_std_dev_per_node", "description": "Standard deviation of power consumption per node in watts", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_mean": {"name": "daily_energy_kwh_mean", "description": "Estimated daily energy consumption in kilowatt-hours", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pue_factor": {"name": "pue_factor", "description": "Power Usage Effectiveness (PUE) factor", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_efficiency": {"name": "client_efficiency", "description": "Aggregate client efficiency multiplier", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "diversity_bonus": {"name": "diversity_bonus", "description": "Resilience bonus based on client diversity", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_mean": {"name": "daily_co2_kg_mean", "description": "Estimated daily CO2 emissions in kilograms", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_std": {"name": "daily_co2_kg_std", "description": "Standard deviation of daily CO2 emissions in kilograms", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity_gco2_kwh": {"name": "carbon_intensity_gco2_kwh", "description": "Carbon intensity in gCO2 per kWh from the lookup", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity_std_gco2_kwh": {"name": "carbon_intensity_std_gco2_kwh", "description": "Standard deviation of carbon intensity in gCO2 per kWh", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity_source": {"name": "carbon_intensity_source", "description": "Source of the carbon intensity data ('country_specific', 'world_average', 'conservative_default')", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ccri_base_power_watts": {"name": "ccri_base_power_watts", "description": "CCRI empirical base power in watts", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "power_source": {"name": "power_source", "description": "Data source for CCRI power measurement", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_confidence": {"name": "measurement_confidence", "description": "Confidence level of CCRI empirical data", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "power_reduction_vs_previous_pct": {"name": "power_reduction_vs_previous_pct", "description": "Percentage reduction compared to previous estimates", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_breakdown": {"name": "client_breakdown", "description": "JSON string of client type breakdowns", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_client_nodes": {"name": "total_client_nodes", "description": "Total number of client nodes", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the calculation was performed", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "power_consumption"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "(date, node_category, country_code)", "order_by": "(date, node_category, country_code)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535476.938352, "relation_name": "`dbt`.`int_esg_dynamic_power_consumption`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='(date, node_category, country_code)',\n        order_by='(date, node_category, country_code)',\n        partition_by='toStartOfMonth(date)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','esg','power_consumption']\n    )\n}}\n\nWITH node_distribution AS (\n    SELECT\n        date,\n        node_category,\n        country_code,\n        country_name,\n        region,\n        sub_region,\n        country_code_alpha3,\n        estimated_total_nodes,  \n        nodes_lower_95,           \n        nodes_upper_95          \n    FROM {{ ref('int_esg_node_geographic_distribution') }} n\n    {% if is_incremental() %}\n        WHERE n.date > (SELECT MAX(date) FROM {{ this }})\n    {% endif %}\n),\n\n-- Get client efficiency from upstream client distribution model\nclient_efficiency_by_category AS (\n    SELECT\n        date,\n        node_category,\n        \n        -- Weighted average client efficiency for this category\n        SUM(category_client_percentage / 100.0 * client_efficiency_factor) AS avg_client_efficiency,\n        \n        -- Client diversity count for resilience bonus\n        COUNT(DISTINCT client_type) AS client_diversity,\n        \n        -- Total estimated client nodes for validation\n        SUM(estimated_client_nodes) AS total_client_nodes,\n        \n        -- Client breakdown for diagnostics\n        groupArray((client_type, category_client_percentage, estimated_client_nodes)) AS client_breakdown\n        \n    FROM {{ ref('int_esg_node_client_distribution') }} ncd\n    {% if is_incremental() %}\n        WHERE ncd.date > (SELECT MAX(date) FROM {{ this }}) - INTERVAL 1 DAY\n    {% endif %}\n    GROUP BY date, node_category\n),\n\n-- Base power calculations by hardware tier with CCRI empirical values\npower_per_category AS (\n    SELECT\n        nd.date,\n        nd.node_category,\n        nd.country_code,\n        nd.country_name,\n        nd.region,\n        nd.sub_region,\n        nd.country_code_alpha3,\n        nd.estimated_total_nodes,\n        nd.nodes_lower_95,\n        nd.nodes_upper_95,\n        \n        -- CCRI empirical power consumption (Watts per node)\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 22.0        -- CCRI Tier 4: mean of 16.56-25.97W\n            WHEN 'professional_operator' THEN 48.0  -- CCRI Tier 5: mean of 36.82-59.95W\n            WHEN 'cloud_hosted' THEN 155.0      -- CCRI Tier 6: mean of 139.90-186.76W\n            ELSE 50.0\n        END AS base_power_watts,\n        \n        -- Standard deviation based on CCRI measurement ranges\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 3.3        -- ~15% of 22W (conservative uncertainty)\n            WHEN 'professional_operator' THEN 7.2  -- ~15% of 48W\n            WHEN 'cloud_hosted' THEN 23.0       -- ~15% of 155W\n            ELSE 7.5\n        END AS power_std_watts,\n        \n        -- Data source for traceability\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 'CCRI_Tier4_Empirical'\n            WHEN 'professional_operator' THEN 'CCRI_Tier5_Empirical'\n            WHEN 'cloud_hosted' THEN 'CCRI_Tier6_Empirical'\n            ELSE 'CCRI_Default'\n        END AS power_source,\n        \n        -- Measurement confidence (CCRI empirical data is high quality)\n        0.85 AS measurement_confidence,\n        \n        -- PUE by category  \n        CASE nd.node_category\n            WHEN 'home_staker' THEN 1.0         -- No datacenter overhead\n            WHEN 'professional_operator' THEN 1.58  -- Traditional datacenter\n            WHEN 'cloud_hosted' THEN 1.15       -- Efficient cloud datacenter\n            ELSE 1.1\n        END AS pue_factor,\n        \n        -- Client efficiency from upstream model\n        COALESCE(ce.avg_client_efficiency, 1.0) AS client_efficiency_multiplier,\n        \n        -- Diversity bonus (more client types = better resilience)\n        CASE \n            WHEN ce.client_diversity > 0 THEN 0.95 + 0.05 * least(4, ce.client_diversity) / 4.0\n            ELSE 1.0\n        END AS diversity_bonus,\n        \n        ce.client_breakdown,\n        ce.total_client_nodes\n        \n    FROM node_distribution nd\n    LEFT JOIN client_efficiency_by_category ce ON nd.date = ce.date AND nd.node_category = ce.node_category\n),\n\n-- Apply all efficiency factors\nfinal_power_calculations AS (\n    SELECT\n        p.*,\n        \n        -- Final power per node with all efficiency factors\n        p.base_power_watts * p.client_efficiency_multiplier * p.diversity_bonus AS avg_power_watts_per_node,\n        p.power_std_watts * p.client_efficiency_multiplier * p.diversity_bonus AS power_std_dev_per_node,\n        \n        -- Daily energy consumption (kWh)\n        p.estimated_total_nodes * \n        p.base_power_watts * \n        p.client_efficiency_multiplier * \n        p.diversity_bonus * \n        24.0 / 1000.0 AS daily_energy_kwh_mean\n\n    FROM power_per_category p\n),\n\n-- Carbon intensity lookup with robust fallback\ncarbon_intensity_lookup AS (\n    SELECT DISTINCT\n        p.date,\n        p.country_code_alpha3,\n        \n        -- Robust fallback hierarchy\n        COALESCE(\n            ci_country.carbon_intensity_mean,\n            ci_world.carbon_intensity_mean,\n            450.0\n        ) AS carbon_intensity_gco2_kwh,\n        \n        COALESCE(\n            ci_country.carbon_intensity_std,\n            ci_world.carbon_intensity_std, \n            45.0\n        ) AS carbon_intensity_std_gco2_kwh,\n        \n        CASE \n            WHEN ci_country.carbon_intensity_mean IS NOT NULL THEN 'country_specific'\n            WHEN ci_world.carbon_intensity_mean IS NOT NULL THEN 'world_average'\n            ELSE 'conservative_default'\n        END AS carbon_intensity_source\n        \n    FROM final_power_calculations p\n    LEFT JOIN {{ ref('int_esg_carbon_intensity_ensemble') }} ci_country\n        ON p.country_code_alpha3 = ci_country.country_code\n        AND ci_country.month_date = toStartOfMonth(p.date)\n        AND p.country_code_alpha3 IS NOT NULL\n        AND p.country_code_alpha3 != ''\n    LEFT JOIN {{ ref('int_esg_carbon_intensity_ensemble') }} ci_world\n        ON ci_world.country_code = 'WORLD'\n        AND ci_world.month_date = toStartOfMonth(p.date)\n    WHERE ci_country.month_date != DATE '1970-01-01' OR ci_world.month_date != DATE '1970-01-01' -- nu;;s ghet repl;ace by date...\n),\n\n-- Final calculations with carbon emissions\nfinal_calculations AS (\n    SELECT\n        p.date AS date,\n        p.node_category AS node_category,\n        p.country_code AS country_code,\n        p.country_code_alpha3 AS country_code_alpha3,\n        p.country_name AS country_name,\n        p.region AS region,\n        p.sub_region AS sub_region,\n        p.estimated_total_nodes AS estimated_total_nodes,\n        p.nodes_lower_95 AS nodes_lower_95,\n        p.nodes_upper_95 AS nodes_upper_95,\n        p.avg_power_watts_per_node AS avg_power_watts_per_node,\n        p.power_std_dev_per_node AS power_std_dev_per_node,\n        p.daily_energy_kwh_mean AS daily_energy_kwh_mean,\n        p.pue_factor AS pue_factor,\n        p.client_efficiency_multiplier AS client_efficiency,\n        p.diversity_bonus,\n        \n        -- CCRI source tracking\n        p.power_source,\n        p.measurement_confidence,\n        p.base_power_watts AS ccri_base_power_watts,\n        \n        -- Carbon intensity from lookup\n        ci.carbon_intensity_gco2_kwh,\n        ci.carbon_intensity_std_gco2_kwh,\n        ci.carbon_intensity_source,\n        \n        -- CO2 calculations\n        p.daily_energy_kwh_mean * p.pue_factor * ci.carbon_intensity_gco2_kwh / 1000.0 AS daily_co2_kg_mean,\n        \n        -- CO2 standard deviation\n        sqrt(\n            pow(p.daily_energy_kwh_mean * p.pue_factor * ci.carbon_intensity_std_gco2_kwh / 1000.0, 2) +\n            pow(p.power_std_dev_per_node * 24 / 1000.0 * p.pue_factor * ci.carbon_intensity_gco2_kwh / 1000.0, 2)\n        ) AS daily_co2_kg_std,\n        \n        -- Diagnostics\n        p.client_breakdown,\n        p.total_client_nodes\n        \n    FROM final_power_calculations p\n    INNER JOIN carbon_intensity_lookup ci\n        ON p.date = ci.date\n        AND COALESCE(p.country_code_alpha3, '') = COALESCE(ci.country_code_alpha3, '')\n)\n\nSELECT\n    date,\n    node_category,\n    country_code,\n    country_name,\n    region,\n    estimated_total_nodes,\n    nodes_lower_95,\n    nodes_upper_95,\n    \n    -- Power consumption metrics\n    round(avg_power_watts_per_node, 2) AS avg_power_watts_per_node,\n    round(power_std_dev_per_node, 2) AS power_std_dev_per_node,\n    round(daily_energy_kwh_mean, 2) AS daily_energy_kwh_mean,\n    round(pue_factor, 3) AS pue_mean,\n    round(client_efficiency, 3) AS client_efficiency_factor,\n    round(diversity_bonus, 3) AS diversity_bonus,\n    \n    -- Carbon emissions\n    round(daily_co2_kg_mean, 4) AS daily_co2_kg_mean,\n    round(daily_co2_kg_std, 4) AS daily_co2_kg_std,\n    round(carbon_intensity_gco2_kwh, 2) AS carbon_intensity_gco2_kwh,\n    round(carbon_intensity_std_gco2_kwh, 2) AS carbon_intensity_std_gco2_kwh,\n    \n    -- Confidence intervals\n    round(greatest(0, daily_co2_kg_mean - 1.96 * daily_co2_kg_std), 4) AS daily_co2_kg_lower_95,\n    round(daily_co2_kg_mean + 1.96 * daily_co2_kg_std, 4) AS daily_co2_kg_upper_95,\n    \n    -- CCRI data quality and source tracking\n    carbon_intensity_source,\n    round(ccri_base_power_watts, 2) AS ccri_base_power_watts,\n    power_source,\n    round(measurement_confidence, 3) AS measurement_confidence,\n    \n    -- Performance comparison with previous estimates\n    round(\n        100.0 * (avg_power_watts_per_node - CASE node_category\n            WHEN 'home_staker' THEN 75.0\n            WHEN 'professional_operator' THEN 200.0  \n            WHEN 'cloud_hosted' THEN 110.0\n            ELSE 100.0\n        END) / CASE node_category\n            WHEN 'home_staker' THEN 75.0\n            WHEN 'professional_operator' THEN 200.0\n            WHEN 'cloud_hosted' THEN 110.0  \n            ELSE 100.0\n        END, 1\n    ) AS power_reduction_vs_previous_pct,\n    \n    -- Diagnostics\n    toJSONString(client_breakdown) AS client_breakdown_json,\n    total_client_nodes AS debug_total_clients,\n    \n    -- Metadata\n    now() AS calculated_at\n\nFROM final_calculations\nWHERE estimated_total_nodes > 0", "language": "sql", "refs": [{"name": "int_esg_node_geographic_distribution", "package": null, "version": null}, {"name": "int_esg_node_client_distribution", "package": null, "version": null}, {"name": "int_esg_carbon_intensity_ensemble", "package": null, "version": null}, {"name": "int_esg_carbon_intensity_ensemble", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_esg_node_geographic_distribution", "model.gnosis_dbt.int_esg_node_client_distribution", "model.gnosis_dbt.int_esg_carbon_intensity_ensemble"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_dynamic_power_consumption.sql", "compiled": true, "compiled_code": "\n\nWITH node_distribution AS (\n    SELECT\n        date,\n        node_category,\n        country_code,\n        country_name,\n        region,\n        sub_region,\n        country_code_alpha3,\n        estimated_total_nodes,  \n        nodes_lower_95,           \n        nodes_upper_95          \n    FROM `dbt`.`int_esg_node_geographic_distribution` n\n    \n        WHERE n.date > (SELECT MAX(date) FROM `dbt`.`int_esg_dynamic_power_consumption`)\n    \n),\n\n-- Get client efficiency from upstream client distribution model\nclient_efficiency_by_category AS (\n    SELECT\n        date,\n        node_category,\n        \n        -- Weighted average client efficiency for this category\n        SUM(category_client_percentage / 100.0 * client_efficiency_factor) AS avg_client_efficiency,\n        \n        -- Client diversity count for resilience bonus\n        COUNT(DISTINCT client_type) AS client_diversity,\n        \n        -- Total estimated client nodes for validation\n        SUM(estimated_client_nodes) AS total_client_nodes,\n        \n        -- Client breakdown for diagnostics\n        groupArray((client_type, category_client_percentage, estimated_client_nodes)) AS client_breakdown\n        \n    FROM `dbt`.`int_esg_node_client_distribution` ncd\n    \n        WHERE ncd.date > (SELECT MAX(date) FROM `dbt`.`int_esg_dynamic_power_consumption`) - INTERVAL 1 DAY\n    \n    GROUP BY date, node_category\n),\n\n-- Base power calculations by hardware tier with CCRI empirical values\npower_per_category AS (\n    SELECT\n        nd.date,\n        nd.node_category,\n        nd.country_code,\n        nd.country_name,\n        nd.region,\n        nd.sub_region,\n        nd.country_code_alpha3,\n        nd.estimated_total_nodes,\n        nd.nodes_lower_95,\n        nd.nodes_upper_95,\n        \n        -- CCRI empirical power consumption (Watts per node)\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 22.0        -- CCRI Tier 4: mean of 16.56-25.97W\n            WHEN 'professional_operator' THEN 48.0  -- CCRI Tier 5: mean of 36.82-59.95W\n            WHEN 'cloud_hosted' THEN 155.0      -- CCRI Tier 6: mean of 139.90-186.76W\n            ELSE 50.0\n        END AS base_power_watts,\n        \n        -- Standard deviation based on CCRI measurement ranges\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 3.3        -- ~15% of 22W (conservative uncertainty)\n            WHEN 'professional_operator' THEN 7.2  -- ~15% of 48W\n            WHEN 'cloud_hosted' THEN 23.0       -- ~15% of 155W\n            ELSE 7.5\n        END AS power_std_watts,\n        \n        -- Data source for traceability\n        CASE nd.node_category\n            WHEN 'home_staker' THEN 'CCRI_Tier4_Empirical'\n            WHEN 'professional_operator' THEN 'CCRI_Tier5_Empirical'\n            WHEN 'cloud_hosted' THEN 'CCRI_Tier6_Empirical'\n            ELSE 'CCRI_Default'\n        END AS power_source,\n        \n        -- Measurement confidence (CCRI empirical data is high quality)\n        0.85 AS measurement_confidence,\n        \n        -- PUE by category  \n        CASE nd.node_category\n            WHEN 'home_staker' THEN 1.0         -- No datacenter overhead\n            WHEN 'professional_operator' THEN 1.58  -- Traditional datacenter\n            WHEN 'cloud_hosted' THEN 1.15       -- Efficient cloud datacenter\n            ELSE 1.1\n        END AS pue_factor,\n        \n        -- Client efficiency from upstream model\n        COALESCE(ce.avg_client_efficiency, 1.0) AS client_efficiency_multiplier,\n        \n        -- Diversity bonus (more client types = better resilience)\n        CASE \n            WHEN ce.client_diversity > 0 THEN 0.95 + 0.05 * least(4, ce.client_diversity) / 4.0\n            ELSE 1.0\n        END AS diversity_bonus,\n        \n        ce.client_breakdown,\n        ce.total_client_nodes\n        \n    FROM node_distribution nd\n    LEFT JOIN client_efficiency_by_category ce ON nd.date = ce.date AND nd.node_category = ce.node_category\n),\n\n-- Apply all efficiency factors\nfinal_power_calculations AS (\n    SELECT\n        p.*,\n        \n        -- Final power per node with all efficiency factors\n        p.base_power_watts * p.client_efficiency_multiplier * p.diversity_bonus AS avg_power_watts_per_node,\n        p.power_std_watts * p.client_efficiency_multiplier * p.diversity_bonus AS power_std_dev_per_node,\n        \n        -- Daily energy consumption (kWh)\n        p.estimated_total_nodes * \n        p.base_power_watts * \n        p.client_efficiency_multiplier * \n        p.diversity_bonus * \n        24.0 / 1000.0 AS daily_energy_kwh_mean\n\n    FROM power_per_category p\n),\n\n-- Carbon intensity lookup with robust fallback\ncarbon_intensity_lookup AS (\n    SELECT DISTINCT\n        p.date,\n        p.country_code_alpha3,\n        \n        -- Robust fallback hierarchy\n        COALESCE(\n            ci_country.carbon_intensity_mean,\n            ci_world.carbon_intensity_mean,\n            450.0\n        ) AS carbon_intensity_gco2_kwh,\n        \n        COALESCE(\n            ci_country.carbon_intensity_std,\n            ci_world.carbon_intensity_std, \n            45.0\n        ) AS carbon_intensity_std_gco2_kwh,\n        \n        CASE \n            WHEN ci_country.carbon_intensity_mean IS NOT NULL THEN 'country_specific'\n            WHEN ci_world.carbon_intensity_mean IS NOT NULL THEN 'world_average'\n            ELSE 'conservative_default'\n        END AS carbon_intensity_source\n        \n    FROM final_power_calculations p\n    LEFT JOIN `dbt`.`int_esg_carbon_intensity_ensemble` ci_country\n        ON p.country_code_alpha3 = ci_country.country_code\n        AND ci_country.month_date = toStartOfMonth(p.date)\n        AND p.country_code_alpha3 IS NOT NULL\n        AND p.country_code_alpha3 != ''\n    LEFT JOIN `dbt`.`int_esg_carbon_intensity_ensemble` ci_world\n        ON ci_world.country_code = 'WORLD'\n        AND ci_world.month_date = toStartOfMonth(p.date)\n    WHERE ci_country.month_date != DATE '1970-01-01' OR ci_world.month_date != DATE '1970-01-01' -- nu;;s ghet repl;ace by date...\n),\n\n-- Final calculations with carbon emissions\nfinal_calculations AS (\n    SELECT\n        p.date AS date,\n        p.node_category AS node_category,\n        p.country_code AS country_code,\n        p.country_code_alpha3 AS country_code_alpha3,\n        p.country_name AS country_name,\n        p.region AS region,\n        p.sub_region AS sub_region,\n        p.estimated_total_nodes AS estimated_total_nodes,\n        p.nodes_lower_95 AS nodes_lower_95,\n        p.nodes_upper_95 AS nodes_upper_95,\n        p.avg_power_watts_per_node AS avg_power_watts_per_node,\n        p.power_std_dev_per_node AS power_std_dev_per_node,\n        p.daily_energy_kwh_mean AS daily_energy_kwh_mean,\n        p.pue_factor AS pue_factor,\n        p.client_efficiency_multiplier AS client_efficiency,\n        p.diversity_bonus,\n        \n        -- CCRI source tracking\n        p.power_source,\n        p.measurement_confidence,\n        p.base_power_watts AS ccri_base_power_watts,\n        \n        -- Carbon intensity from lookup\n        ci.carbon_intensity_gco2_kwh,\n        ci.carbon_intensity_std_gco2_kwh,\n        ci.carbon_intensity_source,\n        \n        -- CO2 calculations\n        p.daily_energy_kwh_mean * p.pue_factor * ci.carbon_intensity_gco2_kwh / 1000.0 AS daily_co2_kg_mean,\n        \n        -- CO2 standard deviation\n        sqrt(\n            pow(p.daily_energy_kwh_mean * p.pue_factor * ci.carbon_intensity_std_gco2_kwh / 1000.0, 2) +\n            pow(p.power_std_dev_per_node * 24 / 1000.0 * p.pue_factor * ci.carbon_intensity_gco2_kwh / 1000.0, 2)\n        ) AS daily_co2_kg_std,\n        \n        -- Diagnostics\n        p.client_breakdown,\n        p.total_client_nodes\n        \n    FROM final_power_calculations p\n    INNER JOIN carbon_intensity_lookup ci\n        ON p.date = ci.date\n        AND COALESCE(p.country_code_alpha3, '') = COALESCE(ci.country_code_alpha3, '')\n)\n\nSELECT\n    date,\n    node_category,\n    country_code,\n    country_name,\n    region,\n    estimated_total_nodes,\n    nodes_lower_95,\n    nodes_upper_95,\n    \n    -- Power consumption metrics\n    round(avg_power_watts_per_node, 2) AS avg_power_watts_per_node,\n    round(power_std_dev_per_node, 2) AS power_std_dev_per_node,\n    round(daily_energy_kwh_mean, 2) AS daily_energy_kwh_mean,\n    round(pue_factor, 3) AS pue_mean,\n    round(client_efficiency, 3) AS client_efficiency_factor,\n    round(diversity_bonus, 3) AS diversity_bonus,\n    \n    -- Carbon emissions\n    round(daily_co2_kg_mean, 4) AS daily_co2_kg_mean,\n    round(daily_co2_kg_std, 4) AS daily_co2_kg_std,\n    round(carbon_intensity_gco2_kwh, 2) AS carbon_intensity_gco2_kwh,\n    round(carbon_intensity_std_gco2_kwh, 2) AS carbon_intensity_std_gco2_kwh,\n    \n    -- Confidence intervals\n    round(greatest(0, daily_co2_kg_mean - 1.96 * daily_co2_kg_std), 4) AS daily_co2_kg_lower_95,\n    round(daily_co2_kg_mean + 1.96 * daily_co2_kg_std, 4) AS daily_co2_kg_upper_95,\n    \n    -- CCRI data quality and source tracking\n    carbon_intensity_source,\n    round(ccri_base_power_watts, 2) AS ccri_base_power_watts,\n    power_source,\n    round(measurement_confidence, 3) AS measurement_confidence,\n    \n    -- Performance comparison with previous estimates\n    round(\n        100.0 * (avg_power_watts_per_node - CASE node_category\n            WHEN 'home_staker' THEN 75.0\n            WHEN 'professional_operator' THEN 200.0  \n            WHEN 'cloud_hosted' THEN 110.0\n            ELSE 100.0\n        END) / CASE node_category\n            WHEN 'home_staker' THEN 75.0\n            WHEN 'professional_operator' THEN 200.0\n            WHEN 'cloud_hosted' THEN 110.0  \n            ELSE 100.0\n        END, 1\n    ) AS power_reduction_vs_previous_pct,\n    \n    -- Diagnostics\n    toJSONString(client_breakdown) AS client_breakdown_json,\n    total_client_nodes AS debug_total_clients,\n    \n    -- Metadata\n    now() AS calculated_at\n\nFROM final_calculations\nWHERE estimated_total_nodes > 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_esg_node_population_chao1": {"database": "dbt", "schema": "dbt", "name": "int_esg_node_population_chao1", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/intermediate/int_esg_node_population_chao1.sql", "original_file_path": "models/ESG/intermediate/int_esg_node_population_chao1.sql", "unique_id": "model.gnosis_dbt.int_esg_node_population_chao1", "fqn": ["gnosis_dbt", "ESG", "intermediate", "int_esg_node_population_chao1"], "alias": "int_esg_node_population_chao1", "checksum": {"name": "sha256", "checksum": "3b1a01a37a7327dc7fe6cfad6fd88e8e6d82c74fd9d0752ad83dce9ad3963284"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "nodes", "production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "observation_date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "order_by": "observation_date", "partition_by": "toStartOfMonth(observation_date)"}, "tags": ["production", "esg", "nodes"], "description": "Model estimating network population using Chao1 method, including successful, all, and unreachable nodes, with detailed failure analysis and derived metrics.", "columns": {"observation_date": {"name": "observation_date", "description": "Date of observation, in UTC, representing the day of data collection.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connection_status": {"name": "connection_status", "description": "Connection outcome categorized as 'successful', 'failed', or 'unknown'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "failure_type": {"name": "failure_type", "description": "Specific failure reason, such as 'timeout', 'refused', 'unreachable', etc.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_id": {"name": "crawl_id", "description": "Unique identifier for each crawl attempt.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier for each peer node.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "times_observed": {"name": "times_observed", "description": "Number of distinct crawl attempts observed for the peer on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "s_obs_successful": {"name": "s_obs_successful", "description": "Count of distinct peers observed successfully on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "f1_successful": {"name": "f1_successful", "description": "Count of peers observed exactly once successfully.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "f2_successful": {"name": "f2_successful", "description": "Count of peers observed exactly twice successfully.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "s_obs_all": {"name": "s_obs_all", "description": "Count of total peers observed (successful + failed) on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "f1_all": {"name": "f1_all", "description": "Count of peers observed exactly once in all attempts.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "f2_all": {"name": "f2_all", "description": "Count of peers observed exactly twice in all attempts.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peers_with_only_failures": {"name": "peers_with_only_failures", "description": "Count of peers with only failed connection attempts and no success.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_reachable_from_failures": {"name": "estimated_reachable_from_failures", "description": "Estimated number of peers reachable based on failure analysis.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_successful_only": {"name": "chao1_successful_only", "description": "Estimated total successful peers using Chao1 estimator.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_all_discovered": {"name": "chao1_all_discovered", "description": "Estimated total peers discovered in all attempts via Chao1.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_additional_reachable": {"name": "estimated_additional_reachable", "description": "Additional reachable peers estimated from failure analysis.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "enhanced_total_reachable": {"name": "enhanced_total_reachable", "description": "Total estimated reachable peers combining successful and failure-based estimates.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_network_size": {"name": "estimated_network_size", "description": "Overall network size estimate including unreachable nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connection_success_rate_pct": {"name": "connection_success_rate_pct", "description": "Percentage of successful connections out of total observed peers.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "network_discovery_coverage_pct": {"name": "network_discovery_coverage_pct", "description": "Percentage of network discovered relative to total attempts.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reachable_discovery_coverage_pct": {"name": "reachable_discovery_coverage_pct", "description": "Percentage of successfully reachable nodes relative to total estimated reachable.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_successful_nodes": {"name": "hidden_successful_nodes", "description": "Estimated number of successful nodes not observed directly.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_reachable_nodes": {"name": "hidden_reachable_nodes", "description": "Estimated number of reachable nodes not observed directly.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_total_nodes": {"name": "hidden_total_nodes", "description": "Estimated total nodes including unreachable, not directly observed.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_successful_pct": {"name": "hidden_successful_pct", "description": "Percentage of hidden successful nodes relative to total estimated successful.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hidden_total_pct": {"name": "hidden_total_pct", "description": "Percentage of total hidden nodes relative to total network size.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "calculated_at": {"name": "calculated_at", "description": "Timestamp when the estimation was computed.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "observation_date", "partition_by": "toStartOfMonth(observation_date)", "order_by": "observation_date"}, "created_at": 1760535476.968008, "relation_name": "`dbt`.`int_esg_node_population_chao1`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='observation_date',\n        partition_by='toStartOfMonth(observation_date)',\n        order_by='observation_date',\n        tags=['production','esg','nodes']\n    )\n}}\n\nWITH peer_connection_analysis AS (\n    SELECT\n        toDate(visit_ended_at) AS observation_date,\n        peer_id,\n        crawl_id,\n        \n        -- Categorize connection attempts\n        CASE \n            WHEN empty(dial_errors) = 1 AND crawl_error IS NULL THEN 'successful'\n            WHEN empty(dial_errors) = 0 OR crawl_error IS NOT NULL THEN 'failed'\n            ELSE 'unknown'\n        END AS connection_status,\n        \n        -- More granular failure analysis\n        CASE \n            WHEN empty(dial_errors) = 1 AND crawl_error IS NULL THEN 'successful'\n            WHEN crawl_error LIKE '%timeout%' THEN 'timeout'\n            WHEN crawl_error LIKE '%refused%' OR crawl_error LIKE '%connection refused%' THEN 'refused' \n            WHEN crawl_error LIKE '%unreachable%' THEN 'unreachable'\n            WHEN crawl_error LIKE '%protocol%' THEN 'protocol_mismatch'\n            WHEN NOT empty(dial_errors) THEN 'dial_error'\n            ELSE 'other_failure'\n        END AS failure_type\n        \n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        {{ apply_monthly_incremental_filter('visit_ended_at','observation_date','true') }}\n),\n\n-- Chao-1 for successful connections only\nsuccessful_chao1 AS (\n    SELECT\n        observation_date,\n        peer_id,\n        COUNT(DISTINCT crawl_id) AS times_observed\n    FROM peer_connection_analysis\n    WHERE connection_status = 'successful'\n    {% if is_incremental() %}\n        AND observation_date > (SELECT MAX(observation_date) FROM {{ this }})\n    {% endif %}\n    GROUP BY observation_date, peer_id\n),\n\nsuccessful_stats AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS s_obs_successful,\n        SUM(CASE WHEN times_observed = 1 THEN 1 ELSE 0 END) AS f1_successful,\n        SUM(CASE WHEN times_observed = 2 THEN 1 ELSE 0 END) AS f2_successful\n    FROM successful_chao1\n    GROUP BY observation_date\n),\n\n-- Chao-1 for ALL connection attempts (successful + failed)\nall_attempts_chao1 AS (\n    SELECT\n        observation_date,\n        peer_id,\n        COUNT(DISTINCT crawl_id) AS times_observed\n    FROM peer_connection_analysis\n    {% if is_incremental() %}\n        WHERE observation_date > (SELECT MAX(observation_date) FROM {{ this }})\n    {% endif %}\n    GROUP BY observation_date, peer_id\n),\n\nall_attempts_stats AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS s_obs_all,\n        SUM(CASE WHEN times_observed = 1 THEN 1 ELSE 0 END) AS f1_all,\n        SUM(CASE WHEN times_observed = 2 THEN 1 ELSE 0 END) AS f2_all\n    FROM all_attempts_chao1\n    GROUP BY observation_date\n),\n\n-- Additional peers known from failed connections\npeer_status_summary AS (\n    SELECT\n        observation_date,\n        peer_id,\n        MAX(CASE WHEN connection_status = 'successful' THEN 1 ELSE 0 END) AS had_success,\n        MAX(CASE WHEN connection_status = 'failed' THEN 1 ELSE 0 END) AS had_failure\n    FROM peer_connection_analysis\n    {% if is_incremental() %}\n        WHERE observation_date > (SELECT MAX(observation_date) FROM {{ this }})\n    {% endif %}\n    GROUP BY observation_date, peer_id\n),\n\nfailed_only_peers AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS peers_with_only_failures\n    FROM peer_status_summary\n    WHERE had_failure = 1 AND had_success = 0\n    GROUP BY observation_date\n),\n\n-- Connection success rates by failure type\nfailure_analysis AS (\n    SELECT\n        observation_date,\n        failure_type,\n        COUNT(DISTINCT peer_id) AS peer_count,\n        COUNT(*) AS attempt_count,\n        \n        -- Estimate reachability probability based on failure type\n        CASE failure_type\n            WHEN 'timeout' THEN 0.3      -- Sometimes reachable\n            WHEN 'refused' THEN 0.1      -- Rarely reachable (firewall/NAT)\n            WHEN 'unreachable' THEN 0.05 -- Very rarely reachable\n            WHEN 'protocol_mismatch' THEN 0.8  -- Likely reachable with right protocol\n            WHEN 'dial_error' THEN 0.2   -- Sometimes reachable\n            ELSE 0.1\n        END AS estimated_reachability_prob\n        \n    FROM peer_connection_analysis\n    WHERE connection_status = 'failed'\n    {% if is_incremental() %}\n        AND observation_date > (SELECT MAX(observation_date) FROM {{ this }})\n    {% endif %}\n    GROUP BY observation_date, failure_type\n),\n\n-- Calculate enhanced estimates\nenhanced_calculations AS (\n    SELECT\n        COALESCE(s.observation_date, a.observation_date) AS observation_date,\n        \n        -- Successful connection metrics\n        COALESCE(s.s_obs_successful, 0) AS observed_successful_nodes,\n        CASE\n            WHEN COALESCE(s.f2_successful, 0) > 0 THEN \n                COALESCE(s.s_obs_successful, 0) + toFloat64(s.f1_successful * (s.f1_successful - 1)) / (2.0 * toFloat64(s.f2_successful + 1))\n            WHEN COALESCE(s.f1_successful, 0) > 0 THEN \n                COALESCE(s.s_obs_successful, 0) + toFloat64(s.f1_successful * (s.f1_successful - 1)) / 2.0\n            ELSE \n                toFloat64(COALESCE(s.s_obs_successful, 0))\n        END AS chao1_successful,\n        \n        -- All attempt metrics  \n        COALESCE(a.s_obs_all, 0) AS observed_total_peers,\n        CASE\n            WHEN COALESCE(a.f2_all, 0) > 0 THEN \n                COALESCE(a.s_obs_all, 0) + toFloat64(a.f1_all * (a.f1_all - 1)) / (2.0 * toFloat64(a.f2_all + 1))\n            WHEN COALESCE(a.f1_all, 0) > 0 THEN \n                COALESCE(a.s_obs_all, 0) + toFloat64(a.f1_all * (a.f1_all - 1)) / 2.0\n            ELSE \n                toFloat64(COALESCE(a.s_obs_all, 0))\n        END AS chao1_all_attempts,\n        \n        -- Failed connection insights\n        COALESCE(f.peers_with_only_failures, 0) AS failed_only_peers,\n        \n        COALESCE(s.f1_successful, 0) AS f1_successful,\n        COALESCE(s.f2_successful, 0) AS f2_successful,\n        COALESCE(a.f1_all, 0) AS f1_all,\n        COALESCE(a.f2_all, 0) AS f2_all\n        \n    FROM successful_stats s\n    FULL OUTER JOIN all_attempts_stats a ON s.observation_date = a.observation_date\n    LEFT JOIN failed_only_peers f ON COALESCE(s.observation_date, a.observation_date) = f.observation_date\n),\n\n-- Separate CTE for failure analysis aggregation\nfailure_reachability AS (\n    SELECT\n        observation_date,\n        SUM(toFloat64(peer_count) * estimated_reachability_prob) AS estimated_reachable_from_failures\n    FROM failure_analysis\n    GROUP BY observation_date\n),\n\n-- Combine all estimates\ncombined_estimates AS (\n    SELECT\n        e.*,\n        COALESCE(fr.estimated_reachable_from_failures, 0.0) AS estimated_reachable_from_failures\n    FROM enhanced_calculations e\n    LEFT JOIN failure_reachability fr ON e.observation_date = fr.observation_date\n),\n\nfinal_estimates AS (\n    SELECT\n        observation_date,\n        observed_successful_nodes,\n        observed_total_peers,\n        failed_only_peers,\n        \n        -- Different estimation approaches\n        toUInt64(round(chao1_successful, 0)) AS chao1_successful_only,\n        toUInt64(round(chao1_all_attempts, 0)) AS chao1_all_discovered,\n        toUInt64(round(estimated_reachable_from_failures, 0)) AS estimated_additional_reachable,\n        \n        -- Enhanced total estimate combining multiple signals\n        toUInt64(round(\n            chao1_successful +  -- Hidden successful nodes\n            estimated_reachable_from_failures  -- Additional reachable from failures\n        , 0)) AS enhanced_total_reachable,\n        \n        -- Network size estimate (includes unreachable nodes)\n        toUInt64(round(chao1_all_attempts, 0)) AS estimated_network_size,\n        \n        -- Success rates\n        CASE WHEN observed_total_peers > 0 THEN \n            round(100.0 * observed_successful_nodes / observed_total_peers, 2)\n        ELSE 0 END AS connection_success_rate_pct,\n        \n        -- Coverage estimates\n        CASE WHEN chao1_all_attempts > 0 THEN\n            round(100.0 * observed_total_peers / chao1_all_attempts, 2)\n        ELSE 100 END AS network_discovery_coverage_pct,\n        \n        CASE WHEN enhanced_total_reachable > 0 THEN\n            round(100.0 * observed_successful_nodes / enhanced_total_reachable, 2) \n        ELSE 100 END AS reachable_discovery_coverage_pct,\n        \n        -- Diagnostic info\n        f1_successful, f2_successful, f1_all, f2_all\n        \n    FROM combined_estimates\n)\n\nSELECT\n    observation_date,\n    \n    -- Core metrics\n    observed_successful_nodes,\n    observed_total_peers, \n    failed_only_peers,\n    \n    -- Population estimates\n    chao1_successful_only,\n    enhanced_total_reachable,\n    estimated_network_size,\n    estimated_additional_reachable,\n    \n    -- Success and coverage rates\n    connection_success_rate_pct,\n    network_discovery_coverage_pct,\n    reachable_discovery_coverage_pct,\n    \n    -- Hidden node estimates\n    chao1_successful_only - observed_successful_nodes AS hidden_successful_nodes,\n    enhanced_total_reachable - observed_successful_nodes AS hidden_reachable_nodes,\n    estimated_network_size - observed_total_peers AS hidden_total_nodes,\n    \n    -- Percentages\n    CASE WHEN chao1_successful_only > 0 THEN\n        round(100.0 * (chao1_successful_only - observed_successful_nodes) / chao1_successful_only, 2)\n    ELSE 0 END AS hidden_successful_pct,\n    \n    CASE WHEN estimated_network_size > 0 THEN\n        round(100.0 * (estimated_network_size - observed_total_peers) / estimated_network_size, 2) \n    ELSE 0 END AS hidden_total_pct,\n    \n    -- Diagnostic information\n    f1_successful AS successful_singletons,\n    f2_successful AS successful_doubletons,\n    f1_all AS all_singletons,\n    f2_all AS all_doubletons,\n    \n    now() AS calculated_at\n\nFROM final_estimates\nORDER BY observation_date DESC", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter", "macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_p2p_discv5_peers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/intermediate/int_esg_node_population_chao1.sql", "compiled": true, "compiled_code": "\n\nWITH peer_connection_analysis AS (\n    SELECT\n        toDate(visit_ended_at) AS observation_date,\n        peer_id,\n        crawl_id,\n        \n        -- Categorize connection attempts\n        CASE \n            WHEN empty(dial_errors) = 1 AND crawl_error IS NULL THEN 'successful'\n            WHEN empty(dial_errors) = 0 OR crawl_error IS NOT NULL THEN 'failed'\n            ELSE 'unknown'\n        END AS connection_status,\n        \n        -- More granular failure analysis\n        CASE \n            WHEN empty(dial_errors) = 1 AND crawl_error IS NULL THEN 'successful'\n            WHEN crawl_error LIKE '%timeout%' THEN 'timeout'\n            WHEN crawl_error LIKE '%refused%' OR crawl_error LIKE '%connection refused%' THEN 'refused' \n            WHEN crawl_error LIKE '%unreachable%' THEN 'unreachable'\n            WHEN crawl_error LIKE '%protocol%' THEN 'protocol_mismatch'\n            WHEN NOT empty(dial_errors) THEN 'dial_error'\n            ELSE 'other_failure'\n        END AS failure_type\n        \n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(observation_date))\n      FROM `dbt`.`int_esg_node_population_chao1`\n    )\n  \n\n),\n\n-- Chao-1 for successful connections only\nsuccessful_chao1 AS (\n    SELECT\n        observation_date,\n        peer_id,\n        COUNT(DISTINCT crawl_id) AS times_observed\n    FROM peer_connection_analysis\n    WHERE connection_status = 'successful'\n    \n        AND observation_date > (SELECT MAX(observation_date) FROM `dbt`.`int_esg_node_population_chao1`)\n    \n    GROUP BY observation_date, peer_id\n),\n\nsuccessful_stats AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS s_obs_successful,\n        SUM(CASE WHEN times_observed = 1 THEN 1 ELSE 0 END) AS f1_successful,\n        SUM(CASE WHEN times_observed = 2 THEN 1 ELSE 0 END) AS f2_successful\n    FROM successful_chao1\n    GROUP BY observation_date\n),\n\n-- Chao-1 for ALL connection attempts (successful + failed)\nall_attempts_chao1 AS (\n    SELECT\n        observation_date,\n        peer_id,\n        COUNT(DISTINCT crawl_id) AS times_observed\n    FROM peer_connection_analysis\n    \n        WHERE observation_date > (SELECT MAX(observation_date) FROM `dbt`.`int_esg_node_population_chao1`)\n    \n    GROUP BY observation_date, peer_id\n),\n\nall_attempts_stats AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS s_obs_all,\n        SUM(CASE WHEN times_observed = 1 THEN 1 ELSE 0 END) AS f1_all,\n        SUM(CASE WHEN times_observed = 2 THEN 1 ELSE 0 END) AS f2_all\n    FROM all_attempts_chao1\n    GROUP BY observation_date\n),\n\n-- Additional peers known from failed connections\npeer_status_summary AS (\n    SELECT\n        observation_date,\n        peer_id,\n        MAX(CASE WHEN connection_status = 'successful' THEN 1 ELSE 0 END) AS had_success,\n        MAX(CASE WHEN connection_status = 'failed' THEN 1 ELSE 0 END) AS had_failure\n    FROM peer_connection_analysis\n    \n        WHERE observation_date > (SELECT MAX(observation_date) FROM `dbt`.`int_esg_node_population_chao1`)\n    \n    GROUP BY observation_date, peer_id\n),\n\nfailed_only_peers AS (\n    SELECT\n        observation_date,\n        COUNT(DISTINCT peer_id) AS peers_with_only_failures\n    FROM peer_status_summary\n    WHERE had_failure = 1 AND had_success = 0\n    GROUP BY observation_date\n),\n\n-- Connection success rates by failure type\nfailure_analysis AS (\n    SELECT\n        observation_date,\n        failure_type,\n        COUNT(DISTINCT peer_id) AS peer_count,\n        COUNT(*) AS attempt_count,\n        \n        -- Estimate reachability probability based on failure type\n        CASE failure_type\n            WHEN 'timeout' THEN 0.3      -- Sometimes reachable\n            WHEN 'refused' THEN 0.1      -- Rarely reachable (firewall/NAT)\n            WHEN 'unreachable' THEN 0.05 -- Very rarely reachable\n            WHEN 'protocol_mismatch' THEN 0.8  -- Likely reachable with right protocol\n            WHEN 'dial_error' THEN 0.2   -- Sometimes reachable\n            ELSE 0.1\n        END AS estimated_reachability_prob\n        \n    FROM peer_connection_analysis\n    WHERE connection_status = 'failed'\n    \n        AND observation_date > (SELECT MAX(observation_date) FROM `dbt`.`int_esg_node_population_chao1`)\n    \n    GROUP BY observation_date, failure_type\n),\n\n-- Calculate enhanced estimates\nenhanced_calculations AS (\n    SELECT\n        COALESCE(s.observation_date, a.observation_date) AS observation_date,\n        \n        -- Successful connection metrics\n        COALESCE(s.s_obs_successful, 0) AS observed_successful_nodes,\n        CASE\n            WHEN COALESCE(s.f2_successful, 0) > 0 THEN \n                COALESCE(s.s_obs_successful, 0) + toFloat64(s.f1_successful * (s.f1_successful - 1)) / (2.0 * toFloat64(s.f2_successful + 1))\n            WHEN COALESCE(s.f1_successful, 0) > 0 THEN \n                COALESCE(s.s_obs_successful, 0) + toFloat64(s.f1_successful * (s.f1_successful - 1)) / 2.0\n            ELSE \n                toFloat64(COALESCE(s.s_obs_successful, 0))\n        END AS chao1_successful,\n        \n        -- All attempt metrics  \n        COALESCE(a.s_obs_all, 0) AS observed_total_peers,\n        CASE\n            WHEN COALESCE(a.f2_all, 0) > 0 THEN \n                COALESCE(a.s_obs_all, 0) + toFloat64(a.f1_all * (a.f1_all - 1)) / (2.0 * toFloat64(a.f2_all + 1))\n            WHEN COALESCE(a.f1_all, 0) > 0 THEN \n                COALESCE(a.s_obs_all, 0) + toFloat64(a.f1_all * (a.f1_all - 1)) / 2.0\n            ELSE \n                toFloat64(COALESCE(a.s_obs_all, 0))\n        END AS chao1_all_attempts,\n        \n        -- Failed connection insights\n        COALESCE(f.peers_with_only_failures, 0) AS failed_only_peers,\n        \n        COALESCE(s.f1_successful, 0) AS f1_successful,\n        COALESCE(s.f2_successful, 0) AS f2_successful,\n        COALESCE(a.f1_all, 0) AS f1_all,\n        COALESCE(a.f2_all, 0) AS f2_all\n        \n    FROM successful_stats s\n    FULL OUTER JOIN all_attempts_stats a ON s.observation_date = a.observation_date\n    LEFT JOIN failed_only_peers f ON COALESCE(s.observation_date, a.observation_date) = f.observation_date\n),\n\n-- Separate CTE for failure analysis aggregation\nfailure_reachability AS (\n    SELECT\n        observation_date,\n        SUM(toFloat64(peer_count) * estimated_reachability_prob) AS estimated_reachable_from_failures\n    FROM failure_analysis\n    GROUP BY observation_date\n),\n\n-- Combine all estimates\ncombined_estimates AS (\n    SELECT\n        e.*,\n        COALESCE(fr.estimated_reachable_from_failures, 0.0) AS estimated_reachable_from_failures\n    FROM enhanced_calculations e\n    LEFT JOIN failure_reachability fr ON e.observation_date = fr.observation_date\n),\n\nfinal_estimates AS (\n    SELECT\n        observation_date,\n        observed_successful_nodes,\n        observed_total_peers,\n        failed_only_peers,\n        \n        -- Different estimation approaches\n        toUInt64(round(chao1_successful, 0)) AS chao1_successful_only,\n        toUInt64(round(chao1_all_attempts, 0)) AS chao1_all_discovered,\n        toUInt64(round(estimated_reachable_from_failures, 0)) AS estimated_additional_reachable,\n        \n        -- Enhanced total estimate combining multiple signals\n        toUInt64(round(\n            chao1_successful +  -- Hidden successful nodes\n            estimated_reachable_from_failures  -- Additional reachable from failures\n        , 0)) AS enhanced_total_reachable,\n        \n        -- Network size estimate (includes unreachable nodes)\n        toUInt64(round(chao1_all_attempts, 0)) AS estimated_network_size,\n        \n        -- Success rates\n        CASE WHEN observed_total_peers > 0 THEN \n            round(100.0 * observed_successful_nodes / observed_total_peers, 2)\n        ELSE 0 END AS connection_success_rate_pct,\n        \n        -- Coverage estimates\n        CASE WHEN chao1_all_attempts > 0 THEN\n            round(100.0 * observed_total_peers / chao1_all_attempts, 2)\n        ELSE 100 END AS network_discovery_coverage_pct,\n        \n        CASE WHEN enhanced_total_reachable > 0 THEN\n            round(100.0 * observed_successful_nodes / enhanced_total_reachable, 2) \n        ELSE 100 END AS reachable_discovery_coverage_pct,\n        \n        -- Diagnostic info\n        f1_successful, f2_successful, f1_all, f2_all\n        \n    FROM combined_estimates\n)\n\nSELECT\n    observation_date,\n    \n    -- Core metrics\n    observed_successful_nodes,\n    observed_total_peers, \n    failed_only_peers,\n    \n    -- Population estimates\n    chao1_successful_only,\n    enhanced_total_reachable,\n    estimated_network_size,\n    estimated_additional_reachable,\n    \n    -- Success and coverage rates\n    connection_success_rate_pct,\n    network_discovery_coverage_pct,\n    reachable_discovery_coverage_pct,\n    \n    -- Hidden node estimates\n    chao1_successful_only - observed_successful_nodes AS hidden_successful_nodes,\n    enhanced_total_reachable - observed_successful_nodes AS hidden_reachable_nodes,\n    estimated_network_size - observed_total_peers AS hidden_total_nodes,\n    \n    -- Percentages\n    CASE WHEN chao1_successful_only > 0 THEN\n        round(100.0 * (chao1_successful_only - observed_successful_nodes) / chao1_successful_only, 2)\n    ELSE 0 END AS hidden_successful_pct,\n    \n    CASE WHEN estimated_network_size > 0 THEN\n        round(100.0 * (estimated_network_size - observed_total_peers) / estimated_network_size, 2) \n    ELSE 0 END AS hidden_total_pct,\n    \n    -- Diagnostic information\n    f1_successful AS successful_singletons,\n    f2_successful AS successful_doubletons,\n    f1_all AS all_singletons,\n    f2_all AS all_doubletons,\n    \n    now() AS calculated_at\n\nFROM final_estimates\nORDER BY observation_date DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_energy_monthly": {"database": "dbt", "schema": "dbt", "name": "api_esg_energy_monthly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_energy_monthly.sql", "original_file_path": "models/ESG/marts/api_esg_energy_monthly.sql", "unique_id": "model.gnosis_dbt.api_esg_energy_monthly", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_energy_monthly"], "alias": "api_esg_energy_monthly", "checksum": {"name": "sha256", "checksum": "ca8da8fc8d1aee18ada132a1e4269d5702ba11ba250060076963f72b93392ee4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "energy", "production", "esg", "energy"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "energy"], "description": "Monthly aggregated energy data with total energy in kWh, grouped by month.", "columns": {"date": {"name": "date", "description": "The first day of the month for the energy data, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total energy in kilowatt-hours for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "esg", "energy"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.166241, "relation_name": "`dbt`.`api_esg_energy_monthly`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','energy']\n    )\n}}\n\n\nSELECT toStartOfMonth(date) AS date, SUM(daily_energy_kwh_total) AS value\nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nGROUP BY 1\nORDER BY date", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_energy_monthly.sql", "compiled": true, "compiled_code": "\n\n\nSELECT toStartOfMonth(date) AS date, SUM(daily_energy_kwh_total) AS value\nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nGROUP BY 1\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_carbon_timeseries_bands": {"database": "dbt", "schema": "dbt", "name": "api_esg_carbon_timeseries_bands", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_carbon_timeseries_bands.sql", "original_file_path": "models/ESG/marts/api_esg_carbon_timeseries_bands.sql", "unique_id": "model.gnosis_dbt.api_esg_carbon_timeseries_bands", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_carbon_timeseries_bands"], "alias": "api_esg_carbon_timeseries_bands", "checksum": {"name": "sha256", "checksum": "532a9666ccdefc9aa5f54d298a4438d175560935ea3c49f0d2e30758d79e146a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "carbon_emissions", "production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "carbon_emissions"], "description": "A timeseries model providing daily ESG carbon footprint data with moving averages and month-to-date statistics.", "columns": {"date": {"name": "date", "description": "The date of the record, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Daily mean of CO2 emissions in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lower_95": {"name": "lower_95", "description": "Lower bound of the 95% confidence interval for daily CO2 emissions in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "upper_95": {"name": "upper_95", "description": "Upper bound of the 95% confidence interval for daily CO2 emissions in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lower_90": {"name": "lower_90", "description": "Lower bound of the 90% confidence interval for daily CO2 emissions in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "upper_90": {"name": "upper_90", "description": "Upper bound of the 90% confidence interval for daily CO2 emissions in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_value": {"name": "ma7_value", "description": "7-day moving average of the daily CO2 mean in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_lower_95": {"name": "ma7_lower_95", "description": "7-day moving average of the lower 95% confidence interval in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_upper_95": {"name": "ma7_upper_95", "description": "7-day moving average of the upper 95% confidence interval in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mtd_avg": {"name": "mtd_avg", "description": "Month-to-date average of the daily CO2 mean in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mtd_total": {"name": "mtd_total", "description": "Month-to-date total of the daily CO2 mean in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1367276, "relation_name": "`dbt`.`api_esg_carbon_timeseries_bands`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','carbon_emissions']\n    )\n}}\n\n\nSELECT\n    date,\n    daily_co2_kg_mean AS value,\n    daily_co2_kg_lower_95 AS lower_95,\n    daily_co2_kg_upper_95 AS upper_95,\n    daily_co2_kg_lower_90 AS lower_90,\n    daily_co2_kg_upper_90 AS upper_90,\n    \n    -- Moving averages for smoothing\n    AVG(daily_co2_kg_mean) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_value,\n    AVG(daily_co2_kg_lower_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_95,\n    AVG(daily_co2_kg_upper_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_95,\n    \n    -- Month-to-date statistics\n    AVG(daily_co2_kg_mean) OVER (PARTITION BY toStartOfMonth(date) ORDER BY date) AS mtd_avg,\n    SUM(daily_co2_kg_mean) OVER (PARTITION BY toStartOfMonth(date) ORDER BY date) AS mtd_total\n    \nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_carbon_timeseries_bands.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date,\n    daily_co2_kg_mean AS value,\n    daily_co2_kg_lower_95 AS lower_95,\n    daily_co2_kg_upper_95 AS upper_95,\n    daily_co2_kg_lower_90 AS lower_90,\n    daily_co2_kg_upper_90 AS upper_90,\n    \n    -- Moving averages for smoothing\n    AVG(daily_co2_kg_mean) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_value,\n    AVG(daily_co2_kg_lower_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_95,\n    AVG(daily_co2_kg_upper_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_95,\n    \n    -- Month-to-date statistics\n    AVG(daily_co2_kg_mean) OVER (PARTITION BY toStartOfMonth(date) ORDER BY date) AS mtd_avg,\n    SUM(daily_co2_kg_mean) OVER (PARTITION BY toStartOfMonth(date) ORDER BY date) AS mtd_total\n    \nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_carbon_emissions_daily": {"database": "dbt", "schema": "dbt", "name": "api_esg_carbon_emissions_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_carbon_emissions_daily.sql", "original_file_path": "models/ESG/marts/api_esg_carbon_emissions_daily.sql", "unique_id": "model.gnosis_dbt.api_esg_carbon_emissions_daily", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_carbon_emissions_daily"], "alias": "api_esg_carbon_emissions_daily", "checksum": {"name": "sha256", "checksum": "52e8c30b83873ad248fb118ae353e888bb473f5d94d92a5343a5556f17f48ce7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "carbon_emissions", "production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "carbon_emissions"], "description": "Daily carbon emissions data with 7-day moving averages, derived from ESG footprint sources. Includes date and smoothed metrics for lower and upper bounds at 90% and 95% confidence levels.", "columns": {"date": {"name": "date", "description": "The date of the record, in UTC. Used as the primary temporal reference.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_value": {"name": "ma7_value", "description": "7-day moving average of daily CO2 emissions in kg, smoothed over the past week.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_lower_90": {"name": "ma7_lower_90", "description": "Lower bound of the 90% confidence interval for the 7-day moving average.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_upper_90": {"name": "ma7_upper_90", "description": "Upper bound of the 90% confidence interval for the 7-day moving average.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_lower_95": {"name": "ma7_lower_95", "description": "Lower bound of the 95% confidence interval for the 7-day moving average.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ma7_upper_95": {"name": "ma7_upper_95", "description": "Upper bound of the 95% confidence interval for the 7-day moving average.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1317952, "relation_name": "`dbt`.`api_esg_carbon_emissions_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','carbon_emissions']\n    )\n}}\n\n\nSELECT\n    date,\n    AVG(daily_co2_kg_mean) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_value,\n    AVG(daily_co2_kg_lower_90) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_90,\n    AVG(daily_co2_kg_upper_90) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_90,\n    AVG(daily_co2_kg_lower_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_95,\n    AVG(daily_co2_kg_upper_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_95\nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_carbon_emissions_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date,\n    AVG(daily_co2_kg_mean) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_value,\n    AVG(daily_co2_kg_lower_90) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_90,\n    AVG(daily_co2_kg_upper_90) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_90,\n    AVG(daily_co2_kg_lower_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_lower_95,\n    AVG(daily_co2_kg_upper_95) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS ma7_upper_95\nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_energy_consumption_annualised_latest": {"database": "dbt", "schema": "dbt", "name": "api_esg_energy_consumption_annualised_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_energy_consumption_annualised_latest.sql", "original_file_path": "models/ESG/marts/api_esg_energy_consumption_annualised_latest.sql", "unique_id": "model.gnosis_dbt.api_esg_energy_consumption_annualised_latest", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_energy_consumption_annualised_latest"], "alias": "api_esg_energy_consumption_annualised_latest", "checksum": {"name": "sha256", "checksum": "15f5b0ddd27b90d09e1a59d38a0b4a6f9d1e1222b7861c690c95ccacc2c9a21c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "energy_consumption", "production", "esg", "energy_consumption"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "energy_consumption"], "description": "The latest projected annual energy consumption in MWh for the project, derived from ESG data.", "columns": {"annual_energy_Mwh_projected": {"name": "annual_energy_Mwh_projected", "description": "Projected annual energy consumption in megawatt-hours (MWh) for the latest period.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "esg", "energy_consumption"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1421676, "relation_name": "`dbt`.`api_esg_energy_consumption_annualised_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','energy_consumption']\n    )\n}}\n\n\nSELECT\n    annual_energy_Mwh_projected\nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\nORDER BY date DESC \nLIMIT 1", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_energy_consumption_annualised_latest.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    annual_energy_Mwh_projected\nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\nORDER BY date DESC \nLIMIT 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_estimated_nodes_daily": {"database": "dbt", "schema": "dbt", "name": "api_esg_estimated_nodes_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_estimated_nodes_daily.sql", "original_file_path": "models/ESG/marts/api_esg_estimated_nodes_daily.sql", "unique_id": "model.gnosis_dbt.api_esg_estimated_nodes_daily", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_estimated_nodes_daily"], "alias": "api_esg_estimated_nodes_daily", "checksum": {"name": "sha256", "checksum": "03564732ff2b4a377df4511c42caa5b3c51ba533f91ba3c29ae49eaa3cfcf505"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "estimated_nodes", "production", "esg", "estimated_nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "estimated_nodes"], "description": "Daily estimates of ESG nodes with observed baseline, predicted nodes, and confidence intervals, aggregated by date.", "columns": {"date": {"name": "date", "description": "The date for the daily record, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "baseline_observed_nodes": {"name": "baseline_observed_nodes", "description": "Observed number of nodes in the baseline scenario.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_nodes": {"name": "estimated_nodes", "description": "Estimated total number of nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_lower_95": {"name": "nodes_lower_95", "description": "Lower bound of the 95% confidence interval for estimated nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nodes_upper_95": {"name": "nodes_upper_95", "description": "Upper bound of the 95% confidence interval for estimated nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "esg", "estimated_nodes"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1690493, "relation_name": "`dbt`.`api_esg_estimated_nodes_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','estimated_nodes']\n    )\n}}\n\n\n\nSELECT \n    date\n    ,baseline_observed_nodes\n    ,estimated_nodes\n    ,nodes_lower_95\n    ,nodes_upper_95\nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_estimated_nodes_daily.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    date\n    ,baseline_observed_nodes\n    ,estimated_nodes\n    ,nodes_lower_95\n    ,nodes_upper_95\nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_info_category_daily": {"database": "dbt", "schema": "dbt", "name": "api_esg_info_category_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_info_category_daily.sql", "original_file_path": "models/ESG/marts/api_esg_info_category_daily.sql", "unique_id": "model.gnosis_dbt.api_esg_info_category_daily", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_info_category_daily"], "alias": "api_esg_info_category_daily", "checksum": {"name": "sha256", "checksum": "0c576a46999fe90e2c468d651fde9dd05031aa6e1a32d0957098ed21e8fda4df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "info", "production", "esg", "info"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "info"], "description": "Daily aggregated ESG information categorized by label and category, including CO2 emissions, energy consumption, and node counts for different entities.", "columns": {"date": {"name": "date", "description": "The date of the record, in UTC, representing the day of data aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Entity label categorizing the data, e.g., 'Home Staker', 'Professional Validator'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "The category of ESG data, e.g., 'CO2e (kg)', 'Energy (kWh)', 'Nodes'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the metric, representing emissions, energy, or node count.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "esg", "info"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1751802, "relation_name": "`dbt`.`api_esg_info_category_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','info']\n    )\n}}\n\n\n\n\nSELECT \n    date\n    ,label\n    ,category\n    ,value\nFROM (\n    SELECT date, 'Home Staker' AS label, 'CO2e (kg)' AS category, home_staker_co2_kg_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'CO2e (kg)' AS category, professional_co2_kg_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'CO2e (kg)' AS category, cloud_co2_kg_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'CO2e (kg)' AS category, unknown_co2_kg_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n\n    UNION ALL \n\n    SELECT date, 'Home Staker' AS label, 'Energy (kWh)' AS category, home_staker_energy_kwh_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'Energy (kWh)' AS category, professional_energy_kwh_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'Energy (kWh)' AS category, cloud_energy_kwh_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'Energy (kWh)' AS category, unknown_energy_kwh_daily AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n\n    UNION ALL \n\n    SELECT date, 'Home Staker' AS label, 'Nodes' AS category, CAST(home_staker_nodes AS Float64) AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'Nodes' AS category, CAST(professional_nodes AS Float64) AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'Nodes' AS category, CAST(cloud_nodes AS Float64) AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'Nodes' AS category, CAST(unknown_nodes AS Float64) AS value FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n)\nORDER BY date, label, category", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_info_category_daily.sql", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n    date\n    ,label\n    ,category\n    ,value\nFROM (\n    SELECT date, 'Home Staker' AS label, 'CO2e (kg)' AS category, home_staker_co2_kg_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'CO2e (kg)' AS category, professional_co2_kg_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'CO2e (kg)' AS category, cloud_co2_kg_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'CO2e (kg)' AS category, unknown_co2_kg_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n\n    UNION ALL \n\n    SELECT date, 'Home Staker' AS label, 'Energy (kWh)' AS category, home_staker_energy_kwh_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'Energy (kWh)' AS category, professional_energy_kwh_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'Energy (kWh)' AS category, cloud_energy_kwh_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'Energy (kWh)' AS category, unknown_energy_kwh_daily AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n\n    UNION ALL \n\n    SELECT date, 'Home Staker' AS label, 'Nodes' AS category, CAST(home_staker_nodes AS Float64) AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Professional Validator' AS label, 'Nodes' AS category, CAST(professional_nodes AS Float64) AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Cloud Provider' AS label, 'Nodes' AS category, CAST(cloud_nodes AS Float64) AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT date, 'Unknown' AS label, 'Nodes' AS category, CAST(unknown_nodes AS Float64) AS value FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n)\nORDER BY date, label, category", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_cif_network_vs_countries_daily": {"database": "dbt", "schema": "dbt", "name": "api_esg_cif_network_vs_countries_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_cif_network_vs_countries_daily.sql", "original_file_path": "models/ESG/marts/api_esg_cif_network_vs_countries_daily.sql", "unique_id": "model.gnosis_dbt.api_esg_cif_network_vs_countries_daily", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_cif_network_vs_countries_daily"], "alias": "api_esg_cif_network_vs_countries_daily", "checksum": {"name": "sha256", "checksum": "e8986fb3c51bd29e7ec0a174153b8626c703108854925d251c99976bbf8459a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "cif", "production", "esg", "cif"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "cif"], "description": "Daily carbon intensity values for network and selected countries, including comparison metrics and processed data.", "columns": {"date": {"name": "date", "description": "Date of the measurement in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "entity_code": {"name": "entity_code", "description": "Identifier for the entity; 'GNOSIS' for network, country codes for countries.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carbon_intensity": {"name": "carbon_intensity", "description": "Carbon intensity value in gCO2/kWh, rounded to one decimal place.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "esg", "cif"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1394362, "relation_name": "`dbt`.`api_esg_cif_network_vs_countries_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','cif']\n    )\n}}\n\n\nWITH network_daily_cif AS (\n    -- Get network's daily effective carbon intensity\n    SELECT\n        date,\n        effective_carbon_intensity AS carbon_intensity,\n        'GNOSIS' AS entity_code\n    FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE effective_carbon_intensity IS NOT NULL\n        AND effective_carbon_intensity > 0\n),\n\ncountry_monthly_cif AS (\n    -- Get all monthly country carbon intensities \n    SELECT\n        ci.country_code,\n        ci.carbon_intensity_mean AS carbon_intensity,\n        ci.month_date\n    FROM {{ ref('int_esg_carbon_intensity_ensemble') }} ci\n    WHERE ci.country_code != 'WORLD'\n        AND ci.carbon_intensity_mean IS NOT NULL\n        AND ci.carbon_intensity_mean > 0\n        AND ci.country_code IN (\n            'USA',  -- United States\n            'DEU',  -- Germany  \n            'CHN',  -- China\n            'FRA',  -- France\n            'SWE',  -- Sweden \n            'AUS',  -- Australia\n            'BRA',  -- Brazil\n            'ISL'   -- Iceland\n        )\n),\n\ncountry_timeseries AS (\n    -- Join countries to dates using the correct month's CIF\n    SELECT\n        nd.date,\n        cm.carbon_intensity,\n        cm.country_code AS entity_code\n    FROM network_daily_cif nd\n    JOIN country_monthly_cif cm \n        ON cm.month_date = toStartOfMonth(nd.date)  -- Match date to its month\n),\n\n-- Combine network and country data\ncombined_data AS (\n    SELECT * FROM network_daily_cif\n    UNION ALL\n    SELECT * FROM country_timeseries\n),\n\n-- Add comparison metrics\nwith_comparisons AS (\n    SELECT\n        cd.*,\n        nd.carbon_intensity AS network_cif\n    FROM combined_data cd\n    LEFT JOIN network_daily_cif nd ON cd.date = nd.date\n)\n\nSELECT\n    date,\n    entity_code,\n    round(carbon_intensity, 1) AS carbon_intensity_gco2_kwh\nFROM with_comparisons\nORDER BY date, entity_code, carbon_intensity_gco2_kwh DESC", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "int_esg_carbon_intensity_ensemble", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty", "model.gnosis_dbt.int_esg_carbon_intensity_ensemble"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_cif_network_vs_countries_daily.sql", "compiled": true, "compiled_code": "\n\n\nWITH network_daily_cif AS (\n    -- Get network's daily effective carbon intensity\n    SELECT\n        date,\n        effective_carbon_intensity AS carbon_intensity,\n        'GNOSIS' AS entity_code\n    FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE effective_carbon_intensity IS NOT NULL\n        AND effective_carbon_intensity > 0\n),\n\ncountry_monthly_cif AS (\n    -- Get all monthly country carbon intensities \n    SELECT\n        ci.country_code,\n        ci.carbon_intensity_mean AS carbon_intensity,\n        ci.month_date\n    FROM `dbt`.`int_esg_carbon_intensity_ensemble` ci\n    WHERE ci.country_code != 'WORLD'\n        AND ci.carbon_intensity_mean IS NOT NULL\n        AND ci.carbon_intensity_mean > 0\n        AND ci.country_code IN (\n            'USA',  -- United States\n            'DEU',  -- Germany  \n            'CHN',  -- China\n            'FRA',  -- France\n            'SWE',  -- Sweden \n            'AUS',  -- Australia\n            'BRA',  -- Brazil\n            'ISL'   -- Iceland\n        )\n),\n\ncountry_timeseries AS (\n    -- Join countries to dates using the correct month's CIF\n    SELECT\n        nd.date,\n        cm.carbon_intensity,\n        cm.country_code AS entity_code\n    FROM network_daily_cif nd\n    JOIN country_monthly_cif cm \n        ON cm.month_date = toStartOfMonth(nd.date)  -- Match date to its month\n),\n\n-- Combine network and country data\ncombined_data AS (\n    SELECT * FROM network_daily_cif\n    UNION ALL\n    SELECT * FROM country_timeseries\n),\n\n-- Add comparison metrics\nwith_comparisons AS (\n    SELECT\n        cd.*,\n        nd.carbon_intensity AS network_cif\n    FROM combined_data cd\n    LEFT JOIN network_daily_cif nd ON cd.date = nd.date\n)\n\nSELECT\n    date,\n    entity_code,\n    round(carbon_intensity, 1) AS carbon_intensity_gco2_kwh\nFROM with_comparisons\nORDER BY date, entity_code, carbon_intensity_gco2_kwh DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty": {"database": "dbt", "schema": "dbt", "name": "fct_esg_carbon_footprint_uncertainty", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/fct_esg_carbon_footprint_uncertainty.sql", "original_file_path": "models/ESG/marts/fct_esg_carbon_footprint_uncertainty.sql", "unique_id": "model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty", "fqn": ["gnosis_dbt", "ESG", "marts", "fct_esg_carbon_footprint_uncertainty"], "alias": "fct_esg_carbon_footprint_uncertainty", "checksum": {"name": "sha256", "checksum": "b44523018e667cbad8084cdb17cd1db9c5a1c20738b7435f66ad0384eb305f56"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "carbon_emissions", "production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "esg", "carbon_emissions"], "description": "Business-facing metrics on carbon footprint uncertainty, including energy, emissions, and node population estimates with confidence intervals, comparisons to Chao-1 population estimates, and network efficiency metrics.", "columns": {"date": {"name": "date", "description": "The date of the measurement or aggregation, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_mean": {"name": "daily_co2_kg_mean", "description": "Estimated daily CO2 emissions in kilograms, mean value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_std": {"name": "daily_co2_kg_std", "description": "Standard deviation of daily CO2 emissions in kilograms.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_lower_95": {"name": "daily_co2_kg_lower_95", "description": "Lower bound of 95% confidence interval for daily CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_upper_95": {"name": "daily_co2_kg_upper_95", "description": "Upper bound of 95% confidence interval for daily CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_lower_90": {"name": "daily_co2_kg_lower_90", "description": "Lower bound of 90% confidence interval for daily CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_co2_kg_upper_90": {"name": "daily_co2_kg_upper_90", "description": "Upper bound of 90% confidence interval for daily CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_mean": {"name": "annual_co2_tonnes_mean", "description": "Estimated annual CO2 emissions in metric tonnes.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_std": {"name": "annual_co2_tonnes_std", "description": "Standard deviation of annual CO2 emissions in metric tonnes.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_lower_95": {"name": "annual_co2_tonnes_lower_95", "description": "Lower bound of 95% confidence interval for annual CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_upper_95": {"name": "annual_co2_tonnes_upper_95", "description": "Upper bound of 95% confidence interval for annual CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_lower_90": {"name": "annual_co2_tonnes_lower_90", "description": "Lower bound of 90% confidence interval for annual CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_co2_tonnes_upper_90": {"name": "annual_co2_tonnes_upper_90", "description": "Upper bound of 90% confidence interval for annual CO2 emissions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_mean": {"name": "daily_energy_kwh_mean", "description": "Estimated total daily energy consumption in kilowatt-hours.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_std": {"name": "daily_energy_kwh_std", "description": "Standard deviation of daily energy consumption.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_lower_95": {"name": "daily_energy_kwh_lower_95", "description": "Lower bound of 95% confidence interval for daily energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_upper_95": {"name": "daily_energy_kwh_upper_95", "description": "Upper bound of 95% confidence interval for daily energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_lower_90": {"name": "daily_energy_kwh_lower_90", "description": "Lower bound of 90% confidence interval for daily energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_energy_kwh_upper_90": {"name": "daily_energy_kwh_upper_90", "description": "Upper bound of 90% confidence interval for daily energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_mean": {"name": "annual_energy_mwh_mean", "description": "Estimated annual energy consumption in megawatt-hours.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_std": {"name": "annual_energy_mwh_std", "description": "Standard deviation of annual energy consumption.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_lower_95": {"name": "annual_energy_mwh_lower_95", "description": "Lower bound of 95% confidence interval for annual energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_upper_95": {"name": "annual_energy_mwh_upper_95", "description": "Upper bound of 95% confidence interval for annual energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_lower_90": {"name": "annual_energy_mwh_lower_90", "description": "Lower bound of 90% confidence interval for annual energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "annual_energy_mwh_upper_90": {"name": "annual_energy_mwh_upper_90", "description": "Upper bound of 90% confidence interval for annual energy.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "network_weighted_cif": {"name": "network_weighted_cif", "description": "Network effective carbon intensity in gCO2e per kWh.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "network_cif_std": {"name": "network_cif_std", "description": "Standard deviation of network carbon intensity.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_estimated_nodes": {"name": "total_estimated_nodes", "description": "Total estimated number of nodes in the network.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_nodes_lower_95": {"name": "total_nodes_lower_95", "description": "Lower bound of 95% confidence interval for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_nodes_upper_95": {"name": "total_nodes_upper_95", "description": "Upper bound of 95% confidence interval for total nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_staker_energy_kwh": {"name": "home_staker_energy_kwh", "description": "Total energy consumption for home staker nodes in kWh.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "professional_energy_kwh": {"name": "professional_energy_kwh", "description": "Total energy consumption for professional operator nodes in kWh.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_energy_kwh": {"name": "cloud_energy_kwh", "description": "Total energy consumption for cloud hosted nodes in kWh.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unknown_energy_kwh": {"name": "unknown_energy_kwh", "description": "Total energy consumption for unknown category nodes in kWh.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_staker_co2_kg": {"name": "home_staker_co2_kg", "description": "Total CO2 emissions for home staker nodes in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "professional_co2_kg": {"name": "professional_co2_kg", "description": "Total CO2 emissions for professional operator nodes in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_co2_kg": {"name": "cloud_co2_kg", "description": "Total CO2 emissions for cloud hosted nodes in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unknown_co2_kg": {"name": "unknown_co2_kg", "description": "Total CO2 emissions for unknown category nodes in kg.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "home_staker_nodes": {"name": "home_staker_nodes", "description": "Number of home staker nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "professional_nodes": {"name": "professional_nodes", "description": "Number of professional operator nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_nodes": {"name": "cloud_nodes", "description": "Number of cloud hosted nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unknown_nodes": {"name": "unknown_nodes", "description": "Number of nodes with unknown category.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "active_categories": {"name": "active_categories", "description": "Count of categories with active nodes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_countries_in_category": {"name": "max_countries_in_category", "description": "Maximum number of countries represented within a category.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_observed": {"name": "chao1_observed", "description": "Number of successful nodes observed in Chao-1 estimate.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_estimated": {"name": "chao1_estimated", "description": "Total reachable nodes estimated by Chao-1 method.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_success_rate": {"name": "chao1_success_rate", "description": "Percentage of successful node discovery in Chao-1 estimate.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chao1_coverage": {"name": "chao1_coverage", "description": "Percentage of network coverage in Chao-1 estimate.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "node_estimate_vs_chao1_pct": {"name": "node_estimate_vs_chao1_pct", "description": "Estimated nodes as percentage of Chao-1 estimate.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "applied_scaling_factor": {"name": "applied_scaling_factor", "description": "Scaling factor applied to align estimates with Chao-1.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams_co2_per_node_daily": {"name": "grams_co2_per_node_daily", "description": "CO2 emissions per node in grams for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wh_per_node_daily": {"name": "wh_per_node_daily", "description": "Energy consumption per node in watt-hours for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams_co2_per_node_lower_95": {"name": "grams_co2_per_node_lower_95", "description": "Lower bound of 95% confidence interval for grams CO2 per node.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams_co2_per_node_upper_95": {"name": "grams_co2_per_node_upper_95", "description": "Upper bound of 95% confidence interval for grams CO2 per node.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wh_per_node_lower_95": {"name": "wh_per_node_lower_95", "description": "Lower bound of 95% confidence interval for watt-hours per node.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wh_per_node_upper_95": {"name": "wh_per_node_upper_95", "description": "Upper bound of 95% confidence interval for watt-hours per node.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "unique_key": "date", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.1641295, "relation_name": "`dbt`.`fct_esg_carbon_footprint_uncertainty`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        unique_key='date',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','esg','carbon_emissions']\n    )\n}}\n\nWITH node_country_distribution AS (\n    -- Get node distribution by country and category with their carbon intensities\n    SELECT\n        date,\n        node_category,\n        country_code,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        carbon_intensity_gco2_kwh,\n        daily_energy_kwh_mean,\n        avg_power_watts_per_node,\n        power_std_dev_per_node,\n        daily_co2_kg_mean,\n        daily_co2_kg_std\n    FROM {{ ref('int_esg_dynamic_power_consumption') }}\n    {% if is_incremental() %}\n        WHERE date > (SELECT MAX(date) FROM {{ this }})\n    {% endif %}\n),\n\n-- Calculate network effective CIF from geographic distribution\nnetwork_effective_cif AS (\n    SELECT\n        date,\n        -- Network Effective CIF = \u03a3(nodes_in_country \u00d7 country_CIF) / total_nodes\n        SUM(estimated_total_nodes * carbon_intensity_gco2_kwh) / \n        NULLIF(SUM(estimated_total_nodes), 0) AS network_weighted_cif,\n        \n        -- Weighted standard deviation of network CIF\n        -- Using variance formula: Var = \u03a3(w_i * (x_i - mean)\u00b2) / \u03a3(w_i)\n        -- Then std = sqrt(var)\n        SQRT(\n            SUM(estimated_total_nodes * pow(carbon_intensity_gco2_kwh, 2)) / NULLIF(SUM(estimated_total_nodes), 0) -\n            pow(SUM(estimated_total_nodes * carbon_intensity_gco2_kwh) / NULLIF(SUM(estimated_total_nodes), 0), 2)\n        ) AS network_cif_std\n    FROM node_country_distribution\n    GROUP BY date\n),\n\ndaily_power_data AS (\n    -- Aggregate power consumption across all categories and countries\n    SELECT\n        date,\n        node_category,\n        \n        -- Node counts with uncertainty\n        SUM(estimated_total_nodes) AS category_nodes,\n        SUM(nodes_lower_95) AS category_nodes_lower_95,\n        SUM(nodes_upper_95) AS category_nodes_upper_95,\n        \n        -- Energy totals with uncertainty calculation\n        SUM(daily_energy_kwh_mean) AS category_energy_kwh_mean,\n        \n        -- Energy standard deviation (propagate uncertainty from power and node count)\n        SQRT(SUM(\n            pow(power_std_dev_per_node * estimated_total_nodes * 24 / 1000.0, 2) + \n            pow(avg_power_watts_per_node * (nodes_upper_95 - nodes_lower_95) / 3.92 * 24 / 1000.0, 2)\n        )) AS category_energy_kwh_std,\n        \n        -- Carbon totals\n        SUM(daily_co2_kg_mean) AS category_co2_kg,\n        SQRT(SUM(pow(daily_co2_kg_std, 2))) AS category_co2_kg_std,\n        \n        -- Weighted averages\n        SUM(daily_energy_kwh_mean * estimated_total_nodes) / NULLIF(SUM(estimated_total_nodes), 0) AS weighted_avg_energy_per_node,\n        SUM(daily_co2_kg_mean * estimated_total_nodes) / NULLIF(SUM(estimated_total_nodes), 0) AS weighted_avg_co2_per_node,\n        \n        -- Country count for this category\n        COUNT(DISTINCT country_code) AS countries_represented\n        \n    FROM node_country_distribution\n    {% if is_incremental() %}\n        WHERE date > (SELECT MAX(date) FROM {{ this }})\n    {% endif %}\n    GROUP BY date, node_category\n),\n\nnetwork_totals AS (\n    -- Calculate network-wide totals with full uncertainty propagation\n    SELECT\n        date,\n        \n        -- Total network size with bounds\n        SUM(category_nodes) AS total_estimated_nodes,\n        SUM(category_nodes_lower_95) AS total_nodes_lower_95,\n        SUM(category_nodes_upper_95) AS total_nodes_upper_95,\n        \n        -- Total energy consumption with uncertainty\n        SUM(category_energy_kwh_mean) AS total_energy_kwh_mean,\n        SQRT(SUM(pow(category_energy_kwh_std, 2))) AS total_energy_kwh_std,\n        \n        -- Total emissions with error propagation\n        SUM(category_co2_kg) AS total_co2_kg_mean,\n        SQRT(SUM(pow(category_co2_kg_std, 2))) AS total_co2_kg_std,\n        \n        -- Category breakdown for energy\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_energy_kwh_mean ELSE 0 END) AS home_staker_energy_kwh,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_energy_kwh_mean ELSE 0 END) AS professional_energy_kwh,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_energy_kwh_mean ELSE 0 END) AS cloud_energy_kwh,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_energy_kwh_mean ELSE 0 END) AS unknown_energy_kwh,\n        \n        -- Category breakdown for carbon\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_co2_kg ELSE 0 END) AS home_staker_co2_kg,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_co2_kg ELSE 0 END) AS professional_co2_kg,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_co2_kg ELSE 0 END) AS cloud_co2_kg,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_co2_kg ELSE 0 END) AS unknown_co2_kg,\n        \n        -- Node breakdown\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_nodes ELSE 0 END) AS home_staker_nodes,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_nodes ELSE 0 END) AS professional_nodes,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_nodes ELSE 0 END) AS cloud_nodes,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_nodes ELSE 0 END) AS unknown_nodes,\n        \n        -- Quality metrics\n        COUNT(DISTINCT CASE WHEN category_nodes > 0 THEN node_category END) AS active_categories,\n        MAX(countries_represented) AS max_countries_in_category\n        \n    FROM daily_power_data\n    GROUP BY date\n),\n\n-- Add Chao-1 population estimates for comparison\nchao1_comparison AS (\n    SELECT\n        nt.date AS date,\n        nt.*,\n        necif.network_weighted_cif,\n        necif.network_cif_std,\n        \n        -- Link to Chao-1 estimates\n        c.observed_successful_nodes AS chao1_observed,\n        c.enhanced_total_reachable AS chao1_estimated,\n        c.connection_success_rate_pct AS chao1_success_rate,\n        c.reachable_discovery_coverage_pct AS chao1_coverage,\n        \n        -- Compare our estimates to Chao-1\n        round(100.0 * nt.total_estimated_nodes / NULLIF(c.enhanced_total_reachable, 0), 1) AS node_estimate_vs_chao1_pct,\n        \n        -- Calculate scaling factor applied\n        round(toFloat64(nt.total_estimated_nodes) / NULLIF(c.observed_successful_nodes, 0), 2) AS applied_scaling_factor\n        \n    FROM network_totals nt\n    JOIN network_effective_cif necif ON nt.date = necif.date\n    LEFT JOIN {{ ref('int_esg_node_population_chao1') }} c\n        ON c.observation_date = nt.date\n),\n\nenhanced_statistics AS (\n    SELECT\n        date,\n        \n        -- Node population metrics with bounds\n        total_estimated_nodes,\n        total_nodes_lower_95,\n        total_nodes_upper_95,\n        chao1_observed,\n        chao1_estimated,\n        chao1_success_rate,\n        chao1_coverage,\n        node_estimate_vs_chao1_pct,\n        applied_scaling_factor,\n        \n        -- Network carbon intensity with uncertainty\n        round(network_weighted_cif, 2) AS network_carbon_intensity_gco2_kwh,\n        round(network_cif_std, 2) AS network_carbon_intensity_std,\n        \n        -- Daily energy metrics with full uncertainty bands\n        round(total_energy_kwh_mean, 2) AS daily_energy_kwh_mean,\n        round(total_energy_kwh_std, 2) AS daily_energy_kwh_std,\n        \n        -- Daily energy confidence intervals (95%)\n        round(greatest(0, total_energy_kwh_mean - 1.96 * total_energy_kwh_std), 2) AS daily_energy_kwh_lower_95,\n        round(total_energy_kwh_mean + 1.96 * total_energy_kwh_std, 2) AS daily_energy_kwh_upper_95,\n        \n        -- Daily energy confidence intervals (90%)\n        round(greatest(0, total_energy_kwh_mean - 1.645 * total_energy_kwh_std), 2) AS daily_energy_kwh_lower_90,\n        round(total_energy_kwh_mean + 1.645 * total_energy_kwh_std, 2) AS daily_energy_kwh_upper_90,\n        \n        -- Annual energy projections with uncertainty\n        round(total_energy_kwh_mean * 365 / 1000, 2) AS annual_energy_mwh_mean,\n        round(total_energy_kwh_std * sqrt(365) / 1000, 2) AS annual_energy_mwh_std,\n        \n        -- Annual energy confidence intervals (95%)\n        round(greatest(0, (total_energy_kwh_mean * 365 / 1000) - 1.96 * (total_energy_kwh_std * sqrt(365) / 1000)), 2) AS annual_energy_mwh_lower_95,\n        round((total_energy_kwh_mean * 365 / 1000) + 1.96 * (total_energy_kwh_std * sqrt(365) / 1000), 2) AS annual_energy_mwh_upper_95,\n        \n        -- Annual energy confidence intervals (90%)\n        round(greatest(0, (total_energy_kwh_mean * 365 / 1000) - 1.645 * (total_energy_kwh_std * sqrt(365) / 1000)), 2) AS annual_energy_mwh_lower_90,\n        round((total_energy_kwh_mean * 365 / 1000) + 1.645 * (total_energy_kwh_std * sqrt(365) / 1000), 2) AS annual_energy_mwh_upper_90,\n        \n        -- Carbon emissions (primary metrics)\n        round(total_co2_kg_mean, 2) AS daily_co2_kg_mean,\n        round(total_co2_kg_std, 2) AS daily_co2_kg_std,\n        \n        -- Daily CO2 confidence intervals (95%)\n        round(greatest(0, total_co2_kg_mean - 1.96 * total_co2_kg_std), 2) AS daily_co2_kg_lower_95,\n        round(total_co2_kg_mean + 1.96 * total_co2_kg_std, 2) AS daily_co2_kg_upper_95,\n        \n        -- Daily CO2 confidence intervals (90%)\n        round(greatest(0, total_co2_kg_mean - 1.645 * total_co2_kg_std), 2) AS daily_co2_kg_lower_90,\n        round(total_co2_kg_mean + 1.645 * total_co2_kg_std, 2) AS daily_co2_kg_upper_90,\n        \n        -- Annual CO2 projections\n        round(total_co2_kg_mean * 365 / 1000, 2) AS annual_co2_tonnes_mean,\n        round(total_co2_kg_std * sqrt(365) / 1000, 2) AS annual_co2_tonnes_std,\n        \n        -- Category breakdowns for energy\n        round(home_staker_energy_kwh, 2) AS home_staker_energy_kwh_daily,\n        round(professional_energy_kwh, 2) AS professional_energy_kwh_daily,\n        round(cloud_energy_kwh, 2) AS cloud_energy_kwh_daily,\n        round(unknown_energy_kwh, 2) AS unknown_energy_kwh_daily,\n        \n        -- Category breakdowns for carbon\n        round(home_staker_co2_kg, 2) AS home_staker_co2_kg_daily,\n        round(professional_co2_kg, 2) AS professional_co2_kg_daily,\n        round(cloud_co2_kg, 2) AS cloud_co2_kg_daily,\n        round(unknown_co2_kg, 2) AS unknown_co2_kg_daily,\n        \n        -- Category percentages\n        round(100.0 * home_staker_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS home_staker_pct,\n        round(100.0 * professional_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS professional_pct,\n        round(100.0 * cloud_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS cloud_pct,\n        \n        -- Node distribution\n        home_staker_nodes,\n        professional_nodes,\n        cloud_nodes,\n        unknown_nodes,\n        \n        -- Relative uncertainties\n        round(100.0 * total_energy_kwh_std / NULLIF(total_energy_kwh_mean, 0), 1) AS energy_relative_uncertainty_pct,\n        round(100.0 * total_co2_kg_std / NULLIF(total_co2_kg_mean, 0), 1) AS carbon_relative_uncertainty_pct,\n        \n        -- Quality metrics\n        active_categories,\n        max_countries_in_category AS countries_with_nodes\n        \n    FROM chao1_comparison\n)\n\nSELECT\n    date,\n    \n    -- PRIMARY CARBON FOOTPRINT METRICS WITH BANDS\n    daily_co2_kg_mean,\n    daily_co2_kg_std,\n    daily_co2_kg_lower_95,\n    daily_co2_kg_upper_95,\n    daily_co2_kg_lower_90,\n    daily_co2_kg_upper_90,\n    \n    -- Annual CO2 projections with uncertainty bands\n    annual_co2_tonnes_mean AS annual_co2_tonnes_projected,\n    annual_co2_tonnes_std,\n    round(greatest(0, annual_co2_tonnes_mean - 1.96 * annual_co2_tonnes_std), 2) AS annual_co2_tonnes_lower_95,\n    round(annual_co2_tonnes_mean + 1.96 * annual_co2_tonnes_std, 2) AS annual_co2_tonnes_upper_95,\n    round(greatest(0, annual_co2_tonnes_mean - 1.645 * annual_co2_tonnes_std), 2) AS annual_co2_tonnes_lower_90,\n    round(annual_co2_tonnes_mean + 1.645 * annual_co2_tonnes_std, 2) AS annual_co2_tonnes_upper_90,\n    \n    -- PRIMARY ENERGY METRICS WITH BANDS\n    daily_energy_kwh_mean AS daily_energy_kwh_total,\n    daily_energy_kwh_std,\n    daily_energy_kwh_lower_95,\n    daily_energy_kwh_upper_95,\n    daily_energy_kwh_lower_90,\n    daily_energy_kwh_upper_90,\n    \n    -- Annual energy projections with uncertainty bands\n    annual_energy_mwh_mean AS annual_energy_Mwh_projected,\n    annual_energy_mwh_std,\n    annual_energy_mwh_lower_95,\n    annual_energy_mwh_upper_95,\n    annual_energy_mwh_lower_90,\n    annual_energy_mwh_upper_90,\n    \n    -- NETWORK CARBON INTENSITY WITH UNCERTAINTY\n    network_carbon_intensity_gco2_kwh AS effective_carbon_intensity,\n    network_carbon_intensity_std AS effective_carbon_intensity_std,\n    round(greatest(0, network_carbon_intensity_gco2_kwh - 1.96 * network_carbon_intensity_std), 2) AS effective_carbon_intensity_lower_95,\n    round(network_carbon_intensity_gco2_kwh + 1.96 * network_carbon_intensity_std, 2) AS effective_carbon_intensity_upper_95,\n    \n    -- NODE POPULATION WITH BOUNDS\n    total_estimated_nodes AS estimated_nodes,\n    total_nodes_lower_95 AS nodes_lower_95,\n    total_nodes_upper_95 AS nodes_upper_95,\n    \n    -- Category breakdown for energy (daily)\n    home_staker_energy_kwh_daily,\n    professional_energy_kwh_daily,\n    cloud_energy_kwh_daily,\n    unknown_energy_kwh_daily,\n    \n    -- Category breakdown for emissions (daily)\n    home_staker_co2_kg_daily,\n    professional_co2_kg_daily,\n    cloud_co2_kg_daily,\n    unknown_co2_kg_daily,\n    \n    -- Category percentages\n    home_staker_pct,\n    professional_pct,\n    cloud_pct,\n    \n    -- Node distribution by category\n    home_staker_nodes,\n    professional_nodes,\n    cloud_nodes,\n    unknown_nodes,\n    \n    -- UNCERTAINTY METRICS\n    energy_relative_uncertainty_pct,\n    carbon_relative_uncertainty_pct,\n    \n    -- Quality metrics\n    active_categories AS node_categories_active,\n    countries_with_nodes,\n    \n    -- Comparison with Chao-1 estimates\n    chao1_observed AS baseline_observed_nodes,\n    chao1_estimated AS chao1_total_estimated,\n    node_estimate_vs_chao1_pct,\n    applied_scaling_factor,\n    round(chao1_success_rate, 1) AS network_reachability_pct,\n    round(chao1_coverage, 1) AS discovery_completeness_pct,\n    \n    -- PER-NODE METRICS WITH BOUNDS\n    round(daily_co2_kg_mean / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS grams_co2_per_node_daily,\n    round(daily_energy_kwh_mean / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS wh_per_node_daily,\n    \n    -- Per-node uncertainty bands\n    round(greatest(0, (daily_co2_kg_mean - 1.96 * daily_co2_kg_std) / NULLIF(total_estimated_nodes, 0) * 1000), 1) AS grams_co2_per_node_lower_95,\n    round((daily_co2_kg_mean + 1.96 * daily_co2_kg_std) / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS grams_co2_per_node_upper_95,\n    \n    round(greatest(0, (daily_energy_kwh_mean - 1.96 * daily_energy_kwh_std) / NULLIF(total_estimated_nodes, 0) * 1000), 1) AS wh_per_node_lower_95,\n    round((daily_energy_kwh_mean + 1.96 * daily_energy_kwh_std) / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS wh_per_node_upper_95\n    \nFROM enhanced_statistics\nORDER BY date DESC", "language": "sql", "refs": [{"name": "int_esg_dynamic_power_consumption", "package": null, "version": null}, {"name": "int_esg_node_population_chao1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.int_esg_dynamic_power_consumption", "model.gnosis_dbt.int_esg_node_population_chao1"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/fct_esg_carbon_footprint_uncertainty.sql", "compiled": true, "compiled_code": "\n\nWITH node_country_distribution AS (\n    -- Get node distribution by country and category with their carbon intensities\n    SELECT\n        date,\n        node_category,\n        country_code,\n        estimated_total_nodes,\n        nodes_lower_95,\n        nodes_upper_95,\n        carbon_intensity_gco2_kwh,\n        daily_energy_kwh_mean,\n        avg_power_watts_per_node,\n        power_std_dev_per_node,\n        daily_co2_kg_mean,\n        daily_co2_kg_std\n    FROM `dbt`.`int_esg_dynamic_power_consumption`\n    \n        WHERE date > (SELECT MAX(date) FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`)\n    \n),\n\n-- Calculate network effective CIF from geographic distribution\nnetwork_effective_cif AS (\n    SELECT\n        date,\n        -- Network Effective CIF = \u03a3(nodes_in_country \u00d7 country_CIF) / total_nodes\n        SUM(estimated_total_nodes * carbon_intensity_gco2_kwh) / \n        NULLIF(SUM(estimated_total_nodes), 0) AS network_weighted_cif,\n        \n        -- Weighted standard deviation of network CIF\n        -- Using variance formula: Var = \u03a3(w_i * (x_i - mean)\u00b2) / \u03a3(w_i)\n        -- Then std = sqrt(var)\n        SQRT(\n            SUM(estimated_total_nodes * pow(carbon_intensity_gco2_kwh, 2)) / NULLIF(SUM(estimated_total_nodes), 0) -\n            pow(SUM(estimated_total_nodes * carbon_intensity_gco2_kwh) / NULLIF(SUM(estimated_total_nodes), 0), 2)\n        ) AS network_cif_std\n    FROM node_country_distribution\n    GROUP BY date\n),\n\ndaily_power_data AS (\n    -- Aggregate power consumption across all categories and countries\n    SELECT\n        date,\n        node_category,\n        \n        -- Node counts with uncertainty\n        SUM(estimated_total_nodes) AS category_nodes,\n        SUM(nodes_lower_95) AS category_nodes_lower_95,\n        SUM(nodes_upper_95) AS category_nodes_upper_95,\n        \n        -- Energy totals with uncertainty calculation\n        SUM(daily_energy_kwh_mean) AS category_energy_kwh_mean,\n        \n        -- Energy standard deviation (propagate uncertainty from power and node count)\n        SQRT(SUM(\n            pow(power_std_dev_per_node * estimated_total_nodes * 24 / 1000.0, 2) + \n            pow(avg_power_watts_per_node * (nodes_upper_95 - nodes_lower_95) / 3.92 * 24 / 1000.0, 2)\n        )) AS category_energy_kwh_std,\n        \n        -- Carbon totals\n        SUM(daily_co2_kg_mean) AS category_co2_kg,\n        SQRT(SUM(pow(daily_co2_kg_std, 2))) AS category_co2_kg_std,\n        \n        -- Weighted averages\n        SUM(daily_energy_kwh_mean * estimated_total_nodes) / NULLIF(SUM(estimated_total_nodes), 0) AS weighted_avg_energy_per_node,\n        SUM(daily_co2_kg_mean * estimated_total_nodes) / NULLIF(SUM(estimated_total_nodes), 0) AS weighted_avg_co2_per_node,\n        \n        -- Country count for this category\n        COUNT(DISTINCT country_code) AS countries_represented\n        \n    FROM node_country_distribution\n    \n        WHERE date > (SELECT MAX(date) FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`)\n    \n    GROUP BY date, node_category\n),\n\nnetwork_totals AS (\n    -- Calculate network-wide totals with full uncertainty propagation\n    SELECT\n        date,\n        \n        -- Total network size with bounds\n        SUM(category_nodes) AS total_estimated_nodes,\n        SUM(category_nodes_lower_95) AS total_nodes_lower_95,\n        SUM(category_nodes_upper_95) AS total_nodes_upper_95,\n        \n        -- Total energy consumption with uncertainty\n        SUM(category_energy_kwh_mean) AS total_energy_kwh_mean,\n        SQRT(SUM(pow(category_energy_kwh_std, 2))) AS total_energy_kwh_std,\n        \n        -- Total emissions with error propagation\n        SUM(category_co2_kg) AS total_co2_kg_mean,\n        SQRT(SUM(pow(category_co2_kg_std, 2))) AS total_co2_kg_std,\n        \n        -- Category breakdown for energy\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_energy_kwh_mean ELSE 0 END) AS home_staker_energy_kwh,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_energy_kwh_mean ELSE 0 END) AS professional_energy_kwh,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_energy_kwh_mean ELSE 0 END) AS cloud_energy_kwh,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_energy_kwh_mean ELSE 0 END) AS unknown_energy_kwh,\n        \n        -- Category breakdown for carbon\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_co2_kg ELSE 0 END) AS home_staker_co2_kg,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_co2_kg ELSE 0 END) AS professional_co2_kg,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_co2_kg ELSE 0 END) AS cloud_co2_kg,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_co2_kg ELSE 0 END) AS unknown_co2_kg,\n        \n        -- Node breakdown\n        SUM(CASE WHEN node_category = 'home_staker' THEN category_nodes ELSE 0 END) AS home_staker_nodes,\n        SUM(CASE WHEN node_category = 'professional_operator' THEN category_nodes ELSE 0 END) AS professional_nodes,\n        SUM(CASE WHEN node_category = 'cloud_hosted' THEN category_nodes ELSE 0 END) AS cloud_nodes,\n        SUM(CASE WHEN node_category = 'unknown' THEN category_nodes ELSE 0 END) AS unknown_nodes,\n        \n        -- Quality metrics\n        COUNT(DISTINCT CASE WHEN category_nodes > 0 THEN node_category END) AS active_categories,\n        MAX(countries_represented) AS max_countries_in_category\n        \n    FROM daily_power_data\n    GROUP BY date\n),\n\n-- Add Chao-1 population estimates for comparison\nchao1_comparison AS (\n    SELECT\n        nt.date AS date,\n        nt.*,\n        necif.network_weighted_cif,\n        necif.network_cif_std,\n        \n        -- Link to Chao-1 estimates\n        c.observed_successful_nodes AS chao1_observed,\n        c.enhanced_total_reachable AS chao1_estimated,\n        c.connection_success_rate_pct AS chao1_success_rate,\n        c.reachable_discovery_coverage_pct AS chao1_coverage,\n        \n        -- Compare our estimates to Chao-1\n        round(100.0 * nt.total_estimated_nodes / NULLIF(c.enhanced_total_reachable, 0), 1) AS node_estimate_vs_chao1_pct,\n        \n        -- Calculate scaling factor applied\n        round(toFloat64(nt.total_estimated_nodes) / NULLIF(c.observed_successful_nodes, 0), 2) AS applied_scaling_factor\n        \n    FROM network_totals nt\n    JOIN network_effective_cif necif ON nt.date = necif.date\n    LEFT JOIN `dbt`.`int_esg_node_population_chao1` c\n        ON c.observation_date = nt.date\n),\n\nenhanced_statistics AS (\n    SELECT\n        date,\n        \n        -- Node population metrics with bounds\n        total_estimated_nodes,\n        total_nodes_lower_95,\n        total_nodes_upper_95,\n        chao1_observed,\n        chao1_estimated,\n        chao1_success_rate,\n        chao1_coverage,\n        node_estimate_vs_chao1_pct,\n        applied_scaling_factor,\n        \n        -- Network carbon intensity with uncertainty\n        round(network_weighted_cif, 2) AS network_carbon_intensity_gco2_kwh,\n        round(network_cif_std, 2) AS network_carbon_intensity_std,\n        \n        -- Daily energy metrics with full uncertainty bands\n        round(total_energy_kwh_mean, 2) AS daily_energy_kwh_mean,\n        round(total_energy_kwh_std, 2) AS daily_energy_kwh_std,\n        \n        -- Daily energy confidence intervals (95%)\n        round(greatest(0, total_energy_kwh_mean - 1.96 * total_energy_kwh_std), 2) AS daily_energy_kwh_lower_95,\n        round(total_energy_kwh_mean + 1.96 * total_energy_kwh_std, 2) AS daily_energy_kwh_upper_95,\n        \n        -- Daily energy confidence intervals (90%)\n        round(greatest(0, total_energy_kwh_mean - 1.645 * total_energy_kwh_std), 2) AS daily_energy_kwh_lower_90,\n        round(total_energy_kwh_mean + 1.645 * total_energy_kwh_std, 2) AS daily_energy_kwh_upper_90,\n        \n        -- Annual energy projections with uncertainty\n        round(total_energy_kwh_mean * 365 / 1000, 2) AS annual_energy_mwh_mean,\n        round(total_energy_kwh_std * sqrt(365) / 1000, 2) AS annual_energy_mwh_std,\n        \n        -- Annual energy confidence intervals (95%)\n        round(greatest(0, (total_energy_kwh_mean * 365 / 1000) - 1.96 * (total_energy_kwh_std * sqrt(365) / 1000)), 2) AS annual_energy_mwh_lower_95,\n        round((total_energy_kwh_mean * 365 / 1000) + 1.96 * (total_energy_kwh_std * sqrt(365) / 1000), 2) AS annual_energy_mwh_upper_95,\n        \n        -- Annual energy confidence intervals (90%)\n        round(greatest(0, (total_energy_kwh_mean * 365 / 1000) - 1.645 * (total_energy_kwh_std * sqrt(365) / 1000)), 2) AS annual_energy_mwh_lower_90,\n        round((total_energy_kwh_mean * 365 / 1000) + 1.645 * (total_energy_kwh_std * sqrt(365) / 1000), 2) AS annual_energy_mwh_upper_90,\n        \n        -- Carbon emissions (primary metrics)\n        round(total_co2_kg_mean, 2) AS daily_co2_kg_mean,\n        round(total_co2_kg_std, 2) AS daily_co2_kg_std,\n        \n        -- Daily CO2 confidence intervals (95%)\n        round(greatest(0, total_co2_kg_mean - 1.96 * total_co2_kg_std), 2) AS daily_co2_kg_lower_95,\n        round(total_co2_kg_mean + 1.96 * total_co2_kg_std, 2) AS daily_co2_kg_upper_95,\n        \n        -- Daily CO2 confidence intervals (90%)\n        round(greatest(0, total_co2_kg_mean - 1.645 * total_co2_kg_std), 2) AS daily_co2_kg_lower_90,\n        round(total_co2_kg_mean + 1.645 * total_co2_kg_std, 2) AS daily_co2_kg_upper_90,\n        \n        -- Annual CO2 projections\n        round(total_co2_kg_mean * 365 / 1000, 2) AS annual_co2_tonnes_mean,\n        round(total_co2_kg_std * sqrt(365) / 1000, 2) AS annual_co2_tonnes_std,\n        \n        -- Category breakdowns for energy\n        round(home_staker_energy_kwh, 2) AS home_staker_energy_kwh_daily,\n        round(professional_energy_kwh, 2) AS professional_energy_kwh_daily,\n        round(cloud_energy_kwh, 2) AS cloud_energy_kwh_daily,\n        round(unknown_energy_kwh, 2) AS unknown_energy_kwh_daily,\n        \n        -- Category breakdowns for carbon\n        round(home_staker_co2_kg, 2) AS home_staker_co2_kg_daily,\n        round(professional_co2_kg, 2) AS professional_co2_kg_daily,\n        round(cloud_co2_kg, 2) AS cloud_co2_kg_daily,\n        round(unknown_co2_kg, 2) AS unknown_co2_kg_daily,\n        \n        -- Category percentages\n        round(100.0 * home_staker_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS home_staker_pct,\n        round(100.0 * professional_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS professional_pct,\n        round(100.0 * cloud_co2_kg / NULLIF(total_co2_kg_mean, 0), 1) AS cloud_pct,\n        \n        -- Node distribution\n        home_staker_nodes,\n        professional_nodes,\n        cloud_nodes,\n        unknown_nodes,\n        \n        -- Relative uncertainties\n        round(100.0 * total_energy_kwh_std / NULLIF(total_energy_kwh_mean, 0), 1) AS energy_relative_uncertainty_pct,\n        round(100.0 * total_co2_kg_std / NULLIF(total_co2_kg_mean, 0), 1) AS carbon_relative_uncertainty_pct,\n        \n        -- Quality metrics\n        active_categories,\n        max_countries_in_category AS countries_with_nodes\n        \n    FROM chao1_comparison\n)\n\nSELECT\n    date,\n    \n    -- PRIMARY CARBON FOOTPRINT METRICS WITH BANDS\n    daily_co2_kg_mean,\n    daily_co2_kg_std,\n    daily_co2_kg_lower_95,\n    daily_co2_kg_upper_95,\n    daily_co2_kg_lower_90,\n    daily_co2_kg_upper_90,\n    \n    -- Annual CO2 projections with uncertainty bands\n    annual_co2_tonnes_mean AS annual_co2_tonnes_projected,\n    annual_co2_tonnes_std,\n    round(greatest(0, annual_co2_tonnes_mean - 1.96 * annual_co2_tonnes_std), 2) AS annual_co2_tonnes_lower_95,\n    round(annual_co2_tonnes_mean + 1.96 * annual_co2_tonnes_std, 2) AS annual_co2_tonnes_upper_95,\n    round(greatest(0, annual_co2_tonnes_mean - 1.645 * annual_co2_tonnes_std), 2) AS annual_co2_tonnes_lower_90,\n    round(annual_co2_tonnes_mean + 1.645 * annual_co2_tonnes_std, 2) AS annual_co2_tonnes_upper_90,\n    \n    -- PRIMARY ENERGY METRICS WITH BANDS\n    daily_energy_kwh_mean AS daily_energy_kwh_total,\n    daily_energy_kwh_std,\n    daily_energy_kwh_lower_95,\n    daily_energy_kwh_upper_95,\n    daily_energy_kwh_lower_90,\n    daily_energy_kwh_upper_90,\n    \n    -- Annual energy projections with uncertainty bands\n    annual_energy_mwh_mean AS annual_energy_Mwh_projected,\n    annual_energy_mwh_std,\n    annual_energy_mwh_lower_95,\n    annual_energy_mwh_upper_95,\n    annual_energy_mwh_lower_90,\n    annual_energy_mwh_upper_90,\n    \n    -- NETWORK CARBON INTENSITY WITH UNCERTAINTY\n    network_carbon_intensity_gco2_kwh AS effective_carbon_intensity,\n    network_carbon_intensity_std AS effective_carbon_intensity_std,\n    round(greatest(0, network_carbon_intensity_gco2_kwh - 1.96 * network_carbon_intensity_std), 2) AS effective_carbon_intensity_lower_95,\n    round(network_carbon_intensity_gco2_kwh + 1.96 * network_carbon_intensity_std, 2) AS effective_carbon_intensity_upper_95,\n    \n    -- NODE POPULATION WITH BOUNDS\n    total_estimated_nodes AS estimated_nodes,\n    total_nodes_lower_95 AS nodes_lower_95,\n    total_nodes_upper_95 AS nodes_upper_95,\n    \n    -- Category breakdown for energy (daily)\n    home_staker_energy_kwh_daily,\n    professional_energy_kwh_daily,\n    cloud_energy_kwh_daily,\n    unknown_energy_kwh_daily,\n    \n    -- Category breakdown for emissions (daily)\n    home_staker_co2_kg_daily,\n    professional_co2_kg_daily,\n    cloud_co2_kg_daily,\n    unknown_co2_kg_daily,\n    \n    -- Category percentages\n    home_staker_pct,\n    professional_pct,\n    cloud_pct,\n    \n    -- Node distribution by category\n    home_staker_nodes,\n    professional_nodes,\n    cloud_nodes,\n    unknown_nodes,\n    \n    -- UNCERTAINTY METRICS\n    energy_relative_uncertainty_pct,\n    carbon_relative_uncertainty_pct,\n    \n    -- Quality metrics\n    active_categories AS node_categories_active,\n    countries_with_nodes,\n    \n    -- Comparison with Chao-1 estimates\n    chao1_observed AS baseline_observed_nodes,\n    chao1_estimated AS chao1_total_estimated,\n    node_estimate_vs_chao1_pct,\n    applied_scaling_factor,\n    round(chao1_success_rate, 1) AS network_reachability_pct,\n    round(chao1_coverage, 1) AS discovery_completeness_pct,\n    \n    -- PER-NODE METRICS WITH BOUNDS\n    round(daily_co2_kg_mean / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS grams_co2_per_node_daily,\n    round(daily_energy_kwh_mean / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS wh_per_node_daily,\n    \n    -- Per-node uncertainty bands\n    round(greatest(0, (daily_co2_kg_mean - 1.96 * daily_co2_kg_std) / NULLIF(total_estimated_nodes, 0) * 1000), 1) AS grams_co2_per_node_lower_95,\n    round((daily_co2_kg_mean + 1.96 * daily_co2_kg_std) / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS grams_co2_per_node_upper_95,\n    \n    round(greatest(0, (daily_energy_kwh_mean - 1.96 * daily_energy_kwh_std) / NULLIF(total_estimated_nodes, 0) * 1000), 1) AS wh_per_node_lower_95,\n    round((daily_energy_kwh_mean + 1.96 * daily_energy_kwh_std) / NULLIF(total_estimated_nodes, 0) * 1000, 1) AS wh_per_node_upper_95\n    \nFROM enhanced_statistics\nORDER BY date DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_info_annual_daily": {"database": "dbt", "schema": "dbt", "name": "api_esg_info_annual_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_info_annual_daily.sql", "original_file_path": "models/ESG/marts/api_esg_info_annual_daily.sql", "unique_id": "model.gnosis_dbt.api_esg_info_annual_daily", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_info_annual_daily"], "alias": "api_esg_info_annual_daily", "checksum": {"name": "sha256", "checksum": "289c4ae44c7efe33ffa9def4b067d6ffd83474c142c46c0727f873c93d012497"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "annual", "production", "esg", "annual"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "annual"], "description": "A daily aggregated view of ESG metrics including energy and CO2e projections, combining data from carbon footprint uncertainty sources with date and label identifiers.", "columns": {"date": {"name": "date", "description": "The date of the ESG measurement, stored as a timestamp.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "The metric label, e.g., 'Energy (MWh)' or 'CO2e (tonnes)'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mean_val": {"name": "mean_val", "description": "The projected annual mean value of the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lower_95": {"name": "lower_95", "description": "The lower bound of the 95% confidence interval for the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "upper_95": {"name": "upper_95", "description": "The upper bound of the 95% confidence interval for the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lower_90": {"name": "lower_90", "description": "The lower bound of the 90% confidence interval for the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "upper_90": {"name": "upper_90", "description": "The upper bound of the 90% confidence interval for the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "esg", "annual"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1723273, "relation_name": "`dbt`.`api_esg_info_annual_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg', 'annual']\n    )\n}}\n\nSELECT \n    date\n    ,label\n    ,mean_val\n    ,lower_95\n    ,upper_95\n    ,lower_90\n    ,upper_90\nFROM (\n    SELECT \n        date\n        ,'Energy (MWh)' AS label\n        ,annual_energy_Mwh_projected AS mean_val\n        ,annual_energy_mwh_lower_95 AS lower_95\n        ,annual_energy_mwh_upper_95 AS upper_95\n        ,annual_energy_mwh_lower_90 AS lower_90\n        ,annual_energy_mwh_upper_90 AS upper_90\n    FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT \n        date\n        ,'CO2e (tonnes)' AS label\n        ,annual_co2_tonnes_projected AS mean_val\n        ,annual_co2_tonnes_lower_95 AS lower_95\n        ,annual_co2_tonnes_upper_95 AS upper_95\n        ,annual_co2_tonnes_lower_90 AS lower_90\n        ,annual_co2_tonnes_upper_90 AS upper_90\n    FROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n)\nORDER BY date, label", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}, {"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_info_annual_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,label\n    ,mean_val\n    ,lower_95\n    ,upper_95\n    ,lower_90\n    ,upper_90\nFROM (\n    SELECT \n        date\n        ,'Energy (MWh)' AS label\n        ,annual_energy_Mwh_projected AS mean_val\n        ,annual_energy_mwh_lower_95 AS lower_95\n        ,annual_energy_mwh_upper_95 AS upper_95\n        ,annual_energy_mwh_lower_90 AS lower_90\n        ,annual_energy_mwh_upper_90 AS upper_90\n    FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n    UNION ALL\n    SELECT \n        date\n        ,'CO2e (tonnes)' AS label\n        ,annual_co2_tonnes_projected AS mean_val\n        ,annual_co2_tonnes_lower_95 AS lower_95\n        ,annual_co2_tonnes_upper_95 AS upper_95\n        ,annual_co2_tonnes_lower_90 AS lower_90\n        ,annual_co2_tonnes_upper_90 AS upper_90\n    FROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\n    WHERE toStartOfMonth(date) < toStartOfMonth(today())\n)\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_esg_carbon_emissions_annualised_latest": {"database": "dbt", "schema": "dbt", "name": "api_esg_carbon_emissions_annualised_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "ESG/marts/api_esg_carbon_emissions_annualised_latest.sql", "original_file_path": "models/ESG/marts/api_esg_carbon_emissions_annualised_latest.sql", "unique_id": "model.gnosis_dbt.api_esg_carbon_emissions_annualised_latest", "fqn": ["gnosis_dbt", "ESG", "marts", "api_esg_carbon_emissions_annualised_latest"], "alias": "api_esg_carbon_emissions_annualised_latest", "checksum": {"name": "sha256", "checksum": "291cfe3fdcfa6198aace1fed45e8b457cab85cb108c0109148c57885e07b4996"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "esg", "carbon_emissions", "production", "esg", "carbon_emissions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "esg", "carbon_emissions"], "description": "The latest annualized projected CO2 emissions in tonnes, filtered to include only data before the current month.", "columns": {"annual_co2_tonnes_projected": {"name": "annual_co2_tonnes_projected", "description": "Projected annual CO2 emissions in tonnes for the latest available period.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/ESG/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "esg", "carbon_emissions"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.1279106, "relation_name": "`dbt`.`api_esg_carbon_emissions_annualised_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','esg','carbon_emissions']\n    )\n}}\n\nSELECT\n    annual_co2_tonnes_projected\nFROM {{ ref('fct_esg_carbon_footprint_uncertainty') }}\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date DESC \nLIMIT 1", "language": "sql", "refs": [{"name": "fct_esg_carbon_footprint_uncertainty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"]}, "compiled_path": "target/compiled/gnosis_dbt/models/ESG/marts/api_esg_carbon_emissions_annualised_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    annual_co2_tonnes_projected\nFROM `dbt`.`fct_esg_carbon_footprint_uncertainty`\nWHERE toStartOfMonth(date) < toStartOfMonth(today())\nORDER BY date DESC \nLIMIT 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__validators": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__validators", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__validators.sql", "original_file_path": "models/consensus/staging/stg_consensus__validators.sql", "unique_id": "model.gnosis_dbt.stg_consensus__validators", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__validators"], "alias": "stg_consensus__validators", "checksum": {"name": "sha256", "checksum": "1eeefbd88c368f221e3072b623fcf13cf648ed7a0ed5c66642c63831eebd21a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators"], "description": "A staging model containing validator data with status, balances, and key info for consensus operations.", "columns": {"slot": {"name": "slot", "description": "Slot number representing the consensus epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "Unique index of the validator within the validator registry.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "Validator's balance in Gwei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Current status of the validator (e.g., active, pending, exited).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pubkey": {"name": "pubkey", "description": "Validator's public key.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_credentials": {"name": "withdrawal_credentials", "description": "Credentials used for withdrawal.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_balance": {"name": "effective_balance", "description": "Effective balance in Gwei used for consensus weight.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slashed": {"name": "slashed", "description": "Indicator if the validator has been slashed (1) or not (0).", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "activation_eligibility_epoch": {"name": "activation_eligibility_epoch", "description": "Epoch when the validator became eligible for activation.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "activation_epoch": {"name": "activation_epoch", "description": "Epoch when the validator was activated.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exit_epoch": {"name": "exit_epoch", "description": "Epoch when the validator exited.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawable_epoch": {"name": "withdrawable_epoch", "description": "Epoch when the validator's funds become withdrawable.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonically increasing version number for data freshness tracking.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "tags": ["production", "consensus", "validators"]}, "created_at": 1760535477.3602965, "relation_name": "`dbt`.`stg_consensus__validators`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators\"]\n    )\n}}\n\nSELECT\n    slot,\n    validator_index,\n    balance,\n    status,\n    pubkey,\n    withdrawal_credentials,\n    effective_balance,\n    slashed,\n    activation_eligibility_epoch,\n    activation_epoch,\n    exit_epoch,\n    withdrawable_epoch,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'validators') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "validators"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__validators.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    slot,\n    validator_index,\n    balance,\n    status,\n    pubkey,\n    withdrawal_credentials,\n    effective_balance,\n    slashed,\n    activation_eligibility_epoch,\n    activation_epoch,\n    exit_epoch,\n    withdrawable_epoch,\n    slot_timestamp\nFROM \n    `consensus`.`validators` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__rewards": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__rewards", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__rewards.sql", "original_file_path": "models/consensus/staging/stg_consensus__rewards.sql", "unique_id": "model.gnosis_dbt.stg_consensus__rewards", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__rewards"], "alias": "stg_consensus__rewards", "checksum": {"name": "sha256", "checksum": "103e343cc13dcb8822b7f0ddbc470d3a28597136a70c29b0d9abf0324f9f2abb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "rewards", "production", "consensus", "rewards"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "rewards"], "description": "A staging model for consensus rewards data, capturing per-slot reward breakdowns and related metrics.", "columns": {"slot": {"name": "slot", "description": "Slot number indicating the epoch period.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_index": {"name": "proposer_index", "description": "Index of the validator proposing in this slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total": {"name": "total", "description": "Total rewards accumulated in wei for the proposer in this slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestations": {"name": "attestations", "description": "Number of attestations included in this slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_aggregate": {"name": "sync_aggregate", "description": "Rewards from sync committee attestations in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_slashings": {"name": "proposer_slashings", "description": "Count of proposer slashings in this slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attester_slashings": {"name": "attester_slashings", "description": "Count of attester slashings in this slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonically increasing version for data ingestion.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "rewards"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.3527915, "relation_name": "`dbt`.`stg_consensus__rewards`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"rewards\"]\n    )\n}}\n\nSELECT\n    slot\n    proposer_index,\n    total,\n    attestations,\n    sync_aggregate,\n    proposer_slashings,\n    attester_slashings,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'rewards') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "rewards"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.rewards"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__rewards.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    slot\n    proposer_index,\n    total,\n    attestations,\n    sync_aggregate,\n    proposer_slashings,\n    attester_slashings,\n    slot_timestamp\nFROM \n    `consensus`.`rewards` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__execution_requests": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__execution_requests", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__execution_requests.sql", "original_file_path": "models/consensus/staging/stg_consensus__execution_requests.sql", "unique_id": "model.gnosis_dbt.stg_consensus__execution_requests", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__execution_requests"], "alias": "stg_consensus__execution_requests", "checksum": {"name": "sha256", "checksum": "d06bb69082d4423b97e4795198c215e8561665e9e89014696a59a5a3e2064d22"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "execution_requests", "production", "consensus", "execution_requests"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "execution_requests"], "description": "This table contains counts of execution requests (deposits, withdrawals, consolidations) per slot, serving as a staging layer for consensus-related execution request data.", "columns": {"slot": {"name": "slot", "description": "Slot number.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload": {"name": "payload", "description": "Type of execution request (e.g., deposit, withdrawal, consolidation).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposits_count": {"name": "deposits_count", "description": "Number of deposit requests in this slot.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_count": {"name": "withdrawals_count", "description": "Number of withdrawal requests in this slot.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "consolidations_count": {"name": "consolidations_count", "description": "Number of consolidation requests in this slot.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Ingestion version for tracking data updates.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "execution_requests"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.3502827, "relation_name": "`dbt`.`stg_consensus__execution_requests`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"execution_requests\"]\n    )\n}}\n\nSELECT\n    slot,\n    payload,\n    deposits_count,\n    withdrawals_count,\n    consolidations_count,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'execution_requests') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "execution_requests"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.execution_requests"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__execution_requests.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    slot,\n    payload,\n    deposits_count,\n    withdrawals_count,\n    consolidations_count,\n    slot_timestamp\nFROM \n    `consensus`.`execution_requests` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__withdrawals": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__withdrawals", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__withdrawals.sql", "original_file_path": "models/consensus/staging/stg_consensus__withdrawals.sql", "unique_id": "model.gnosis_dbt.stg_consensus__withdrawals", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__withdrawals"], "alias": "stg_consensus__withdrawals", "checksum": {"name": "sha256", "checksum": "0eb47fabf2dc6b00f71d98a4d8abf023db1080e7791685017b37499dfa177961"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "withdrawals", "production", "consensus", "withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "withdrawals"], "description": "This staging model consolidates withdrawal data from the consensus layer, providing a business-facing view of withdrawal events with key attributes.", "columns": {"slot": {"name": "slot", "description": "Slot number indicating the position in the chain.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Block number containing the withdrawal.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the withdrawal.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_index": {"name": "withdrawal_index", "description": "Index of the withdrawal within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "Index of the validator associated with the withdrawal.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Address receiving the withdrawal.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount withdrawn in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "withdrawals"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.362747, "relation_name": "`dbt`.`stg_consensus__withdrawals`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"withdrawals\"]\n    )\n}}\n\nSELECT\n    slot,\n    block_number,\n    block_hash,\n    withdrawal_index,\n    validator_index,\n    address,\n    amount,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'withdrawals') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "withdrawals"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.withdrawals"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__withdrawals.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    slot,\n    block_number,\n    block_hash,\n    withdrawal_index,\n    validator_index,\n    address,\n    amount,\n    slot_timestamp\nFROM \n    `consensus`.`withdrawals` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__specs": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__specs", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__specs.sql", "original_file_path": "models/consensus/staging/stg_consensus__specs.sql", "unique_id": "model.gnosis_dbt.stg_consensus__specs", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__specs"], "alias": "stg_consensus__specs", "checksum": {"name": "sha256", "checksum": "979b1f527e831743ed5a56ba742fc3df55c41c892cc328d79eaf1f26ba6f75d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "specs", "production", "consensus", "specs"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "specs"], "description": "A staging model capturing consensus specifications parameters and related data for analysis and validation.", "columns": {"parameter_value": {"name": "parameter_value", "description": "The value of the consensus parameter.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parameter_name": {"name": "parameter_name", "description": "The name identifier of the consensus parameter.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "specs"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.354787, "relation_name": "`dbt`.`stg_consensus__specs`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"specs\"]\n    )\n}}\n\nSELECT\n    parameter_name,\n    parameter_value,\nFROM \n    {{ source('consensus', 'specs') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "specs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.specs"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__specs.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    parameter_name,\n    parameter_value,\nFROM \n    `consensus`.`specs` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__attestations": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__attestations", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__attestations.sql", "original_file_path": "models/consensus/staging/stg_consensus__attestations.sql", "unique_id": "model.gnosis_dbt.stg_consensus__attestations", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__attestations"], "alias": "stg_consensus__attestations", "checksum": {"name": "sha256", "checksum": "e7ca4dd2bb451d7aa12a95039e3b04a896aecf20d063d8a0ee0c9eb582354233"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "attestations", "production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "attestations"], "description": "Business-facing table containing processed attestation data, including slot, index, committee, and cryptographic signatures, for consensus analysis.", "columns": {"slot": {"name": "slot", "description": "Enclosing block slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestation_index": {"name": "attestation_index", "description": "Index within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "aggregation_bits": {"name": "aggregation_bits", "description": "Aggregation bitfield.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "BLS signature.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestation_slot": {"name": "attestation_slot", "description": "Attested slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "committee_index": {"name": "committee_index", "description": "Committee index.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "beacon_block_root": {"name": "beacon_block_root", "description": "Beacon block root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_epoch": {"name": "source_epoch", "description": "Source epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_root": {"name": "source_root", "description": "Source root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_epoch": {"name": "target_epoch", "description": "Target epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_root": {"name": "target_root", "description": "Target root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp derived from slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.3404078, "relation_name": "`dbt`.`stg_consensus__attestations`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"attestations\"]\n    )\n}}\n\nSELECT\n   slot,\n    attestation_index,\n    aggregation_bits,\n    signature,\n    attestation_slot,\n    committee_index,\n    beacon_block_root,\n    source_epoch,\n    source_root,\n    target_epoch,\n    target_root,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'attestations') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "attestations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.attestations"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__attestations.sql", "compiled": true, "compiled_code": "\n\nSELECT\n   slot,\n    attestation_index,\n    aggregation_bits,\n    signature,\n    attestation_slot,\n    committee_index,\n    beacon_block_root,\n    source_epoch,\n    source_root,\n    target_epoch,\n    target_root,\n    slot_timestamp\nFROM \n    `consensus`.`attestations` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__blocks": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__blocks", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__blocks.sql", "original_file_path": "models/consensus/staging/stg_consensus__blocks.sql", "unique_id": "model.gnosis_dbt.stg_consensus__blocks", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__blocks"], "alias": "stg_consensus__blocks", "checksum": {"name": "sha256", "checksum": "c0abda327305c2f88266cfade0a6cde52440283338b12b95f4a3aea0399d466b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blocks", "production", "consensus", "blocks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "blocks"], "description": "This staging model processes and consolidates beacon chain block data, including execution payloads, attestations, slashing events, and related metadata for analysis and reporting.", "columns": {"slot": {"name": "slot", "description": "Slot number indicating the position in the chain.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_index": {"name": "proposer_index", "description": "Index of the validator proposing the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_root": {"name": "parent_root", "description": "Parent block root hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "State root hash after the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "Block signature for validation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Fork version label for this block (e.g., bellatrix, capella).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "randao_reveal": {"name": "randao_reveal", "description": "RANDAO reveal used for randomness.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "graffiti": {"name": "graffiti", "description": "Graffiti field included in the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_deposit_root": {"name": "eth1_deposit_root", "description": "Root hash of Eth1 deposits.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_deposit_count": {"name": "eth1_deposit_count", "description": "Count of Eth1 deposits included.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_block_hash": {"name": "eth1_block_hash", "description": "Eth1 block hash associated with deposits.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_aggregate_participation": {"name": "sync_aggregate_participation", "description": "Number of participants in the sync committee.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_count": {"name": "withdrawals_count", "description": "Number of withdrawals in the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_kzg_commitments_count": {"name": "blob_kzg_commitments_count", "description": "Count of blob KZG commitments (Deneb+).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_requests_count": {"name": "execution_requests_count", "description": "Count of execution requests in the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp derived from the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "blocks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.3455243, "relation_name": "`dbt`.`stg_consensus__blocks`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"blocks\"]\n    )\n}}\n\nSELECT\n   slot,\n    proposer_index,\n    parent_root,\n    state_root,\n    signature,\n    version,\n    randao_reveal,\n    graffiti,\n    eth1_deposit_root,\n    eth1_deposit_count,\n    eth1_block_hash,\n    sync_aggregate_participation,\n    withdrawals_count,\n    blob_kzg_commitments_count,\n    execution_requests_count,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'blocks') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "blocks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__blocks.sql", "compiled": true, "compiled_code": "\n\nSELECT\n   slot,\n    proposer_index,\n    parent_root,\n    state_root,\n    signature,\n    version,\n    randao_reveal,\n    graffiti,\n    eth1_deposit_root,\n    eth1_deposit_count,\n    eth1_block_hash,\n    sync_aggregate_participation,\n    withdrawals_count,\n    blob_kzg_commitments_count,\n    execution_requests_count,\n    slot_timestamp\nFROM \n    `consensus`.`blocks` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__time_helpers": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__time_helpers", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__time_helpers.sql", "original_file_path": "models/consensus/staging/stg_consensus__time_helpers.sql", "unique_id": "model.gnosis_dbt.stg_consensus__time_helpers", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__time_helpers"], "alias": "stg_consensus__time_helpers", "checksum": {"name": "sha256", "checksum": "d36012d94231efc6523afbdb4b256e225cfad546eb1e3ddeb34de40ce234339a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "time_helpers", "production", "consensus", "time_helpers"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "time_helpers"], "description": "Helper table for converting slots to timestamps, including genesis time, seconds per slot, and slots per epoch.", "columns": {"genesis_time_unix": {"name": "genesis_time_unix", "description": "Unix timestamp of the genesis block start time.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "seconds_per_slot": {"name": "seconds_per_slot", "description": "Number of seconds in each slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slots_per_epoch": {"name": "slots_per_epoch", "description": "Number of slots in each epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "time_helpers"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.356812, "relation_name": "`dbt`.`stg_consensus__time_helpers`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"time_helpers\"]\n    )\n}}\n\nSELECT\n    genesis_time_unix,\n    seconds_per_slot,\n    slots_per_epoch\nFROM \n    {{ source('consensus', 'time_helpers') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "time_helpers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.time_helpers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__time_helpers.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    genesis_time_unix,\n    seconds_per_slot,\n    slots_per_epoch\nFROM \n    `consensus`.`time_helpers` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__deposits": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__deposits", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__deposits.sql", "original_file_path": "models/consensus/staging/stg_consensus__deposits.sql", "unique_id": "model.gnosis_dbt.stg_consensus__deposits", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__deposits"], "alias": "stg_consensus__deposits", "checksum": {"name": "sha256", "checksum": "79a4e62e17e0ddf4d8751c98b16220cb61da5453d3b8d2f6ad334e0381376486"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "deposits", "production", "consensus", "deposits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "deposits"], "description": "This table contains processed deposit data from the consensus layer, including deposit pubkeys, withdrawal credentials, amounts, signatures, proofs, and associated slot timestamps, used for analysis of validator deposits and chain state.", "columns": {"pubkey": {"name": "pubkey", "description": "Validator public key in hexadecimal string format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_credentials": {"name": "withdrawal_credentials", "description": "Withdrawal credentials hash, used to identify withdrawal address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposit_index": {"name": "deposit_index", "description": "Sequential index of the deposit within the deposit tree.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot": {"name": "slot", "description": "Slot number when the deposit was processed.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Deposit amount in Gwei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "Deposit signature for validation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proof": {"name": "proof", "description": "Array of Merkle proof elements for deposit inclusion.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the deposit slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonically increasing version number for data ingestion.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "deposits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.347934, "relation_name": "`dbt`.`stg_consensus__deposits`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"deposits\"]\n    )\n}}\n\nSELECT\n   slot,\n    deposit_index,\n    pubkey,\n    withdrawal_credentials,\n    amount,\n    signature,\n    proof,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'deposits') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "deposits"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.deposits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__deposits.sql", "compiled": true, "compiled_code": "\n\nSELECT\n   slot,\n    deposit_index,\n    pubkey,\n    withdrawal_credentials,\n    amount,\n    signature,\n    proof,\n    slot_timestamp\nFROM \n    `consensus`.`deposits` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_consensus__blob_commitments": {"database": "dbt", "schema": "dbt", "name": "stg_consensus__blob_commitments", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/staging/stg_consensus__blob_commitments.sql", "original_file_path": "models/consensus/staging/stg_consensus__blob_commitments.sql", "unique_id": "model.gnosis_dbt.stg_consensus__blob_commitments", "fqn": ["gnosis_dbt", "consensus", "staging", "stg_consensus__blob_commitments"], "alias": "stg_consensus__blob_commitments", "checksum": {"name": "sha256", "checksum": "220ab78ec013cc78e1aa82726d302b20056f8cc0ed989d5587ab9afd5ed320d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blob_commitments"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "blob_commitments"], "description": "A staging model capturing KZG blob commitments per slot, including commitment data and timestamps.", "columns": {"slot": {"name": "slot", "description": "Slot number in the beacon chain.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "commitment_index": {"name": "commitment_index", "description": "Index of the commitment within the slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "commitment": {"name": "commitment", "description": "KZG commitment string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp corresponding to the slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonically increasing version for data ingestion.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "tags": ["production", "consensus", "blob_commitments"]}, "created_at": 1760535477.3425777, "relation_name": "`dbt`.`stg_consensus__blob_commitments`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"blob_commitments\"]\n    )\n}}\n\nSELECT\n   slot,\n    commitment_index,\n    commitment,\n    slot_timestamp\nFROM \n    {{ source('consensus', 'blob_commitments') }} FINAL", "language": "sql", "refs": [], "sources": [["consensus", "blob_commitments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.consensus.blob_commitments"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/staging/stg_consensus__blob_commitments.sql", "compiled": true, "compiled_code": "\n\nSELECT\n   slot,\n    commitment_index,\n    commitment,\n    slot_timestamp\nFROM \n    `consensus`.`blob_commitments` FINAL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_validators_balances_dist_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_validators_balances_dist_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_validators_balances_dist_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_validators_balances_dist_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_dist_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_validators_balances_dist_daily"], "alias": "int_consensus_validators_balances_dist_daily", "checksum": {"name": "sha256", "checksum": "ff788b99278d3756c3458e8afa43b3f1d170f9345f243fdbeeaacd1cff949b98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_balances", "production", "consensus", "validators_balances"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "validators_balances"], "description": "Daily distribution of validator balances based on quantiles from the consensus layer, aggregated per day.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day (UTC) for the distribution.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "50th percentile (median) of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of validator balances for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "validators_balances"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.367826, "relation_name": "`dbt`.`int_consensus_validators_balances_dist_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"validators_balances\"]\n    ) \n}}\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM {{ ref('stg_consensus__validators') }}\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\n    GROUP BY date\n)", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_validators_balances_dist_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_dist_daily`\n    )\n  \n\n    GROUP BY date\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_validators_apy_dist": {"database": "dbt", "schema": "dbt", "name": "int_consensus_validators_apy_dist", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_validators_apy_dist.sql", "original_file_path": "models/consensus/intermediate/int_consensus_validators_apy_dist.sql", "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_dist", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_validators_apy_dist"], "alias": "int_consensus_validators_apy_dist", "checksum": {"name": "sha256", "checksum": "df1ffbc6e8f8b8b72d1306c7e79f83577e0bf9f19e8bb2d566c6e6e7c1f40567"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_apy", "production", "consensus", "validators_apy"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "validators_apy"], "description": "This model calculates the distribution of annual percentage yields (APY) for consensus validators, aggregated monthly, based on their rate of return derived from balance changes, deposits, withdrawals, and related metrics.", "columns": {"date": {"name": "date", "description": "The start date of the month for which the APY distribution is calculated.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median (50th percentile) of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of the validator APY distribution for the month.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "validators_apy"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.397434, "relation_name": "`dbt`.`int_consensus_validators_apy_dist`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"validators_apy\"]\n    )\n}}\n\nWITH\n\n/* 1) Daily per-validator balance snapshot (already 1 row/day) */\ndaily_validator_balances AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        pubkey,\n        validator_index,\n        balance\n    FROM {{ ref('stg_consensus__validators') }}\n    WHERE \n        balance > 0\n        AND\n        toStartOfDay(slot_timestamp) >= DATE '2023-01-01'\n        AND\n        toStartOfDay(slot_timestamp) < DATE '2023-02-01'\n),\n\n/* 2) True previous-day balance per validator using a window function */\nvalidator_with_prev AS (\n    SELECT\n        date,\n        pubkey,\n        validator_index,\n        balance,\n        -- default value = current balance on first day\n        lagInFrame(balance, 1, balance) OVER (\n            PARTITION BY pubkey, validator_index\n            ORDER BY date\n        ) AS prev_balance\n    FROM daily_validator_balances\n),\n\n/* 3) Get date range to filter other tables - materialize this first */\ndate_range AS (\n    SELECT \n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM validator_with_prev\n),\n\n/* 4) Per-day deposits - direct pubkey and amount columns */\ndeposits AS (\n    SELECT\n        toStartOfDay(d.slot_timestamp) AS dep_date,\n        d.pubkey AS dep_pubkey,\n        sum(d.amount) AS dep_amount\n    FROM {{ ref('stg_consensus__deposits') }} d\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(d.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(d.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(d.slot_timestamp), d.pubkey\n),\n\n/* 5) Deposit requests - use JSON extraction with explicit date range */\ndeposit_requests AS (\n    SELECT\n        toStartOfDay(dr_table.slot_timestamp) AS dr_date,\n        toString(JSONExtractString(deposit, 'pubkey')) AS dr_pubkey,\n        sum(toUInt64(JSONExtractString(deposit, 'amount'))) AS dep_req_amount\n    FROM {{ ref('stg_consensus__execution_requests') }} dr_table\n    ARRAY JOIN JSONExtractArrayRaw(dr_table.payload, 'deposits') AS deposit\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(dr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(dr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(dr_table.slot_timestamp), toString(JSONExtractString(deposit, 'pubkey'))\n),\n\n/* 6) Withdrawals - uses validator_index, not pubkey */\nwithdrawals AS (\n    SELECT\n        toStartOfDay(w.slot_timestamp) AS w_date,\n        w.validator_index AS w_validator_index,\n        sum(w.amount) AS wdr_amount\n    FROM {{ ref('stg_consensus__withdrawals') }} w\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(w.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(w.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(w.slot_timestamp), w.validator_index\n),\n\n/* 7) Withdrawal requests - use JSON extraction with explicit date range */\nwithdrawal_requests AS (\n    SELECT\n        toStartOfDay(wr_table.slot_timestamp) AS wr_date,\n        toString(JSONExtractString(withdrawals, 'validator_pubkey')) AS wr_pubkey,\n        sum(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS wdr_req_amount\n    FROM {{ ref('stg_consensus__execution_requests') }} wr_table\n    ARRAY JOIN JSONExtractArrayRaw(wr_table.payload, 'withdrawals') AS withdrawals\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(wr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(wr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(wr_table.slot_timestamp), toString(JSONExtractString(withdrawals, 'validator_pubkey'))\n),\n\n/* 8) Per-validator daily net change excluding external flows */\nvalidator_rates AS (\n    SELECT\n        v.date,\n        v.pubkey,\n        v.validator_index,\n        v.prev_balance,\n        v.balance,\n        (v.balance - v.prev_balance) AS raw_diff,\n\n        coalesce(d.dep_amount, 0) AS deposits_amt,\n        coalesce(dr.dep_req_amount, 0) AS deposit_req_amt,\n        coalesce(w.wdr_amount, 0) AS withdrawals_amt,\n        coalesce(wr.wdr_req_amount, 0) AS withdrawal_req_amt,\n\n        /* Adjust for external flows (requests set to 0 unless you want them) */\n        (\n            (v.balance - v.prev_balance)\n            - coalesce(d.dep_amount, 0)   -- deposits increase balance -> subtract to isolate rewards\n            + coalesce(w.wdr_amount, 0)   -- withdrawals decrease balance -> add back\n            - coalesce(dr.dep_req_amount, 0)\n            + coalesce(wr.wdr_req_amount, 0)\n        ) AS adjusted_diff,\n\n        /* Daily rate per validator; guard against division by zero. */\n        CASE \n            WHEN v.prev_balance > 0 \n            THEN toFloat64(adjusted_diff) / toFloat64(v.prev_balance)\n            ELSE toFloat64(0)\n        END AS rate\n    FROM validator_with_prev v\n    LEFT JOIN deposits d ON d.dep_date = v.date AND d.dep_pubkey = v.pubkey\n    LEFT JOIN deposit_requests dr ON dr.dr_date = v.date AND dr.dr_pubkey = v.pubkey\n    LEFT JOIN withdrawals w ON w.w_date = v.date AND w.w_validator_index = v.validator_index\n    LEFT JOIN withdrawal_requests wr ON wr.wr_date = v.date AND wr.wr_pubkey = v.pubkey\n    WHERE v.prev_balance > 0  -- Only consider validators with positive previous balance\n        AND v.date > DATE '2023-01-01'\n)\n\n\nSELECT\n    date,\n    ROUND(q_apy[1],2) AS q05,\n    ROUND(q_apy[2],2) AS q10,\n    ROUND(q_apy[3],2) AS q25,\n    ROUND(q_apy[4],2) AS q50,\n    ROUND(q_apy[5],2) AS q75,\n    ROUND(q_apy[6],2) AS q90,\n    ROUND(q_apy[7],2) AS q95 \nFROM (\n    SELECT\n        toStartOfMonth(date) AS date\n        ,quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )((power(1 + rate, 365) - 1) * 100) AS q_apy\n    FROM validator_rates\n    GROUP BY 1\n)", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}, {"name": "stg_consensus__deposits", "package": null, "version": null}, {"name": "stg_consensus__execution_requests", "package": null, "version": null}, {"name": "stg_consensus__withdrawals", "package": null, "version": null}, {"name": "stg_consensus__execution_requests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_consensus__validators", "model.gnosis_dbt.stg_consensus__deposits", "model.gnosis_dbt.stg_consensus__execution_requests", "model.gnosis_dbt.stg_consensus__withdrawals"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_validators_apy_dist.sql", "compiled": true, "compiled_code": "\n\nWITH\n\n/* 1) Daily per-validator balance snapshot (already 1 row/day) */\ndaily_validator_balances AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        pubkey,\n        validator_index,\n        balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        balance > 0\n        AND\n        toStartOfDay(slot_timestamp) >= DATE '2023-01-01'\n        AND\n        toStartOfDay(slot_timestamp) < DATE '2023-02-01'\n),\n\n/* 2) True previous-day balance per validator using a window function */\nvalidator_with_prev AS (\n    SELECT\n        date,\n        pubkey,\n        validator_index,\n        balance,\n        -- default value = current balance on first day\n        lagInFrame(balance, 1, balance) OVER (\n            PARTITION BY pubkey, validator_index\n            ORDER BY date\n        ) AS prev_balance\n    FROM daily_validator_balances\n),\n\n/* 3) Get date range to filter other tables - materialize this first */\ndate_range AS (\n    SELECT \n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM validator_with_prev\n),\n\n/* 4) Per-day deposits - direct pubkey and amount columns */\ndeposits AS (\n    SELECT\n        toStartOfDay(d.slot_timestamp) AS dep_date,\n        d.pubkey AS dep_pubkey,\n        sum(d.amount) AS dep_amount\n    FROM `dbt`.`stg_consensus__deposits` d\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(d.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(d.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(d.slot_timestamp), d.pubkey\n),\n\n/* 5) Deposit requests - use JSON extraction with explicit date range */\ndeposit_requests AS (\n    SELECT\n        toStartOfDay(dr_table.slot_timestamp) AS dr_date,\n        toString(JSONExtractString(deposit, 'pubkey')) AS dr_pubkey,\n        sum(toUInt64(JSONExtractString(deposit, 'amount'))) AS dep_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` dr_table\n    ARRAY JOIN JSONExtractArrayRaw(dr_table.payload, 'deposits') AS deposit\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(dr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(dr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(dr_table.slot_timestamp), toString(JSONExtractString(deposit, 'pubkey'))\n),\n\n/* 6) Withdrawals - uses validator_index, not pubkey */\nwithdrawals AS (\n    SELECT\n        toStartOfDay(w.slot_timestamp) AS w_date,\n        w.validator_index AS w_validator_index,\n        sum(w.amount) AS wdr_amount\n    FROM `dbt`.`stg_consensus__withdrawals` w\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(w.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(w.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(w.slot_timestamp), w.validator_index\n),\n\n/* 7) Withdrawal requests - use JSON extraction with explicit date range */\nwithdrawal_requests AS (\n    SELECT\n        toStartOfDay(wr_table.slot_timestamp) AS wr_date,\n        toString(JSONExtractString(withdrawals, 'validator_pubkey')) AS wr_pubkey,\n        sum(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS wdr_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` wr_table\n    ARRAY JOIN JSONExtractArrayRaw(wr_table.payload, 'withdrawals') AS withdrawals\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(wr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(wr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(wr_table.slot_timestamp), toString(JSONExtractString(withdrawals, 'validator_pubkey'))\n),\n\n/* 8) Per-validator daily net change excluding external flows */\nvalidator_rates AS (\n    SELECT\n        v.date,\n        v.pubkey,\n        v.validator_index,\n        v.prev_balance,\n        v.balance,\n        (v.balance - v.prev_balance) AS raw_diff,\n\n        coalesce(d.dep_amount, 0) AS deposits_amt,\n        coalesce(dr.dep_req_amount, 0) AS deposit_req_amt,\n        coalesce(w.wdr_amount, 0) AS withdrawals_amt,\n        coalesce(wr.wdr_req_amount, 0) AS withdrawal_req_amt,\n\n        /* Adjust for external flows (requests set to 0 unless you want them) */\n        (\n            (v.balance - v.prev_balance)\n            - coalesce(d.dep_amount, 0)   -- deposits increase balance -> subtract to isolate rewards\n            + coalesce(w.wdr_amount, 0)   -- withdrawals decrease balance -> add back\n            - coalesce(dr.dep_req_amount, 0)\n            + coalesce(wr.wdr_req_amount, 0)\n        ) AS adjusted_diff,\n\n        /* Daily rate per validator; guard against division by zero. */\n        CASE \n            WHEN v.prev_balance > 0 \n            THEN toFloat64(adjusted_diff) / toFloat64(v.prev_balance)\n            ELSE toFloat64(0)\n        END AS rate\n    FROM validator_with_prev v\n    LEFT JOIN deposits d ON d.dep_date = v.date AND d.dep_pubkey = v.pubkey\n    LEFT JOIN deposit_requests dr ON dr.dr_date = v.date AND dr.dr_pubkey = v.pubkey\n    LEFT JOIN withdrawals w ON w.w_date = v.date AND w.w_validator_index = v.validator_index\n    LEFT JOIN withdrawal_requests wr ON wr.wr_date = v.date AND wr.wr_pubkey = v.pubkey\n    WHERE v.prev_balance > 0  -- Only consider validators with positive previous balance\n        AND v.date > DATE '2023-01-01'\n)\n\n\nSELECT\n    date,\n    ROUND(q_apy[1],2) AS q05,\n    ROUND(q_apy[2],2) AS q10,\n    ROUND(q_apy[3],2) AS q25,\n    ROUND(q_apy[4],2) AS q50,\n    ROUND(q_apy[5],2) AS q75,\n    ROUND(q_apy[6],2) AS q90,\n    ROUND(q_apy[7],2) AS q95 \nFROM (\n    SELECT\n        toStartOfMonth(date) AS date\n        ,quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )((power(1 + rate, 365) - 1) * 100) AS q_apy\n    FROM validator_rates\n    GROUP BY 1\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_graffiti_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_graffiti_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_graffiti_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_graffiti_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_graffiti_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_graffiti_daily"], "alias": "int_consensus_graffiti_daily", "checksum": {"name": "sha256", "checksum": "b011d1bad8e0ef7f16457444e54b03b6d5776fca53e0d3e53aa45710aecbb21b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "graffiti", "production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, graffiti)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, graffiti)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "graffiti"], "description": "Aggregated daily counts of graffiti labels with associated metadata, including detected brands, clients, and labels, for consensus layer analysis.", "columns": {"date": {"name": "date", "description": "Date of the aggregated data, truncated to day.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "graffiti": {"name": "graffiti", "description": "Original graffiti string from the block, in hex format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Final label assigned based on priority: brand, EL+CL combo, EL, CL, 'None', or 'Other'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences for the given graffiti label on that date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "brands_found": {"name": "brands_found", "description": "Array of detected brand keys present in graffiti.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "el_label": {"name": "el_label", "description": "Detected Ethereum client label if any.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cl_label": {"name": "cl_label", "description": "Detected consensus client label if any.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, graffiti)", "unique_key": "(date, graffiti)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3893528, "relation_name": "`dbt`.`int_consensus_graffiti_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, graffiti)',\n        unique_key='(date, graffiti)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"graffiti\"]\n    )\n}}\n\nWITH\n    -- Canonical lists\n    ['nethermind','erigon','geth','besu','reth'] AS el_keys,\n    ['Nethermind','Erigon','Geth','Besu','Reth'] AS el_names,\n    ['lighthouse','teku','prysm','lodestar','nimbus'] AS cl_keys,\n    ['Lighthouse','Teku','Prysm','Lodestar','Nimbus'] AS cl_names,\n\n    -- Platform/hosting brands \n    ['dappnode','avado','allnodes','twinstake','stakewise','gateway','kleros',\n     'filoozom','kpk-validators','hopr','digitalconsultantsllc',\n     'synthex'] AS brand_keys,\n    ['DappNode','Avado','Allnodes','Twinstake','StakeWise','gateway.fm','kleros.io',\n     'filoozom.eth','kpk-validators','HOPR','DigitalConsultantsLLC.xyz',\n     'Synthex'] AS brand_names,\n\n\nfinal AS (\n    SELECT\n        date\n        ,graffiti\n        ,cnt\n        -- Lowercased text to search in\n        ,lowerUTF8(graffiti) AS g\n\n        -- Detect any brand first (highest precedence)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, brand_keys) AS brands_found\n        ,if(length(brands_found) > 0,\n            arrayElement(brand_names, indexOf(brand_keys, brands_found[1])),\n            null) AS brand_label\n\n        -- Detect EL/CL clients (order-insensitive, separator-agnostic)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, el_keys) AS el_found\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, cl_keys) AS cl_found\n\n        -- Pick the first match per side by priority order above\n        ,if(length(el_found) > 0,\n            arrayElement(el_names, indexOf(el_keys, el_found[1])),\n            null) AS el_label\n\n        ,if(length(cl_found) > 0,\n            arrayElement(cl_names, indexOf(cl_keys, cl_found[1])),\n            null) AS cl_label\n\n        -- Final label priority:\n        -- 1) Brand/platform if any\n        -- 2) EL+CL combo if both found\n        -- 3) Single client if only one side found\n        -- 4) Other\n        ,coalesce(\n            brand_label,\n            if(el_label IS NOT NULL AND cl_label IS NOT NULL, concat(el_label, '+', cl_label), null),\n            el_label,\n            cl_label,\n            if(graffiti = 'None', graffiti, null),\n            'Other'\n        ) AS label\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date\n            ,IF(graffiti='0x0000000000000000000000000000000000000000000000000000000000000000', \n                'None', \n                unhex(right(graffiti,-2))\n            ) AS graffiti\n            ,COUNT(*) AS cnt\n        FROM {{ ref('stg_consensus__blocks') }}\n        WHERE\n            slot_timestamp < today()\n            {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\n        GROUP BY 1, 2\n    )\n)\n\nSELECT\n    date\n    ,graffiti\n    ,label\n    ,cnt\nFROM final", "language": "sql", "refs": [{"name": "stg_consensus__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_graffiti_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n    -- Canonical lists\n    ['nethermind','erigon','geth','besu','reth'] AS el_keys,\n    ['Nethermind','Erigon','Geth','Besu','Reth'] AS el_names,\n    ['lighthouse','teku','prysm','lodestar','nimbus'] AS cl_keys,\n    ['Lighthouse','Teku','Prysm','Lodestar','Nimbus'] AS cl_names,\n\n    -- Platform/hosting brands \n    ['dappnode','avado','allnodes','twinstake','stakewise','gateway','kleros',\n     'filoozom','kpk-validators','hopr','digitalconsultantsllc',\n     'synthex'] AS brand_keys,\n    ['DappNode','Avado','Allnodes','Twinstake','StakeWise','gateway.fm','kleros.io',\n     'filoozom.eth','kpk-validators','HOPR','DigitalConsultantsLLC.xyz',\n     'Synthex'] AS brand_names,\n\n\nfinal AS (\n    SELECT\n        date\n        ,graffiti\n        ,cnt\n        -- Lowercased text to search in\n        ,lowerUTF8(graffiti) AS g\n\n        -- Detect any brand first (highest precedence)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, brand_keys) AS brands_found\n        ,if(length(brands_found) > 0,\n            arrayElement(brand_names, indexOf(brand_keys, brands_found[1])),\n            null) AS brand_label\n\n        -- Detect EL/CL clients (order-insensitive, separator-agnostic)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, el_keys) AS el_found\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, cl_keys) AS cl_found\n\n        -- Pick the first match per side by priority order above\n        ,if(length(el_found) > 0,\n            arrayElement(el_names, indexOf(el_keys, el_found[1])),\n            null) AS el_label\n\n        ,if(length(cl_found) > 0,\n            arrayElement(cl_names, indexOf(cl_keys, cl_found[1])),\n            null) AS cl_label\n\n        -- Final label priority:\n        -- 1) Brand/platform if any\n        -- 2) EL+CL combo if both found\n        -- 3) Single client if only one side found\n        -- 4) Other\n        ,coalesce(\n            brand_label,\n            if(el_label IS NOT NULL AND cl_label IS NOT NULL, concat(el_label, '+', cl_label), null),\n            el_label,\n            cl_label,\n            if(graffiti = 'None', graffiti, null),\n            'Other'\n        ) AS label\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date\n            ,IF(graffiti='0x0000000000000000000000000000000000000000000000000000000000000000', \n                'None', \n                unhex(right(graffiti,-2))\n            ) AS graffiti\n            ,COUNT(*) AS cnt\n        FROM `dbt`.`stg_consensus__blocks`\n        WHERE\n            slot_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_graffiti_daily`\n    )\n  \n\n        GROUP BY 1, 2\n    )\n)\n\nSELECT\n    date\n    ,graffiti\n    ,label\n    ,cnt\nFROM final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_validators_balances_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_validators_balances_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_validators_balances_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_validators_balances_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_validators_balances_daily"], "alias": "int_consensus_validators_balances_daily", "checksum": {"name": "sha256", "checksum": "040c91deda9693b90fb42aec396c21e3ca86f1ba15dc5845f2f7f65f3d96b2d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_balances", "production", "consensus", "validators_balances"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "validators_balances"], "description": "Daily aggregated balances and effective balances of consensus validators, derived from slot-based data, for business insights.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the balance aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "Sum of validator balances in Gwei (wei / 10^9).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_balance": {"name": "effective_balance", "description": "Sum of validator effective balances in Gwei (wei / 10^9).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "validators_balances"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3996065, "relation_name": "`dbt`.`int_consensus_validators_balances_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"validators_balances\"]\n    ) \n}}\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(balance/POWER(10,9)) AS balance\n    ,SUM(effective_balance/POWER(10,9)) AS effective_balance\nFROM {{ ref('stg_consensus__validators') }}\nWHERE \n    slot_timestamp < today()\n    {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\nGROUP BY date", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_validators_balances_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(balance/POWER(10,9)) AS balance\n    ,SUM(effective_balance/POWER(10,9)) AS effective_balance\nFROM `dbt`.`stg_consensus__validators`\nWHERE \n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_daily`\n    )\n  \n\nGROUP BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_validators_apy_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_validators_apy_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_validators_apy_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_validators_apy_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_validators_apy_daily"], "alias": "int_consensus_validators_apy_daily", "checksum": {"name": "sha256", "checksum": "8fc2b89c3a3b00123d64d9ffe0908aeaa9de736795e3de47e43e9b7c93fc048c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_apy", "production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "validators_apy"], "description": "Daily aggregated data on validator balances, deposits, withdrawals, and APY calculations for consensus validators.", "columns": {"date": {"name": "date", "description": "The date representing the day of the record, truncated from slot timestamp.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "Total validator balance in wei as of the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance_diff": {"name": "balance_diff", "description": "Difference in total validator balance compared to previous day.", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposited_amount": {"name": "deposited_amount", "description": "Total amount deposited on the date in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawaled_amount": {"name": "withdrawaled_amount", "description": "Total amount withdrawn on the date in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposited_amount_request": {"name": "deposited_amount_request", "description": "Sum of deposit request amounts in wei for the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawaled_amount_request": {"name": "withdrawaled_amount_request", "description": "Sum of withdrawal request amounts in wei for the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eff_balance_diff": {"name": "eff_balance_diff", "description": "Effective balance change considering deposits and withdrawals.", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "Rate of change of balance relative to previous balance.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy": {"name": "apy", "description": "Annual Percentage Yield calculated from rate, expressed as a percentage.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3950903, "relation_name": "`dbt`.`int_consensus_validators_apy_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"validators_apy\"]\n    ) \n}}\n\nWITH\n\ndeposists AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount) AS amount\n    FROM {{ ref('stg_consensus__deposits') }}\n    WHERE \n        slot_timestamp < toDate('2025-04-30')\n        {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=true) }}\n    GROUP BY 1\n\n    UNION ALL \n\n    SELECT \n        date\n        ,SUM(amount) AS amount\n    FROM {{ ref('int_GBCDeposit_deposists_daily') }}\n    WHERE \n        date >= toDate('2025-04-30')\n        {{ apply_monthly_incremental_filter(source_field='date',destination_field='date',add_and=true) }}\n    GROUP BY 1\n),\n\ndeposists_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(deposit, 'amount'))) AS amount\n    FROM {{ ref('stg_consensus__execution_requests') }}\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'deposits') AS deposit\n    {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=false) }}\n    GROUP BY 1\n),\n\n\nwithdrawals AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date \n        ,SUM(amount) AS amount\n    FROM {{ ref('stg_consensus__withdrawals') }}\n    {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=false) }}\n    GROUP BY 1\n),\n\nwithdrawals_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS amount\n    FROM {{ ref('stg_consensus__execution_requests') }}\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'withdrawals') AS withdrawals\n    {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=false) }}\n    GROUP BY 1\n),\n\nvalidators AS (\n    SELECT\n        date,\n        balance,\n        lagInFrame(balance, 1, balance) OVER (\n            ORDER BY date\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n        ) AS prev_balance,\n        balance - prev_balance AS balance_diff\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date,\n            SUM(balance) AS balance\n        FROM {{ ref('stg_consensus__validators') }}\n        {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=false) }}\n        GROUP BY 1\n    )\n)\n\nSELECT \n    t1.date AS date\n    ,t1.balance AS balance\n    ,t1.balance_diff AS balance_diff_original\n    ,COALESCE(t2.amount,0)  AS deposited_amount\n    ,COALESCE(t3.amount,0)  AS withdrawaled_amount\n    ,COALESCE(t4.amount,0)  AS deposited_amount_request\n    ,COALESCE(t5.amount,0)  AS withdrawaled_amount_request\n    ,t1.balance_diff - COALESCE(t2.amount,0) - COALESCE(t4.amount,0) + COALESCE(t3.amount,0) + COALESCE(t5.amount,0) AS eff_balance_diff\n    ,eff_balance_diff/t1.prev_balance AS rate\n    ,ROUND((POWER((1+rate),365) - 1) * 100,2) AS apy\nFROM validators t1\nLEFT JOIN \n    deposists t2\n    ON t2.date = t1.date\nLEFT JOIN \n    withdrawals t3\n    ON t3.date = t1.date\nLEFT JOIN \n    deposists_requests t4\n    ON t4.date = t1.date\nLEFT JOIN \n    withdrawals_requests t5\n    ON t5.date = t1.date", "language": "sql", "refs": [{"name": "stg_consensus__deposits", "package": null, "version": null}, {"name": "int_GBCDeposit_deposists_daily", "package": null, "version": null}, {"name": "stg_consensus__execution_requests", "package": null, "version": null}, {"name": "stg_consensus__withdrawals", "package": null, "version": null}, {"name": "stg_consensus__execution_requests", "package": null, "version": null}, {"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__deposits", "model.gnosis_dbt.int_GBCDeposit_deposists_daily", "model.gnosis_dbt.stg_consensus__execution_requests", "model.gnosis_dbt.stg_consensus__withdrawals", "model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_validators_apy_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\ndeposists AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__deposits`\n    WHERE \n        slot_timestamp < toDate('2025-04-30')\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n\n    UNION ALL \n\n    SELECT \n        date\n        ,SUM(amount) AS amount\n    FROM `dbt`.`int_GBCDeposit_deposists_daily`\n    WHERE \n        date >= toDate('2025-04-30')\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(date)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ndeposists_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(deposit, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'deposits') AS deposit\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n\nwithdrawals AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date \n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nwithdrawals_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'withdrawals') AS withdrawals\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nvalidators AS (\n    SELECT\n        date,\n        balance,\n        lagInFrame(balance, 1, balance) OVER (\n            ORDER BY date\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n        ) AS prev_balance,\n        balance - prev_balance AS balance_diff\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date,\n            SUM(balance) AS balance\n        FROM `dbt`.`stg_consensus__validators`\n        \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT \n    t1.date AS date\n    ,t1.balance AS balance\n    ,t1.balance_diff AS balance_diff_original\n    ,COALESCE(t2.amount,0)  AS deposited_amount\n    ,COALESCE(t3.amount,0)  AS withdrawaled_amount\n    ,COALESCE(t4.amount,0)  AS deposited_amount_request\n    ,COALESCE(t5.amount,0)  AS withdrawaled_amount_request\n    ,t1.balance_diff - COALESCE(t2.amount,0) - COALESCE(t4.amount,0) + COALESCE(t3.amount,0) + COALESCE(t5.amount,0) AS eff_balance_diff\n    ,eff_balance_diff/t1.prev_balance AS rate\n    ,ROUND((POWER((1+rate),365) - 1) * 100,2) AS apy\nFROM validators t1\nLEFT JOIN \n    deposists t2\n    ON t2.date = t1.date\nLEFT JOIN \n    withdrawals t3\n    ON t3.date = t1.date\nLEFT JOIN \n    deposists_requests t4\n    ON t4.date = t1.date\nLEFT JOIN \n    withdrawals_requests t5\n    ON t5.date = t1.date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_attestations_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_attestations_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_attestations_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_attestations_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_attestations_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_attestations_daily"], "alias": "int_consensus_attestations_daily", "checksum": {"name": "sha256", "checksum": "2a853d1ee0ec5a46427321e93d791b2a98b36f6f7d6a1a318777ea3db7e9e440"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "attestations", "production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, inclusion_delay)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, inclusion_delay)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "attestations"], "description": "Daily aggregated count of consensus attestations, grouped by date and inclusion delay.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for which attestations are aggregated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inclusion_delay": {"name": "inclusion_delay", "description": "Difference in slots between the attestation slot and the attestation inclusion slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of attestations for the given date and inclusion delay.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, inclusion_delay)", "unique_key": "(date, inclusion_delay)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3730836, "relation_name": "`dbt`.`int_consensus_attestations_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, inclusion_delay)',\n        unique_key='(date, inclusion_delay)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"attestations\"]\n    )\n}}\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,slot - attestation_slot AS inclusion_delay\n    ,COUNT(*) AS cnt\nFROM {{ ref('stg_consensus__attestations') }}\nWHERE\n    slot_timestamp < today()\n    {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\nGROUP BY 1, 2", "language": "sql", "refs": [{"name": "stg_consensus__attestations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__attestations"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_attestations_daily.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,slot - attestation_slot AS inclusion_delay\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__attestations`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_attestations_daily`\n    )\n  \n\nGROUP BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_credentials_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_credentials_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_credentials_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_credentials_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_credentials_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_credentials_daily"], "alias": "int_consensus_credentials_daily", "checksum": {"name": "sha256", "checksum": "059fc4d340a500f90309cf27a867a1a6fb60c88a9e87f3d9ef463f52491974eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "credentials", "production", "consensus", "credentials"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date,credentials_type)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date,credentials_type)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "credentials"], "description": "Daily count of consensus credentials grouped by type, derived from validator data.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day (UTC) for the aggregated data.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credentials_type": {"name": "credentials_type", "description": "First four bytes of withdrawal credentials indicating credential type.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of validator credentials of the specified type for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "credentials"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date,credentials_type)", "unique_key": "(date,credentials_type)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3805437, "relation_name": "`dbt`.`int_consensus_credentials_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date,credentials_type)',\n        unique_key='(date,credentials_type)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"credentials\"]\n    ) \n}}\n\n\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,leftUTF8(withdrawal_credentials, 4) AS credentials_type\n    ,COUNT(*) AS cnt\nFROM {{ ref('stg_consensus__validators') }}\n{{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and=false) }}\nGROUP BY 1, 2", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_credentials_daily.sql", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,leftUTF8(withdrawal_credentials, 4) AS credentials_type\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\n\n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_credentials_daily`\n    )\n  \n\nGROUP BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_blocks_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_blocks_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_blocks_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_blocks_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_blocks_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_blocks_daily"], "alias": "int_consensus_blocks_daily", "checksum": {"name": "sha256", "checksum": "273152ac3eb9d85c49e02ca9d9259c9e58559094d7ed52d51566dd89f875a423"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blocks", "production", "consensus", "blocks"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "blocks"], "description": "Daily aggregation of consensus layer blocks with computed metrics such as blocks produced and missed.", "columns": {"date": {"name": "date", "description": "The day for which the metrics are aggregated, in UTC.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blocks_produced": {"name": "blocks_produced", "description": "Number of blocks produced on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blocks_missed": {"name": "blocks_missed", "description": "Number of blocks missed on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "blocks"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3778768, "relation_name": "`dbt`.`int_consensus_blocks_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"blocks\"]\n    )\n}}\n\nWITH\n\ntime_helpers AS (\n    SELECT\n        genesis_time_unix,\n        seconds_per_slot\n    FROM \n        {{ ref('stg_consensus__time_helpers') }}\n)\n\nSELECT\n    date\n    ,cnt AS blocks_produced\n    ,CASE\n        WHEN toStartOfDay(toDateTime(genesis_time_unix)) = date \n            THEN CAST((86400 - toUnixTimestamp(toDateTime(genesis_time_unix)) % 86400) / seconds_per_slot - cnt AS UInt64)\n        ELSE CAST(86400 / seconds_per_slot - cnt AS UInt64)\n    END AS blocks_missed\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,COUNT(*) AS cnt\n    FROM {{ ref('stg_consensus__blocks') }}\n    WHERE\n        slot_timestamp < today()\n        {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\n    GROUP BY 1\n) t1\nCROSS JOIN time_helpers t2", "language": "sql", "refs": [{"name": "stg_consensus__time_helpers", "package": null, "version": null}, {"name": "stg_consensus__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__time_helpers", "model.gnosis_dbt.stg_consensus__blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_blocks_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\ntime_helpers AS (\n    SELECT\n        genesis_time_unix,\n        seconds_per_slot\n    FROM \n        `dbt`.`stg_consensus__time_helpers`\n)\n\nSELECT\n    date\n    ,cnt AS blocks_produced\n    ,CASE\n        WHEN toStartOfDay(toDateTime(genesis_time_unix)) = date \n            THEN CAST((86400 - toUnixTimestamp(toDateTime(genesis_time_unix)) % 86400) / seconds_per_slot - cnt AS UInt64)\n        ELSE CAST(86400 / seconds_per_slot - cnt AS UInt64)\n    END AS blocks_missed\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_consensus__blocks`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blocks_daily`\n    )\n  \n\n    GROUP BY 1\n) t1\nCROSS JOIN time_helpers t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_blob_commitments_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_blob_commitments_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_blob_commitments_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_blob_commitments_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_blob_commitments_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_blob_commitments_daily"], "alias": "int_consensus_blob_commitments_daily", "checksum": {"name": "sha256", "checksum": "d3128868716512dce12162003b9a618f2e04ee01c00d69808765bd88eb206370"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blob_commitments", "production", "consensus", "blob_commitments"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "blob_commitments"], "description": "Daily aggregated data of consensus blob commitments, including commitment counts and timestamps.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the commitment data.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Total number of blob commitments recorded on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "blob_commitments"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.375051, "relation_name": "`dbt`.`int_consensus_blob_commitments_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"blob_commitments\"]\n    )\n}}\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM {{ ref('stg_consensus__blob_commitments') }}\nWHERE\n    slot_timestamp < today()\n    {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\nGROUP BY 1", "language": "sql", "refs": [{"name": "stg_consensus__blob_commitments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__blob_commitments"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_blob_commitments_daily.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__blob_commitments`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blob_commitments_daily`\n    )\n  \n\nGROUP BY 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_validators_status_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_validators_status_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_validators_status_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_validators_status_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_validators_status_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_validators_status_daily"], "alias": "int_consensus_validators_status_daily", "checksum": {"name": "sha256", "checksum": "d9a4c8956d8fe8b2230cf3eeeae85306c4623a121e1d20061fddf55ca337ac45"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_status", "production", "consensus", "validators_status"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, status)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, status)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "validators_status"], "description": "Daily aggregated status of consensus validators, including counts and statuses, derived from raw beacon chain data.", "columns": {"date": {"name": "date", "description": "Day-level date derived from slot_timestamp, representing the day of data aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Validator status (e.g., 'active', 'pending', 'exited').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of validators with the given status on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "validators_status"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, status)", "unique_key": "(date, status)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.370699, "relation_name": "`dbt`.`int_consensus_validators_status_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, status)',\n        unique_key='(date, status)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"validators_status\"]\n    ) \n}}\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM {{ ref('stg_consensus__validators') }}\nWHERE\n    slot_timestamp < today()\n    {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\nGROUP BY 1, 2", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_validators_status_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_entry_queue_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_entry_queue_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_entry_queue_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_entry_queue_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_entry_queue_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_entry_queue_daily"], "alias": "int_consensus_entry_queue_daily", "checksum": {"name": "sha256", "checksum": "46624285274f7ac78ba5f92690b64512cff8e3f73f19a3a4ae91e8b87c25efc1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "entry_queue", "production", "consensus", "entry_queue"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "entry_queue"], "description": "Daily aggregated data on validator activation days, quantiles, and mean activation days for consensus entry queue analysis.", "columns": {"date": {"name": "date", "description": "Date representing the day of validator activation.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_count": {"name": "validator_count", "description": "Total number of validators activated on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median (50th percentile) of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of activation days.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mean": {"name": "mean", "description": "Average activation days for validators activated on the date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "consensus", "entry_queue"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3861072, "relation_name": "`dbt`.`int_consensus_entry_queue_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"entry_queue\"]\n    )\n}}\n\nWITH\n\nqueue_activation AS (\n    SELECT\n        validator_index\n        ,date\n        ,epoch_eligibility\n        ,epoch_activation\n        ,(epoch_activation - epoch_eligibility) * 16 * 5 /(60 * 60 * 24) AS activation_days\n    FROM (\n        SELECT \n            validator_index\n            ,toStartOfDay(argMin(slot_timestamp,slot)) AS date\n            ,argMin(activation_eligibility_epoch,slot) AS epoch_eligibility\n            ,argMin(activation_epoch,slot) AS epoch_activation\n        FROM {{ ref('stg_consensus__validators') }}\n        WHERE \n            activation_epoch < 18446744073709551615\n            {{ apply_monthly_incremental_filter(source_field='slot_timestamp',destination_field='date',add_and='true') }}\n        GROUP BY 1\n    )\n)\n\nSELECT\n    date\n    ,validator_count\n    ,q_activation[1] AS q05\n    ,q_activation[2] AS q10\n    ,q_activation[3] AS q25\n    ,q_activation[4] AS q50\n    ,q_activation[5] AS q75\n    ,q_activation[6] AS q90\n    ,q_activation[7] AS q95\n    ,mean\nFROM (\n    SELECT\n        date,\n        count() AS validator_count\n        ,quantilesTDigest(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(activation_days) AS q_activation\n        ,avg(activation_days) AS  mean\n    FROM queue_activation\n    GROUP BY date\n)", "language": "sql", "refs": [{"name": "stg_consensus__validators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__validators"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_entry_queue_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nqueue_activation AS (\n    SELECT\n        validator_index\n        ,date\n        ,epoch_eligibility\n        ,epoch_activation\n        ,(epoch_activation - epoch_eligibility) * 16 * 5 /(60 * 60 * 24) AS activation_days\n    FROM (\n        SELECT \n            validator_index\n            ,toStartOfDay(argMin(slot_timestamp,slot)) AS date\n            ,argMin(activation_eligibility_epoch,slot) AS epoch_eligibility\n            ,argMin(activation_epoch,slot) AS epoch_activation\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE \n            activation_epoch < 18446744073709551615\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_entry_queue_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT\n    date\n    ,validator_count\n    ,q_activation[1] AS q05\n    ,q_activation[2] AS q10\n    ,q_activation[3] AS q25\n    ,q_activation[4] AS q50\n    ,q_activation[5] AS q75\n    ,q_activation[6] AS q90\n    ,q_activation[7] AS q95\n    ,mean\nFROM (\n    SELECT\n        date,\n        count() AS validator_count\n        ,quantilesTDigest(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(activation_days) AS q_activation\n        ,avg(activation_days) AS  mean\n    FROM queue_activation\n    GROUP BY date\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_deposits_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_deposits_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_deposits_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_deposits_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_deposits_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_deposits_daily"], "alias": "int_consensus_deposits_daily", "checksum": {"name": "sha256", "checksum": "d0b972e0bb24d685af5a3cae9d3abf82813930bd05d27da6ef65f55d324b4eda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "deposits", "production", "consensus", "deposits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "deposits"], "description": "Daily aggregated deposits data derived from the consensus layer, including total amount and count of deposits per day.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day (UTC) for deposit aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_amount": {"name": "total_amount", "description": "Sum of deposit amounts in Gwei for the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of deposit transactions for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "deposits"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.3829014, "relation_name": "`dbt`.`int_consensus_deposits_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"deposits\"]\n    )\n}}\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(amount/POWER(10,9)) AS total_amount\n    ,COUNT(*) AS cnt\nFROM {{ ref('stg_consensus__deposits') }}\nWHERE\n    slot_timestamp < today()\n    {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\nGROUP BY 1", "language": "sql", "refs": [{"name": "stg_consensus__deposits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__deposits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_deposits_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(amount/POWER(10,9)) AS total_amount\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__deposits`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_deposits_daily`\n    )\n  \n\nGROUP BY 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_consensus_withdrawls_dist_daily": {"database": "dbt", "schema": "dbt", "name": "int_consensus_withdrawls_dist_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/intermediate/int_consensus_withdrawls_dist_daily.sql", "original_file_path": "models/consensus/intermediate/int_consensus_withdrawls_dist_daily.sql", "unique_id": "model.gnosis_dbt.int_consensus_withdrawls_dist_daily", "fqn": ["gnosis_dbt", "consensus", "intermediate", "int_consensus_withdrawls_dist_daily"], "alias": "int_consensus_withdrawls_dist_daily", "checksum": {"name": "sha256", "checksum": "8b680851e33ee5bea4c6d739a00b3b696bcd6731916682de09d496e0a1fc0002"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "withdrawals", "production", "consensus", "withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "consensus", "withdrawals"], "description": "Daily aggregated statistics of consensus withdrawals including quantiles, total amount, and count, derived from the consensus withdrawals data.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the withdrawal statistics.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_amount": {"name": "total_amount", "description": "Sum of withdrawal amounts in wei for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Total number of withdrawal transactions for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min": {"name": "min", "description": "Minimum withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max": {"name": "max", "description": "Maximum withdrawal amount in wei within the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "withdrawals"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.4029152, "relation_name": "`dbt`.`int_consensus_withdrawls_dist_daily`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=[\"production\", \"consensus\", \"withdrawals\"]\n    )\n}}\n\n\nSELECT\n    date\n    ,total_amount\n    ,cnt\n    ,q_amount[1] AS min\n    ,q_amount[2] AS q05\n    ,q_amount[3] AS q10\n    ,q_amount[4] AS q25\n    ,q_amount[5] AS q50\n    ,q_amount[6] AS q75\n    ,q_amount[7] AS q90\n    ,q_amount[8] AS q95\n    ,q_amount[9] AS max\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount/POWER(10,9)) AS total_amount\n        ,COUNT(*) AS cnt\n        ,quantilesTDigest(\n            0.0, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 1\n        )(amount/POWER(10,9)) AS q_amount\n    FROM {{ ref('stg_consensus__withdrawals') }}\n    WHERE\n        slot_timestamp < today()\n        {{ apply_monthly_incremental_filter('slot_timestamp', 'date', 'true') }}\n    GROUP BY 1\n)", "language": "sql", "refs": [{"name": "stg_consensus__withdrawals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_consensus__withdrawals"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/intermediate/int_consensus_withdrawls_dist_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,total_amount\n    ,cnt\n    ,q_amount[1] AS min\n    ,q_amount[2] AS q05\n    ,q_amount[3] AS q10\n    ,q_amount[4] AS q25\n    ,q_amount[5] AS q50\n    ,q_amount[6] AS q75\n    ,q_amount[7] AS q90\n    ,q_amount[8] AS q95\n    ,q_amount[9] AS max\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount/POWER(10,9)) AS total_amount\n        ,COUNT(*) AS cnt\n        ,quantilesTDigest(\n            0.0, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 1\n        )(amount/POWER(10,9)) AS q_amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_withdrawls_dist_daily`\n    )\n  \n\n    GROUP BY 1\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_graffiti_label_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_graffiti_label_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_graffiti_label_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_graffiti_label_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_graffiti_label_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_graffiti_label_daily"], "alias": "api_consensus_graffiti_label_daily", "checksum": {"name": "sha256", "checksum": "47dbaf4dc2e5900ee13ea4c1e61c7105d9088ac9f2c67312c3c3ea93a59e8460"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "graffiti", "production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "graffiti"], "description": "Aggregated daily counts of graffiti labels from consensus data, grouped by date and label.", "columns": {"date": {"name": "date", "description": "Date of the aggregation in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Graffiti label identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total count of graffiti labels for the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4290335, "relation_name": "`dbt`.`api_consensus_graffiti_label_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"graffiti\"]\n    )\n}}\n\nSELECT\n    date\n    ,label\n    ,SUM(cnt) AS value\nFROM {{ ref('int_consensus_graffiti_daily') }}\nGROUP BY date, label\nORDER BY date, label", "language": "sql", "refs": [{"name": "int_consensus_graffiti_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_graffiti_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_graffiti_label_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,label\n    ,SUM(cnt) AS value\nFROM `dbt`.`int_consensus_graffiti_daily`\nGROUP BY date, label\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_info_apy_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_info_apy_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_info_apy_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_info_apy_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_info_apy_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_info_apy_latest"], "alias": "api_consensus_info_apy_latest", "checksum": {"name": "sha256", "checksum": "fbb0c8b6b54f35964c0bc8deb730281dc1db462aa8799f3d7dd545b28ebcce48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info", "production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "View providing the latest APY7D consensus information, including value and change percentage.", "columns": {"value": {"name": "value", "description": "The APY7D value in percentage points.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in APY7D from previous measurement.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4333987, "relation_name": "`dbt`.`api_consensus_info_apy_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nSELECT\n    value\n    ,change_pct\nFROM \n    {{ ref('fct_consensus_info_latest') }}\nWHERE\n    label = 'APY7D'", "language": "sql", "refs": [{"name": "fct_consensus_info_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_info_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_info_apy_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'APY7D'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_active_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_active_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_active_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_active_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_active_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_active_daily"], "alias": "api_consensus_validators_active_daily", "checksum": {"name": "sha256", "checksum": "979ce2236b96b58fad2a230a2a50a8986d62b8303e83fd335470e68b74dd3516"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators", "production", "consensus", "validators"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators"], "description": "Daily count of active consensus validators filtered by status 'active_ongoing'.", "columns": {"date": {"name": "date", "description": "The date representing the day of the activity, in YYYY-MM-DD format.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of active validators for the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "validators"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.441904, "relation_name": "`dbt`.`api_consensus_validators_active_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators\"]\n    )\n}}\n\nSELECT \n    date\n    ,cnt\nFROM {{ ref('int_consensus_validators_status_daily') }}\nWHERE status = 'active_ongoing'\nORDER BY date", "language": "sql", "refs": [{"name": "int_consensus_validators_status_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_status_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_active_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,cnt\nFROM `dbt`.`int_consensus_validators_status_daily`\nWHERE status = 'active_ongoing'\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_info_deposits_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_info_deposits_cnt_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_info_deposits_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_info_deposits_cnt_latest"], "alias": "api_consensus_info_deposits_cnt_latest", "checksum": {"name": "sha256", "checksum": "293c04d3694e596e32d0cf7174c14289f9041de8723ad09112fcfaa082e05f0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info", "production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "Model providing the latest count of deposits with value and change percentage.", "columns": {"value": {"name": "value", "description": "The deposit count value.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in deposits compared to previous period.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "info"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4354165, "relation_name": "`dbt`.`api_consensus_info_deposits_cnt_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nSELECT\n    value\n    ,change_pct\nFROM \n    {{ ref('fct_consensus_info_latest') }}\nWHERE\n    label = 'deposits_cnt'", "language": "sql", "refs": [{"name": "fct_consensus_info_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_info_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_info_deposits_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'deposits_cnt'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_deposits_withdrawls_cnt_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_deposits_withdrawls_cnt_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_deposits_withdrawls_cnt_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_deposits_withdrawls_cnt_daily"], "alias": "api_consensus_deposits_withdrawls_cnt_daily", "checksum": {"name": "sha256", "checksum": "51ccaa3012fc123cea56224fe829b80c06f91ce59cf5651f3511ed5e5e3f3228"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "deposits_withdrawals", "production", "consensus", "deposits_withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "deposits_withdrawals"], "description": "Daily count of deposits and withdrawals in the consensus layer, aggregated per date and label for business insights.", "columns": {"date": {"name": "date", "description": "Date of the aggregated data in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Category label for the count, e.g., 'deposits' or 'withdrawals'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of deposits or withdrawals for the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "deposits_withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4164124, "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_cnt_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"deposits_withdrawals\"]\n    )\n}}\n\nSELECT\n    date\n    ,label\n    ,cnt AS value\nFROM \n    {{ ref('fct_consensus_deposits_withdrawls_daily') }}\nORDER BY date, label", "language": "sql", "refs": [{"name": "fct_consensus_deposits_withdrawls_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_deposits_withdrawls_cnt_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,label\n    ,cnt AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_consensus_forks": {"database": "dbt", "schema": "dbt", "name": "fct_consensus_forks", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/fct_consensus_forks.sql", "original_file_path": "models/consensus/marts/fct_consensus_forks.sql", "unique_id": "model.gnosis_dbt.fct_consensus_forks", "fqn": ["gnosis_dbt", "consensus", "marts", "fct_consensus_forks"], "alias": "fct_consensus_forks", "checksum": {"name": "sha256", "checksum": "d5098fdac756ebcfc29b95f172f13871b9b36659ddbc60f0714ec0b2bf73fd18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "forks", "production", "consensus", "forks"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "forks"], "description": "Business-facing table aggregating fork information, including fork name, version, digest, epoch, and fork time, derived from consensus data sources.", "columns": {"fork_name": {"name": "fork_name", "description": "Name of the fork (e.g., Phase0, Altair, Bellatrix, Capella, Deneb, Electra, Fulu).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_digest": {"name": "fork_digest", "description": "Unique digest identifier for the fork.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_version": {"name": "fork_version", "description": "Fork version string (e.g., 'PHASE0', 'Altair', etc.).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_epoch": {"name": "fork_epoch", "description": "Epoch at which the fork occurred, represented as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_time": {"name": "fork_time", "description": "UTC timestamp when the fork occurred, derived from genesis time and epoch.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "forks"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4607134, "relation_name": "`dbt`.`fct_consensus_forks`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"forks\"]\n    )\n}}\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nfork_version AS (\n    SELECT\n        IF(fork_name='GENESIS', 'PHASE0', fork_name) AS fork_name\n        ,parameter_value\n    FROM (\n        SELECT\n            arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n            ,parameter_value\n        FROM {{ ref('stg_consensus__specs') }}\n        WHERE parameter_name LIKE '%_FORK_VERSION'\n    )\n),\n\nfork_epoch AS (\n    SELECT\n        arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n        ,parameter_value\n    FROM {{ ref('stg_consensus__specs') }}\n    WHERE parameter_name LIKE '%_FORK_EPOCH'\n\n    UNION ALL \n\n    SELECT 'PHASE0' AS fork_name, '0' AS parameter_value \n)\n\nSELECT \n  t1.cl_fork_name AS fork_name\n  ,t2.parameter_value AS fork_version \n  ,t1.fork_digest AS fork_digest\n  ,t3.parameter_value AS fork_epoch \n  ,IF(CAST(t3.parameter_value AS Int) = -1, NULL,\n    addSeconds(\n          toDateTime(t4.genesis_time_unix, 'UTC'),\n          CAST(t3.parameter_value AS Int) * (t4.seconds_per_slot * t4.slots_per_epoch )\n      )\n   ) AS fork_time\nFROM \n  fork_digests t1\nINNER JOIN\n  fork_version t2\n  ON LOWER(t2.fork_name) = LOWER(t1.cl_fork_name)\nINNER JOIN\n  fork_epoch t3\n  ON LOWER(t3.fork_name) = LOWER(t1.cl_fork_name)\nCROSS JOIN {{ ref('stg_consensus__time_helpers') }} t4", "language": "sql", "refs": [{"name": "stg_consensus__specs", "package": null, "version": null}, {"name": "stg_consensus__specs", "package": null, "version": null}, {"name": "stg_consensus__time_helpers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_consensus__specs", "model.gnosis_dbt.stg_consensus__time_helpers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/fct_consensus_forks.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nfork_version AS (\n    SELECT\n        IF(fork_name='GENESIS', 'PHASE0', fork_name) AS fork_name\n        ,parameter_value\n    FROM (\n        SELECT\n            arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n            ,parameter_value\n        FROM `dbt`.`stg_consensus__specs`\n        WHERE parameter_name LIKE '%_FORK_VERSION'\n    )\n),\n\nfork_epoch AS (\n    SELECT\n        arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n        ,parameter_value\n    FROM `dbt`.`stg_consensus__specs`\n    WHERE parameter_name LIKE '%_FORK_EPOCH'\n\n    UNION ALL \n\n    SELECT 'PHASE0' AS fork_name, '0' AS parameter_value \n)\n\nSELECT \n  t1.cl_fork_name AS fork_name\n  ,t2.parameter_value AS fork_version \n  ,t1.fork_digest AS fork_digest\n  ,t3.parameter_value AS fork_epoch \n  ,IF(CAST(t3.parameter_value AS Int) = -1, NULL,\n    addSeconds(\n          toDateTime(t4.genesis_time_unix, 'UTC'),\n          CAST(t3.parameter_value AS Int) * (t4.seconds_per_slot * t4.slots_per_epoch )\n      )\n   ) AS fork_time\nFROM \n  fork_digests t1\nINNER JOIN\n  fork_version t2\n  ON LOWER(t2.fork_name) = LOWER(t1.cl_fork_name)\nINNER JOIN\n  fork_epoch t3\n  ON LOWER(t3.fork_name) = LOWER(t1.cl_fork_name)\nCROSS JOIN `dbt`.`stg_consensus__time_helpers` t4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_forks": {"database": "dbt", "schema": "dbt", "name": "api_consensus_forks", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_forks.sql", "original_file_path": "models/consensus/marts/api_consensus_forks.sql", "unique_id": "model.gnosis_dbt.api_consensus_forks", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_forks"], "alias": "api_consensus_forks", "checksum": {"name": "sha256", "checksum": "a8969d0b936fc7eeb8afcd7e20e3cb92bc942103fa718df9a82235518542e88d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "forks", "production", "consensus", "forks"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "forks"], "description": "Model representing consensus forks with details such as name, version, digest, and epoch.", "columns": {"fork_name": {"name": "fork_name", "description": "Name of the fork (e.g., \"Bellatrix\", \"Capella\").", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_version": {"name": "fork_version", "description": "Version label of the fork.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_digest": {"name": "fork_digest", "description": "Unique digest identifier for the fork.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_epoch": {"name": "fork_epoch", "description": "Epoch number at which the fork occurred.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "forks"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.424757, "relation_name": "`dbt`.`api_consensus_forks`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"forks\"]\n    )\n}}\n\nSELECT\n  fork_name\n  ,fork_version \n  ,fork_digest\n  ,fork_epoch \nFROM {{ ref('fct_consensus_forks') }}\nORDER BY fork_version ASC", "language": "sql", "refs": [{"name": "fct_consensus_forks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_forks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_forks.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  fork_name\n  ,fork_version \n  ,fork_digest\n  ,fork_epoch \nFROM `dbt`.`fct_consensus_forks`\nORDER BY fork_version ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_consensus_graffiti_cloud": {"database": "dbt", "schema": "dbt", "name": "fct_consensus_graffiti_cloud", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/fct_consensus_graffiti_cloud.sql", "original_file_path": "models/consensus/marts/fct_consensus_graffiti_cloud.sql", "unique_id": "model.gnosis_dbt.fct_consensus_graffiti_cloud", "fqn": ["gnosis_dbt", "consensus", "marts", "fct_consensus_graffiti_cloud"], "alias": "fct_consensus_graffiti_cloud", "checksum": {"name": "sha256", "checksum": "47215de1ed27aa52067f981cfede9d825f44afb54633e9066b91e87c48536f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "graffiti", "production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "graffiti"], "description": "Aggregated graffiti counts over different time windows, filtered to exclude 'None' graffiti entries.", "columns": {"label": {"name": "label", "description": "Time window labels for graffiti counts ('7D', '30D', '90D', 'All').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "graffiti": {"name": "graffiti", "description": "Graffiti string identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v_7d": {"name": "v_7d", "description": "Sum of graffiti occurrences in the last 7 days.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v_30d": {"name": "v_30d", "description": "Sum of graffiti occurrences in the last 30 days.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v_90d": {"name": "v_90d", "description": "Sum of graffiti occurrences in the last 90 days.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v_all": {"name": "v_all", "description": "Total sum of graffiti occurrences across all time.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "graffiti"], "materialized": "table", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.464235, "relation_name": "`dbt`.`fct_consensus_graffiti_cloud`", "raw_code": "{{\n    config(\n        materialized='table',\n        tags=[\"production\", \"consensus\", \"graffiti\"]\n    )\n}}\n\n\nWITH base AS (\n  SELECT\n      graffiti,\n      sumIf(cnt, date >= today() - 7)  AS v_7d,\n      sumIf(cnt, date >= today() - 30) AS v_30d,\n      sumIf(cnt, date >= today() - 90) AS v_90d,\n      sum(cnt)                         AS v_all\n  FROM {{ ref('int_consensus_graffiti_daily') }}\n  WHERE graffiti != 'None'\n  GROUP BY graffiti\n)\nSELECT\n  label,\n  graffiti,\n  value\nFROM base\nARRAY JOIN\n  ['7D','30D','90D','All'] AS label,\n  [v_7d, v_30d, v_90d, v_all] AS value\nORDER BY label, value DESC\nLIMIT 50 BY label", "language": "sql", "refs": [{"name": "int_consensus_graffiti_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_graffiti_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/fct_consensus_graffiti_cloud.sql", "compiled": true, "compiled_code": "\n\n\nWITH base AS (\n  SELECT\n      graffiti,\n      sumIf(cnt, date >= today() - 7)  AS v_7d,\n      sumIf(cnt, date >= today() - 30) AS v_30d,\n      sumIf(cnt, date >= today() - 90) AS v_90d,\n      sum(cnt)                         AS v_all\n  FROM `dbt`.`int_consensus_graffiti_daily`\n  WHERE graffiti != 'None'\n  GROUP BY graffiti\n)\nSELECT\n  label,\n  graffiti,\n  value\nFROM base\nARRAY JOIN\n  ['7D','30D','90D','All'] AS label,\n  [v_7d, v_30d, v_90d, v_all] AS value\nORDER BY label, value DESC\nLIMIT 50 BY label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_withdrawls_dist_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_withdrawls_dist_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_withdrawls_dist_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_withdrawls_dist_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_withdrawls_dist_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_withdrawls_dist_daily"], "alias": "api_consensus_withdrawls_dist_daily", "checksum": {"name": "sha256", "checksum": "b6a99f77483cc662722d7568fb922f6f29b165843cca155d604dc7f805cd8d02"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "withdrawls", "production", "consensus", "withdrawls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "withdrawls"], "description": "Daily distribution of consensus-layer withdrawal data, including quantiles and related metrics.", "columns": {"date": {"name": "date", "description": "Date of the distribution (YYYY-MM-DD).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median (50th percentile) of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile value of withdrawal distribution.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "withdrawls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4557908, "relation_name": "`dbt`.`api_consensus_withdrawls_dist_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"withdrawls\"]\n    )\n}}\n\nSELECT\n    date\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\nFROM \n    {{ ref('int_consensus_withdrawls_dist_daily') }}\nORDER BY date", "language": "sql", "refs": [{"name": "int_consensus_withdrawls_dist_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_withdrawls_dist_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_withdrawls_dist_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_apy_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_apy_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_apy_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_apy_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_apy_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_apy_daily"], "alias": "api_consensus_validators_apy_daily", "checksum": {"name": "sha256", "checksum": "9fcb8e6963552d9717a8536e5fbcb9b588bf8f5efb1f5db97a846f00ed83d171"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_apy"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators_apy"], "description": "Daily and 7-day moving average APY data for consensus validators, used for performance and health monitoring.", "columns": {"date": {"name": "date", "description": "Date of the APY measurement.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label indicating the APY type, e.g., 'Daily' or '7DMA'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy": {"name": "apy", "description": "Annual Percentage Yield (APY) in percentage points.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "tags": ["production", "consensus", "validators_apy"]}, "created_at": 1760535477.4439316, "relation_name": "`dbt`.`api_consensus_validators_apy_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators_apy\"]\n    )\n}}\n\nSELECT \n    date\n    ,label\n    ,apy\nFROM (\n    SELECT date, 'Daily' AS label, apy AS apy FROM {{ ref('fct_consensus_validators_apy_daily') }}\n    UNION ALL \n    SELECT date, '7DMA' AS label, apy_7dma AS apy FROM {{ ref('fct_consensus_validators_apy_daily') }}\n)\nORDER BY date, label", "language": "sql", "refs": [{"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}, {"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_validators_apy_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_apy_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,label\n    ,apy\nFROM (\n    SELECT date, 'Daily' AS label, apy AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n    UNION ALL \n    SELECT date, '7DMA' AS label, apy_7dma AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n)\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_entry_queue_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_entry_queue_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_entry_queue_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_entry_queue_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_entry_queue_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_entry_queue_daily"], "alias": "api_consensus_entry_queue_daily", "checksum": {"name": "sha256", "checksum": "7bffbe28725f657d1f21803f48e858f47494cb652292f66079430d951170b8e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "entry_queue", "production", "consensus", "entry_queue"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "entry_queue"], "description": "Daily aggregated data on consensus entry queue metrics, including validator counts and quantile statistics.", "columns": {"date": {"name": "date", "description": "Date of the aggregation in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_count": {"name": "validator_count", "description": "Number of validators active on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median (50th percentile) of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of the queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mean": {"name": "mean", "description": "Average queue length.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "entry_queue"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.421011, "relation_name": "`dbt`.`api_consensus_entry_queue_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"entry_queue\"]\n    )\n}}\n\nSELECT\n    date\n    ,validator_count\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\n    ,mean\nFROM {{ ref('int_consensus_entry_queue_daily') }}\nORDER BY date ASC", "language": "sql", "refs": [{"name": "int_consensus_entry_queue_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_entry_queue_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_entry_queue_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,validator_count\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\n    ,mean\nFROM `dbt`.`int_consensus_entry_queue_daily`\nORDER BY date ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_balances_dist_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_balances_dist_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_balances_dist_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_balances_dist_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_balances_dist_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_balances_dist_daily"], "alias": "api_consensus_validators_balances_dist_daily", "checksum": {"name": "sha256", "checksum": "3e1a746c74a69e1700e7da4a011093ab4a32c4cfd8ce7ddc6742b6453b93c0a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_balances", "production", "consensus", "validators_balances"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators_balances"], "description": "Daily distribution of validator balances derived from consensus data, including quantile metrics for analysis.", "columns": {"date": {"name": "date", "description": "Date of the recorded balances in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of validator balances divided by 32, representing lower bound.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "Median (50th percentile) of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of validator balances divided by 32.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "validators_balances"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4508636, "relation_name": "`dbt`.`api_consensus_validators_balances_dist_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators_balances\"]\n    )\n}}\n\n-- in GNO\nSELECT\n    date,\n    q05/32 AS q05,\n    q10/32 AS q10,\n    q25/32 AS q25,\n    q50/32 AS q50,\n    q75/32 AS q75,\n    q90/32 AS q90,\n    q95/32 AS q95\nFROM {{ ref('int_consensus_validators_balances_dist_daily') }}\nORDER BY date ASC", "language": "sql", "refs": [{"name": "int_consensus_validators_balances_dist_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_balances_dist_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_balances_dist_daily.sql", "compiled": true, "compiled_code": "\n\n-- in GNO\nSELECT\n    date,\n    q05/32 AS q05,\n    q10/32 AS q10,\n    q25/32 AS q25,\n    q50/32 AS q50,\n    q75/32 AS q75,\n    q90/32 AS q90,\n    q95/32 AS q95\nFROM `dbt`.`int_consensus_validators_balances_dist_daily`\nORDER BY date ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_credentials_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_credentials_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_credentials_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_credentials_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_credentials_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_credentials_daily"], "alias": "api_consensus_credentials_daily", "checksum": {"name": "sha256", "checksum": "8b013f54f4e6a016b1380d9ec9984fb01c9cf1cee7ab64e04f268c13a46c068e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "credentials", "production", "consensus", "credentials"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "credentials"], "description": "Daily aggregated data of consensus credentials, including counts and percentages, used for business insights and reporting.", "columns": {"date": {"name": "date", "description": "Date of the record in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credentials_type": {"name": "credentials_type", "description": "Type/category of credentials, e.g., validator, proposer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of credentials of the specified type for the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct": {"name": "pct", "description": "Percentage of credentials of this type relative to total on the date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "credentials"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4119828, "relation_name": "`dbt`.`api_consensus_credentials_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"credentials\"]\n    )\n}}\n\nSELECT \n    date\n    ,credentials_type\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)) * 100,2) AS pct \nFROM {{ ref('int_consensus_credentials_daily') }}\nORDER BY date, credentials_type", "language": "sql", "refs": [{"name": "int_consensus_credentials_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_credentials_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_credentials_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,credentials_type\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)) * 100,2) AS pct \nFROM `dbt`.`int_consensus_credentials_daily`\nORDER BY date, credentials_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily": {"database": "dbt", "schema": "dbt", "name": "fct_consensus_deposits_withdrawls_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/fct_consensus_deposits_withdrawls_daily.sql", "original_file_path": "models/consensus/marts/fct_consensus_deposits_withdrawls_daily.sql", "unique_id": "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "fct_consensus_deposits_withdrawls_daily"], "alias": "fct_consensus_deposits_withdrawls_daily", "checksum": {"name": "sha256", "checksum": "eb727b2b476371da6a8a71efb44e995ac802ce5a5d867cffc5de048de94cda4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "deposits_withdrawls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "deposits_withdrawls"], "description": "Business-facing table aggregating deposits and withdrawls per day with labels.", "columns": {"date": {"name": "date", "description": "Date of the aggregation (UTC).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Type of transaction: 'deposits' or 'withdrawls'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of transactions for the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_amount": {"name": "total_amount", "description": "Sum of amounts in wei for the transactions on the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "tags": ["production", "consensus", "deposits_withdrawls"]}, "created_at": 1760535477.457851, "relation_name": "`dbt`.`fct_consensus_deposits_withdrawls_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"deposits_withdrawls\"]\n    )\n}}\n\nSELECT\n    date\n    ,'withdrawls' AS label\n    ,cnt\n    ,total_amount\nFROM \n    {{ ref('int_consensus_withdrawls_dist_daily') }}\n\nUNION ALL\n\nSELECT\n    date\n    ,'deposits' AS label\n    ,cnt\n    ,total_amount\nFROM \n    {{ ref('int_consensus_deposits_daily') }}", "language": "sql", "refs": [{"name": "int_consensus_withdrawls_dist_daily", "package": null, "version": null}, {"name": "int_consensus_deposits_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_withdrawls_dist_daily", "model.gnosis_dbt.int_consensus_deposits_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/fct_consensus_deposits_withdrawls_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,'withdrawls' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\n\nUNION ALL\n\nSELECT\n    date\n    ,'deposits' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_deposits_daily`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_blocks_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_blocks_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_blocks_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_blocks_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_blocks_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_blocks_daily"], "alias": "api_consensus_blocks_daily", "checksum": {"name": "sha256", "checksum": "91a53998ea962b17aa9c5972016e81b6d14109d7603c7d19c6a4520d51f97495"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blocks", "production", "consensus", "blocks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "blocks"], "description": "Daily aggregation of consensus blocks data, including produced and missed blocks.", "columns": {"date": {"name": "date", "description": "Date of the aggregation in YYYY-MM-DD format.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label indicating 'produced' or 'missed' blocks.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of blocks corresponding to the label for the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "blocks"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4092405, "relation_name": "`dbt`.`api_consensus_blocks_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"blocks\"]\n    )\n}}\n\n\nSELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT date, 'produced' AS label, blocks_produced AS value FROM {{ ref('int_consensus_blocks_daily') }}\n    UNION ALL \n    SELECT date, 'missed' AS label, blocks_missed AS value FROM {{ ref('int_consensus_blocks_daily') }}\n)\nORDER BY date, label", "language": "sql", "refs": [{"name": "int_consensus_blocks_daily", "package": null, "version": null}, {"name": "int_consensus_blocks_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_blocks_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_blocks_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT date, 'produced' AS label, blocks_produced AS value FROM `dbt`.`int_consensus_blocks_daily`\n    UNION ALL \n    SELECT date, 'missed' AS label, blocks_missed AS value FROM `dbt`.`int_consensus_blocks_daily`\n)\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_deposits_withdrawls_volume_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_deposits_withdrawls_volume_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_deposits_withdrawls_volume_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_deposits_withdrawls_volume_daily"], "alias": "api_consensus_deposits_withdrawls_volume_daily", "checksum": {"name": "sha256", "checksum": "edab630bc16e193ecf09ab5fb3fc3668956831cb96db39b239ab0ba6fc9b4385"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "deposits_withdrawals", "production", "consensus", "deposits_withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "deposits_withdrawals"], "description": "Daily volume of deposits and withdrawals in the consensus layer, aggregated by date and label.", "columns": {"date": {"name": "date", "description": "The date of the record, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label categorizing the volume (e.g., 'deposits', 'withdrawals').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total volume in wei for the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "deposits_withdrawals"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4184504, "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_volume_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"deposits_withdrawals\"]\n    )\n}}\n\nSELECT\n    date\n    ,label\n    ,total_amount AS value\nFROM \n    {{ ref('fct_consensus_deposits_withdrawls_daily') }}\nORDER BY date, label", "language": "sql", "refs": [{"name": "fct_consensus_deposits_withdrawls_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_deposits_withdrawls_volume_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,label\n    ,total_amount AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_staked_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_staked_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_staked_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_staked_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_staked_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_staked_daily"], "alias": "api_consensus_staked_daily", "checksum": {"name": "sha256", "checksum": "29c585ed3718414e23ae1867449e49c9abfad27ebba2e11f7a822d06a2664316"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "staked", "production", "consensus", "staked"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "staked"], "description": "Daily snapshot of staked validator balances, derived from the int_consensus_validators_balances_daily model, representing effective balances divided by 32 for business insights.", "columns": {"date": {"name": "date", "description": "Date of the snapshot.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Effective staked balance divided by 32 (validator count), in units.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "staked"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4398763, "relation_name": "`dbt`.`api_consensus_staked_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"staked\"]\n    )\n}}\n\nSELECT\n    date\n    ,effective_balance/32 AS value\nFROM {{ ref('int_consensus_validators_balances_daily') }}\nORDER BY date", "language": "sql", "refs": [{"name": "int_consensus_validators_balances_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_balances_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_staked_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,effective_balance/32 AS value\nFROM `dbt`.`int_consensus_validators_balances_daily`\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_consensus_info_latest": {"database": "dbt", "schema": "dbt", "name": "fct_consensus_info_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/fct_consensus_info_latest.sql", "original_file_path": "models/consensus/marts/fct_consensus_info_latest.sql", "unique_id": "model.gnosis_dbt.fct_consensus_info_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "fct_consensus_info_latest"], "alias": "fct_consensus_info_latest", "checksum": {"name": "sha256", "checksum": "16e162cf5cd58e48a5802c1eb2163bd8a34af7f7f54a3307ad32d36138c44a4f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info", "production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "Aggregated latest consensus layer statistics including deposits, withdrawals, APY, validator status, and staked balances, with comparisons over 7-day periods.", "columns": {"label": {"name": "label", "description": "Identifier for the metric, e.g., deposits_cnt, withdrawls_total_amount, APY7D.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the metric; units vary per label.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change over 7 days; null if denominator is zero.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "consensus", "info"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.466319, "relation_name": "`dbt`.`fct_consensus_info_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nWITH\n\ndeposits_withdrawls_latest AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        {{ ref('fct_consensus_deposits_withdrawls_daily') }}\n    WHERE\n        date = (SELECT MAX(date) FROM {{ ref('fct_consensus_deposits_withdrawls_daily') }})\n),\n\ndeposits_withdrawls_7d AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        {{ ref('fct_consensus_deposits_withdrawls_daily') }}\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_p2p_discv4_clients_daily') }}), 7)\n),\n\napy_latest AS (\n    SELECT\n        apy_7dma\n    FROM \n        {{ ref('fct_consensus_validators_apy_daily') }}\n    WHERE\n        date = (SELECT MAX(date) FROM {{ ref('fct_consensus_validators_apy_daily') }})\n),\n\napy_7d AS (\n    SELECT\n       apy_7dma\n    FROM \n        {{ ref('fct_consensus_validators_apy_daily') }}\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM {{ ref('fct_consensus_validators_apy_daily') }}), 7)\n),\n\nstatus_latest AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        {{ ref('int_consensus_validators_status_daily') }}\n    WHERE\n        date = (SELECT MAX(date) FROM {{ ref('int_consensus_validators_status_daily') }})\n),\n\nstatus_7d AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        {{ ref('int_consensus_validators_status_daily') }}\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_consensus_validators_status_daily') }}), 7)\n),\n\n\nstaked_latest AS (\n    SELECT\n        'Staked' AS label\n        ,effective_balance/32 AS value\n    FROM \n        {{ ref('int_consensus_validators_balances_daily') }}\n    WHERE\n        date = (SELECT MAX(date) FROM {{ ref('int_consensus_validators_balances_daily') }})\n),\n\nstaked_7d AS (\n    SELECT\n        'Staked' AS label\n        ,effective_balance/32 AS value\n    FROM \n        {{ ref('int_consensus_validators_balances_daily') }}\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_consensus_validators_balances_daily') }}), 7)\n),\n\n\ninfo_latest AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_latest),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_latest\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM staked_latest\n),\n\ninfo_7d AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_7d),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_7d\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM staked_7d\n)\n\nSELECT\n    t1.label\n    ,t1.value AS value\n    ,IF(t1.value=0 AND t2.value=0, 0, ROUND(( COALESCE(t1.value / NULLIF(t2.value, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM info_latest t1\nINNER JOIN info_7d t2\nON t2.label = t1.label", "language": "sql", "refs": [{"name": "fct_consensus_deposits_withdrawls_daily", "package": null, "version": null}, {"name": "fct_consensus_deposits_withdrawls_daily", "package": null, "version": null}, {"name": "fct_consensus_deposits_withdrawls_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}, {"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}, {"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}, {"name": "fct_consensus_validators_apy_daily", "package": null, "version": null}, {"name": "int_consensus_validators_status_daily", "package": null, "version": null}, {"name": "int_consensus_validators_status_daily", "package": null, "version": null}, {"name": "int_consensus_validators_status_daily", "package": null, "version": null}, {"name": "int_consensus_validators_status_daily", "package": null, "version": null}, {"name": "int_consensus_validators_balances_daily", "package": null, "version": null}, {"name": "int_consensus_validators_balances_daily", "package": null, "version": null}, {"name": "int_consensus_validators_balances_daily", "package": null, "version": null}, {"name": "int_consensus_validators_balances_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "model.gnosis_dbt.int_p2p_discv4_clients_daily", "model.gnosis_dbt.fct_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_status_daily", "model.gnosis_dbt.int_consensus_validators_balances_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/fct_consensus_info_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\ndeposits_withdrawls_latest AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_deposits_withdrawls_daily`)\n),\n\ndeposits_withdrawls_7d AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n),\n\napy_latest AS (\n    SELECT\n        apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`)\n),\n\napy_7d AS (\n    SELECT\n       apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`), 7)\n),\n\nstatus_latest AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`)\n),\n\nstatus_7d AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`), 7)\n),\n\n\nstaked_latest AS (\n    SELECT\n        'Staked' AS label\n        ,effective_balance/32 AS value\n    FROM \n        `dbt`.`int_consensus_validators_balances_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`int_consensus_validators_balances_daily`)\n),\n\nstaked_7d AS (\n    SELECT\n        'Staked' AS label\n        ,effective_balance/32 AS value\n    FROM \n        `dbt`.`int_consensus_validators_balances_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_consensus_validators_balances_daily`), 7)\n),\n\n\ninfo_latest AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_latest),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_latest\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM staked_latest\n),\n\ninfo_7d AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_7d),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_7d\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM staked_7d\n)\n\nSELECT\n    t1.label\n    ,t1.value AS value\n    ,IF(t1.value=0 AND t2.value=0, 0, ROUND(( COALESCE(t1.value / NULLIF(t2.value, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM info_latest t1\nINNER JOIN info_7d t2\nON t2.label = t1.label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_graffiti_cloud": {"database": "dbt", "schema": "dbt", "name": "api_consensus_graffiti_cloud", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_graffiti_cloud.sql", "original_file_path": "models/consensus/marts/api_consensus_graffiti_cloud.sql", "unique_id": "model.gnosis_dbt.api_consensus_graffiti_cloud", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_graffiti_cloud"], "alias": "api_consensus_graffiti_cloud", "checksum": {"name": "sha256", "checksum": "5c3cff3382c43a8c3049c306c4f5b32aad4e2ac0852f6b1787e09e8390f64da1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "graffiti", "production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "graffiti"], "description": "View aggregating graffiti and label data from consensus layer, ordered by label and value.", "columns": {"label": {"name": "label", "description": "Label associated with graffiti, used for categorization.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "graffiti": {"name": "graffiti", "description": "Graffiti content or tag.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric or descriptive value associated with graffiti.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "graffiti"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4268346, "relation_name": "`dbt`.`api_consensus_graffiti_cloud`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"graffiti\"]\n    )\n}}\n\n\nSELECT\n    label\n    ,graffiti\n    ,value\nFROM {{ ref('fct_consensus_graffiti_cloud') }}\nORDER BY label DESC, value DESC", "language": "sql", "refs": [{"name": "fct_consensus_graffiti_cloud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_graffiti_cloud"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_graffiti_cloud.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    label\n    ,graffiti\n    ,value\nFROM `dbt`.`fct_consensus_graffiti_cloud`\nORDER BY label DESC, value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_blob_commitments_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_blob_commitments_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_blob_commitments_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_blob_commitments_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_blob_commitments_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_blob_commitments_daily"], "alias": "api_consensus_blob_commitments_daily", "checksum": {"name": "sha256", "checksum": "a5aa9676306059d3bf3039e3aff311da4728bee92b4b601da70efa6e39670dac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "blob_commitments", "production", "consensus", "blob_commitments"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "blob_commitments"], "description": "Daily aggregated count of blob commitments in the consensus layer, used for monitoring blob commitment activity.", "columns": {"date": {"name": "date", "description": "Date of the aggregation in YYYY-MM-DD format.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of blob commitments for the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "blob_commitments"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4071517, "relation_name": "`dbt`.`api_consensus_blob_commitments_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"blob_commitments\"]\n    )\n}}\n\nSELECT\n    date\n    ,cnt AS value\nFROM {{ ref('int_consensus_blob_commitments_daily') }}\nORDER BY date", "language": "sql", "refs": [{"name": "int_consensus_blob_commitments_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_blob_commitments_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_blob_commitments_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,cnt AS value\nFROM `dbt`.`int_consensus_blob_commitments_daily`\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_balances_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_balances_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_balances_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_balances_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_balances_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_balances_daily"], "alias": "api_consensus_validators_balances_daily", "checksum": {"name": "sha256", "checksum": "20a17dcab05f37bb963cfb3dafd12d256aaabfce497bce1ac90ccf8686b107d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_balances", "production", "consensus", "validators_balances"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators_balances"], "description": "Daily aggregated balances and effective balances for consensus validators, combining current balances and effective balances for business insights.", "columns": {"date": {"name": "date", "description": "The date of the balance snapshot in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label indicating balance type ('balance' or 'eff. balance').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the balance in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "validators_balances"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4484537, "relation_name": "`dbt`.`api_consensus_validators_balances_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators_balances\"]\n    )\n}}\n\nSELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT\n        date\n        ,'balance' AS label\n        ,balance AS value\n    FROM {{ ref('int_consensus_validators_balances_daily') }}\n\n    UNION ALL \n\n    SELECT\n        date\n        ,'eff. balance' AS label\n        ,effective_balance AS value\n    FROM {{ ref('int_consensus_validators_balances_daily') }}\n)\nORDER BY date, label", "language": "sql", "refs": [{"name": "int_consensus_validators_balances_daily", "package": null, "version": null}, {"name": "int_consensus_validators_balances_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_balances_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_balances_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT\n        date\n        ,'balance' AS label\n        ,balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n\n    UNION ALL \n\n    SELECT\n        date\n        ,'eff. balance' AS label\n        ,effective_balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n)\nORDER BY date, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_consensus_validators_apy_daily": {"database": "dbt", "schema": "dbt", "name": "fct_consensus_validators_apy_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/fct_consensus_validators_apy_daily.sql", "original_file_path": "models/consensus/marts/fct_consensus_validators_apy_daily.sql", "unique_id": "model.gnosis_dbt.fct_consensus_validators_apy_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "fct_consensus_validators_apy_daily"], "alias": "fct_consensus_validators_apy_daily", "checksum": {"name": "sha256", "checksum": "6218e057d2945aa7fbd078d3a60656d9ced6cf381cfb009f7b1a7410bab0aa73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_apy", "production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators_apy"], "description": "Daily computed APY and rate metrics for consensus validators, including 7-day moving averages and derived APY values, based on the latest data.", "columns": {"date": {"name": "date", "description": "Date of the APY calculation in UTC.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "Validator balance in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "Daily rate of validator rewards (decimal, e.g., 0.0001 for 0.01%).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate_7dma": {"name": "rate_7dma", "description": "7-day moving average of the daily rate.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy": {"name": "apy", "description": "Calculated APY based on the daily rate.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy_7dma": {"name": "apy_7dma", "description": "7-day moving average of the APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.5253985, "relation_name": "`dbt`.`fct_consensus_validators_apy_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators_apy\"]\n    )\n}}\n\nSELECT \n    date\n    ,balance\n    ,rate\n    ,avg(rate) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rate_7dma\n    ,apy\n    ,ROUND((POWER((1+rate_7dma),365) - 1) * 100,2) AS apy_7dma\nFROM {{ ref('int_consensus_validators_apy_daily') }}\nWHERE date > DATE '2021-12-08'", "language": "sql", "refs": [{"name": "int_consensus_validators_apy_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_apy_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/fct_consensus_validators_apy_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,balance\n    ,rate\n    ,avg(rate) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rate_7dma\n    ,apy\n    ,ROUND((POWER((1+rate_7dma),365) - 1) * 100,2) AS apy_7dma\nFROM `dbt`.`int_consensus_validators_apy_daily`\nWHERE date > DATE '2021-12-08'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_info_withdrawls_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_info_withdrawls_cnt_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_info_withdrawls_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_info_withdrawls_cnt_latest"], "alias": "api_consensus_info_withdrawls_cnt_latest", "checksum": {"name": "sha256", "checksum": "24a94695b3974c344966a2d8b39853b2e74e7b28cd07494a852290ba009389c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "This model provides the latest count of withdrawals from the consensus layer, filtered where label equals 'withdrawls_cnt'. It aggregates data from the `fct_consensus_info_latest` source, focusing on the `value` and `change_pct` columns for business insights into withdrawal activity.", "columns": {"value": {"name": "value", "description": "The withdrawal count value for the latest consensus info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in withdrawal count compared to previous period.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "tags": ["production", "consensus", "info"]}, "created_at": 1760535477.4375074, "relation_name": "`dbt`.`api_consensus_info_withdrawls_cnt_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nSELECT\n    value\n    ,change_pct\nFROM \n    {{ ref('fct_consensus_info_latest') }}\nWHERE\n    label = 'withdrawls_cnt'", "language": "sql", "refs": [{"name": "fct_consensus_info_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_info_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_info_withdrawls_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'withdrawls_cnt'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_status_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_status_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_status_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_status_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_status_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_status_daily"], "alias": "api_consensus_validators_status_daily", "checksum": {"name": "sha256", "checksum": "5ca7df4a76cd00b38b441c01f8f67dc303b6b76c2a2a44ea1fd5f08122485307"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators", "production", "consensus", "validators"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators"], "description": "Daily status summary of consensus validators, excluding 'active_ongoing' and 'withdrawal_done' statuses, aggregated by date.", "columns": {"date": {"name": "date", "description": "Date of the status record, in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Validator status category (e.g., 'pending', 'active', etc.).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of validators in the given status on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "validators"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4530578, "relation_name": "`dbt`.`api_consensus_validators_status_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators\"]\n    )\n}}\n\nSELECT \n    date\n    ,status\n    ,cnt\nFROM {{ ref('int_consensus_validators_status_daily') }}\nWHERE status NOT IN ('active_ongoing', 'withdrawal_done')\nORDER BY date, status", "language": "sql", "refs": [{"name": "int_consensus_validators_status_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_status_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_status_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    date\n    ,status\n    ,cnt\nFROM `dbt`.`int_consensus_validators_status_daily`\nWHERE status NOT IN ('active_ongoing', 'withdrawal_done')\nORDER BY date, status", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_credentials_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_credentials_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_credentials_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_credentials_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_credentials_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_credentials_latest"], "alias": "api_consensus_credentials_latest", "checksum": {"name": "sha256", "checksum": "ab6f6d913fe60f6e5217e000d1d0c2f421f20b8b49e9f29d0b0c36e1ce9ae79f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "credentials", "production", "consensus", "credentials"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "credentials"], "description": "A model representing the latest consensus credentials, including credentials type and count, derived from the most recent date in the source data.", "columns": {"credentials_type": {"name": "credentials_type", "description": "Type of credentials (e.g., API key, token).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of credentials of this type.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "credentials"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.413998, "relation_name": "`dbt`.`api_consensus_credentials_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"credentials\"]\n    )\n}}\n\nSELECT \n    credentials_type\n    ,cnt\nFROM {{ ref('int_consensus_credentials_daily') }}\nWHERE date = (SELECT MAX(date) FROM {{ ref('int_consensus_credentials_daily') }})", "language": "sql", "refs": [{"name": "int_consensus_credentials_daily", "package": null, "version": null}, {"name": "int_consensus_credentials_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_credentials_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_credentials_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    credentials_type\n    ,cnt\nFROM `dbt`.`int_consensus_credentials_daily`\nWHERE date = (SELECT MAX(date) FROM `dbt`.`int_consensus_credentials_daily`)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_attestations_daily": {"database": "dbt", "schema": "dbt", "name": "api_consensus_attestations_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_attestations_daily.sql", "original_file_path": "models/consensus/marts/api_consensus_attestations_daily.sql", "unique_id": "model.gnosis_dbt.api_consensus_attestations_daily", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_attestations_daily"], "alias": "api_consensus_attestations_daily", "checksum": {"name": "sha256", "checksum": "9a0400cccb73e33dbe80bf23a8125ba7448d032c7170208bffef560225ce1976"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "attestations", "production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "attestations"], "description": "Daily aggregated counts of consensus attestations, providing a business-facing overview of attestation activity.", "columns": {"date": {"name": "date", "description": "Date of the aggregation, formatted as YYYY-MM-DD.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inclusion_delay": {"name": "inclusion_delay", "description": "Delay in slots between attestation inclusion and the target slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Total number of attestations included on the given date with the specified delay.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "attestations"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4051616, "relation_name": "`dbt`.`api_consensus_attestations_daily`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"attestations\"]\n    )\n}}\nSELECT\n    date\n    ,inclusion_delay\n    ,cnt\nFROM {{ ref('int_consensus_attestations_daily') }}\nORDER BY date, inclusion_delay", "language": "sql", "refs": [{"name": "int_consensus_attestations_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_attestations_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_attestations_daily.sql", "compiled": true, "compiled_code": "\nSELECT\n    date\n    ,inclusion_delay\n    ,cnt\nFROM `dbt`.`int_consensus_attestations_daily`\nORDER BY date, inclusion_delay", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_info_active_ongoing_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_info_active_ongoing_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_info_active_ongoing_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_info_active_ongoing_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_info_active_ongoing_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_info_active_ongoing_latest"], "alias": "api_consensus_info_active_ongoing_latest", "checksum": {"name": "sha256", "checksum": "0893d02dc1047056779bec6faf7a7b4d98dbcfe419a180fae5dbb5ff33fdc757"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info", "production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "View providing the latest active and ongoing consensus info filtered where label equals 'active_ongoing'. Contains value and change percentage.", "columns": {"value": {"name": "value", "description": "The main value representing consensus info, as selected in the SQL.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change of the consensus metric, numeric value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "info"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.4314065, "relation_name": "`dbt`.`api_consensus_info_active_ongoing_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nSELECT\n    value\n    ,change_pct\nFROM \n    {{ ref('fct_consensus_info_latest') }}\nWHERE\n    label = 'active_ongoing'", "language": "sql", "refs": [{"name": "fct_consensus_info_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_info_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_info_active_ongoing_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'active_ongoing'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_validators_apy_dist": {"database": "dbt", "schema": "dbt", "name": "api_consensus_validators_apy_dist", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_validators_apy_dist.sql", "original_file_path": "models/consensus/marts/api_consensus_validators_apy_dist.sql", "unique_id": "model.gnosis_dbt.api_consensus_validators_apy_dist", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_validators_apy_dist"], "alias": "api_consensus_validators_apy_dist", "checksum": {"name": "sha256", "checksum": "be12a363630a06b3af47b8d454548880d3cc8a2e6b9498e0ec2f4a7450d6ceb7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "validators_apy", "production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "validators_apy"], "description": "Distribution of validators' APY over time, based on consensus data.", "columns": {"date": {"name": "date", "description": "Date of the APY distribution snapshot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q05": {"name": "q05", "description": "5th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q10": {"name": "q10", "description": "10th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q25": {"name": "q25", "description": "25th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q50": {"name": "q50", "description": "50th percentile (median) of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q75": {"name": "q75", "description": "75th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q90": {"name": "q90", "description": "90th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "q95": {"name": "q95", "description": "95th percentile of validators' APY.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "validators_apy"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.446415, "relation_name": "`dbt`.`api_consensus_validators_apy_dist`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"validators_apy\"]\n    )\n}}\n\nSELECT\n    date,\n    q05,\n    q10,\n    q25,\n    q50,\n    q75,\n    q90,\n    q95 \nFROM {{ ref('int_consensus_validators_apy_dist') }}\nORDER BY date ASC", "language": "sql", "refs": [{"name": "int_consensus_validators_apy_dist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_consensus_validators_apy_dist"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_validators_apy_dist.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q05,\n    q10,\n    q25,\n    q50,\n    q75,\n    q90,\n    q95 \nFROM `dbt`.`int_consensus_validators_apy_dist`\nORDER BY date ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_consensus_info_staked_latest": {"database": "dbt", "schema": "dbt", "name": "api_consensus_info_staked_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "consensus/marts/api_consensus_info_staked_latest.sql", "original_file_path": "models/consensus/marts/api_consensus_info_staked_latest.sql", "unique_id": "model.gnosis_dbt.api_consensus_info_staked_latest", "fqn": ["gnosis_dbt", "consensus", "marts", "api_consensus_info_staked_latest"], "alias": "api_consensus_info_staked_latest", "checksum": {"name": "sha256", "checksum": "27ead768ba878a6bca1fabe5aa8ee6e2487799974331122460ae02296c609d66"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "consensus", "info", "production", "consensus", "info"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "consensus", "info"], "description": "View providing the latest staked consensus information filtered where label is 'Staked'.", "columns": {"value": {"name": "value", "description": "Numeric value representing the staked amount (in wei or relevant units).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in the staked amount compared to previous measurement.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/consensus/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "consensus", "info"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.527465, "relation_name": "`dbt`.`api_consensus_info_staked_latest`", "raw_code": "{{\n    config(\n        materialized='view',\n        tags=[\"production\", \"consensus\", \"info\"]\n    )\n}}\n\nSELECT\n    toUInt32(value) AS value\n    ,change_pct\nFROM \n    {{ ref('fct_consensus_info_latest') }}\nWHERE\n    label = 'Staked'", "language": "sql", "refs": [{"name": "fct_consensus_info_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_consensus_info_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/consensus/marts/api_consensus_info_staked_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    toUInt32(value) AS value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'Staked'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_rwa_backedfi_prices": {"database": "dbt", "schema": "dbt", "name": "int_execution_rwa_backedfi_prices", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/rwa/intermediate/int_execution_rwa_backedfi_prices.sql", "original_file_path": "models/execution/rwa/intermediate/int_execution_rwa_backedfi_prices.sql", "unique_id": "model.gnosis_dbt.int_execution_rwa_backedfi_prices", "fqn": ["gnosis_dbt", "execution", "rwa", "intermediate", "int_execution_rwa_backedfi_prices"], "alias": "int_execution_rwa_backedfi_prices", "checksum": {"name": "sha256", "checksum": "8fb226b6cd9bfe01ecbb433dbdaeb4fc1343491a499bf7ac6d9918bcd1b2b225"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "rwa", "backedfi", "prices", "production", "execution", "rwa", "backedfi", "prices"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, bticker)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, bticker)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "execution", "rwa", "backedfi", "prices"], "description": "Business-facing table containing RWA-backedFi prices with associated metadata.", "columns": {"date": {"name": "date", "description": "Date of the price record in UTC (start of day).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price value in USD (or relevant currency) at the specified date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bticker": {"name": "bticker", "description": "Business ticker symbol representing the backedFi asset.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/rwa/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "rwa", "backedfi", "prices"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, bticker)", "unique_key": "(date, bticker)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.5831163, "relation_name": "`dbt`.`int_execution_rwa_backedfi_prices`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, bticker)',\n        unique_key='(date, bticker)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','execution','rwa','backedfi','prices']\n    )\n}}\n\n\n{% set btickers = [\n    'bC3M',\n    'bCOIN',\n    'bCSPX',\n    'bHIGH',\n    'bIB01',\n    'bIBTA',\n    'bMSTR',\n    'bNVDA',\n    'TSLAx'\n] %}\n\n{% set sql_queries = [] %}\n\n{% for bticker in btickers %}\n    {% set model_name = 'contracts_backedfi_' + bticker + '_Oracle_events' %}\n    {% set sql %}\n        SELECT\n            '{{ bticker }}' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM {{ ref(model_name) }}\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            {{ apply_monthly_incremental_filter('block_timestamp', 'date', 'true') }}\n        GROUP BY 1, 2\n    {% endset %}\n    {% do sql_queries.append(sql) %}\n{% endfor %}\n\n{{ sql_queries | join('\\nunion all\\n') }}", "language": "sql", "refs": [{"name": "contracts_backedfi_bC3M_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bCOIN_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bCSPX_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bHIGH_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bIB01_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bIBTA_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bMSTR_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_bNVDA_Oracle_events", "package": null, "version": null}, {"name": "contracts_backedfi_TSLAx_Oracle_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/rwa/intermediate/int_execution_rwa_backedfi_prices.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily": {"database": "dbt", "schema": "dbt", "name": "fct_execution_rwa_backedfi_prices_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/rwa/marts/fct_execution_rwa_backedfi_prices_daily.sql", "original_file_path": "models/execution/rwa/marts/fct_execution_rwa_backedfi_prices_daily.sql", "unique_id": "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily", "fqn": ["gnosis_dbt", "execution", "rwa", "marts", "fct_execution_rwa_backedfi_prices_daily"], "alias": "fct_execution_rwa_backedfi_prices_daily", "checksum": {"name": "sha256", "checksum": "23c57462bcc37ea5b8a1da5f4a2b0fb69e5cb9a057eff8f710a1b43d3b995832"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "rwa", "backedfi", "prices", "production", "execution", "rwa", "backedfi", "prices"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "rwa", "backedfi", "prices"], "description": "Daily prices for RWA-backed financial instruments, aggregated and processed for business analysis.", "columns": {"date": {"name": "date", "description": "Date of the price record in UTC (YYYY-MM-DD).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price value in USD; range varies, typically positive.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bticker": {"name": "bticker", "description": "Ticker symbol identifier for the financial instrument.", "meta": {}, "data_type": "String", "constraints": [], "quote": true, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/rwa/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "rwa", "backedfi", "prices"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.5943308, "relation_name": "`dbt`.`fct_execution_rwa_backedfi_prices_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','rwa','backedfi','prices']\n    )\n}}\n\n{% set btickers = [\n  'bC3M','bCOIN','bCSPX','bHIGH',\n  'bIB01','bIBTA','bMSTR','bNVDA','TSLAx'\n] %}\n\n{% set fill_start = \"2020-01-01\" %}   -- safely before any token was listed\n{% set unions = [] %}\n\n{% for b in btickers %}\n{% set sql %}\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      '{{ b }}'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM {{ ref('int_execution_rwa_backedfi_prices') }}\n        WHERE bticker = '{{ b }}'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('{{ fill_start }}')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n{% endset %}\n{% do unions.append(sql) %}\n{% endfor %}\n\n{{ unions | join('\\nUNION ALL\\n') }}\nORDER BY bticker, date", "language": "sql", "refs": [{"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}, {"name": "int_execution_rwa_backedfi_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/rwa/marts/fct_execution_rwa_backedfi_prices_daily.sql", "compiled": true, "compiled_code": "\n\n\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nORDER BY bticker, date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_rwa_backedfi_prices_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/rwa/marts/api_execution_rwa_backedfi_prices_daily.sql", "original_file_path": "models/execution/rwa/marts/api_execution_rwa_backedfi_prices_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily", "fqn": ["gnosis_dbt", "execution", "rwa", "marts", "api_execution_rwa_backedfi_prices_daily"], "alias": "api_execution_rwa_backedfi_prices_daily", "checksum": {"name": "sha256", "checksum": "cd31f0623bbc3a795dcfceb3d760ce6de2d0f3aa63ec8cef5e9e83f736c5b088"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "rwa", "backedfi", "prices", "production", "execution", "rwa", "backedfi", "prices"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "rwa", "backedfi", "prices"], "description": "Daily prices of RWA-backed financial instruments used for analytics and reporting.", "columns": {"bticker": {"name": "bticker", "description": "Business ticker symbol identifying the instrument.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "Calendar date of the price observation in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price value in USD units at the specified date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/rwa/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "execution", "rwa", "backedfi", "prices"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.5920577, "relation_name": "`dbt`.`api_execution_rwa_backedfi_prices_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','rwa','backedfi','prices']\n    )\n}}\n\nSELECT\n  bticker,\n  date,\n  price         \nFROM {{ ref('fct_execution_rwa_backedfi_prices_daily') }}\nORDER BY\n  bticker,\n  date", "language": "sql", "refs": [{"name": "fct_execution_rwa_backedfi_prices_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/rwa/marts/api_execution_rwa_backedfi_prices_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  bticker,\n  date,\n  price         \nFROM `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nORDER BY\n  bticker,\n  date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_yields_sdai_rate_daily": {"database": "dbt", "schema": "dbt", "name": "int_yields_sdai_rate_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/yields/intermediate/int_yields_sdai_rate_daily.sql", "original_file_path": "models/execution/yields/intermediate/int_yields_sdai_rate_daily.sql", "unique_id": "model.gnosis_dbt.int_yields_sdai_rate_daily", "fqn": ["gnosis_dbt", "execution", "yields", "intermediate", "int_yields_sdai_rate_daily"], "alias": "int_yields_sdai_rate_daily", "checksum": {"name": "sha256", "checksum": "b659ad1f6cd0b1ccc645f080cfc2756ad9d0a20a0805f1d212be22a168bb4b8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "yields", "sdai_rate", "production", "execution", "yields", "sdai_rate"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "execution", "yields", "sdai_rate"], "description": "Daily calculated rates of SDai based on on-chain events and historical data, used for analytics and reporting.", "columns": {"date": {"name": "date", "description": "The day for which the rate is calculated, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sdai_conversion": {"name": "sdai_conversion", "description": "The minimal observed conversion rate (asset/share) for the day.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "The calculated rate (asset/share) for the day, rounded to 12 decimal places.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/yields/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "execution", "yields", "sdai_rate"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.6054823, "relation_name": "`dbt`.`int_yields_sdai_rate_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','execution','yields','sdai_rate']\n    )\n}}\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        {{ ref('contracts_sdai_events') }}\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        {{ apply_monthly_incremental_filter('block_timestamp','date','true') }}\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n{% if is_incremental() %}\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        {{ this }}\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM {{ this }}\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n{% endif %}\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            {% if is_incremental() %}\n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            {% else %}\n            lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                )\n            {% endif %}\n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "language": "sql", "refs": [{"name": "contracts_sdai_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter", "macro.dbt_clickhouse.is_incremental"], "nodes": ["model.gnosis_dbt.contracts_sdai_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/yields/intermediate/int_yields_sdai_rate_daily.sql", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`int_yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`int_yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_yields_sdai_apy_daily": {"database": "dbt", "schema": "dbt", "name": "fct_yields_sdai_apy_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/yields/marts/fct_yields_sdai_apy_daily.sql", "original_file_path": "models/execution/yields/marts/fct_yields_sdai_apy_daily.sql", "unique_id": "model.gnosis_dbt.fct_yields_sdai_apy_daily", "fqn": ["gnosis_dbt", "execution", "yields", "marts", "fct_yields_sdai_apy_daily"], "alias": "fct_yields_sdai_apy_daily", "checksum": {"name": "sha256", "checksum": "3fd97cfa613783e3345ce0fbf168fbd45b277407a930cbcce9f3596fca792e98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "yields", "sdai_apy", "production", "execution", "yields", "sdai_apy"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "yields", "sdai_apy"], "description": "Business-facing table containing daily yield metrics, including calculated APY and moving averages, derived from the raw yields data.", "columns": {"date": {"name": "date", "description": "Date of the yield record (UTC), in 'YYYY-MM-DD' format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy": {"name": "apy", "description": "Annual Percentage Yield (APY) calculated as floor of ((1 + rate)^365 - 1) * 100, rounded to 4 decimal places.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy_7DMA": {"name": "apy_7DMA", "description": "7-day moving average of APY, calculated over the previous 6 days and current day, rounded to 4 decimal places.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy_30DMA": {"name": "apy_30DMA", "description": "30-day moving average of APY, calculated over the previous 29 days and current day, rounded to 4 decimal places.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy_7DMM": {"name": "apy_7DMM", "description": "7-day median of APY, calculated over the previous 6 days and current day, rounded to 4 decimal places.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "apy_30DMM": {"name": "apy_30DMM", "description": "30-day median of APY, calculated over the previous 29 days and current day, rounded to 4 decimal places.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "String label indicating the type of APY value ('Daily', '7DMA', '30DMA', '7DMM', '30DMM').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/yields/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "yields", "sdai_apy"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6135037, "relation_name": "`dbt`.`fct_yields_sdai_apy_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','yields','sdai_apy']\n    )\n}}\n\nWITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM {{ ref('int_yields_sdai_rate_daily') }}\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "language": "sql", "refs": [{"name": "int_yields_sdai_rate_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_yields_sdai_rate_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/yields/marts/fct_yields_sdai_apy_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`int_yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_GBCDeposit_deposists_daily": {"database": "dbt", "schema": "dbt", "name": "int_GBCDeposit_deposists_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/GBCDeposit/intermediate/int_GBCDeposit_deposists_daily.sql", "original_file_path": "models/execution/GBCDeposit/intermediate/int_GBCDeposit_deposists_daily.sql", "unique_id": "model.gnosis_dbt.int_GBCDeposit_deposists_daily", "fqn": ["gnosis_dbt", "execution", "GBCDeposit", "intermediate", "int_GBCDeposit_deposists_daily"], "alias": "int_GBCDeposit_deposists_daily", "checksum": {"name": "sha256", "checksum": "1620ca152b984bc4a92b04f7c19c88b41ef3789c1dcfe6982b0299f89975b3a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "GBCDeposit", "production", "execution", "GBCDeposit"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "GBCDeposit"], "description": "Daily aggregated data of GBC deposits, including withdrawal credentials and total amount deposited.", "columns": {"date": {"name": "date", "description": "The start of the day for the deposit record, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_credentials": {"name": "withdrawal_credentials", "description": "Encoded withdrawal credentials from deposit parameters.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Sum of deposit amounts in wei for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/GBCDeposit/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "GBCDeposit"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.619356, "relation_name": "`dbt`.`int_GBCDeposit_deposists_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','GBCDeposit']\n    )\n}}\n\n\nSELECT \n    toStartOfDay(block_timestamp) AS date\n    ,decoded_params['withdrawal_credentials'] AS withdrawal_credentials\n    ,SUM(reinterpretAsUInt64(unhex(substring(decoded_params['amount'], 3)))) AS amount\nFROM {{ ref('contracts_GBCDeposit_events') }}\nWHERE\n    event_name = 'DepositEvent'\n    {{ apply_monthly_incremental_filter(source_field='block_timestamp',destination_field='date',add_and=true) }}\nGROUP BY 1, 2", "language": "sql", "refs": [{"name": "contracts_GBCDeposit_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_GBCDeposit_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/GBCDeposit/intermediate/int_GBCDeposit_deposists_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(block_timestamp) AS date\n    ,decoded_params['withdrawal_credentials'] AS withdrawal_credentials\n    ,SUM(reinterpretAsUInt64(unhex(substring(decoded_params['amount'], 3)))) AS amount\nFROM `dbt`.`contracts_GBCDeposit_events`\nWHERE\n    event_name = 'DepositEvent'\n    \n  \n\nGROUP BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_execution__blocks": {"database": "dbt", "schema": "dbt", "name": "stg_execution__blocks", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/staging/stg_execution__blocks.sql", "original_file_path": "models/execution/blocks/staging/stg_execution__blocks.sql", "unique_id": "model.gnosis_dbt.stg_execution__blocks", "fqn": ["gnosis_dbt", "execution", "blocks", "staging", "stg_execution__blocks"], "alias": "stg_execution__blocks", "checksum": {"name": "sha256", "checksum": "68e5433506feef56e89a6718b8a76288ea22076052df990f22d699dee1e0198e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "production", "execution", "blocks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks"], "description": "Business-facing staging model for execution layer blocks, including metadata, transaction, log, transfer, contract, trace, and index metadata.", "columns": {"extra_data": {"name": "extra_data", "description": "Arbitrary extra-data bytes set by the block proposer (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mix_hash": {"name": "mix_hash", "description": "Mix hash (pre-merge PoW) or random field.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_hash": {"name": "parent_hash", "description": "Hash of the parent block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Total gas consumed by transactions in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "author": {"name": "author", "description": "Address (20-byte hex) of the validator/miner that proposed the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipts_root": {"name": "receipts_root", "description": "Root hash of the receipts trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "Root hash of the state trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transactions_root": {"name": "transactions_root", "description": "Root hash of the transactions trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Height of the block containing the record.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Keccak-256 hash of the block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "uncles_hash": {"name": "uncles_hash", "description": "Keccak-256 hash of the ommers list.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Serialized block size in bytes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Block nonce (legacy field).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_fee_per_gas": {"name": "base_fee_per_gas", "description": "Base fee per gas introduced by EIP-1559 (wei).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_root": {"name": "withdrawals_root", "description": "Root hash of withdrawals list (Shanghai+).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp for the block (materialized from `timestamp`).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier (100 for Gnosis).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "blocks"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6225727, "relation_name": "`dbt`.`stg_execution__blocks`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','blocks']\n    )\n}}\n\n\nWITH\n\nsource AS (\n    SELECT \n        block_number,\n        block_hash,\n        parent_hash,\n        uncles_hash,\n        author,\n        state_root,\n        transactions_root,\n        receipts_root,\n        gas_used,\n        gas_limit,\n        extra_data,\n        size,\n        mix_hash,\n        nonce,\n        base_fee_per_gas,\n        withdrawals_root,\n        block_timestamp\n    FROM \n        {{ source('execution','blocks') }}\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n)\n\nSELECT\n    block_number,\n    block_hash,\n    parent_hash,\n    uncles_hash,\n    CONCAT('0x',author) AS author,\n    state_root,\n    transactions_root,\n    receipts_root,\n    gas_used,\n    gas_limit,\n    extra_data,\n    {{ decode_hex_tokens('extra_data') }} AS decoded_extra_data,\n    size,\n    mix_hash,\n    nonce,\n    base_fee_per_gas,\n    withdrawals_root,\n    block_timestamp\nFROM source", "language": "sql", "refs": [], "sources": [["execution", "blocks"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_hex_tokens"], "nodes": ["source.gnosis_dbt.execution.blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/staging/stg_execution__blocks.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n\nsource AS (\n    SELECT \n        block_number,\n        block_hash,\n        parent_hash,\n        uncles_hash,\n        author,\n        state_root,\n        transactions_root,\n        receipts_root,\n        gas_used,\n        gas_limit,\n        extra_data,\n        size,\n        mix_hash,\n        nonce,\n        base_fee_per_gas,\n        withdrawals_root,\n        block_timestamp\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n)\n\nSELECT\n    block_number,\n    block_hash,\n    parent_hash,\n    uncles_hash,\n    CONCAT('0x',author) AS author,\n    state_root,\n    transactions_root,\n    receipts_root,\n    gas_used,\n    gas_limit,\n    extra_data,\n    \narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(coalesce(extra_data, '')), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(coalesce(extra_data, '')), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(coalesce(extra_data, ''))) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data,\n    size,\n    mix_hash,\n    nonce,\n    base_fee_per_gas,\n    withdrawals_root,\n    block_timestamp\nFROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_blocks_clients_version_daily": {"database": "dbt", "schema": "dbt", "name": "int_execution_blocks_clients_version_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/intermediate/int_execution_blocks_clients_version_daily.sql", "original_file_path": "models/execution/blocks/intermediate/int_execution_blocks_clients_version_daily.sql", "unique_id": "model.gnosis_dbt.int_execution_blocks_clients_version_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "int_execution_blocks_clients_version_daily"], "alias": "int_execution_blocks_clients_version_daily", "checksum": {"name": "sha256", "checksum": "57752346ad58a92e4825af71169cb561bed3d79b40fb447c9bbb66208d8e4499"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, client, version)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, client, version)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "execution", "blocks"], "description": "\"Model representing daily counts of unique clients per version.\"", "columns": {"version": {"name": "version", "description": "Client version string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of clients for the version on the date.", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "Date of the data aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client name or identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "access": "public", "tags": ["production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, client, version)", "unique_key": "(date, client, version)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.6284943, "relation_name": "`dbt`.`int_execution_blocks_clients_version_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, client, version)',\n        unique_key='(date, client, version)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','execution','blocks']\n    ) \n}}\n\nWITH\n\nclients_version AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,multiIf(\n             lower(decoded_extra_data[1]) = 'choose' \n            OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n            OR lower(decoded_extra_data[1]) = 'sanae.io'\n            OR decoded_extra_data[1] = ''  , \n            'Unknown',\n            decoded_extra_data[1]\n        )   AS client\n        ,IF(length(decoded_extra_data)>1, \n            IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n            ''\n        ) AS version\n        ,COUNT(*) AS cnt\n    FROM {{ ref('stg_execution__blocks') }}\n    {{ apply_monthly_incremental_filter('block_timestamp', 'date') }}\n    GROUP BY 1, 2, 3\n)\n\nSELECT\n    *\nFROM clients_version", "language": "sql", "refs": [{"name": "stg_execution__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_execution__blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/intermediate/int_execution_blocks_clients_version_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nclients_version AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,multiIf(\n             lower(decoded_extra_data[1]) = 'choose' \n            OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n            OR lower(decoded_extra_data[1]) = 'sanae.io'\n            OR decoded_extra_data[1] = ''  , \n            'Unknown',\n            decoded_extra_data[1]\n        )   AS client\n        ,IF(length(decoded_extra_data)>1, \n            IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n            ''\n        ) AS version\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_execution__blocks`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2, 3\n)\n\nSELECT\n    *\nFROM clients_version", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_blocks_gas_usage_daily": {"database": "dbt", "schema": "dbt", "name": "int_execution_blocks_gas_usage_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/intermediate/int_execution_blocks_gas_usage_daily.sql", "original_file_path": "models/execution/blocks/intermediate/int_execution_blocks_gas_usage_daily.sql", "unique_id": "model.gnosis_dbt.int_execution_blocks_gas_usage_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "int_execution_blocks_gas_usage_daily"], "alias": "int_execution_blocks_gas_usage_daily", "checksum": {"name": "sha256", "checksum": "3c4b7366a0718ef87315236d1c673694082cf585ecdbecff3c392c019c358271"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "gas", "production", "execution", "blocks", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "execution", "blocks", "gas"], "description": "Daily aggregation of gas usage statistics for execution blocks.", "columns": {"date": {"name": "date", "description": "Date of the execution block.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used_sum": {"name": "gas_used_sum", "description": "Total gas consumed by transactions in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit_sum": {"name": "gas_limit_sum", "description": "Maximum gas allowed in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used_fraq": {"name": "gas_used_fraq", "description": "Gas used fraction (gas_used_sum / gas_limit_sum).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)", "tags": ["production", "execution", "blocks", "gas"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)"}, "created_at": 1760535477.6325839, "relation_name": "`dbt`.`int_execution_blocks_gas_usage_daily`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    engine='ReplacingMergeTree()',\n    order_by='(date)',\n    unique_key='(date)',\n    partition_by='toStartOfMonth(date)',\n    tags=['production','execution','blocks','gas']\n  )\n}}\n\nSELECT\n  toDate(block_timestamp)         AS date,\n  SUM(gas_used)                   AS gas_used_sum,\n  SUM(gas_limit)                  AS gas_limit_sum,\n  gas_used_sum / NULLIF(gas_limit_sum, 0) AS gas_used_fraq\nFROM {{ ref('stg_execution__blocks') }}\n{{ apply_monthly_incremental_filter('block_timestamp', 'date') }}\nGROUP BY date", "language": "sql", "refs": [{"name": "stg_execution__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_execution__blocks"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/intermediate/int_execution_blocks_gas_usage_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  toDate(block_timestamp)         AS date,\n  SUM(gas_used)                   AS gas_used_sum,\n  SUM(gas_limit)                  AS gas_limit_sum,\n  gas_used_sum / NULLIF(gas_limit_sum, 0) AS gas_used_fraq\nFROM `dbt`.`stg_execution__blocks`\n\n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_blocks_gas_usage_daily`\n    )\n  \n\nGROUP BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_blocks_gas_usage_pct_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/api_execution_blocks_gas_usage_pct_daily.sql", "original_file_path": "models/execution/blocks/marts/api_execution_blocks_gas_usage_pct_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "api_execution_blocks_gas_usage_pct_daily"], "alias": "api_execution_blocks_gas_usage_pct_daily", "checksum": {"name": "sha256", "checksum": "904c9c2d22e2f9c42f9e9001ba1b5a524b5edf82e0b130654f5eb667d8c470ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "gas", "production", "execution", "blocks", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks", "gas"], "description": "Daily percentage of gas usage in execution blocks.", "columns": {"date": {"name": "date", "description": "Date of the data entry.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Percentage of gas used in the block.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "blocks", "gas"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6606565, "relation_name": "`dbt`.`api_execution_blocks_gas_usage_pct_daily`", "raw_code": "{{\n  config(\n    materialized='view',\n    tags=['production','execution','blocks','gas']\n  )\n}}\n\nSELECT\n  date,\n  ROUND(gas_used_fraq * 100, 2) AS value\nFROM {{ ref('int_execution_blocks_gas_usage_daily') }}\nWHERE date < today()   \nORDER BY date", "language": "sql", "refs": [{"name": "int_execution_blocks_gas_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/api_execution_blocks_gas_usage_pct_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  date,\n  ROUND(gas_used_fraq * 100, 2) AS value\nFROM `dbt`.`int_execution_blocks_gas_usage_daily`\nWHERE date < today()   \nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly": {"database": "dbt", "schema": "dbt", "name": "fct_execution_blocks_gas_usage_monthly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/fct_execution_blocks_gas_usage_monthly.sql", "original_file_path": "models/execution/blocks/marts/fct_execution_blocks_gas_usage_monthly.sql", "unique_id": "model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "fct_execution_blocks_gas_usage_monthly"], "alias": "fct_execution_blocks_gas_usage_monthly", "checksum": {"name": "sha256", "checksum": "522be31934b2b2eb0e0ef12649160534a502b965a0b8ccf18ff8b693a08a1db0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "gas"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["production", "execution", "transactions", "gas"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "transactions", "gas"]}, "created_at": 1760535475.9159927, "relation_name": "`dbt`.`fct_execution_blocks_gas_usage_monthly`", "raw_code": "{{\n  config(\n    materialized='view', \n    tags=['production','execution','transactions','gas']\n    )\n}}\n\nWITH monthly AS (\n  SELECT\n    date_trunc('month', date) AS month,\n    SUM(gas_used_sum)         AS gas_used_sum_monthly,\n    SUM(gas_limit_sum)        AS gas_limit_sum_monthly\n  FROM {{ ref('int_execution_blocks_gas_usage_daily') }}\n  GROUP BY month\n)\nSELECT\n  month,\n  gas_used_sum_monthly,\n  gas_limit_sum_monthly,\n  gas_used_sum_monthly / NULLIF(gas_limit_sum_monthly, 0) AS used\nFROM monthly", "language": "sql", "refs": [{"name": "int_execution_blocks_gas_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/fct_execution_blocks_gas_usage_monthly.sql", "compiled": true, "compiled_code": "\n\nWITH monthly AS (\n  SELECT\n    date_trunc('month', date) AS month,\n    SUM(gas_used_sum)         AS gas_used_sum_monthly,\n    SUM(gas_limit_sum)        AS gas_limit_sum_monthly\n  FROM `dbt`.`int_execution_blocks_gas_usage_daily`\n  GROUP BY month\n)\nSELECT\n  month,\n  gas_used_sum_monthly,\n  gas_limit_sum_monthly,\n  gas_used_sum_monthly / NULLIF(gas_limit_sum_monthly, 0) AS used\nFROM monthly", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_blocks_clients_pct_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_blocks_clients_pct_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/api_execution_blocks_clients_pct_daily.sql", "original_file_path": "models/execution/blocks/marts/api_execution_blocks_clients_pct_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_pct_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "api_execution_blocks_clients_pct_daily"], "alias": "api_execution_blocks_clients_pct_daily", "checksum": {"name": "sha256", "checksum": "47cbc9dfd53f1f454e79cdb29458bbbc8a9f12e231ac326e254fa1438808cd31"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks"], "description": "Daily percentage of API execution blocks per client.", "columns": {"date": {"name": "date", "description": "Date of the data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Percentage value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Height of the block containing the record.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Keccak-256 hash of the block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_hash": {"name": "parent_hash", "description": "Hash of the parent block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "author": {"name": "author", "description": "Address of the validator/miner that proposed the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "Root hash of the state trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transactions_root": {"name": "transactions_root", "description": "Root hash of the transactions trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipts_root": {"name": "receipts_root", "description": "Root hash of the receipts trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Total gas consumed by transactions in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "Maximum gas allowed in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_data": {"name": "extra_data", "description": "Arbitrary extra-data bytes set by the block proposer (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "logs_bloom": {"name": "logs_bloom", "description": "Bloom filter for logs in this block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix epoch seconds when the block was proposed.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Serialized block size in bytes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mix_hash": {"name": "mix_hash", "description": "Mix hash (pre-merge PoW) or random field.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Block nonce (legacy field).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_fee_per_gas": {"name": "base_fee_per_gas", "description": "Base fee per gas introduced by EIP-1559 (wei).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_root": {"name": "withdrawals_root", "description": "Root hash of withdrawals list (Shanghai+).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier (100 for Gnosis).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6529443, "relation_name": "`dbt`.`api_execution_blocks_clients_pct_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','blocks']\n    )\n}}\n\nSELECT\n    date\n    ,client\n    ,ROUND(fraq * 100, 2) AS value\nFROM {{ ref('fct_execution_blocks_clients_daily') }}\nORDER BY date, client", "language": "sql", "refs": [{"name": "fct_execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/api_execution_blocks_clients_pct_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,client\n    ,ROUND(fraq * 100, 2) AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_blocks_clients_daily": {"database": "dbt", "schema": "dbt", "name": "fct_execution_blocks_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/fct_execution_blocks_clients_daily.sql", "original_file_path": "models/execution/blocks/marts/fct_execution_blocks_clients_daily.sql", "unique_id": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "fct_execution_blocks_clients_daily"], "alias": "fct_execution_blocks_clients_daily", "checksum": {"name": "sha256", "checksum": "4e5bf0f6a81bdb8f787a4d99d0a15e0abbcd6270866ee00873f59e4eab8e932d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks"], "description": "\"Daily aggregation of execution blocks by clients.\"", "columns": {"date": {"name": "date", "description": "Date of the aggregation.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Total count of blocks for the client on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fraq": {"name": "fraq", "description": "Fraction of client's blocks out of total blocks on the date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6555936, "relation_name": "`dbt`.`fct_execution_blocks_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','blocks']\n    )\n}}\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(cnt) AS cnt\n    FROM {{ ref('int_execution_blocks_clients_version_daily') }}\n    WHERE date < today()\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,cnt\n    ,cnt/(SUM(cnt) OVER (PARTITION BY date)) AS fraq\nFROM \n    clients_blocks", "language": "sql", "refs": [{"name": "int_execution_blocks_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_blocks_clients_version_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/fct_execution_blocks_clients_daily.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(cnt) AS cnt\n    FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    WHERE date < today()\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,cnt\n    ,cnt/(SUM(cnt) OVER (PARTITION BY date)) AS fraq\nFROM \n    clients_blocks", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_monthly": {"database": "dbt", "schema": "dbt", "name": "api_execution_blocks_gas_usage_pct_monthly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/api_execution_blocks_gas_usage_pct_monthly.sql", "original_file_path": "models/execution/blocks/marts/api_execution_blocks_gas_usage_pct_monthly.sql", "unique_id": "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_monthly", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "api_execution_blocks_gas_usage_pct_monthly"], "alias": "api_execution_blocks_gas_usage_pct_monthly", "checksum": {"name": "sha256", "checksum": "83a6c76bc5a1b5195249a4ec2853703b16bbf64d9e8f5c59655403ceff824c2f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "gas", "production", "execution", "blocks", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks", "gas"], "description": "Monthly percentage of gas usage for API execution blocks.", "columns": {"date": {"name": "date", "description": "Month of the data", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Percentage of gas usage", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "blocks", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6644654, "relation_name": "`dbt`.`api_execution_blocks_gas_usage_pct_monthly`", "raw_code": "{{\n  config(\n    materialized='view',\n    tags=['production','execution','blocks','gas']\n  )\n}}\n\nSELECT\n  month AS date,\n  ROUND(used * 100, 2) AS value\nFROM {{ ref('fct_execution_blocks_gas_usage_monthly') }}\nORDER BY date", "language": "sql", "refs": [{"name": "fct_execution_blocks_gas_usage_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/api_execution_blocks_gas_usage_pct_monthly.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  month AS date,\n  ROUND(used * 100, 2) AS value\nFROM `dbt`.`fct_execution_blocks_gas_usage_monthly`\nORDER BY date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_blocks_clients_cnt_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/blocks/marts/api_execution_blocks_clients_cnt_daily.sql", "original_file_path": "models/execution/blocks/marts/api_execution_blocks_clients_cnt_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "api_execution_blocks_clients_cnt_daily"], "alias": "api_execution_blocks_clients_cnt_daily", "checksum": {"name": "sha256", "checksum": "8d18ae4464d0ae0dcc2167ad7eaa402b4af6c33f2daa297a473eca8cc2f030be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "blocks", "production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "blocks"], "description": "\"Model providing daily count of API execution blocks per client.\"", "columns": {"date": {"name": "date", "description": "Date of the API execution block.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of execution blocks.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/blocks/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "blocks"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.6496053, "relation_name": "`dbt`.`api_execution_blocks_clients_cnt_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','blocks']\n    )\n}}\n\n\nSELECT\n    date\n    ,client\n    ,cnt AS value\nFROM {{ ref('fct_execution_blocks_clients_daily') }}\nORDER BY date, client", "language": "sql", "refs": [{"name": "fct_execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/api_execution_blocks_clients_cnt_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,client\n    ,cnt AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_execution__transactions": {"database": "dbt", "schema": "dbt", "name": "stg_execution__transactions", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/staging/stg_execution__transactions.sql", "original_file_path": "models/execution/transactions/staging/stg_execution__transactions.sql", "unique_id": "model.gnosis_dbt.stg_execution__transactions", "fqn": ["gnosis_dbt", "execution", "transactions", "staging", "stg_execution__transactions"], "alias": "stg_execution__transactions", "checksum": {"name": "sha256", "checksum": "5d73bd124ba91e3421b4c5eadc00287936f4f03a1e9b9c4624227b5657dc4b52"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Business-facing staging model for execution transactions, including transaction details, input data, gas, success status, and associated metadata for analysis and reporting.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block containing the transaction.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Zero-based index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Keccak-256 hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Transaction count of the sender before this transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "Sender address (EOA or contract) that signed the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "Recipient address (null for contract creation).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value transferred in wei.", "meta": {}, "data_type": "UInt256", "constraints": [], "quote": null, "tags": [], "granularity": null}, "input": {"name": "input", "description": "Calldata / input data supplied with the transaction (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "Gas limit provided by the sender.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Actual gas used by the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Legacy gas price (wei) for pre-EIP-1559 transactions.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Envelope type (0 = legacy, 1 = access-list, 2 = EIP-1559).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_priority_fee_per_gas": {"name": "max_priority_fee_per_gas", "description": "Max miner tip per gas (wei) for EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_fee_per_gas": {"name": "max_fee_per_gas", "description": "Max total fee per gas (wei) under EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "1 if the transaction succeeded; 0 if it reverted.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_bytes": {"name": "n_input_bytes", "description": "Byte length of the input data.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_zero_bytes": {"name": "n_input_zero_bytes", "description": "Number of zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_nonzero_bytes": {"name": "n_input_nonzero_bytes", "description": "Number of non-zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_rlp_bytes": {"name": "n_rlp_bytes", "description": "Total RLP-encoded payload size (bytes) if available.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Block timestamp (seconds since epoch).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "r": {"name": "r", "description": "ECDSA signature r.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "s": {"name": "s", "description": "ECDSA signature s.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v": {"name": "v", "description": "ECDSA recovery id / y-parity.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the enclosing block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7384973, "relation_name": "`dbt`.`stg_execution__transactions`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production', 'execution', 'transactions']\n    )\n}}\n\nWITH\n\nsource AS (\n    SELECT\n        block_number,\n        transaction_index,\n        transaction_hash,\n        nonce,\n        from_address,\n        to_address,\n        value_string,\n        input,\n        gas_limit,\n        gas_used,\n        gas_price,\n        transaction_type,\n        max_priority_fee_per_gas,\n        max_fee_per_gas,\n        success,\n        n_input_bytes,\n        n_input_zero_bytes,\n        n_input_nonzero_bytes,\n        n_rlp_bytes,\n        r,\n        s,\n        v,\n        block_hash,\n        block_timestamp\n    FROM {{ source('execution','transactions') }} FINAL\n)\n\nSELECT\n    block_number,\n    transaction_index,\n    transaction_hash,\n    nonce,\n    CONCAT('0x',from_address) AS from_address,\n    IF(to_address IS NULL, NULL, CONCAT('0x',to_address)) AS to_address,\n    CAST(value_string AS UInt256) AS value,\n    input,\n    gas_limit,\n    gas_used,\n    gas_price,\n    transaction_type,\n    max_priority_fee_per_gas,\n    max_fee_per_gas,\n    success,\n    n_input_bytes,\n    n_input_zero_bytes,\n    n_input_nonzero_bytes,\n    n_rlp_bytes,\n    r,\n    s,\n    v,\n    block_hash,\n    block_timestamp\nFROM source", "language": "sql", "refs": [], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.execution.transactions"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/staging/stg_execution__transactions.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n    SELECT\n        block_number,\n        transaction_index,\n        transaction_hash,\n        nonce,\n        from_address,\n        to_address,\n        value_string,\n        input,\n        gas_limit,\n        gas_used,\n        gas_price,\n        transaction_type,\n        max_priority_fee_per_gas,\n        max_fee_per_gas,\n        success,\n        n_input_bytes,\n        n_input_zero_bytes,\n        n_input_nonzero_bytes,\n        n_rlp_bytes,\n        r,\n        s,\n        v,\n        block_hash,\n        block_timestamp\n    FROM `execution`.`transactions` FINAL\n)\n\nSELECT\n    block_number,\n    transaction_index,\n    transaction_hash,\n    nonce,\n    CONCAT('0x',from_address) AS from_address,\n    IF(to_address IS NULL, NULL, CONCAT('0x',to_address)) AS to_address,\n    CAST(value_string AS UInt256) AS value,\n    input,\n    gas_limit,\n    gas_used,\n    gas_price,\n    transaction_type,\n    max_priority_fee_per_gas,\n    max_fee_per_gas,\n    success,\n    n_input_bytes,\n    n_input_zero_bytes,\n    n_input_nonzero_bytes,\n    n_rlp_bytes,\n    r,\n    s,\n    v,\n    block_hash,\n    block_timestamp\nFROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_transactions_info_daily": {"database": "dbt", "schema": "dbt", "name": "int_execution_transactions_info_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/intermediate/int_execution_transactions_info_daily.sql", "original_file_path": "models/execution/transactions/intermediate/int_execution_transactions_info_daily.sql", "unique_id": "model.gnosis_dbt.int_execution_transactions_info_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "int_execution_transactions_info_daily"], "alias": "int_execution_transactions_info_daily", "checksum": {"name": "sha256", "checksum": "930f4247c340082998f078368870169f17a4fd2eb9d8e8ee8d0a39de2f2c8762"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, transaction_type, success)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "engine": "ReplacingMergeTree()", "order_by": "(date, transaction_type, success)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "execution", "transactions"], "description": "Daily aggregated information on execution transactions, including transaction type, success status, gas usage, and value.", "columns": {"date": {"name": "date", "description": "Day (UTC) derived from block_timestamp.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Transaction envelope type as string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "1 if tx succeeded, 0 otherwise.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_txs": {"name": "n_txs", "description": "Count of transactions for the group.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value": {"name": "xdai_value", "description": "Sum of value (native units).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value_avg": {"name": "xdai_value_avg", "description": "Average value per tx (native units).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value_median": {"name": "xdai_value_median", "description": "Median value per tx (native units).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Sum of gas units used.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price_avg": {"name": "gas_price_avg", "description": "Average gas price in Gwei (cast to Int32).", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price_median": {"name": "gas_price_median", "description": "Median gas price in Gwei (cast to Int32).", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_native_sum": {"name": "fee_native_sum", "description": "Total fees in native units (gas_used * gas_price, /1e18).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_usd_sum": {"name": "fee_usd_sum", "description": "Total fees converted to USD using daily price.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, transaction_type, success)", "unique_key": "(date, transaction_type, success)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.744786, "relation_name": "`dbt`.`int_execution_transactions_info_daily`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    engine='ReplacingMergeTree()',\n    order_by='(date, transaction_type, success)',\n    unique_key='(date, transaction_type, success)',\n    partition_by='toStartOfMonth(date)',\n    settings={'allow_nullable_key': 1},\n    tags=['production','execution','transactions']\n  )\n}}\n\nWITH tx AS (\n  SELECT\n    block_timestamp,\n    toDate(block_timestamp)             AS date,\n    toString(transaction_type)          AS transaction_type,\n    coalesce(success, 0)                AS success,\n    toFloat64(value) / 1e18             AS value_native,             \n    toFloat64(coalesce(gas_used, 0))    AS gas_used,                 \n    toFloat64(coalesce(gas_price, 0))   AS gas_price                 \n  FROM {{ ref('stg_execution__transactions') }}\n  WHERE block_timestamp < today()\n  {{ apply_monthly_incremental_filter('block_timestamp', 'date', 'true') }}\n),\n\nagg_base AS (\n  SELECT\n    date,\n    transaction_type,\n    success,\n    COUNT()                     AS n_txs,\n    SUM(value_native)           AS xdai_value_sum_raw,\n    AVG(value_native)           AS xdai_value_avg_raw,\n    median(value_native)        AS xdai_value_median_raw,\n    SUM(gas_used)               AS gas_used_sum_raw,          -- \u201cgas units\u201d\n    AVG(gas_price)              AS gas_price_avg_raw_wei,     -- in wei\n    median(gas_price)           AS gas_price_med_raw_wei,     -- in wei\n    SUM(gas_used * gas_price)   AS fee_sum_raw_wei            -- in wei\n  FROM tx\n  GROUP BY date, transaction_type, success\n),\n\nagg AS (\n  SELECT\n    date,\n    transaction_type,\n    success,\n    n_txs,\n    xdai_value_sum_raw                       AS xdai_value,\n    xdai_value_avg_raw                       AS xdai_value_avg,\n    xdai_value_median_raw                    AS xdai_value_median,\n    gas_used_sum_raw                         AS gas_used,\n    CAST(gas_price_avg_raw_wei / 1e9 AS Int32)   AS gas_price_avg,       -- Gwei\n    CAST(gas_price_med_raw_wei / 1e9 AS Int32)   AS gas_price_median,    -- Gwei\n    fee_sum_raw_wei / 1e18                   AS fee_native_sum          -- xDai\n  FROM agg_base\n),\n\npx AS (\n  SELECT\n    date,\n    price\n  FROM {{ ref('stg_crawlers_data__dune_prices') }}\n  WHERE symbol = 'XDAI'\n  {{ apply_monthly_incremental_filter('date', 'date', 'true') }}\n)\n\nSELECT\n  a.date,\n  a.transaction_type,\n  a.success,\n  a.n_txs,\n  a.xdai_value,\n  a.xdai_value_avg,\n  a.xdai_value_median,\n  a.gas_used,\n  a.gas_price_avg,\n  a.gas_price_median,\n  a.fee_native_sum,\n  a.fee_native_sum * coalesce(px.price, 1.0) AS fee_usd_sum\nFROM agg a\nLEFT JOIN px\n  ON px.date = a.date", "language": "sql", "refs": [{"name": "stg_execution__transactions", "package": null, "version": null}, {"name": "stg_crawlers_data__dune_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_execution__transactions", "model.gnosis_dbt.stg_crawlers_data__dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/int_execution_transactions_info_daily.sql", "compiled": true, "compiled_code": "\n\nWITH tx AS (\n  SELECT\n    block_timestamp,\n    toDate(block_timestamp)             AS date,\n    toString(transaction_type)          AS transaction_type,\n    coalesce(success, 0)                AS success,\n    toFloat64(value) / 1e18             AS value_native,             \n    toFloat64(coalesce(gas_used, 0))    AS gas_used,                 \n    toFloat64(coalesce(gas_price, 0))   AS gas_price                 \n  FROM `dbt`.`stg_execution__transactions`\n  WHERE block_timestamp < today()\n  \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_info_daily`\n    )\n  \n\n),\n\nagg_base AS (\n  SELECT\n    date,\n    transaction_type,\n    success,\n    COUNT()                     AS n_txs,\n    SUM(value_native)           AS xdai_value_sum_raw,\n    AVG(value_native)           AS xdai_value_avg_raw,\n    median(value_native)        AS xdai_value_median_raw,\n    SUM(gas_used)               AS gas_used_sum_raw,          -- \u201cgas units\u201d\n    AVG(gas_price)              AS gas_price_avg_raw_wei,     -- in wei\n    median(gas_price)           AS gas_price_med_raw_wei,     -- in wei\n    SUM(gas_used * gas_price)   AS fee_sum_raw_wei            -- in wei\n  FROM tx\n  GROUP BY date, transaction_type, success\n),\n\nagg AS (\n  SELECT\n    date,\n    transaction_type,\n    success,\n    n_txs,\n    xdai_value_sum_raw                       AS xdai_value,\n    xdai_value_avg_raw                       AS xdai_value_avg,\n    xdai_value_median_raw                    AS xdai_value_median,\n    gas_used_sum_raw                         AS gas_used,\n    CAST(gas_price_avg_raw_wei / 1e9 AS Int32)   AS gas_price_avg,       -- Gwei\n    CAST(gas_price_med_raw_wei / 1e9 AS Int32)   AS gas_price_median,    -- Gwei\n    fee_sum_raw_wei / 1e18                   AS fee_native_sum          -- xDai\n  FROM agg_base\n),\n\npx AS (\n  SELECT\n    date,\n    price\n  FROM `dbt`.`stg_crawlers_data__dune_prices`\n  WHERE symbol = 'XDAI'\n  \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(date)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_info_daily`\n    )\n  \n\n)\n\nSELECT\n  a.date,\n  a.transaction_type,\n  a.success,\n  a.n_txs,\n  a.xdai_value,\n  a.xdai_value_avg,\n  a.xdai_value_median,\n  a.gas_used,\n  a.gas_price_avg,\n  a.gas_price_median,\n  a.fee_native_sum,\n  a.fee_native_sum * coalesce(px.price, 1.0) AS fee_usd_sum\nFROM agg a\nLEFT JOIN px\n  ON px.date = a.date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent": {"database": "dbt", "schema": "dbt", "name": "int_execution_transactions_by_project_hourly_recent", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/intermediate/int_execution_transactions_by_project_hourly_recent.sql", "original_file_path": "models/execution/transactions/intermediate/int_execution_transactions_by_project_hourly_recent.sql", "unique_id": "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "int_execution_transactions_by_project_hourly_recent"], "alias": "int_execution_transactions_by_project_hourly_recent", "checksum": {"name": "sha256", "checksum": "3c91f1796e9c53afda4d6fbed023d2a77649fd1304c6dd2a060c705031dd3502"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "hourly", "production", "execution", "transactions", "hourly"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "ALTER TABLE {{ this }} DELETE WHERE hour < now() - INTERVAL 2 DAY SETTINGS mutations_sync=1", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(hour, project)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "engine": "ReplacingMergeTree()", "order_by": "(hour, project)", "partition_by": "toStartOfDay(hour)"}, "tags": ["production", "execution", "transactions", "hourly"], "description": "Aggregated hourly transaction data by project (~48h), including transaction count, active accounts, bitmap state, and fee sums.", "columns": {"hour": {"name": "hour", "description": "Hour bucket (UTC).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Project label (or 'Unknown').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_count": {"name": "tx_count", "description": "Transactions in the hour for the project.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "active_accounts": {"name": "active_accounts", "description": "Distinct senders in the hour for the project.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ua_bitmap_state": {"name": "ua_bitmap_state", "description": "Bitmap aggregate state of distinct senders (hour/project).", "meta": {}, "data_type": "AggregateFunction(groupBitmap, UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_native_sum": {"name": "fee_native_sum", "description": "Fees (native units) in the hour for the project.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_usd_sum": {"name": "fee_usd_sum", "description": "Fees (USD) in the hour for the project.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(hour, project)", "unique_key": "(hour, project)", "partition_by": "toStartOfDay(hour)", "post_hook": ["ALTER TABLE {{ this }} DELETE WHERE hour < now() - INTERVAL 2 DAY SETTINGS mutations_sync=1"], "tags": ["production", "execution", "transactions", "hourly"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7577498, "relation_name": "`dbt`.`int_execution_transactions_by_project_hourly_recent`", "raw_code": "{{ \n  config(\n    materialized='table',\n    engine='ReplacingMergeTree()',\n    order_by='(hour, project)',\n    unique_key='(hour, project)',\n    partition_by='toStartOfDay(hour)',\n    tags=['production','execution','transactions','hourly']\n  ) \n}}\n\nWITH lbl AS (\n  SELECT address, project, sector\n  FROM {{ ref('int_crawlers_data_labels') }}\n),\n\nwm AS (\n  SELECT toStartOfHour(max(block_timestamp)) AS max_hour\n  FROM {{ ref('stg_execution__transactions') }}\n),\n\ntx AS (\n  SELECT\n    date_trunc('hour', t.block_timestamp) AS hour,\n    lower(t.from_address)                 AS from_address,\n    lower(t.to_address)                   AS to_address,\n    toFloat64(coalesce(t.gas_used, 0))    AS gas_used,\n    toFloat64(coalesce(t.gas_price, 0))   AS gas_price\n  FROM {{ ref('stg_execution__transactions') }} t\n  CROSS JOIN wm\n  WHERE t.block_timestamp >  subtractHours(max_hour, 47)\n    AND t.block_timestamp <= max_hour\n    AND t.from_address IS NOT NULL\n    AND t.success = 1\n),\n\nclassified AS (\n  SELECT\n    tx.hour,\n    coalesce(nullIf(trim(l.project), ''), 'Unknown') AS project,\n    count()                                          AS tx_count,\n    countDistinct(tx.from_address)                   AS active_accounts,\n    groupBitmapState(cityHash64(tx.from_address))    AS ua_bitmap_state,\n    sum(tx.gas_used * tx.gas_price) / 1e18           AS fee_native_sum\n  FROM tx\n  ANY LEFT JOIN lbl l ON tx.to_address = l.address\n  GROUP BY tx.hour, project\n),\n\nproj_sector AS (\n  SELECT\n    project,\n    coalesce(nullIf(trim(sector), ''), 'Unknown') AS sector\n  FROM (\n    SELECT project, anyHeavy(sector) AS sector\n    FROM {{ ref('int_crawlers_data_labels') }}\n    GROUP BY project\n  )\n)\n\nSELECT\n  c.hour,\n  c.project,\n  ps.sector,\n  c.tx_count,\n  c.active_accounts,\n  c.ua_bitmap_state,\n  c.fee_native_sum\nFROM classified c\nLEFT JOIN proj_sector ps ON ps.project = c.project", "language": "sql", "refs": [{"name": "int_crawlers_data_labels", "package": null, "version": null}, {"name": "stg_execution__transactions", "package": null, "version": null}, {"name": "stg_execution__transactions", "package": null, "version": null}, {"name": "int_crawlers_data_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_crawlers_data_labels", "model.gnosis_dbt.stg_execution__transactions"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/int_execution_transactions_by_project_hourly_recent.sql", "compiled": true, "compiled_code": "\n\nWITH lbl AS (\n  SELECT address, project, sector\n  FROM `dbt`.`int_crawlers_data_labels`\n),\n\nwm AS (\n  SELECT toStartOfHour(max(block_timestamp)) AS max_hour\n  FROM `dbt`.`stg_execution__transactions`\n),\n\ntx AS (\n  SELECT\n    date_trunc('hour', t.block_timestamp) AS hour,\n    lower(t.from_address)                 AS from_address,\n    lower(t.to_address)                   AS to_address,\n    toFloat64(coalesce(t.gas_used, 0))    AS gas_used,\n    toFloat64(coalesce(t.gas_price, 0))   AS gas_price\n  FROM `dbt`.`stg_execution__transactions` t\n  CROSS JOIN wm\n  WHERE t.block_timestamp >  subtractHours(max_hour, 47)\n    AND t.block_timestamp <= max_hour\n    AND t.from_address IS NOT NULL\n    AND t.success = 1\n),\n\nclassified AS (\n  SELECT\n    tx.hour,\n    coalesce(nullIf(trim(l.project), ''), 'Unknown') AS project,\n    count()                                          AS tx_count,\n    countDistinct(tx.from_address)                   AS active_accounts,\n    groupBitmapState(cityHash64(tx.from_address))    AS ua_bitmap_state,\n    sum(tx.gas_used * tx.gas_price) / 1e18           AS fee_native_sum\n  FROM tx\n  ANY LEFT JOIN lbl l ON tx.to_address = l.address\n  GROUP BY tx.hour, project\n),\n\nproj_sector AS (\n  SELECT\n    project,\n    coalesce(nullIf(trim(sector), ''), 'Unknown') AS sector\n  FROM (\n    SELECT project, anyHeavy(sector) AS sector\n    FROM `dbt`.`int_crawlers_data_labels`\n    GROUP BY project\n  )\n)\n\nSELECT\n  c.hour,\n  c.project,\n  ps.sector,\n  c.tx_count,\n  c.active_accounts,\n  c.ua_bitmap_state,\n  c.fee_native_sum\nFROM classified c\nLEFT JOIN proj_sector ps ON ps.project = c.project", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_transactions_by_project_daily": {"database": "dbt", "schema": "dbt", "name": "int_execution_transactions_by_project_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/intermediate/int_execution_transactions_by_project_daily.sql", "original_file_path": "models/execution/transactions/intermediate/int_execution_transactions_by_project_daily.sql", "unique_id": "model.gnosis_dbt.int_execution_transactions_by_project_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "int_execution_transactions_by_project_daily"], "alias": "int_execution_transactions_by_project_daily", "checksum": {"name": "sha256", "checksum": "e3ede5bfe2c4ad141c2ce675ba2df2040b9785c1c357b99ced8c55e825ee2180"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, project)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "engine": "ReplacingMergeTree()", "order_by": "(date, project)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "execution", "transactions"], "description": "Daily aggregated transactions by project, including counts, active accounts, gas usage, and fee sums.", "columns": {"date": {"name": "date", "description": "Day (UTC).", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Project label (or 'Unknown').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sector": {"name": "sector", "description": "Sector derived from project (e.g., DEX, Bridges, Wallets & AA, ...).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_count": {"name": "tx_count", "description": "Transactions for the project/day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "active_accounts": {"name": "active_accounts", "description": "Distinct senders for the project/day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ua_bitmap_state": {"name": "ua_bitmap_state", "description": "Bitmap aggregate state of distinct senders.", "meta": {}, "data_type": "AggregateFunction(groupBitmap, UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used_sum": {"name": "gas_used_sum", "description": "Sum of gas units used for the project/day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_native_sum": {"name": "fee_native_sum", "description": "Total fees (native units) for the project/day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_usd_sum": {"name": "fee_usd_sum", "description": "Total fees (USD) for the project/day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, project)", "unique_key": "(date, project)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7498393, "relation_name": "`dbt`.`int_execution_transactions_by_project_daily`", "raw_code": "{{ \n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    engine='ReplacingMergeTree()',\n    order_by='(date, project)',\n    unique_key='(date, project)',\n    partition_by='toStartOfMonth(date)',\n    settings={ 'allow_nullable_key': 1 },\n    tags=['production','execution','transactions']\n  ) \n}}\n\n{% set month       = var('month', none) %}\n{% set start_month = var('start_month', none) %}\n{% set end_month   = var('end_month', none) %}\n\nWITH lbl AS (\n  SELECT address, project, sector\n  FROM {{ ref('int_crawlers_data_labels') }}\n),\n\ntx_labeled AS (\n  SELECT\n    toDate(t.block_timestamp)                        AS date,\n    coalesce(nullIf(trim(l.project), ''), 'Unknown') AS project,\n    lower(t.from_address)                            AS from_address,\n    toFloat64(coalesce(t.gas_used, 0))               AS gas_used,\n    toFloat64(coalesce(t.gas_price, 0))              AS gas_price\n  FROM {{ ref('stg_execution__transactions') }} t\n  ANY LEFT JOIN lbl l ON lower(t.to_address) = l.address\n  WHERE t.block_timestamp < today()\n    AND t.from_address IS NOT NULL\n    AND t.success = 1\n    {% if var('start_month', none) and var('end_month', none) %}\n      AND toStartOfMonth(t.block_timestamp) >= toDate('{{ var(\"start_month\") }}')\n      AND toStartOfMonth(t.block_timestamp) <= toDate('{{ var(\"end_month\") }}')\n    {% else %}\n      {{ apply_monthly_incremental_filter('block_timestamp', 'date', 'true') }}\n    {% endif %}\n),\n\nagg AS (\n  SELECT\n    date,\n    project,\n    count()                                    AS tx_count,\n    groupBitmapState(cityHash64(from_address)) AS ua_bitmap_state,\n    sum(gas_used)                              AS gas_used_sum,\n    sum(gas_used * gas_price) / 1e18           AS fee_native_sum\n  FROM tx_labeled\n  GROUP BY date, project\n),\n\nproj_sector AS (\n  SELECT\n    project,\n    coalesce(nullIf(trim(sector), ''), 'Unknown') AS sector\n  FROM (\n    SELECT project, anyHeavy(sector) AS sector\n    FROM {{ ref('int_crawlers_data_labels') }}\n    GROUP BY project\n  )\n)\n\nSELECT\n  a.date                AS date,\n  a.project             AS project,\n  ps.sector             AS sector,\n  a.tx_count            AS tx_count,\n  a.ua_bitmap_state     AS ua_bitmap_state,\n  a.gas_used_sum        AS gas_used_sum,\n  a.fee_native_sum      AS fee_native_sum\nFROM agg a\nLEFT JOIN proj_sector ps ON ps.project = a.project", "language": "sql", "refs": [{"name": "int_crawlers_data_labels", "package": null, "version": null}, {"name": "stg_execution__transactions", "package": null, "version": null}, {"name": "int_crawlers_data_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.int_crawlers_data_labels", "model.gnosis_dbt.stg_execution__transactions"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/int_execution_transactions_by_project_daily.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nWITH lbl AS (\n  SELECT address, project, sector\n  FROM `dbt`.`int_crawlers_data_labels`\n),\n\ntx_labeled AS (\n  SELECT\n    toDate(t.block_timestamp)                        AS date,\n    coalesce(nullIf(trim(l.project), ''), 'Unknown') AS project,\n    lower(t.from_address)                            AS from_address,\n    toFloat64(coalesce(t.gas_used, 0))               AS gas_used,\n    toFloat64(coalesce(t.gas_price, 0))              AS gas_price\n  FROM `dbt`.`stg_execution__transactions` t\n  ANY LEFT JOIN lbl l ON lower(t.to_address) = l.address\n  WHERE t.block_timestamp < today()\n    AND t.from_address IS NOT NULL\n    AND t.success = 1\n    \n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_by_project_daily`\n    )\n  \n\n    \n),\n\nagg AS (\n  SELECT\n    date,\n    project,\n    count()                                    AS tx_count,\n    groupBitmapState(cityHash64(from_address)) AS ua_bitmap_state,\n    sum(gas_used)                              AS gas_used_sum,\n    sum(gas_used * gas_price) / 1e18           AS fee_native_sum\n  FROM tx_labeled\n  GROUP BY date, project\n),\n\nproj_sector AS (\n  SELECT\n    project,\n    coalesce(nullIf(trim(sector), ''), 'Unknown') AS sector\n  FROM (\n    SELECT project, anyHeavy(sector) AS sector\n    FROM `dbt`.`int_crawlers_data_labels`\n    GROUP BY project\n  )\n)\n\nSELECT\n  a.date                AS date,\n  a.project             AS project,\n  ps.sector             AS sector,\n  a.tx_count            AS tx_count,\n  a.ua_bitmap_state     AS ua_bitmap_state,\n  a.gas_used_sum        AS gas_used_sum,\n  a.fee_native_sum      AS fee_native_sum\nFROM agg a\nLEFT JOIN proj_sector ps ON ps.project = a.project", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state": {"database": "dbt", "schema": "dbt", "name": "int_execution_transactions_by_project_alltime_state", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/intermediate/int_execution_transactions_by_project_alltime_state.sql", "original_file_path": "models/execution/transactions/intermediate/int_execution_transactions_by_project_alltime_state.sql", "unique_id": "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "int_execution_transactions_by_project_alltime_state"], "alias": "int_execution_transactions_by_project_alltime_state", "checksum": {"name": "sha256", "checksum": "3cb6a5c4e1a43c24d8f4207ff2ec9a41dc699f45fccc8bcea1ca7da66bbf26ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(project, month)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "engine": "ReplacingMergeTree()", "order_by": "(project, month)", "partition_by": "toStartOfMonth(month)"}, "tags": ["production", "execution", "transactions"], "description": "Monthly, per-project aggregate *states* for fast all-time rollups.Stores sumState() for txs/fees and groupBitmapMergeState() for active accounts.Downstream FCTs merge states to get 'All' without scanning all history.\n", "columns": {"month": {"name": "month", "description": "Month bucket (UTC) derived from date.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Project label (or 'Unknown').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "txs_state": {"name": "txs_state", "description": "sumState over tx_count (monthly/project).", "meta": {}, "data_type": "AggregateFunction(sum, UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_state": {"name": "fee_state", "description": "sumState over fee_native_sum (monthly/project).", "meta": {}, "data_type": "AggregateFunction(sum, Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "aa_state": {"name": "aa_state", "description": "groupBitmapMergeState over ua_bitmap_state (monthly/project).", "meta": {}, "data_type": "AggregateFunction(groupBitmap, UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/intermediate/schema.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(project, month)", "partition_by": "toStartOfMonth(month)", "unique_key": "(project, month)", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7630112, "relation_name": "`dbt`.`int_execution_transactions_by_project_alltime_state`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    engine='ReplacingMergeTree()',\n    order_by='(project, month)',\n    partition_by='toStartOfMonth(month)',\n    unique_key='(project, month)',\n    tags=['production','execution','transactions']\n  )\n}}\n\n{% set start_month = var('start_month', none) %}\n{% set end_month   = var('end_month', none) %}\n\nWITH src AS (\n  SELECT\n    toStartOfMonth(date)                   AS month,\n    project,\n    sumState(tx_count)                     AS txs_state,\n    sumState(fee_native_sum)               AS fee_state,\n    groupBitmapMergeState(ua_bitmap_state) AS aa_state\n  FROM {{ ref('int_execution_transactions_by_project_daily') }}\n  WHERE 1=1\n    {% if start_month and end_month %}\n      AND toStartOfMonth(date) >= toDate('{{ start_month }}')\n      AND toStartOfMonth(date) <= toDate('{{ end_month }}')\n    {% else %}\n      {{ apply_monthly_incremental_filter('date', 'month', 'true') }}\n    {% endif %}\n  GROUP BY month, project\n)\n\nSELECT project, month, txs_state, fee_state, aa_state\nFROM src", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/int_execution_transactions_by_project_alltime_state.sql", "compiled": true, "compiled_code": "\n\n\n\n\nWITH src AS (\n  SELECT\n    toStartOfMonth(date)                   AS month,\n    project,\n    sumState(tx_count)                     AS txs_state,\n    sumState(fee_native_sum)               AS fee_state,\n    groupBitmapMergeState(ua_bitmap_state) AS aa_state\n  FROM `dbt`.`int_execution_transactions_by_project_daily`\n  WHERE 1=1\n    \n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(date)) >= (\n      SELECT\n        max(toStartOfMonth(month))\n      FROM `dbt`.`int_execution_transactions_by_project_alltime_state`\n    )\n  \n\n    \n  GROUP BY month, project\n)\n\nSELECT project, month, txs_state, fee_state, aa_state\nFROM src", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_gas_used_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_gas_used_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_gas_used_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_gas_used_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_gas_used_daily"], "alias": "api_execution_transactions_gas_used_daily", "checksum": {"name": "sha256", "checksum": "bd5ccfc38f41af1f3ed2e06c61e48efe426d3157d8c170ed41d253587a0f862f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Daily aggregation of gas used in executed transactions.", "columns": {"date": {"name": "date", "description": "Date of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Type of the transaction.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Total gas consumed by the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price_avg": {"name": "gas_price_avg", "description": "Average gas price for the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price_median": {"name": "gas_price_median", "description": "Median gas price for the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8375907, "relation_name": "`dbt`.`api_execution_transactions_gas_used_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production', 'execution', 'transactions']\n    )\n}}\n\nSELECT\n    date\n    ,transaction_type\n    ,gas_used\n    ,gas_price_avg\n    ,gas_price_median\nFROM {{ ref('int_execution_transactions_info_daily') }}\nWHERE success = 1\nORDER BY date, transaction_type", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_gas_used_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,transaction_type\n    ,gas_used\n    ,gas_price_avg\n    ,gas_price_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_total"], "alias": "api_execution_transactions_active_accounts_total", "checksum": {"name": "sha256", "checksum": "8d51d08d76542da9716c796c1024d450dd4c9662ec568c6df7e2fc7a261932b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "(helpful, business-facing; use a folded block scalar `>`; no blank lines)", "columns": {"value": {"name": "value", "description": "Value of the active accounts.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change of active accounts.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.7944887, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'ActiveAccounts' AND window = 'All'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_total.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'ActiveAccounts' AND window = 'All'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_7d"], "alias": "api_execution_transactions_active_accounts_7d", "checksum": {"name": "sha256", "checksum": "73a016b06267b62cacaec6ff93e16d774090d9b1d27b5e12f761d50ec55bf1f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Signed EVM transactions included in blocks where label is 'ActiveAccounts' and window is '7D'.\"", "columns": {"value": {"name": "value", "description": "Transaction value.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Change percentage.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7882974, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'ActiveAccounts' AND window = '7D'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_7d.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'ActiveAccounts' AND window = '7D'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5": {"database": "dbt", "schema": "dbt", "name": "fct_execution_transactions_by_project_monthly_top5", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/fct_execution_transactions_by_project_monthly_top5.sql", "original_file_path": "models/execution/transactions/marts/fct_execution_transactions_by_project_monthly_top5.sql", "unique_id": "model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "fct_execution_transactions_by_project_monthly_top5"], "alias": "fct_execution_transactions_by_project_monthly_top5", "checksum": {"name": "sha256", "checksum": "babbd58e7d791908d6fdfe87b8a9c07e582a86b97e9fdf0a41eb387ab353f901"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, label, metric)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, label, metric)", "partition_by": "toStartOfYear(date)"}, "tags": ["production", "execution", "transactions"], "description": "Monthly aggregated execution transactions by project, with top 5 projects by transaction count and fees, and 'Others' category for the rest.", "columns": {"month": {"name": "month", "description": "Start of the month", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "project": {"name": "project", "description": "Project identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "txs": {"name": "txs", "description": "Total number of transactions", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_native": {"name": "fee_native", "description": "Total native fees", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Total gas used", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "active_state": {"name": "active_state", "description": "Merged active state", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "engine": "ReplacingMergeTree()", "order_by": "(date, label, metric)", "partition_by": "toStartOfYear(date)", "unique_key": "(date, label, metric)"}, "created_at": 1760535477.8449948, "relation_name": "`dbt`.`fct_execution_transactions_by_project_monthly_top5`", "raw_code": "{{ config(\n  materialized='table',\n  engine='ReplacingMergeTree()',\n  order_by='(date, label, metric)',\n  partition_by='toStartOfYear(date)',\n  unique_key='(date, label, metric)',\n  tags=['production','execution','transactions']\n) }}\n\nWITH base AS (\n  SELECT\n    toStartOfMonth(date)                    AS month,\n    project,\n    sum(tx_count)                           AS txs,\n    sum(fee_native_sum)                     AS fee_native,\n    sum(gas_used_sum)                       AS gas_used,\n    groupBitmapMergeState(ua_bitmap_state)  AS active_state\n  FROM {{ ref('int_execution_transactions_by_project_daily') }}\n  GROUP BY month, project\n),\nranked AS (\n  SELECT\n    month, project, txs, fee_native, gas_used, active_state,\n    row_number() OVER (PARTITION BY month ORDER BY txs DESC, fee_native DESC, project ASC) AS rk\n  FROM base\n),\nbucketed AS (\n  SELECT\n    month,\n    if(rk <= 5, project, 'Others') AS project_label,\n    txs, fee_native, gas_used, active_state\n  FROM ranked\n),\nmonthly AS (\n  SELECT\n    month,\n    project_label AS project,\n    sum(txs)                            AS txs,\n    sum(fee_native)                     AS fee_native,\n    sum(gas_used)                       AS gas_used,\n    groupBitmapMergeState(active_state) AS active_state\n  FROM bucketed\n  GROUP BY month, project_label\n)\n\nSELECT * FROM (\n  SELECT month AS date, project AS label, 'Transactions'  AS metric, toFloat64(txs)                              AS value FROM monthly\n  UNION ALL\n  SELECT month AS date, project AS label, 'FeesNative'    AS metric, round(toFloat64(fee_native), 6)             AS value FROM monthly\n  UNION ALL\n  SELECT month AS date, project AS label, 'GasUsed'       AS metric, toFloat64(gas_used)                         AS value FROM monthly\n  UNION ALL\n  SELECT\n    month AS date,\n    project AS label,\n    'ActiveAccounts' AS metric,\n    toFloat64(finalizeAggregation(active_state)) AS value\n  FROM monthly\n)\nORDER BY date ASC, label ASC, metric ASC", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/fct_execution_transactions_by_project_monthly_top5.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n  SELECT\n    toStartOfMonth(date)                    AS month,\n    project,\n    sum(tx_count)                           AS txs,\n    sum(fee_native_sum)                     AS fee_native,\n    sum(gas_used_sum)                       AS gas_used,\n    groupBitmapMergeState(ua_bitmap_state)  AS active_state\n  FROM `dbt`.`int_execution_transactions_by_project_daily`\n  GROUP BY month, project\n),\nranked AS (\n  SELECT\n    month, project, txs, fee_native, gas_used, active_state,\n    row_number() OVER (PARTITION BY month ORDER BY txs DESC, fee_native DESC, project ASC) AS rk\n  FROM base\n),\nbucketed AS (\n  SELECT\n    month,\n    if(rk <= 5, project, 'Others') AS project_label,\n    txs, fee_native, gas_used, active_state\n  FROM ranked\n),\nmonthly AS (\n  SELECT\n    month,\n    project_label AS project,\n    sum(txs)                            AS txs,\n    sum(fee_native)                     AS fee_native,\n    sum(gas_used)                       AS gas_used,\n    groupBitmapMergeState(active_state) AS active_state\n  FROM bucketed\n  GROUP BY month, project_label\n)\n\nSELECT * FROM (\n  SELECT month AS date, project AS label, 'Transactions'  AS metric, toFloat64(txs)                              AS value FROM monthly\n  UNION ALL\n  SELECT month AS date, project AS label, 'FeesNative'    AS metric, round(toFloat64(fee_native), 6)             AS value FROM monthly\n  UNION ALL\n  SELECT month AS date, project AS label, 'GasUsed'       AS metric, toFloat64(gas_used)                         AS value FROM monthly\n  UNION ALL\n  SELECT\n    month AS date,\n    project AS label,\n    'ActiveAccounts' AS metric,\n    toFloat64(finalizeAggregation(active_state)) AS value\n  FROM monthly\n)\nORDER BY date ASC, label ASC, metric ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_transactions_by_project_snapshots": {"database": "dbt", "schema": "dbt", "name": "fct_execution_transactions_by_project_snapshots", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/fct_execution_transactions_by_project_snapshots.sql", "original_file_path": "models/execution/transactions/marts/fct_execution_transactions_by_project_snapshots.sql", "unique_id": "model.gnosis_dbt.fct_execution_transactions_by_project_snapshots", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "fct_execution_transactions_by_project_snapshots"], "alias": "fct_execution_transactions_by_project_snapshots", "checksum": {"name": "sha256", "checksum": "1383164667e64e98c42d39fd25109b349494519560a2d96a4de416491e4628ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(window, bucket, label)"}, "tags": ["production", "execution", "transactions"], "description": "\"Snapshot of execution transactions aggregated by project and time window, including transaction counts, native fee sums, and unique user activity.\"", "columns": {"label": {"name": "label", "description": "Type of metric (e.g., Transactions, FeesNative, ActiveAccounts).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "window": {"name": "window", "description": "Time window for aggregation (e.g., 1D, 7D, 30D, 90D, All).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bucket": {"name": "bucket", "description": "Project identifier or bucket for the metric.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Aggregated metric value (e.g., transaction count, fee sum, unique users).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in metric value compared to the previous window.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "engine": "ReplacingMergeTree()", "order_by": "(window, bucket, label)"}, "created_at": 1760535477.8478851, "relation_name": "`dbt`.`fct_execution_transactions_by_project_snapshots`", "raw_code": "{{\n  config(\n    materialized='table',\n    engine='ReplacingMergeTree()',\n    order_by='(window, bucket, label)',\n    tags=['production','execution','transactions']\n  )\n}}\n\nWITH wd AS (\n  SELECT max(date) AS max_date\n  FROM {{ ref('int_execution_transactions_by_project_daily') }}\n),\nrng AS (\n  SELECT '1D'  AS window,  1  AS days UNION ALL\n  SELECT '7D'  AS window,  7  AS days UNION ALL\n  SELECT '30D' AS window,  30 AS days UNION ALL\n  SELECT '90D' AS window,  90 AS days\n),\nbounds AS (\n  SELECT\n    r.window,\n    r.days,\n    w.max_date,\n    subtractDays(w.max_date, r.days)        AS curr_start,\n    w.max_date                              AS curr_end,\n    subtractDays(w.max_date, 2 * r.days)    AS prev_start,\n    subtractDays(w.max_date, r.days)        AS prev_end\n  FROM rng r\n  CROSS JOIN wd w\n),\n\ncurr_win AS (\n  SELECT\n    b.window,\n    d.project,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_daily') }} d\n  INNER JOIN bounds b\n    ON d.date >  b.curr_start\n   AND d.date <= b.curr_end\n  GROUP BY b.window, d.project\n),\nprev_win AS (\n  SELECT\n    b.window,\n    d.project,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_daily') }} d\n  INNER JOIN bounds b\n    ON d.date >  b.prev_start\n   AND d.date <= b.prev_end\n  GROUP BY b.window, d.project\n),\n\n/* all-time from AMT */\ncurr_all AS (\n  SELECT\n    'All' AS window,\n    a.project,\n    sumMerge(a.txs_state)             AS txs,\n    sumMerge(a.fee_state)             AS fee_native,\n    groupBitmapMerge(a.aa_state)      AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_alltime_state') }} a\n  GROUP BY a.project\n),\n\njoined AS (\n  SELECT\n    c.window,\n    c.project,\n    c.txs        AS txs_curr,\n    p.txs        AS txs_prev,\n    c.fee_native AS fee_curr,\n    p.fee_native AS fee_prev,\n    c.aa_uniques AS aa_curr,\n    p.aa_uniques AS aa_prev\n  FROM curr_win c\n  LEFT JOIN prev_win p\n    ON p.window = c.window AND p.project = c.project\n),\n\nall_windows AS (\n  SELECT window, project, txs, fee_native, aa_uniques FROM curr_win\n  UNION ALL\n  SELECT window, project, txs, fee_native, aa_uniques FROM curr_all\n)\n\nSELECT\n  'Transactions'            AS label,\n  w.window                  AS window,\n  w.project                 AS bucket,\n  toFloat64(w.txs)          AS value,\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.txs_curr / nullIf(j.txs_prev, 0), 0) - 1) * 100, 1)\n  )                         AS change_pct\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project\n\nUNION ALL\nSELECT\n  'FeesNative',\n  w.window,\n  w.project,\n  round(toFloat64(w.fee_native), 6),\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.fee_curr / nullIf(j.fee_prev, 0), 0) - 1) * 100, 1)\n  )\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project\n\nUNION ALL\nSELECT\n  'ActiveAccounts',\n  w.window,\n  w.project,\n  toFloat64(w.aa_uniques),\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.aa_curr / nullIf(j.aa_prev, 0), 0) - 1) * 100, 1)\n  )\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_alltime_state", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily", "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/fct_execution_transactions_by_project_snapshots.sql", "compiled": true, "compiled_code": "\n\nWITH wd AS (\n  SELECT max(date) AS max_date\n  FROM `dbt`.`int_execution_transactions_by_project_daily`\n),\nrng AS (\n  SELECT '1D'  AS window,  1  AS days UNION ALL\n  SELECT '7D'  AS window,  7  AS days UNION ALL\n  SELECT '30D' AS window,  30 AS days UNION ALL\n  SELECT '90D' AS window,  90 AS days\n),\nbounds AS (\n  SELECT\n    r.window,\n    r.days,\n    w.max_date,\n    subtractDays(w.max_date, r.days)        AS curr_start,\n    w.max_date                              AS curr_end,\n    subtractDays(w.max_date, 2 * r.days)    AS prev_start,\n    subtractDays(w.max_date, r.days)        AS prev_end\n  FROM rng r\n  CROSS JOIN wd w\n),\n\ncurr_win AS (\n  SELECT\n    b.window,\n    d.project,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_daily` d\n  INNER JOIN bounds b\n    ON d.date >  b.curr_start\n   AND d.date <= b.curr_end\n  GROUP BY b.window, d.project\n),\nprev_win AS (\n  SELECT\n    b.window,\n    d.project,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_daily` d\n  INNER JOIN bounds b\n    ON d.date >  b.prev_start\n   AND d.date <= b.prev_end\n  GROUP BY b.window, d.project\n),\n\n/* all-time from AMT */\ncurr_all AS (\n  SELECT\n    'All' AS window,\n    a.project,\n    sumMerge(a.txs_state)             AS txs,\n    sumMerge(a.fee_state)             AS fee_native,\n    groupBitmapMerge(a.aa_state)      AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_alltime_state` a\n  GROUP BY a.project\n),\n\njoined AS (\n  SELECT\n    c.window,\n    c.project,\n    c.txs        AS txs_curr,\n    p.txs        AS txs_prev,\n    c.fee_native AS fee_curr,\n    p.fee_native AS fee_prev,\n    c.aa_uniques AS aa_curr,\n    p.aa_uniques AS aa_prev\n  FROM curr_win c\n  LEFT JOIN prev_win p\n    ON p.window = c.window AND p.project = c.project\n),\n\nall_windows AS (\n  SELECT window, project, txs, fee_native, aa_uniques FROM curr_win\n  UNION ALL\n  SELECT window, project, txs, fee_native, aa_uniques FROM curr_all\n)\n\nSELECT\n  'Transactions'            AS label,\n  w.window                  AS window,\n  w.project                 AS bucket,\n  toFloat64(w.txs)          AS value,\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.txs_curr / nullIf(j.txs_prev, 0), 0) - 1) * 100, 1)\n  )                         AS change_pct\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project\n\nUNION ALL\nSELECT\n  'FeesNative',\n  w.window,\n  w.project,\n  round(toFloat64(w.fee_native), 6),\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.fee_curr / nullIf(j.fee_prev, 0), 0) - 1) * 100, 1)\n  )\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project\n\nUNION ALL\nSELECT\n  'ActiveAccounts',\n  w.window,\n  w.project,\n  toFloat64(w.aa_uniques),\n  multiIf(\n    w.window = 'All', NULL,\n    round((coalesce(j.aa_curr / nullIf(j.aa_prev, 0), 0) - 1) * 100, 1)\n  )\nFROM all_windows w\nLEFT JOIN joined j\n  ON j.window = w.window AND j.project = w.project", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_by_sector_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_by_sector_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_by_sector_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_by_sector_daily"], "alias": "api_execution_transactions_fees_native_by_sector_daily", "checksum": {"name": "sha256", "checksum": "79698590fe020debee5980b65336dff4e6b0a1425768b211d8455e001acec713"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model providing daily sum of native token fees by sector based on execution transactions.\"", "columns": {"date": {"name": "date", "description": "Date of the data entry.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Sum of native token fees.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "transactions"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8289576, "relation_name": "`dbt`.`api_execution_transactions_fees_native_by_sector_daily`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\n\nSELECT\n  date,\n  sector AS label,\n  fee_native_sum AS value\nFROM {{ ref('fct_execution_transactions_by_sector_daily') }}\nWHERE date < today()\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_by_sector_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  date,\n  sector AS label,\n  fee_native_sum AS value\nFROM `dbt`.`fct_execution_transactions_by_sector_daily`\nWHERE date < today()\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_by_sector_hourly": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_by_sector_hourly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_by_sector_hourly.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_by_sector_hourly.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_by_sector_hourly", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_by_sector_hourly"], "alias": "api_execution_transactions_by_sector_hourly", "checksum": {"name": "sha256", "checksum": "75c124964965218ef07b6bf8e7eef60dddb7477d12dcff7e46e5cfffecd79950"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "hourly", "production", "execution", "transactions", "hourly"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions", "hourly"], "description": "Hourly aggregated execution transactions by sector.", "columns": {"date": {"name": "date", "description": "Hourly date of the transactions.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label for the transactions.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Sum of transaction counts.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "transactions", "hourly"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8132355, "relation_name": "`dbt`.`api_execution_transactions_by_sector_hourly`", "raw_code": "{{\n  config(materialized='view', tags=['production','execution','transactions','hourly'])\n}}\n\nSELECT\n  hour AS date,\n  sector AS label,\n  sum(tx_count) AS value\nFROM {{ ref('int_execution_transactions_by_project_hourly_recent') }}\nGROUP BY date, label\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_by_sector_hourly.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  hour AS date,\n  sector AS label,\n  sum(tx_count) AS value\nFROM `dbt`.`int_execution_transactions_by_project_hourly_recent`\nGROUP BY date, label\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_by_project_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_by_project_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_by_project_7d"], "alias": "api_execution_transactions_fees_native_by_project_7d", "checksum": {"name": "sha256", "checksum": "54c951c361bebbbae2544ecbab5971f3a3c7351621c12eb8c15aa7f6e4607d4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Value of native token fees paid in the last 7 days for API execution transactions by project.\"", "columns": {"label": {"name": "label", "description": "Bucket representing the fee category.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the fee.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in fee value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8218958, "relation_name": "`dbt`.`api_execution_transactions_fees_native_by_project_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} AS t\nWHERE t.label = 'FeesNative' AND t.window = '7D'\nORDER BY t.value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_7d.sql", "compiled": true, "compiled_code": "\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` AS t\nWHERE t.label = 'FeesNative' AND t.window = '7D'\nORDER BY t.value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_by_project_monthly_top5", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_by_project_monthly_top5.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_monthly_top5.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_by_project_monthly_top5"], "alias": "api_execution_transactions_active_accounts_by_project_monthly_top5", "checksum": {"name": "sha256", "checksum": "de6796cdade254d361b5d309c0f6ced34e313b403f0167fa026746046795e35a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model listing the top 5 active senders of API execution transactions by project on a monthly basis.\"", "columns": {"date": {"name": "date", "description": "Date of the transaction", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label of the project", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Transaction value", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.7966998, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_by_project_monthly_top5`", "raw_code": "{{\n  config(materialized='view', tags=['production','execution','transactions'])\n}}\nSELECT\n  date,\n  label,\n  value\nFROM {{ ref('fct_execution_transactions_by_project_monthly_top5') }}\nWHERE metric = 'ActiveAccounts'\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_monthly_top5.sql", "compiled": true, "compiled_code": "\nSELECT\n  date,\n  label,\n  value\nFROM `dbt`.`fct_execution_transactions_by_project_monthly_top5`\nWHERE metric = 'ActiveAccounts'\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_total"], "alias": "api_execution_transactions_total", "checksum": {"name": "sha256", "checksum": "9e06af5278709115ea20731f6e6236060a363fce71a376dc21f888851b06d5ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Total number of API execution transactions.\"", "columns": {"value": {"name": "value", "description": "Value of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.83952, "relation_name": "`dbt`.`api_execution_transactions_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'Transactions' AND window = 'All'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_total.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'Transactions' AND window = 'All'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_by_sector_hourly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_hourly.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_hourly.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_by_sector_hourly"], "alias": "api_execution_transactions_active_accounts_by_sector_hourly", "checksum": {"name": "sha256", "checksum": "482a8e4cda31562a6a1832e9630459c36a8ba4c504ddc5d5046658e48ce62c49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "hourly", "production", "execution", "transactions", "hourly"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions", "hourly"], "description": "Hourly aggregation of active senders by sector based on API execution transactions.", "columns": {"date": {"name": "date", "description": "Hourly timestamp of the data.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Merged group bitmap state of active senders.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "transactions", "hourly"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8010638, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_by_sector_hourly`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions','hourly']) }}\n\nSELECT\n  hour AS date,\n  sector AS label,\n  groupBitmapMerge(ua_bitmap_state) AS value\nFROM {{ ref('int_execution_transactions_by_project_hourly_recent') }}\nGROUP BY date, label\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_hourly.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  hour AS date,\n  sector AS label,\n  groupBitmapMerge(ua_bitmap_state) AS value\nFROM `dbt`.`int_execution_transactions_by_project_hourly_recent`\nGROUP BY date, label\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_cnt_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_cnt_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_cnt_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_cnt_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_cnt_total"], "alias": "api_execution_transactions_cnt_total", "checksum": {"name": "sha256", "checksum": "d43c13a5748cb92da8ad5a2489778486ee6afe0d9b6235f299645c3415e0a4b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Total count of API execution transactions by transaction type.", "columns": {"transaction_type": {"name": "transaction_type", "description": "Envelope type (0 = legacy, 1 = access-list, 2 = EIP-1559).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total number of transactions.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.8178968, "relation_name": "`dbt`.`api_execution_transactions_cnt_total`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production', 'execution', 'transactions']\n    )\n}}\n\nSELECT\n    transaction_type\n    ,SUM(n_txs) AS value\nFROM {{ ref('int_execution_transactions_info_daily') }}\nWHERE success = 1\nGROUP BY transaction_type\nORDER BY transaction_type", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_cnt_total.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    transaction_type\n    ,SUM(n_txs) AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nGROUP BY transaction_type\nORDER BY transaction_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_by_project_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_by_project_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_by_project_total"], "alias": "api_execution_transactions_fees_native_by_project_total", "checksum": {"name": "sha256", "checksum": "8ac6f1492f23cbe4328ca4aa7a75087e786c4d032b3ce0595a009b610ac04570"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Value (XDAI) transfers decoded from transactions.\"", "columns": {"block_number": {"name": "block_number", "description": "Height of the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Block hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transfer_index": {"name": "transfer_index", "description": "Zero-based native-transfer index within the tx.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "Sender address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "Recipient address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_binary": {"name": "value_binary", "description": "Transfer value as 32-byte big-endian binary.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_string": {"name": "value_string", "description": "Transfer value as decimal string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_f64": {"name": "value_f64", "description": "Transfer value as floating-point ether.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.8269205, "relation_name": "`dbt`.`api_execution_transactions_fees_native_by_project_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} AS t\nWHERE t.label = 'FeesNative' AND t.window = 'All'\nORDER BY t.value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_total.sql", "compiled": true, "compiled_code": "\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` AS t\nWHERE t.label = 'FeesNative' AND t.window = 'All'\nORDER BY t.value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_by_project_monthly_top5", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_by_project_monthly_top5.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_monthly_top5.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_by_project_monthly_top5"], "alias": "api_execution_transactions_fees_native_by_project_monthly_top5", "checksum": {"name": "sha256", "checksum": "a90fe0aa5142029ec4260cd2844c6fdfc1244eca0b2eea88e4a5863ae7d7b5d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Monthly top 5 projects by native transaction fees executed through the API.", "columns": {"date": {"name": "date", "description": "Date of the transaction.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Project label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Transaction fee value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Height of the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8242102, "relation_name": "`dbt`.`api_execution_transactions_fees_native_by_project_monthly_top5`", "raw_code": "{{\n  config(materialized='view', tags=['production','execution','transactions'])\n}}\nSELECT\n  date,\n  label,\n  value\nFROM {{ ref('fct_execution_transactions_by_project_monthly_top5') }}\nWHERE metric = 'FeesNative'\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_by_project_monthly_top5.sql", "compiled": true, "compiled_code": "\nSELECT\n  date,\n  label,\n  value\nFROM `dbt`.`fct_execution_transactions_by_project_monthly_top5`\nWHERE metric = 'FeesNative'\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_7d"], "alias": "api_execution_transactions_7d", "checksum": {"name": "sha256", "checksum": "769d86a97def42e8f59e7298e5e4f2129533d9ff39790d94683a16112ddacd5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Signed EVM transactions included in blocks for the last 7 days.\"", "columns": {"value": {"name": "value", "description": "Value of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in the transaction value.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.786221, "relation_name": "`dbt`.`api_execution_transactions_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'Transactions' AND window = '7D'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_7d.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'Transactions' AND window = '7D'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_cnt_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_cnt_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_cnt_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_cnt_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_cnt_daily"], "alias": "api_execution_transactions_cnt_daily", "checksum": {"name": "sha256", "checksum": "d74127f24fbc5aa1ab1d15710132cb5e1ab7ab60b8e545f61e0f27e854eafb78"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Daily count of API execution transactions.", "columns": {"date": {"name": "date", "description": "Date of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Type of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Number of transactions.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.815412, "relation_name": "`dbt`.`api_execution_transactions_cnt_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production', 'execution', 'transactions']\n    )\n}}\n\nSELECT\n    date\n    ,transaction_type\n    ,n_txs AS value\nFROM {{ ref('int_execution_transactions_info_daily') }}\nWHERE success = 1\nORDER BY date, transaction_type", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_cnt_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,transaction_type\n    ,n_txs AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_by_project_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_by_project_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_by_project_total"], "alias": "api_execution_transactions_active_accounts_by_project_total", "checksum": {"name": "sha256", "checksum": "d991e4e9981578464092bf337aad8d8a45e8bd8525ccb417b5f8b417edbd9589"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "(helpful, business-facing; use a folded block scalar `>`; no blank lines)", "columns": {"label": {"name": "label", "description": "Bucket as label", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Change percentage", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.7925549, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_by_project_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT bucket AS label, value, change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} t\nWHERE t.label = 'ActiveAccounts' AND window = 'All'\nORDER BY value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_total.sql", "compiled": true, "compiled_code": "\nSELECT bucket AS label, value, change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` t\nWHERE t.label = 'ActiveAccounts' AND window = 'All'\nORDER BY value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_by_project_monthly_top5": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_by_project_monthly_top5", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_by_project_monthly_top5.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_by_project_monthly_top5.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_by_project_monthly_top5", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_by_project_monthly_top5"], "alias": "api_execution_transactions_by_project_monthly_top5", "checksum": {"name": "sha256", "checksum": "59ff081fe61735e0b465af37c1434960b671100bea25334a51c4d55b2cc4e225"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model listing the top 5 execution transactions by project on a monthly basis.\"", "columns": {"date": {"name": "date", "description": "Date of the transaction.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label identifying the project.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8051505, "relation_name": "`dbt`.`api_execution_transactions_by_project_monthly_top5`", "raw_code": "{{\n  config(materialized='view', tags=['production','execution','transactions'])\n}}\nSELECT\n  date,\n  label,\n  value\nFROM {{ ref('fct_execution_transactions_by_project_monthly_top5') }}\nWHERE metric = 'Transactions'\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_by_project_monthly_top5.sql", "compiled": true, "compiled_code": "\nSELECT\n  date,\n  label,\n  value\nFROM `dbt`.`fct_execution_transactions_by_project_monthly_top5`\nWHERE metric = 'Transactions'\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_transactions_by_sector_daily": {"database": "dbt", "schema": "dbt", "name": "fct_execution_transactions_by_sector_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/fct_execution_transactions_by_sector_daily.sql", "original_file_path": "models/execution/transactions/marts/fct_execution_transactions_by_sector_daily.sql", "unique_id": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "fct_execution_transactions_by_sector_daily"], "alias": "fct_execution_transactions_by_sector_daily", "checksum": {"name": "sha256", "checksum": "3e16bbc7bb888ffc0e674f85fec32feba2ad3a6f77b9749a723b2a1d31151e2c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, sector)"}, "tags": ["production", "execution", "transactions"], "description": "Serving-grade daily fact at (date \u00d7 sector) with finalized active sender counts and pre-aggregated transactions, gas used, and native fees. Built from int_execution_transactions_by_project_daily using monthly insert_overwrite.\n", "columns": {"date": {"name": "date", "description": "Calendar date (UTC).", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sector": {"name": "sector", "description": "Project sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "active_accounts": {"name": "active_accounts", "description": "Unique active senders (finalized bitmap cardinality).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "txs": {"name": "txs", "description": "Total transactions in the sector for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used_sum": {"name": "gas_used_sum", "description": "Total gas used in the sector for the day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_native_sum": {"name": "fee_native_sum", "description": "Sum of native fees (e.g., xDAI/ETH) for the sector/day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "engine": "ReplacingMergeTree()", "order_by": "(date, sector)"}, "created_at": 1760535477.852602, "relation_name": "`dbt`.`fct_execution_transactions_by_sector_daily`", "raw_code": "{{\n  config(\n    materialized='table',\n    engine='ReplacingMergeTree()',\n    order_by='(date, sector)',\n    tags=['production','execution','transactions']\n  )\n}}\n\n\nSELECT\n    date,\n    sector,\n    groupBitmapMerge(ua_bitmap_state)                 AS active_accounts,\n    sum(tx_count)                                     AS txs,\n    sum(gas_used_sum)                                 AS gas_used_sum,\n    round(toFloat64(sum(fee_native_sum)), 6)          AS fee_native_sum\nFROM {{ ref('int_execution_transactions_by_project_daily') }}\nGROUP BY\n  date, sector", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/fct_execution_transactions_by_sector_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date,\n    sector,\n    groupBitmapMerge(ua_bitmap_state)                 AS active_accounts,\n    sum(tx_count)                                     AS txs,\n    sum(gas_used_sum)                                 AS gas_used_sum,\n    round(toFloat64(sum(fee_native_sum)), 6)          AS fee_native_sum\nFROM `dbt`.`int_execution_transactions_by_project_daily`\nGROUP BY\n  date, sector", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_7d"], "alias": "api_execution_transactions_fees_native_7d", "checksum": {"name": "sha256", "checksum": "7abccb5a63e5f148a36d1d6e9ad157ee95a1c8816f0f56d0e82d8013ba9122ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"View aggregating execution.indexing_state into per-(mode,dataset) stats.\"", "columns": {"value": {"name": "value", "description": "Value of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.819823, "relation_name": "`dbt`.`api_execution_transactions_fees_native_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'FeesNative' AND window = '7D'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_7d.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'FeesNative' AND window = '7D'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_total"], "alias": "api_execution_transactions_fees_native_total", "checksum": {"name": "sha256", "checksum": "13deeafb8110fbc9bc02a03328426150f90e6b4c6ad03fff010e45684f229b72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "(helpful, business-facing; use a folded block scalar `>`; no blank lines)", "columns": {"value": {"name": "value", "description": "Value (native token) as 32-byte big-endian binary.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Change percentage.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.833048, "relation_name": "`dbt`.`api_execution_transactions_fees_native_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT value, change_pct\nFROM {{ ref('fct_execution_transactions_snapshots') }}\nWHERE label = 'FeesNative' AND window = 'All'", "language": "sql", "refs": [{"name": "fct_execution_transactions_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_total.sql", "compiled": true, "compiled_code": "\nSELECT value, change_pct\nFROM `dbt`.`fct_execution_transactions_snapshots`\nWHERE label = 'FeesNative' AND window = 'All'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_transactions_snapshots": {"database": "dbt", "schema": "dbt", "name": "fct_execution_transactions_snapshots", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/fct_execution_transactions_snapshots.sql", "original_file_path": "models/execution/transactions/marts/fct_execution_transactions_snapshots.sql", "unique_id": "model.gnosis_dbt.fct_execution_transactions_snapshots", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "fct_execution_transactions_snapshots"], "alias": "fct_execution_transactions_snapshots", "checksum": {"name": "sha256", "checksum": "de59e5d8b1277780e57e2c040f75592af037b2cf1f4309b5b0f28a26d36d31a7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(window, label)"}, "tags": ["production", "execution", "transactions"], "description": "\"Snapshot of execution transactions data including total transactions, native fees, and active accounts.\"", "columns": {"label": {"name": "label", "description": "Type of data snapshot (e.g., Transactions, FeesNative, ActiveAccounts).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "window": {"name": "window", "description": "Time window for the snapshot (e.g., '1D', '7D', '30D', '90D', 'All').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value associated with the snapshot.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change compared to the previous window.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "table", "engine": "ReplacingMergeTree()", "order_by": "(window, label)", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.8500853, "relation_name": "`dbt`.`fct_execution_transactions_snapshots`", "raw_code": "{{\n  config(\n    materialized='table',\n    engine='ReplacingMergeTree()',\n    order_by='(window, label)',\n    tags=['production','execution','transactions']\n  )\n}}\n\nWITH wd AS (\n  SELECT max(date) AS max_date\n  FROM {{ ref('int_execution_transactions_by_project_daily') }}\n),\nrng AS (\n  SELECT '1D'  AS window,  1  AS days UNION ALL\n  SELECT '7D'  AS window,  7  AS days UNION ALL\n  SELECT '30D' AS window,  30 AS days UNION ALL\n  SELECT '90D' AS window,  90 AS days\n),\nbounds AS (\n  SELECT\n    r.window,\n    r.days,\n    w.max_date,\n    subtractDays(w.max_date, r.days)        AS curr_start,\n    w.max_date                              AS curr_end,\n    subtractDays(w.max_date, 2 * r.days)    AS prev_start,\n    subtractDays(w.max_date, r.days)        AS prev_end\n  FROM rng r\n  CROSS JOIN wd w\n),\n\ncurr_win AS (\n  SELECT\n    b.window,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_daily') }} d\n  INNER JOIN bounds b\n    ON d.date >  b.curr_start\n   AND d.date <= b.curr_end\n  GROUP BY b.window\n),\nprev_win AS (\n  SELECT\n    b.window,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_daily') }} d\n  INNER JOIN bounds b\n    ON d.date >  b.prev_start\n   AND d.date <= b.prev_end\n  GROUP BY b.window\n),\n\ncurr_all AS (\n  SELECT\n    'All' AS window,\n    sumMerge(a.txs_state)           AS txs,\n    sumMerge(a.fee_state)           AS fee_native,\n    groupBitmapMerge(a.aa_state)    AS aa_uniques\n  FROM {{ ref('int_execution_transactions_by_project_alltime_state') }} a\n),\n\ncurr AS (\n  SELECT * FROM curr_win\n  UNION ALL\n  SELECT * FROM curr_all\n)\n\nSELECT\n  'Transactions'            AS label,\n  c.window                  AS window,\n  toFloat64(c.txs)          AS value,\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.txs / nullIf(p.txs, 0), 0) - 1) * 100, 1)\n  END AS change_pct\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window\n\nUNION ALL\nSELECT\n  'FeesNative',\n  c.window,\n  round(toFloat64(c.fee_native), 6),\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.fee_native / nullIf(p.fee_native, 0), 0) - 1) * 100, 1)\n  END\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window\n\nUNION ALL\nSELECT\n  'ActiveAccounts',\n  c.window,\n  toFloat64(c.aa_uniques),\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.aa_uniques / nullIf(p.aa_uniques, 0), 0) - 1) * 100, 1)\n  END\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_alltime_state", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily", "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/fct_execution_transactions_snapshots.sql", "compiled": true, "compiled_code": "\n\nWITH wd AS (\n  SELECT max(date) AS max_date\n  FROM `dbt`.`int_execution_transactions_by_project_daily`\n),\nrng AS (\n  SELECT '1D'  AS window,  1  AS days UNION ALL\n  SELECT '7D'  AS window,  7  AS days UNION ALL\n  SELECT '30D' AS window,  30 AS days UNION ALL\n  SELECT '90D' AS window,  90 AS days\n),\nbounds AS (\n  SELECT\n    r.window,\n    r.days,\n    w.max_date,\n    subtractDays(w.max_date, r.days)        AS curr_start,\n    w.max_date                              AS curr_end,\n    subtractDays(w.max_date, 2 * r.days)    AS prev_start,\n    subtractDays(w.max_date, r.days)        AS prev_end\n  FROM rng r\n  CROSS JOIN wd w\n),\n\ncurr_win AS (\n  SELECT\n    b.window,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_daily` d\n  INNER JOIN bounds b\n    ON d.date >  b.curr_start\n   AND d.date <= b.curr_end\n  GROUP BY b.window\n),\nprev_win AS (\n  SELECT\n    b.window,\n    sum(d.tx_count)                     AS txs,\n    sum(d.fee_native_sum)               AS fee_native,\n    groupBitmapMerge(d.ua_bitmap_state) AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_daily` d\n  INNER JOIN bounds b\n    ON d.date >  b.prev_start\n   AND d.date <= b.prev_end\n  GROUP BY b.window\n),\n\ncurr_all AS (\n  SELECT\n    'All' AS window,\n    sumMerge(a.txs_state)           AS txs,\n    sumMerge(a.fee_state)           AS fee_native,\n    groupBitmapMerge(a.aa_state)    AS aa_uniques\n  FROM `dbt`.`int_execution_transactions_by_project_alltime_state` a\n),\n\ncurr AS (\n  SELECT * FROM curr_win\n  UNION ALL\n  SELECT * FROM curr_all\n)\n\nSELECT\n  'Transactions'            AS label,\n  c.window                  AS window,\n  toFloat64(c.txs)          AS value,\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.txs / nullIf(p.txs, 0), 0) - 1) * 100, 1)\n  END AS change_pct\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window\n\nUNION ALL\nSELECT\n  'FeesNative',\n  c.window,\n  round(toFloat64(c.fee_native), 6),\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.fee_native / nullIf(p.fee_native, 0), 0) - 1) * 100, 1)\n  END\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window\n\nUNION ALL\nSELECT\n  'ActiveAccounts',\n  c.window,\n  toFloat64(c.aa_uniques),\n  CASE\n    WHEN c.window = 'All' THEN NULL\n    ELSE round((coalesce(c.aa_uniques / nullIf(p.aa_uniques, 0), 0) - 1) * 100, 1)\n  END\nFROM curr c\nLEFT JOIN prev_win p ON p.window = c.window", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_by_project_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_by_project_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_by_project_7d"], "alias": "api_execution_transactions_active_accounts_by_project_7d", "checksum": {"name": "sha256", "checksum": "7032b2a436217ea868ab494e4b0ddad5d3f84fa8bf870c67af730814083278b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model providing data on active accounts by project for the last 7 days.\"", "columns": {"label": {"name": "label", "description": "Bucket label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value associated with the label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in value.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.790376, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_by_project_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} AS t\nWHERE t.label = 'ActiveAccounts' AND t.window = '7D'\nORDER BY t.value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_by_project_7d.sql", "compiled": true, "compiled_code": "\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` AS t\nWHERE t.label = 'ActiveAccounts' AND t.window = '7D'\nORDER BY t.value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_by_project_total": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_by_project_total", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_by_project_total.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_by_project_total.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_by_project_total", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_by_project_total"], "alias": "api_execution_transactions_by_project_total", "checksum": {"name": "sha256", "checksum": "51ccbb678c478ef98485d603b432e331587ade4a926ae1f971c0b3629e80b70e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Signed EVM transactions included in blocks.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block containing the transaction.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Zero-based index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Keccak-256 hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Transaction count of the sender before this transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "Sender address (EOA or contract) that signed the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "Recipient address (null for contract creation).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_binary": {"name": "value_binary", "description": "Value (native token) as 32-byte big-endian binary.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_string": {"name": "value_string", "description": "Value as a decimal string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_f64": {"name": "value_f64", "description": "Value converted to floating-point GNO/XDAI (may lose precision).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "input": {"name": "input", "description": "Calldata / input data supplied with the transaction (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "Gas limit provided by the sender.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Actual gas used by the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Legacy gas price (wei) for pre-EIP-1559 txs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Envelope type (0 = legacy, 1 = access-list, 2 = EIP-1559).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_priority_fee_per_gas": {"name": "max_priority_fee_per_gas", "description": "Maximum miner tip per gas (wei) for EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_fee_per_gas": {"name": "max_fee_per_gas", "description": "Maximum total fee per gas (wei) under EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "1 if the transaction succeeded; 0 if it reverted.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_bytes": {"name": "n_input_bytes", "description": "Byte length of the input data.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_zero_bytes": {"name": "n_input_zero_bytes", "description": "Number of zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_nonzero_bytes": {"name": "n_input_nonzero_bytes", "description": "Number of non-zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_rlp_bytes": {"name": "n_rlp_bytes", "description": "Total RLP-encoded payload size (bytes) if available.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Block timestamp (seconds since epoch).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "r": {"name": "r", "description": "ECDSA signature r.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "s": {"name": "s", "description": "ECDSA signature s.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v": {"name": "v", "description": "ECDSA recovery id / y-parity.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the enclosing block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.8087997, "relation_name": "`dbt`.`api_execution_transactions_by_project_total`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} AS t\nWHERE t.label = 'Transactions' AND t.window = 'All'\nORDER BY t.value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_by_project_total.sql", "compiled": true, "compiled_code": "\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` AS t\nWHERE t.label = 'Transactions' AND t.window = 'All'\nORDER BY t.value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_by_sector_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_by_sector_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_by_sector_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_by_sector_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_by_sector_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_by_sector_daily"], "alias": "api_execution_transactions_by_sector_daily", "checksum": {"name": "sha256", "checksum": "ffe17dedd8492f6649f51d14d7396070c1ad9b8f65d7d0a3eaf223bd5310c875"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model providing daily execution transactions by sector, aggregated from the int_execution_transactions_by_project_daily model.\"", "columns": {"date": {"name": "date", "description": "Date of the transaction.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total transaction count.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8110015, "relation_name": "`dbt`.`api_execution_transactions_by_sector_daily`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\n\nSELECT\n  date,\n  sector AS label,\n  txs AS value\nFROM {{ ref('fct_execution_transactions_by_sector_daily') }}\nWHERE date < today()\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_by_sector_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  date,\n  sector AS label,\n  txs AS value\nFROM `dbt`.`fct_execution_transactions_by_sector_daily`\nWHERE date < today()\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_gas_share_by_project_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_gas_share_by_project_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_gas_share_by_project_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_gas_share_by_project_daily"], "alias": "api_execution_transactions_gas_share_by_project_daily", "checksum": {"name": "sha256", "checksum": "77e8ca714f12c7fc2e9484a7d1ef8dc276e294c0e148838f4e70bf07b7eeb13f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "gas", "production", "execution", "transactions", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions", "gas"], "description": "\"Daily gas share of execution transactions by project, calculated as a percentage of gas used in each project relative to the total gas used daily.\"", "columns": {"date": {"name": "date", "description": "Date of the data record.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Project name.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Percentage of gas used by the project relative to the total daily gas used.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions", "gas"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.8352957, "relation_name": "`dbt`.`api_execution_transactions_gas_share_by_project_daily`", "raw_code": "{{\n  config(\n    materialized='view', \n    tags=['production','execution','transactions','gas']\n  )\n}}\n\nWITH tot AS (\n  SELECT\n    date,\n    SUM(gas_used_sum) AS day_gas_used\n  FROM {{ ref('int_execution_transactions_by_project_daily') }}\n  WHERE date < today()     \n  GROUP BY date\n)\nSELECT\n  p.date,\n  p.project AS label,\n  ROUND(p.gas_used_sum / NULLIF(t.day_gas_used, 0) * 100, 2) AS value\nFROM {{ ref('int_execution_transactions_by_project_daily') }} p\nJOIN tot t USING (date)\nWHERE p.date < today()\nORDER BY p.date DESC, label", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}, {"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_gas_share_by_project_daily.sql", "compiled": true, "compiled_code": "\n\nWITH tot AS (\n  SELECT\n    date,\n    SUM(gas_used_sum) AS day_gas_used\n  FROM `dbt`.`int_execution_transactions_by_project_daily`\n  WHERE date < today()     \n  GROUP BY date\n)\nSELECT\n  p.date,\n  p.project AS label,\n  ROUND(p.gas_used_sum / NULLIF(t.day_gas_used, 0) * 100, 2) AS value\nFROM `dbt`.`int_execution_transactions_by_project_daily` p\nJOIN tot t USING (date)\nWHERE p.date < today()\nORDER BY p.date DESC, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_active_accounts_by_sector_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_active_accounts_by_sector_daily"], "alias": "api_execution_transactions_active_accounts_by_sector_daily", "checksum": {"name": "sha256", "checksum": "ae8d7a204c081a28d61e2d89a8a5b2069bd0bbf44f2fd1588002aff8b9473de8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"Model providing the count of active senders by sector on a daily basis.\"", "columns": {"date": {"name": "date", "description": "Date of the data entry.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Merged group bitmap state value.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.7986891, "relation_name": "`dbt`.`api_execution_transactions_active_accounts_by_sector_daily`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\n\nSELECT\n  date,\n  sector AS label,\n  active_accounts AS value\nFROM {{ ref('fct_execution_transactions_by_sector_daily') }}\nWHERE date < today()\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_active_accounts_by_sector_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  date,\n  sector AS label,\n  active_accounts AS value\nFROM `dbt`.`fct_execution_transactions_by_sector_daily`\nWHERE date < today()\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_by_project_7d": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_by_project_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_by_project_7d.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_by_project_7d.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_by_project_7d", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_by_project_7d"], "alias": "api_execution_transactions_by_project_7d", "checksum": {"name": "sha256", "checksum": "81d97540edbaf0102c1d6eb9676afed0dbef781f1cbd249b4be5db213656fc46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "\"View aggregating execution.indexing_state into per-(mode,dataset) stats.\"", "columns": {"label": {"name": "label", "description": "Bucket label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["production", "execution", "transactions"]}, "created_at": 1760535477.8030777, "relation_name": "`dbt`.`api_execution_transactions_by_project_7d`", "raw_code": "{{ config(materialized='view', tags=['production','execution','transactions']) }}\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM {{ ref('fct_execution_transactions_by_project_snapshots') }} AS t\nWHERE t.label = 'Transactions' AND t.window = '7D'\nORDER BY t.value DESC", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_project_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_by_project_7d.sql", "compiled": true, "compiled_code": "\nSELECT t.bucket AS label, t.value, t.change_pct\nFROM `dbt`.`fct_execution_transactions_by_project_snapshots` AS t\nWHERE t.label = 'Transactions' AND t.window = '7D'\nORDER BY t.value DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_hourly": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_fees_native_by_sector_hourly", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_fees_native_by_sector_hourly.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_fees_native_by_sector_hourly.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_hourly", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_fees_native_by_sector_hourly"], "alias": "api_execution_transactions_fees_native_by_sector_hourly", "checksum": {"name": "sha256", "checksum": "117574c6e7bbb478b7c9d4fdface57f89c45b2bce78cec11a5257b014bc00f34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "hourly", "production", "execution", "transactions", "hourly"], "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions", "hourly"], "description": "Hourly sum of native fee values by sector label.", "columns": {"date": {"name": "date", "description": "Hourly timestamp.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Sector label.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Sum of native fee values.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["production", "execution", "transactions", "hourly"], "access": "public", "meta": {"owner": "analytics_engineer", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.831009, "relation_name": "`dbt`.`api_execution_transactions_fees_native_by_sector_hourly`", "raw_code": "{{\n  config(materialized='view', tags=['production','execution','transactions','hourly'])\n}}\n\nSELECT\n  hour AS date,\n  sector AS label,\n  round(toFloat64(sum(fee_native_sum)), 2) AS value\nFROM {{ ref('int_execution_transactions_by_project_hourly_recent') }}\nGROUP BY date, label\nORDER BY date ASC, label ASC", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_fees_native_by_sector_hourly.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  hour AS date,\n  sector AS label,\n  round(toFloat64(sum(fee_native_sum)), 2) AS value\nFROM `dbt`.`int_execution_transactions_by_project_hourly_recent`\nGROUP BY date, label\nORDER BY date ASC, label ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_transactions_value_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_transactions_value_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/transactions/marts/api_execution_transactions_value_daily.sql", "original_file_path": "models/execution/transactions/marts/api_execution_transactions_value_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_transactions_value_daily", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "api_execution_transactions_value_daily"], "alias": "api_execution_transactions_value_daily", "checksum": {"name": "sha256", "checksum": "484511aa439840d8a297b65f094ec9dc46b012d713f719ef51e6000521e56acd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "transactions", "production", "execution", "transactions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "transactions"], "description": "Daily aggregated values of executed transactions on the API layer.", "columns": {"date": {"name": "date", "description": "Date of the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Type of the transaction", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value": {"name": "xdai_value", "description": "Value of the transaction in xDAI", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value_avg": {"name": "xdai_value_avg", "description": "Average value of transactions in xDAI", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "xdai_value_median": {"name": "xdai_value_median", "description": "Median value of transactions in xDAI", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/transactions/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "execution", "transactions"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.841795, "relation_name": "`dbt`.`api_execution_transactions_value_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production', 'execution', 'transactions']\n    )\n}}\n\nSELECT\n    date\n    ,transaction_type\n    ,xdai_value \n    ,xdai_value_avg \n    ,xdai_value_median\nFROM {{ ref('int_execution_transactions_info_daily') }}\nWHERE success = 1\nORDER BY date, transaction_type", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/api_execution_transactions_value_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,transaction_type\n    ,xdai_value \n    ,xdai_value_avg \n    ,xdai_value_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_circles_backing": {"database": "dbt", "schema": "dbt", "name": "int_execution_circles_backing", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/intermediate/int_execution_circles_backing.sql", "original_file_path": "models/execution/Circles/intermediate/int_execution_circles_backing.sql", "unique_id": "model.gnosis_dbt.int_execution_circles_backing", "fqn": ["gnosis_dbt", "execution", "Circles", "intermediate", "int_execution_circles_backing"], "alias": "int_execution_circles_backing", "checksum": {"name": "sha256", "checksum": "ee9e551cc3dac653d85afd302a565f91b82cc63aa7621317cb0a62e7b3d1dd95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "backing", "production", "execution", "circles", "backing"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "execution", "circles", "backing"], "description": "Business-facing model representing execution data related to circles backing activities, aggregated by date with counts of relevant events.", "columns": {"date": {"name": "date", "description": "Date truncated to day from block timestamp, representing the day of the event.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of 'CirclesBackingCompleted' events on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "execution", "circles", "backing"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535477.902361, "relation_name": "`dbt`.`int_execution_circles_backing`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(date)',\n        unique_key              = '(date)',\n        partition_by            = 'toStartOfMonth(date)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        tags                    = ['production','execution','circles','backing']\n    )\n}}\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM {{ ref('contracts_circles_v2_CirclesBackingFactory_events') }}\nWHERE \n    event_name = 'CirclesBackingCompleted'\n    {{ apply_monthly_incremental_filter(source_field='block_timestamp',destination_field='date',add_and=true) }}\nGROUP BY 1", "language": "sql", "refs": [{"name": "contracts_circles_v2_CirclesBackingFactory_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/intermediate/int_execution_circles_backing.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM `dbt`.`contracts_circles_v2_CirclesBackingFactory_events`\nWHERE \n    event_name = 'CirclesBackingCompleted'\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_circles_backing`\n    )\n  \n\nGROUP BY 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_circles_v1_avatars": {"database": "dbt", "schema": "dbt", "name": "int_execution_circles_v1_avatars", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/intermediate/int_execution_circles_v1_avatars.sql", "original_file_path": "models/execution/Circles/intermediate/int_execution_circles_v1_avatars.sql", "unique_id": "model.gnosis_dbt.int_execution_circles_v1_avatars", "fqn": ["gnosis_dbt", "execution", "Circles", "intermediate", "int_execution_circles_v1_avatars"], "alias": "int_execution_circles_v1_avatars", "checksum": {"name": "sha256", "checksum": "b8cb9a12f697b0b653624129f9918af4a0fe9d02068aebb8a7abc110f64ef46d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dev", "execution", "circles", "avatars", "dev", "execution", "circles", "avatars"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, user_address)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, user_address)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["dev", "execution", "circles", "avatars"], "description": "Business-facing model representing avatars in execution circles, including user and inviter addresses, timestamps, and related metadata.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp when the event was recorded.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_address": {"name": "user_address", "description": "Decoded avatar address of the user (hex string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "inviter_address": {"name": "inviter_address", "description": "Decoded inviter address (hex string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["dev", "execution", "circles", "avatars"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, user_address)", "unique_key": "(block_timestamp, user_address)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535477.90914, "relation_name": "`dbt`.`int_execution_circles_v1_avatars`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, user_address)',\n        unique_key              = '(block_timestamp, user_address)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        tags                    = ['dev','execution','circles','avatars']\n    )\n}}\n\n\nSELECT\n    block_timestamp\n    ,decoded_params['avatar'] AS user_address\n    ,decoded_params['inviter'] AS inviter_address\nFROM {{ ref('contracts_circles_v2_Hub_events') }}\nWHERE \n    event_name = 'RegisterHuman'\n    {{ apply_monthly_incremental_filter(source_field='block_timestamp',destination_field='date',add_and=false) }}", "language": "sql", "refs": [{"name": "contracts_circles_v2_Hub_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/intermediate/int_execution_circles_v1_avatars.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    block_timestamp\n    ,decoded_params['avatar'] AS user_address\n    ,decoded_params['inviter'] AS inviter_address\nFROM `dbt`.`contracts_circles_v2_Hub_events`\nWHERE \n    event_name = 'RegisterHuman'\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_circles_v1_avatars`\n    )\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_circles_transitive_transfers": {"database": "dbt", "schema": "dbt", "name": "int_execution_circles_transitive_transfers", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/intermediate/int_execution_circles_transitive_transfers.sql", "original_file_path": "models/execution/Circles/intermediate/int_execution_circles_transitive_transfers.sql", "unique_id": "model.gnosis_dbt.int_execution_circles_transitive_transfers", "fqn": ["gnosis_dbt", "execution", "Circles", "intermediate", "int_execution_circles_transitive_transfers"], "alias": "int_execution_circles_transitive_transfers", "checksum": {"name": "sha256", "checksum": "a31ee4394b5a1ae5c783303bb632c24aaacebc5375b1468a0340dee774f1ceba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "transitive_transfers", "production", "execution", "circles", "transitive_transfers"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, from_avatar, to_avatar)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, from_avatar, to_avatar)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "execution", "circles", "transitive_transfers"], "description": "This model aggregates transitive transfer data within execution circles, capturing transfer amounts, involved avatars, and related metadata for analysis.", "columns": {"date": {"name": "date", "description": "Date truncated to day from block timestamp, representing the day of the transfer.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_avatar": {"name": "from_avatar", "description": "Originating avatar address involved in the transfer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_avatar": {"name": "to_avatar", "description": "Destination avatar address involved in the transfer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_amount": {"name": "total_amount", "description": "Sum of transfer amounts in wei for the given from-to pair.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of transfer events between the from and to avatars.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "transitive_transfers"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, from_avatar, to_avatar)", "unique_key": "(date, from_avatar, to_avatar)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535477.905551, "relation_name": "`dbt`.`int_execution_circles_transitive_transfers`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(date, from_avatar, to_avatar)',\n        unique_key              = '(date, from_avatar, to_avatar)',\n        partition_by            = 'toStartOfMonth(date)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        tags                    = ['production','execution','circles','transitive_transfers']\n    )\n}}\n\n\nSELECT\n  toStartOfDay(block_timestamp) AS date\n  ,decoded_params['from'] AS from_avatar\n  ,decoded_params['to']   AS  to_avatar\n  ,SUM(\n    toUInt256OrZero(\n      arrayJoin(\n        JSONExtract(\n          ifNull(decoded_params['amounts'], '[]'),   -- remove Nullable\n          'Array(String)'                            -- get Array(String)\n        )\n      )\n    )\n  ) AS total_amount\n  ,COUNT(*) AS cnt\nFROM {{ ref('contracts_circles_v2_Hub_events') }}\nWHERE\n  event_name = 'StreamCompleted'\n  {{ apply_monthly_incremental_filter(source_field='block_timestamp', destination_field='date', add_and=true) }}\nGROUP BY 1, 2, 3", "language": "sql", "refs": [{"name": "contracts_circles_v2_Hub_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/intermediate/int_execution_circles_transitive_transfers.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n  toStartOfDay(block_timestamp) AS date\n  ,decoded_params['from'] AS from_avatar\n  ,decoded_params['to']   AS  to_avatar\n  ,SUM(\n    toUInt256OrZero(\n      arrayJoin(\n        JSONExtract(\n          ifNull(decoded_params['amounts'], '[]'),   -- remove Nullable\n          'Array(String)'                            -- get Array(String)\n        )\n      )\n    )\n  ) AS total_amount\n  ,COUNT(*) AS cnt\nFROM `dbt`.`contracts_circles_v2_Hub_events`\nWHERE\n  event_name = 'StreamCompleted'\n  \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_circles_transitive_transfers`\n    )\n  \n\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_circles_v2_avatars": {"database": "dbt", "schema": "dbt", "name": "int_execution_circles_v2_avatars", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/intermediate/int_execution_circles_v2_avatars.sql", "original_file_path": "models/execution/Circles/intermediate/int_execution_circles_v2_avatars.sql", "unique_id": "model.gnosis_dbt.int_execution_circles_v2_avatars", "fqn": ["gnosis_dbt", "execution", "Circles", "intermediate", "int_execution_circles_v2_avatars"], "alias": "int_execution_circles_v2_avatars", "checksum": {"name": "sha256", "checksum": "75921da75c5bb133f4849001367c704966df9a9dd51896cf3560e3e739074bed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "avatars", "production", "execution", "circles", "avatars"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, avatar_type)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, avatar_type)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "execution", "circles", "avatars"], "description": "Business-facing model representing avatar data derived from execution layer tables, including registration events, counts, and associated metadata.", "columns": {"date": {"name": "date", "description": "Date truncated to day from block timestamps, representing the day of the event.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "avatar_type": {"name": "avatar_type", "description": "Type of avatar based on registration event: 'Human', 'Group', 'Org', or 'Unknown'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of registration events for the given avatar type on the specific date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "avatars"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, avatar_type)", "unique_key": "(date, avatar_type)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535477.9115672, "relation_name": "`dbt`.`int_execution_circles_v2_avatars`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(date, avatar_type)',\n        unique_key              = '(date, avatar_type)',\n        partition_by            = 'toStartOfMonth(date)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        tags                    = ['production','execution','circles','avatars']\n    )\n}}\n\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,CASE  \n        WHEN event_name = 'RegisterHuman' THEN 'Human' \n        WHEN event_name = 'RegisterGroup' THEN 'Group' \n        WHEN event_name = 'RegisterOrganization' THEN 'Org'\n        ELSE 'Unknown' \n    END AS avatar_type\n    ,COUNT(*) AS cnt\nFROM {{ ref('contracts_circles_v2_Hub_events') }}\nWHERE \n    event_name IN ('RegisterHuman','RegisterGroup','RegisterOrganization')\n    {{ apply_monthly_incremental_filter(source_field='block_timestamp',destination_field='date',add_and=true) }}\nGROUP BY 1,2", "language": "sql", "refs": [{"name": "contracts_circles_v2_Hub_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/intermediate/int_execution_circles_v2_avatars.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,CASE  \n        WHEN event_name = 'RegisterHuman' THEN 'Human' \n        WHEN event_name = 'RegisterGroup' THEN 'Group' \n        WHEN event_name = 'RegisterOrganization' THEN 'Org'\n        ELSE 'Unknown' \n    END AS avatar_type\n    ,COUNT(*) AS cnt\nFROM `dbt`.`contracts_circles_v2_Hub_events`\nWHERE \n    event_name IN ('RegisterHuman','RegisterGroup','RegisterOrganization')\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_circles_v2_avatars`\n    )\n  \n\nGROUP BY 1,2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_circles_orgs_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_execution_circles_orgs_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/api_execution_circles_orgs_cnt_latest.sql", "original_file_path": "models/execution/Circles/marts/api_execution_circles_orgs_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_execution_circles_orgs_cnt_latest", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "api_execution_circles_orgs_cnt_latest"], "alias": "api_execution_circles_orgs_cnt_latest", "checksum": {"name": "sha256", "checksum": "c4c8a888c9ad56401a77c70824cafec1de4b4de869402ff0af08c65427ccbf7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "orgs", "production", "execution", "circles", "orgs"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "orgs"], "description": "Business-facing metric representing the latest count of organizations involved in execution circles, along with the percentage change compared to data from 7 days prior.", "columns": {"total": {"name": "total", "description": "Total count of organizations involved in execution circles at the latest timestamp.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in organization count compared to data from 7 days ago, rounded to one decimal place.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "orgs"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9235256, "relation_name": "`dbt`.`api_execution_circles_orgs_cnt_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','orgs']\n    )\n}}\n\nWITH\n\norgs_latest AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = (SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }})\n        AND avatar_type = 'Org'\n),\n\norgs_7d AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = subtractDays((SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }}), 7)\n        AND avatar_type = 'Org'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM orgs_latest t1\nCROSS JOIN orgs_7d t2", "language": "sql", "refs": [{"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_circles_avatars"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/api_execution_circles_orgs_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\norgs_latest AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = (SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`)\n        AND avatar_type = 'Org'\n),\n\norgs_7d AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = subtractDays((SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`), 7)\n        AND avatar_type = 'Org'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM orgs_latest t1\nCROSS JOIN orgs_7d t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_circles_avatars": {"database": "dbt", "schema": "dbt", "name": "fct_execution_circles_avatars", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/fct_execution_circles_avatars.sql", "original_file_path": "models/execution/Circles/marts/fct_execution_circles_avatars.sql", "unique_id": "model.gnosis_dbt.fct_execution_circles_avatars", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "fct_execution_circles_avatars"], "alias": "fct_execution_circles_avatars", "checksum": {"name": "sha256", "checksum": "4b638eee8805010f6482cefe6a32c3aed3d27922b9dfa07e12083083d7dbc434"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "avatars", "production", "execution", "circles", "avatars"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "avatars"], "description": "A fact table aggregating execution data related to circles and avatars, including daily counts, totals, and related metrics for analysis.", "columns": {"date": {"name": "date", "description": "The date of the record, representing the day for which metrics are aggregated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "avatar_type": {"name": "avatar_type", "description": "The type/category of avatar involved in the execution.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of executions for the given date and avatar type.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total": {"name": "total", "description": "Cumulative sum of counts over time per avatar type.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_date": {"name": "max_date", "description": "The maximum date present in the dataset, used for reference.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_date": {"name": "min_date", "description": "The minimum date present in the dataset, used for reference.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "avatars"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9268525, "relation_name": "`dbt`.`fct_execution_circles_avatars`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','avatars']\n    )\n}}\n\nWITH dates AS (\n    -- get min/max date \n    SELECT\n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM {{ ref('int_execution_circles_v2_avatars') }}\n),\ndate_series AS (\n    -- generate dense series of dates\n    SELECT\n        toDate(min_date) + number AS date\n    FROM dates\n    ARRAY JOIN range(dateDiff('day', min_date, max_date) + 1) AS number\n),\navatar_types AS (\n    SELECT DISTINCT avatar_type\n    FROM {{ ref('int_execution_circles_v2_avatars') }}\n),\ndense_grid AS (\n    SELECT\n        d.date,\n        a.avatar_type\n    FROM date_series d\n    CROSS JOIN avatar_types a\n),\nfilled AS (\n    SELECT\n        g.date,\n        g.avatar_type,\n        coalesce(t.cnt, 0) AS cnt\n    FROM dense_grid g\n    LEFT JOIN {{ ref('int_execution_circles_v2_avatars') }} t\n        ON g.date = t.date\n       AND g.avatar_type = t.avatar_type\n)\n\nSELECT\n    date,\n    avatar_type,\n    cnt,\n    SUM(cnt) OVER (PARTITION BY avatar_type ORDER BY date) AS total\nFROM filled", "language": "sql", "refs": [{"name": "int_execution_circles_v2_avatars", "package": null, "version": null}, {"name": "int_execution_circles_v2_avatars", "package": null, "version": null}, {"name": "int_execution_circles_v2_avatars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_circles_v2_avatars"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/fct_execution_circles_avatars.sql", "compiled": true, "compiled_code": "\n\nWITH dates AS (\n    -- get min/max date \n    SELECT\n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM `dbt`.`int_execution_circles_v2_avatars`\n),\ndate_series AS (\n    -- generate dense series of dates\n    SELECT\n        toDate(min_date) + number AS date\n    FROM dates\n    ARRAY JOIN range(dateDiff('day', min_date, max_date) + 1) AS number\n),\navatar_types AS (\n    SELECT DISTINCT avatar_type\n    FROM `dbt`.`int_execution_circles_v2_avatars`\n),\ndense_grid AS (\n    SELECT\n        d.date,\n        a.avatar_type\n    FROM date_series d\n    CROSS JOIN avatar_types a\n),\nfilled AS (\n    SELECT\n        g.date,\n        g.avatar_type,\n        coalesce(t.cnt, 0) AS cnt\n    FROM dense_grid g\n    LEFT JOIN `dbt`.`int_execution_circles_v2_avatars` t\n        ON g.date = t.date\n       AND g.avatar_type = t.avatar_type\n)\n\nSELECT\n    date,\n    avatar_type,\n    cnt,\n    SUM(cnt) OVER (PARTITION BY avatar_type ORDER BY date) AS total\nFROM filled", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_circles_backing": {"database": "dbt", "schema": "dbt", "name": "fct_execution_circles_backing", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/fct_execution_circles_backing.sql", "original_file_path": "models/execution/Circles/marts/fct_execution_circles_backing.sql", "unique_id": "model.gnosis_dbt.fct_execution_circles_backing", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "fct_execution_circles_backing"], "alias": "fct_execution_circles_backing", "checksum": {"name": "sha256", "checksum": "b31ff8ff5288b0271e6f076912aa9d8fa4092ac2c74751d7ad1874557a9bf4d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "backing", "production", "execution", "circles", "backing"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "backing"], "description": "Aggregated data on execution circles backing, including date series, total counts, and cumulative sums for analysis.", "columns": {"max_date": {"name": "max_date", "description": "Maximum date in the dataset, representing the latest date processed.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_date": {"name": "min_date", "description": "Minimum date in the dataset, representing the earliest date processed.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "execution", "circles", "backing"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9288998, "relation_name": "`dbt`.`fct_execution_circles_backing`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','backing']\n    )\n}}\n\nWITH dates AS (\n    -- get min/max date \n    SELECT\n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM {{ ref('int_execution_circles_backing') }}\n),\ndate_series AS (\n    -- generate dense series of dates\n    SELECT\n        toDate(min_date) + number AS date\n    FROM dates\n    ARRAY JOIN range(dateDiff('day', min_date, max_date) + 1) AS number\n),\n\nfilled AS (\n    SELECT\n        g.date,\n        coalesce(t.cnt, 0) AS cnt\n    FROM date_series g\n    LEFT JOIN {{ ref('int_execution_circles_backing') }} t\n        ON g.date = t.date\n)\n\nSELECT\n    date,\n    cnt,\n    SUM(cnt) OVER (ORDER BY date) AS total\nFROM filled\nWHERE date < today()", "language": "sql", "refs": [{"name": "int_execution_circles_backing", "package": null, "version": null}, {"name": "int_execution_circles_backing", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_circles_backing"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/fct_execution_circles_backing.sql", "compiled": true, "compiled_code": "\n\nWITH dates AS (\n    -- get min/max date \n    SELECT\n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM `dbt`.`int_execution_circles_backing`\n),\ndate_series AS (\n    -- generate dense series of dates\n    SELECT\n        toDate(min_date) + number AS date\n    FROM dates\n    ARRAY JOIN range(dateDiff('day', min_date, max_date) + 1) AS number\n),\n\nfilled AS (\n    SELECT\n        g.date,\n        coalesce(t.cnt, 0) AS cnt\n    FROM date_series g\n    LEFT JOIN `dbt`.`int_execution_circles_backing` t\n        ON g.date = t.date\n)\n\nSELECT\n    date,\n    cnt,\n    SUM(cnt) OVER (ORDER BY date) AS total\nFROM filled\nWHERE date < today()", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_circles_avatars": {"database": "dbt", "schema": "dbt", "name": "api_execution_circles_avatars", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/api_execution_circles_avatars.sql", "original_file_path": "models/execution/Circles/marts/api_execution_circles_avatars.sql", "unique_id": "model.gnosis_dbt.api_execution_circles_avatars", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "api_execution_circles_avatars"], "alias": "api_execution_circles_avatars", "checksum": {"name": "sha256", "checksum": "4e51e74ec62100e3169ba9c384215270a467740ae70a92a455ed6bd1201f97f0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "avatars", "production", "execution", "circles", "avatars"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "avatars"], "description": "View summarizing API execution circles and avatars data, including counts and totals for each date and avatar type.", "columns": {"date": {"name": "date", "description": "Date of the data record (UTC).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "avatar_type": {"name": "avatar_type", "description": "Type/category of avatar.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences for the avatar type on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total": {"name": "total", "description": "Total number of executions or relevant metric for the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "execution", "circles", "avatars"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9138718, "relation_name": "`dbt`.`api_execution_circles_avatars`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','avatars']\n    )\n}}\n\nSELECT\n    date\n    ,avatar_type\n    ,cnt\n    ,total\nFROM {{ ref('fct_execution_circles_avatars') }}\nORDER BY date, avatar_type", "language": "sql", "refs": [{"name": "fct_execution_circles_avatars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_circles_avatars"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/api_execution_circles_avatars.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,avatar_type\n    ,cnt\n    ,total\nFROM `dbt`.`fct_execution_circles_avatars`\nORDER BY date, avatar_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_circles_backers_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_execution_circles_backers_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/api_execution_circles_backers_cnt_latest.sql", "original_file_path": "models/execution/Circles/marts/api_execution_circles_backers_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_execution_circles_backers_cnt_latest", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "api_execution_circles_backers_cnt_latest"], "alias": "api_execution_circles_backers_cnt_latest", "checksum": {"name": "sha256", "checksum": "cfede177836c5735b53e58d28d3a4bbd6147713293c1619522982bd3abe05b99"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "backers", "production", "execution", "circles", "backers"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "backers"], "description": "Business-facing metric representing the latest count of backers in execution circles, along with the percentage change compared to seven days prior.", "columns": {"total": {"name": "total", "description": "Total number of backers in the latest execution circles.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in backers compared to seven days ago, rounded to one decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "backers"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9162598, "relation_name": "`dbt`.`api_execution_circles_backers_cnt_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','backers']\n    )\n}}\n\nWITH\n\nbackers_latest AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_backing') }}\n    WHERE \n        date = (SELECT max(date) FROM {{ ref('fct_execution_circles_backing') }})\n),\n\nbackers_7d AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_backing') }}\n    WHERE \n        date = subtractDays((SELECT max(date) FROM {{ ref('fct_execution_circles_backing') }}), 7)\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM backers_latest t1\nCROSS JOIN backers_7d t2", "language": "sql", "refs": [{"name": "fct_execution_circles_backing", "package": null, "version": null}, {"name": "fct_execution_circles_backing", "package": null, "version": null}, {"name": "fct_execution_circles_backing", "package": null, "version": null}, {"name": "fct_execution_circles_backing", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_circles_backing"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/api_execution_circles_backers_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nbackers_latest AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_backing`\n    WHERE \n        date = (SELECT max(date) FROM `dbt`.`fct_execution_circles_backing`)\n),\n\nbackers_7d AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_backing`\n    WHERE \n        date = subtractDays((SELECT max(date) FROM `dbt`.`fct_execution_circles_backing`), 7)\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM backers_latest t1\nCROSS JOIN backers_7d t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_circles_humans_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_execution_circles_humans_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/api_execution_circles_humans_cnt_latest.sql", "original_file_path": "models/execution/Circles/marts/api_execution_circles_humans_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_execution_circles_humans_cnt_latest", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "api_execution_circles_humans_cnt_latest"], "alias": "api_execution_circles_humans_cnt_latest", "checksum": {"name": "sha256", "checksum": "24835c81899a3aa402d27ed3381a89d371d80d21fb489315d7a4af79ffb68624"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "humans", "production", "execution", "circles", "humans"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "humans"], "description": "Business-facing metric representing the latest count of humans in execution circles, along with the percentage change compared to seven days prior.", "columns": {"total": {"name": "total", "description": "Total number of humans in execution circles at the latest timestamp.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in human count compared to seven days ago, rounded to one decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "humans"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.921152, "relation_name": "`dbt`.`api_execution_circles_humans_cnt_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','humans']\n    )\n}}\n\nWITH\n\nhumans_latest AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = (SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }})\n        AND avatar_type = 'Human'\n),\n\nhumans_7d AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = subtractDays((SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }}), 7)\n        AND avatar_type = 'Human'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM humans_latest t1\nCROSS JOIN humans_7d t2", "language": "sql", "refs": [{"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_circles_avatars"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/api_execution_circles_humans_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nhumans_latest AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = (SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`)\n        AND avatar_type = 'Human'\n),\n\nhumans_7d AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = subtractDays((SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`), 7)\n        AND avatar_type = 'Human'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM humans_latest t1\nCROSS JOIN humans_7d t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_circles_groups_cnt_latest": {"database": "dbt", "schema": "dbt", "name": "api_execution_circles_groups_cnt_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/Circles/marts/api_execution_circles_groups_cnt_latest.sql", "original_file_path": "models/execution/Circles/marts/api_execution_circles_groups_cnt_latest.sql", "unique_id": "model.gnosis_dbt.api_execution_circles_groups_cnt_latest", "fqn": ["gnosis_dbt", "execution", "Circles", "marts", "api_execution_circles_groups_cnt_latest"], "alias": "api_execution_circles_groups_cnt_latest", "checksum": {"name": "sha256", "checksum": "b7f298072b6de19b1793766c572ea2e4cd55ffd9993a73781f02d7507186875c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "circles", "groups", "production", "execution", "circles", "groups"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "circles", "groups"], "description": "Business metric representing the latest count of execution circles for groups, along with the percentage change compared to the data from 7 days prior.", "columns": {"total": {"name": "total", "description": "Total number of execution circles for groups in the latest data snapshot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_pct": {"name": "change_pct", "description": "Percentage change in execution circles compared to 7 days ago, rounded to 1 decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/Circles/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "circles", "groups"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9187732, "relation_name": "`dbt`.`api_execution_circles_groups_cnt_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','circles','groups']\n    )\n}}\n\nWITH\n\ngroups_latest AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = (SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }})\n        AND avatar_type = 'Group'\n),\n\ngroups_7d AS (\n    SELECT \n        total\n    FROM {{ ref('fct_execution_circles_avatars') }}\n    WHERE \n        date = subtractDays((SELECT max(date) FROM {{ ref('fct_execution_circles_avatars') }}), 7)\n        AND avatar_type = 'Group'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM groups_latest t1\nCROSS JOIN groups_7d t2", "language": "sql", "refs": [{"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}, {"name": "fct_execution_circles_avatars", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_circles_avatars"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/Circles/marts/api_execution_circles_groups_cnt_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\ngroups_latest AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = (SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`)\n        AND avatar_type = 'Group'\n),\n\ngroups_7d AS (\n    SELECT \n        total\n    FROM `dbt`.`fct_execution_circles_avatars`\n    WHERE \n        date = subtractDays((SELECT max(date) FROM `dbt`.`fct_execution_circles_avatars`), 7)\n        AND avatar_type = 'Group'\n)\n\nSELECT\n    t1.total AS total\n    ,IF(t1.total=0 AND t2.total=0, 0, ROUND((COALESCE(t1.total / NULLIF(t2.total, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM groups_latest t1\nCROSS JOIN groups_7d t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_execution__storage_diffs": {"database": "dbt", "schema": "dbt", "name": "stg_execution__storage_diffs", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/state/staging/stg_execution__storage_diffs.sql", "original_file_path": "models/execution/state/staging/stg_execution__storage_diffs.sql", "unique_id": "model.gnosis_dbt.stg_execution__storage_diffs", "fqn": ["gnosis_dbt", "execution", "state", "staging", "stg_execution__storage_diffs"], "alias": "stg_execution__storage_diffs", "checksum": {"name": "sha256", "checksum": "45fa5de75a0581cd09a63d18cd08e66f93636ef05b9115640ad299214261a60e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "state", "size", "production", "execution", "state", "size"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "state", "size"], "description": "This table captures storage slot mutations produced by each transaction, enabling detailed analysis of contract state changes on the blockchain.", "columns": {"slot": {"name": "slot", "description": "32-byte storage slot key (hexadecimal representation).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Block height at which the storage change occurred.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Zero-based index of the transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that caused the storage change.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Contract address whose storage was modified.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value": {"name": "from_value", "description": "Value before change (hexadecimal string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value": {"name": "to_value", "description": "Value after change (hexadecimal string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the block containing the change.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version in nanoseconds.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/state/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "execution", "state", "size"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9319081, "relation_name": "`dbt`.`stg_execution__storage_diffs`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','state','size']\n    )\n}}\n\nWITH\n\nsource AS (\n    SELECT \n        block_number,\n        transaction_index,\n        CONCAT('0x', transaction_hash) AS transaction_hash,\n        CONCAT('0x', address) AS address,\n        slot,\n        from_value,\n        to_value,\n        block_timestamp\n    FROM \n        {{ source('execution','storage_diffs') }}\n)\n\nSELECT\n    *\nFROM source", "language": "sql", "refs": [], "sources": [["execution", "storage_diffs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.execution.storage_diffs"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/state/staging/stg_execution__storage_diffs.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n    SELECT \n        block_number,\n        transaction_index,\n        CONCAT('0x', transaction_hash) AS transaction_hash,\n        CONCAT('0x', address) AS address,\n        slot,\n        from_value,\n        to_value,\n        block_timestamp\n    FROM \n        `execution`.`storage_diffs`\n)\n\nSELECT\n    *\nFROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_execution_state_size_full_diff_daily": {"database": "dbt", "schema": "dbt", "name": "int_execution_state_size_full_diff_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/state/intermediate/int_execution_state_size_full_diff_daily.sql", "original_file_path": "models/execution/state/intermediate/int_execution_state_size_full_diff_daily.sql", "unique_id": "model.gnosis_dbt.int_execution_state_size_full_diff_daily", "fqn": ["gnosis_dbt", "execution", "state", "intermediate", "int_execution_state_size_full_diff_daily"], "alias": "int_execution_state_size_full_diff_daily", "checksum": {"name": "sha256", "checksum": "d059c7f6bea6610b9348aebe10509407f5a2cddec15cf808239c172d19cacda9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "state", "size", "production", "execution", "state", "size"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "execution", "state", "size"], "description": "Daily aggregated differences in execution state sizes, including bytes added or removed, derived from storage diffs, for monitoring and analysis.", "columns": {"date": {"name": "date", "description": "The day for which the size difference is calculated, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_diff": {"name": "bytes_diff", "description": "Total bytes difference (positive for increase, negative for decrease) during the day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/state/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "state", "size"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535477.9362206, "relation_name": "`dbt`.`int_execution_state_size_full_diff_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','execution','state','size']\n    )\n}}\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        {{ ref('stg_execution__storage_diffs') }}\n    {{ apply_monthly_incremental_filter('block_timestamp','date') }}\n    GROUP BY 1\n)\n\nSELECT\n    *\nFROM state_size_diff", "language": "sql", "refs": [{"name": "stg_execution__storage_diffs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_execution__storage_diffs"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/state/intermediate/int_execution_state_size_full_diff_daily.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `dbt`.`stg_execution__storage_diffs`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_state_size_full_diff_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT\n    *\nFROM state_size_diff", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_execution_state_full_size_daily": {"database": "dbt", "schema": "dbt", "name": "api_execution_state_full_size_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/state/marts/api_execution_state_full_size_daily.sql", "original_file_path": "models/execution/state/marts/api_execution_state_full_size_daily.sql", "unique_id": "model.gnosis_dbt.api_execution_state_full_size_daily", "fqn": ["gnosis_dbt", "execution", "state", "marts", "api_execution_state_full_size_daily"], "alias": "api_execution_state_full_size_daily", "checksum": {"name": "sha256", "checksum": "ba85898cfc75816d47ad56ca6d8ae64c87df59cfd35baf9f71ce61036397c908"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "state", "size", "production", "execution", "state", "size"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "state", "size"], "description": "Daily snapshot of the full size of API execution state, representing the total bytes in gigabytes for the dataset, aggregated per day.", "columns": {"date": {"name": "date", "description": "The calendar date for the snapshot, in YYYY-MM-DD format.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Total size of the API execution state in gigabytes for the given date.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/state/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "state", "size"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.9469695, "relation_name": "`dbt`.`api_execution_state_full_size_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','state','size']\n    )\n}}\n\nSELECT\n    date\n    ,bytes/POWER(10,9) AS value\nFROM {{ ref('fct_execution_state_full_size_daily') }}", "language": "sql", "refs": [{"name": "fct_execution_state_full_size_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.fct_execution_state_full_size_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/state/marts/api_execution_state_full_size_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,bytes/POWER(10,9) AS value\nFROM `dbt`.`fct_execution_state_full_size_daily`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_execution_state_full_size_daily": {"database": "dbt", "schema": "dbt", "name": "fct_execution_state_full_size_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "execution/state/marts/fct_execution_state_full_size_daily.sql", "original_file_path": "models/execution/state/marts/fct_execution_state_full_size_daily.sql", "unique_id": "model.gnosis_dbt.fct_execution_state_full_size_daily", "fqn": ["gnosis_dbt", "execution", "state", "marts", "fct_execution_state_full_size_daily"], "alias": "fct_execution_state_full_size_daily", "checksum": {"name": "sha256", "checksum": "9134d9807e7e2af1c9cce68a8f5b6ccbf4df10b297d61f82f4ad1c3b043f8aba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "execution", "state", "size", "production", "execution", "state", "size"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "execution", "state", "size"], "description": "Daily aggregated size of execution state, including cumulative bytes over time.", "columns": {"date": {"name": "date", "description": "Date of the aggregation (YYYY-MM-DD).", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes": {"name": "bytes", "description": "Cumulative size in bytes up to the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/execution/state/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "execution", "state", "size"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535477.948999, "relation_name": "`dbt`.`fct_execution_state_full_size_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','execution','state','size']\n    )\n}}\n\nSELECT\n    date\n    ,SUM(bytes_diff) OVER (ORDER BY date ASC) AS bytes\nFROM {{ ref('int_execution_state_size_full_diff_daily') }}\nWHERE date < today()", "language": "sql", "refs": [{"name": "int_execution_state_size_full_diff_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_execution_state_size_full_diff_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/state/marts/fct_execution_state_full_size_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,SUM(bytes_diff) OVER (ORDER BY date ASC) AS bytes\nFROM `dbt`.`int_execution_state_size_full_diff_daily`\nWHERE date < today()", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_OmenAgentResultMapping_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_calls.sql", "original_file_path": "models/contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_calls.sql", "unique_id": "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls", "fqn": ["gnosis_dbt", "contracts", "OmenAgentResultMapping", "contracts_OmenAgentResultMapping_calls"], "alias": "contracts_OmenAgentResultMapping_calls", "checksum": {"name": "sha256", "checksum": "6818cb7889ae1cdd2ad8313142871720a82a0e455e0d61f308bd3bda510e965a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "omenagentresultmapping", "calls", "production", "contracts", "omenagentresultmapping", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "omenagentresultmapping", "calls"], "description": "This model contains call data from the Omen Agent Result Mapping, including transaction details, contract address, and timing information.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the call occurred.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract involved in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if the output is in JSON format; boolean flag.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_blocktime": {"name": "start_blocktime", "description": "Block timestamp marking the start of the data range.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "incremental_column": {"name": "incremental_column", "description": "Column used for incremental processing, typically block timestamp.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_table": {"name": "tx_table", "description": "Reference to the source transactions table.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/OmenAgentResultMapping/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "omenagentresultmapping", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9606495, "relation_name": "`dbt`.`contracts_OmenAgentResultMapping_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','omenagentresultmapping','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x260e1077dea98e738324a6cefb0ee9a272ed471a',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-09-30'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '260e1077dea98e738324a6cefb0ee9a272ed471a'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-09-30'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_OmenAgentResultMapping_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '260e1077dea98e738324a6cefb0ee9a272ed471a'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_OmenAgentResultMapping_events": {"database": "dbt", "schema": "dbt", "name": "contracts_OmenAgentResultMapping_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_events.sql", "original_file_path": "models/contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_events.sql", "unique_id": "model.gnosis_dbt.contracts_OmenAgentResultMapping_events", "fqn": ["gnosis_dbt", "contracts", "OmenAgentResultMapping", "contracts_OmenAgentResultMapping_events"], "alias": "contracts_OmenAgentResultMapping_events", "checksum": {"name": "sha256", "checksum": "5754097cc6b5c865a4d106d590c1df6322598a76c7f7156c943d2750f436ece2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "omenagentresultmapping", "events", "production", "contracts", "omenagentresultmapping", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "omenagentresultmapping", "events"], "description": "This model processes event logs related to Omen Agent Result Mapping, capturing details of contract events, timestamps, and associated identifiers.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp of the block when the event was logged.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "The type of event emitted, e.g., 'ResultMapped'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_id": {"name": "result_id", "description": "Unique identifier for the result, typically a hash or UUID.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_id": {"name": "agent_id", "description": "Identifier of the agent involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mapping_status": {"name": "mapping_status", "description": "Status of the mapping process, e.g., 'pending', 'confirmed'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "additional_data": {"name": "additional_data", "description": "Additional event data in JSON format.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/OmenAgentResultMapping/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "omenagentresultmapping", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9671028, "relation_name": "`dbt`.`contracts_OmenAgentResultMapping_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','omenagentresultmapping','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x260e1077dea98e738324a6cefb0ee9a272ed471a',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-09-30'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/OmenAgentResultMapping/contracts_OmenAgentResultMapping_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '260e1077dea98e738324a6cefb0ee9a272ed471a'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-09-30'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_OmenAgentResultMapping_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '260e1077dea98e738324a6cefb0ee9a272ed471a'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_wxdai_events": {"database": "dbt", "schema": "dbt", "name": "contracts_wxdai_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/tokens/contracts_wxdai_events.sql", "original_file_path": "models/contracts/tokens/contracts_wxdai_events.sql", "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "fqn": ["gnosis_dbt", "contracts", "tokens", "contracts_wxdai_events"], "alias": "contracts_wxdai_events", "checksum": {"name": "sha256", "checksum": "e836be137c1716c46a6ee4987a6918baa544f95f790632390d3f03bd2d30decc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "wxdai", "events", "production", "contracts", "wxdai", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "wxdai", "events"], "description": "This model captures wxDai event logs related to contract interactions, including block details, transaction specifics, and event metadata for analysis and reporting.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the event emitted.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_in_wei": {"name": "amount_in_wei", "description": "Amount involved in the event, denominated in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "Address receiving assets or tokens.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_start": {"name": "block_start", "description": "Start of the block range for the event.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_end": {"name": "block_end", "description": "End of the block range for the event.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/tokens/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "wxdai", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9858305, "relation_name": "`dbt`.`contracts_wxdai_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','wxdai','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/tokens/contracts_wxdai_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_sdai_events": {"database": "dbt", "schema": "dbt", "name": "contracts_sdai_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/tokens/contracts_sdai_events.sql", "original_file_path": "models/contracts/tokens/contracts_sdai_events.sql", "unique_id": "model.gnosis_dbt.contracts_sdai_events", "fqn": ["gnosis_dbt", "contracts", "tokens", "contracts_sdai_events"], "alias": "contracts_sdai_events", "checksum": {"name": "sha256", "checksum": "7bc8af09d29e30665db330ac54a8ee9cc4308d7ce4cd3852b582aafd4215be30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "sdai", "events", "production", "contracts", "sdai", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "sdai", "events"], "description": "This model captures SDAI event data related to contract executions, including timestamps, addresses, transaction details, and event-specific information for analytics and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was recorded, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the event emitted, indicating the type of event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data payload.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address initiating the transaction, in hexadecimal.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "Address receiving the transaction, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_wei": {"name": "amount_wei", "description": "Amount transferred in wei, as a string to prevent overflow.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price_gwei": {"name": "gas_price_gwei", "description": "Gas price in gwei at the time of the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Transaction status, e.g., 'success' or 'failed'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Record creation timestamp in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/tokens/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "contracts", "sdai", "events"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9736912, "relation_name": "`dbt`.`contracts_sdai_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','sdai','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xaf204776c7245bF4147c2612BF6e5972Ee483701',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/tokens/contracts_sdai_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'af204776c7245bf4147c2612bf6e5972ee483701'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_wxdai_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_wxdai_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/tokens/contracts_wxdai_calls.sql", "original_file_path": "models/contracts/tokens/contracts_wxdai_calls.sql", "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "fqn": ["gnosis_dbt", "contracts", "tokens", "contracts_wxdai_calls"], "alias": "contracts_wxdai_calls", "checksum": {"name": "sha256", "checksum": "7e9421d277bed6f208e825ed5fa91db677cd2b67fb2416a16c564a9a41f75cc3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "wxdai", "calls", "production", "contracts", "wxdai", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "wxdai", "calls"], "description": "This model captures details of wxDai call transactions, including transaction hashes, block timestamps, contract addresses, and call data. It is used for analyzing call patterns and transaction activity related to wxDai contracts.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique identifier of the transaction, represented as a hash string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the transaction was included, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the wxDai contract involved in the call, as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded data of the call, in JSON format.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, indicating call order.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address initiating the call, as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Amount transferred in wei during the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction, in units.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price in wei, as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Transaction status indicator; e.g., success or failure.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/tokens/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "wxdai", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9803102, "relation_name": "`dbt`.`contracts_wxdai_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','wxdai','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/tokens/contracts_wxdai_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_ConditionalTokens_events": {"database": "dbt", "schema": "dbt", "name": "contracts_ConditionalTokens_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/ConditionalTokens/contracts_ConditionalTokens_events.sql", "original_file_path": "models/contracts/ConditionalTokens/contracts_ConditionalTokens_events.sql", "unique_id": "model.gnosis_dbt.contracts_ConditionalTokens_events", "fqn": ["gnosis_dbt", "contracts", "ConditionalTokens", "contracts_ConditionalTokens_events"], "alias": "contracts_ConditionalTokens_events", "checksum": {"name": "sha256", "checksum": "bb147bb751180c4c642620acf20937c8b87b45719655554ede5ea934f0695eac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "conditionaltokens", "events", "production", "contracts", "conditionaltokens", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "conditionaltokens", "events"], "description": "Events related to Conditional Tokens, including transaction details and timestamps.", "columns": {"event_id": {"name": "event_id", "description": "Unique identifier for each event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was recorded.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_id": {"name": "condition_id", "description": "Identifier for the specific condition involved.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "outcome_index": {"name": "outcome_index", "description": "Index of the outcome related to the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender": {"name": "sender", "description": "Address of the sender initiating the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient": {"name": "recipient", "description": "Address of the recipient involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/ConditionalTokens/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "conditionaltokens", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.9979599, "relation_name": "`dbt`.`contracts_ConditionalTokens_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','conditionaltokens','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xceafdd6bc0bef976fdcd1112955828e00543c0ce',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2020-09-01'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/ConditionalTokens/contracts_ConditionalTokens_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'ceafdd6bc0bef976fdcd1112955828e00543c0ce'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2020-09-01'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_ConditionalTokens_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'ceafdd6bc0bef976fdcd1112955828e00543c0ce'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_ConditionalTokens_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_ConditionalTokens_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/ConditionalTokens/contracts_ConditionalTokens_calls.sql", "original_file_path": "models/contracts/ConditionalTokens/contracts_ConditionalTokens_calls.sql", "unique_id": "model.gnosis_dbt.contracts_ConditionalTokens_calls", "fqn": ["gnosis_dbt", "contracts", "ConditionalTokens", "contracts_ConditionalTokens_calls"], "alias": "contracts_ConditionalTokens_calls", "checksum": {"name": "sha256", "checksum": "fa0aef8956996b73d8d8ed79edf0dc7004c5e9dfefc7495bbdabb1f8eda7eeac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "conditionaltokens", "calls", "production", "contracts", "conditionaltokens", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "conditionaltokens", "calls"], "description": "This model captures conditional token call data, including transaction details, block timestamps, and contract-specific information relevant for analysis.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique identifier for the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block containing the transaction", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the transaction", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the conditional token contract", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address initiating the call", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if output is in JSON format (boolean)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_data": {"name": "output_data", "description": "Output data from the call, in JSON format", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction (wei)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price at the time of transaction (wei)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Transaction status (e.g., success, failure)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_message": {"name": "error_message", "description": "Error message if transaction failed", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Record creation timestamp", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/ConditionalTokens/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "conditionaltokens", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535477.991601, "relation_name": "`dbt`.`contracts_ConditionalTokens_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','conditionaltokens','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0xceafdd6bc0bef976fdcd1112955828e00543c0ce',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2020-09-01'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/ConditionalTokens/contracts_ConditionalTokens_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'ceafdd6bc0bef976fdcd1112955828e00543c0ce'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2020-09-01'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_ConditionalTokens_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'ceafdd6bc0bef976fdcd1112955828e00543c0ce'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bMSTR_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bMSTR_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bMSTR_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bMSTR_Oracle_events"], "alias": "contracts_backedfi_bMSTR_Oracle_events", "checksum": {"name": "sha256", "checksum": "5578fe2e853aa357ebf49b0cd70a5b6a2e483de80743cd058c9a1d63c4cc55ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle events related to BackedFi's bMSTR token, including transaction details, block info, and event-specific data for analysis.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash of the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the Oracle event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "oracle_id": {"name": "oracle_id", "description": "Identifier for the Oracle involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "data": {"name": "data", "description": "Event-specific data payload, formatted as JSON.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender": {"name": "sender", "description": "Address of the sender initiating the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient": {"name": "recipient", "description": "Address of the recipient involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the database.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0410151, "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xC8429803DCdA7DF86822aB173ea285C10BF1EB66',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bMSTR_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bIB01_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bIB01_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bIB01_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bIB01_Oracle_events"], "alias": "contracts_backedfi_bIB01_Oracle_events", "checksum": {"name": "sha256", "checksum": "f77de2bf46de89210ef3a1c00429fb3730017b69e6b88bf2dd2be20c1065d84b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle event logs related to BackedFi, including transaction details, block information, and event-specific data for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was recorded", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order logs", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the Oracle event emitted", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the transaction sender", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receiver_address": {"name": "receiver_address", "description": "Address of the transaction receiver, if applicable", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_wei": {"name": "amount_wei", "description": "Amount transferred in wei, may overflow 64-bit, stored as String", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_id": {"name": "token_id", "description": "Identifier of the token involved, if applicable", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction, in wei", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status of the transaction (e.g., success, failure)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Alias for block_timestamp for convenience", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0299199, "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x788d911ae7c95121a89a0f0306db65d87422e1de',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bIB01_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '788d911ae7c95121a89a0f0306db65d87422e1de'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bCSPX_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bCSPX_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bCSPX_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bCSPX_Oracle_events"], "alias": "contracts_backedfi_bCSPX_Oracle_events", "checksum": {"name": "sha256", "checksum": "4fb147398d15f374ce16d7aaf49ecb756264fd63d9c2e671d8a183cdb58de8ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle events related to backedfi's bCSPX contract, including timestamped logs and transaction details.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was logged", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the emitted event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address initiating the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Amount of gas used in the transaction (wei)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status of the transaction (e.g., success or failure)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the database", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0195832, "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x1332D2b4dc83238B621b7F7D0F72fEc58Bb81A9b',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bCSPX_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bHIGH_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bHIGH_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bHIGH_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bHIGH_Oracle_events"], "alias": "contracts_backedfi_bHIGH_Oracle_events", "checksum": {"name": "sha256", "checksum": "dd12de2ded316cf39c2099f63e07a76d971724ad9abcd845b0da504d45677689"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle events related to the backedfi protocol, including transaction details, block information, and event-specific data.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block (order of logs)", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction associated with the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the Oracle event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON containing event-specific data", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address initiating the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_in_wei": {"name": "amount_in_wei", "description": "Amount associated with the event in wei", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status of the event (e.g., success, failed)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price in wei", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Alias for block_timestamp for convenience", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_data": {"name": "log_data", "description": "Raw log data in JSON format", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.024753, "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x9e8e794ad6ecdb6d5c7eabe059d30e907f58859b',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bHIGH_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bCOIN_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bCOIN_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bCOIN_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bCOIN_Oracle_events"], "alias": "contracts_backedfi_bCOIN_Oracle_events", "checksum": {"name": "sha256", "checksum": "a937a838ec9e3b9565dcd5f3459f0491f82106ceb77c0eb156940fa903cfaecd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle event logs related to backedfi bCOIN, including transaction details, block information, and event-specific data for analytics and reporting purposes.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block containing the event, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the Oracle event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_wei": {"name": "amount_wei", "description": "Amount involved in the event, denominated in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status of the event, e.g., 'success' or 'failure'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the system.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0149822, "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x69B2D456e8830847f488afDde2a636BFB26218c6',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bCOIN_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '69b2d456e8830847f488afdde2a636bfb26218c6'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bIBTA_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bIBTA_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bIBTA_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bIBTA_Oracle_events"], "alias": "contracts_backedfi_bIBTA_Oracle_events", "checksum": {"name": "sha256", "checksum": "87fbac131048e8f0e95dfc38a59984113fe6022a6a1eb21f64390a862de0fb7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle event logs related to BackedFi, including transaction details, block information, and event-specific data for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was recorded", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order logs", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the Oracle event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "oracle_id": {"name": "oracle_id", "description": "Identifier for the Oracle instance", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "data": {"name": "data", "description": "Event-specific data payload in JSON format", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender": {"name": "sender", "description": "Address of the sender initiating the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price in wei at the time of transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Transaction status (e.g., success, failure)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the database", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0349593, "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x9f9953d8a2c5366f098754d48f2d69b144ce03da',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bIBTA_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bC3M_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bC3M_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bC3M_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bC3M_Oracle_events"], "alias": "contracts_backedfi_bC3M_Oracle_events", "checksum": {"name": "sha256", "checksum": "71ccc75f62332a50c6dea609a292a7377e14b9b74ea38fc81d8cdbacee0f2903"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle event logs related to BackedFi, including transaction details, block information, and event-specific data for analysis and reporting purposes.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was logged, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order logs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the event emitted.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data payload.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "Address of the recipient involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount transferred or involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_symbol": {"name": "token_symbol", "description": "Symbol of the token involved.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the database.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.009024, "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x83Ec02059F686E747392A22ddfED7833bA0d7cE3',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bC3M_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_bNVDA_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_bNVDA_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_bNVDA_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_bNVDA_Oracle_events"], "alias": "contracts_backedfi_bNVDA_Oracle_events", "checksum": {"name": "sha256", "checksum": "73c24219451e8a3dfe15517428d657aabdf796d4c39746606a72c1bb4ba1a3d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle events related to backedfi's bNVDA contract, including timestamped logs and transaction details.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block, used to order logs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "The hash of the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the Oracle contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "The type of Oracle event (e.g., 'Update', 'Response').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "The JSON payload containing event-specific data.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_data": {"name": "log_data", "description": "Raw log data in hexadecimal format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the transaction or event (e.g., 'success', 'failed').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_time": {"name": "block_time", "description": "The timestamp of the block in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0460336, "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x1D3be4d05Eba2aA6c4eEdE85a74f491C31766E64',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_bNVDA_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events": {"database": "dbt", "schema": "dbt", "name": "contracts_backedfi_TSLAx_Oracle_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/backedfi/contracts_backedfi_TSLAx_Oracle_events.sql", "original_file_path": "models/contracts/backedfi/contracts_backedfi_TSLAx_Oracle_events.sql", "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "fqn": ["gnosis_dbt", "contracts", "backedfi", "contracts_backedfi_TSLAx_Oracle_events"], "alias": "contracts_backedfi_TSLAx_Oracle_events", "checksum": {"name": "sha256", "checksum": "d43e3b0fe9d12ac258358cca49aa7085091e5f741121d210d90024e53284d87b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "backedfi", "events", "production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "backedfi", "events"], "description": "This model captures Oracle events related to TSLA on the BackedFi platform, including transaction details, timestamps, and related metadata.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block, used to order logs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "The type of Oracle event (e.g., 'PriceUpdate', 'Settlement').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_value": {"name": "event_value", "description": "The value associated with the event, such as price or amount.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "The timestamp when the event was emitted, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "The index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receiver_address": {"name": "receiver_address", "description": "Address of the receiver, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price paid for the transaction, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Amount of gas used by the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Status of the transaction ('success', 'failed', etc.).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/backedfi/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "backedfi", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0039809, "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','backedfi','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x19972d1750F959dD14Cf436Da6360185BD54Cea0',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/backedfi/contracts_backedfi_TSLAx_Oracle_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '19972d1750f959dd14cf436da6360185bd54cea0'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Realitio_v2_1_events": {"database": "dbt", "schema": "dbt", "name": "contracts_Realitio_v2_1_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Realitio_v2_1/contracts_Realitio_v2_1_events.sql", "original_file_path": "models/contracts/Realitio_v2_1/contracts_Realitio_v2_1_events.sql", "unique_id": "model.gnosis_dbt.contracts_Realitio_v2_1_events", "fqn": ["gnosis_dbt", "contracts", "Realitio_v2_1", "contracts_Realitio_v2_1_events"], "alias": "contracts_Realitio_v2_1_events", "checksum": {"name": "sha256", "checksum": "498cce37de6d27c17fcb3501640bc9e821b0d1ca060b12de71fe7589a447069d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "realitio", "events", "production", "contracts", "realitio", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "realitio", "events"], "description": "This model captures Realitio V2.1 event logs related to contract interactions, including block details, transaction hashes, event types, and associated metadata.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "The hash of the transaction that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "The type of the event emitted (e.g., 'QuestionCreated', 'AnswerSubmitted').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "question_id": {"name": "question_id", "description": "The unique identifier for the question associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "question_content": {"name": "question_content", "description": "The content or description of the question.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "answer": {"name": "answer", "description": "The answer submitted in the event, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "answerer": {"name": "answerer", "description": "The address of the account that submitted the answer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "question_creator": {"name": "question_creator", "description": "The address of the account that created the question.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "question_created_at": {"name": "question_created_at", "description": "The timestamp when the question was created.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "answer_submitted_at": {"name": "answer_submitted_at", "description": "The timestamp when the answer was submitted.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_metadata": {"name": "event_metadata", "description": "Additional metadata related to the event in JSON format.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Realitio_v2_1/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "realitio", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.060533, "relation_name": "`dbt`.`contracts_Realitio_v2_1_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','realitio','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x79e32ae03fb27b07c89c0c568f80287c01ca2e57',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2021-01-13'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Realitio_v2_1/contracts_Realitio_v2_1_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '79e32ae03fb27b07c89c0c568f80287c01ca2e57'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2021-01-13'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_Realitio_v2_1_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '79e32ae03fb27b07c89c0c568f80287c01ca2e57'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Realitio_v2_1_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_Realitio_v2_1_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Realitio_v2_1/contracts_Realitio_v2_1_calls.sql", "original_file_path": "models/contracts/Realitio_v2_1/contracts_Realitio_v2_1_calls.sql", "unique_id": "model.gnosis_dbt.contracts_Realitio_v2_1_calls", "fqn": ["gnosis_dbt", "contracts", "Realitio_v2_1", "contracts_Realitio_v2_1_calls"], "alias": "contracts_Realitio_v2_1_calls", "checksum": {"name": "sha256", "checksum": "6e2a406c9d88e17010085d9e47bd0b9daa7ed5609d8993a59575d5cd6ac792d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "realitio", "calls", "production", "contracts", "realitio", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "realitio", "calls"], "description": "This model captures call data related to Realitio v2.1 contracts, including transaction details, block information, and call-specific metadata for analysis and reporting.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp when the block was mined.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_id": {"name": "call_id", "description": "Unique identifier for each call record.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller": {"name": "caller", "description": "Address initiating the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract being called.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "function_signature": {"name": "function_signature", "description": "Signature of the called function.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "response_data": {"name": "response_data", "description": "Response data returned from the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_status": {"name": "call_status", "description": "Status of the call (e.g., success, failure).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the call in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_timestamp": {"name": "call_timestamp", "description": "Timestamp when the call was made.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if output is in JSON format.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_data": {"name": "output_data", "description": "Output data from the call, in JSON or raw format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Realitio_v2_1/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "realitio", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0532343, "relation_name": "`dbt`.`contracts_Realitio_v2_1_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','realitio','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x79e32ae03fb27b07c89c0c568f80287c01ca2e57',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2021-01-13'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Realitio_v2_1/contracts_Realitio_v2_1_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '79e32ae03fb27b07c89c0c568f80287c01ca2e57'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2021-01-13'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_Realitio_v2_1_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '79e32ae03fb27b07c89c0c568f80287c01ca2e57'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_GBCDeposit_events": {"database": "dbt", "schema": "dbt", "name": "contracts_GBCDeposit_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/GBCDeposit/contracts_GBCDeposit_events.sql", "original_file_path": "models/contracts/GBCDeposit/contracts_GBCDeposit_events.sql", "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "fqn": ["gnosis_dbt", "contracts", "GBCDeposit", "contracts_GBCDeposit_events"], "alias": "contracts_GBCDeposit_events", "checksum": {"name": "sha256", "checksum": "7f55a7f5fe933165ab8829102f4f1c9835c5fc8540087a9e32402348acd6b5bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "gbcdeposit", "events", "production", "contracts", "gbcdeposit", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "gbcdeposit", "events"], "description": "Business-facing event data for GBCDeposit contracts, including timestamps, transaction details, and event-specific data.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Log index within the block (sequence number)", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the GBCDeposit contract", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted (e.g., Deposit, Withdrawal)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "depositor": {"name": "depositor", "description": "Address of the depositor involved in the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_wei": {"name": "amount_wei", "description": "Amount involved in the event, in wei", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier for the deposit", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "Timestamp when the event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/GBCDeposit/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "gbcdeposit", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.072608, "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','gbcdeposit','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x0B98057eA310F4d31F2a452B414647007d1645d9',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/GBCDeposit/contracts_GBCDeposit_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '0b98057ea310f4d31f2a452b414647007d1645d9'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_GBCDeposit_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_GBCDeposit_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/GBCDeposit/contracts_GBCDeposit_calls.sql", "original_file_path": "models/contracts/GBCDeposit/contracts_GBCDeposit_calls.sql", "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "fqn": ["gnosis_dbt", "contracts", "GBCDeposit", "contracts_GBCDeposit_calls"], "alias": "contracts_GBCDeposit_calls", "checksum": {"name": "sha256", "checksum": "bf32b5b90b14dd4029f0e2d2090b53cd5500004e96aa40a819c515918c722285"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "gbcdeposit", "calls", "production", "contracts", "gbcdeposit", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "gbcdeposit", "calls"], "description": "A model representing GBC deposit call data, including transaction details, contract interactions, and timestamps for blockchain deposit activities.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract involved in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if the output is in JSON format; boolean flag.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tx_table": {"name": "tx_table", "description": "Reference to the transactions source table.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "incremental_column": {"name": "incremental_column", "description": "Column used for incremental processing, typically block timestamp.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_by": {"name": "order_by", "description": "Ordering criteria for the data, based on block timestamp and transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "partition_by": {"name": "partition_by", "description": "Partitioning strategy based on the start of the month of the block timestamp.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/GBCDeposit/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "gbcdeposit", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0660431, "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','gbcdeposit','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x0B98057eA310F4d31F2a452B414647007d1645d9',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/GBCDeposit/contracts_GBCDeposit_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_AgentResultMapping_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_AgentResultMapping_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/AgentResultMapping/contracts_AgentResultMapping_calls.sql", "original_file_path": "models/contracts/AgentResultMapping/contracts_AgentResultMapping_calls.sql", "unique_id": "model.gnosis_dbt.contracts_AgentResultMapping_calls", "fqn": ["gnosis_dbt", "contracts", "AgentResultMapping", "contracts_AgentResultMapping_calls"], "alias": "contracts_AgentResultMapping_calls", "checksum": {"name": "sha256", "checksum": "930823e6ee13441511db9e11da676952d727de134985997b3546a7aa927d9394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "agentresultmapping", "calls", "production", "contracts", "agentresultmapping", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "agentresultmapping", "calls"], "description": "This model processes call data related to agent result mappings, capturing transaction details, contract addresses, timestamps, and output JSON data for analysis.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique identifier for each transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Block number in which the transaction was included.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp when the block was mined.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract involved in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address of the caller initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json": {"name": "output_json", "description": "JSON output of the call result.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_timestamp": {"name": "call_timestamp", "description": "Timestamp when the call was executed.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicator if output JSON is of a specific type.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "incremental_column": {"name": "incremental_column", "description": "Column used for incremental processing, typically block timestamp.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_blocktime": {"name": "start_blocktime", "description": "Starting block timestamp for data processing.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/AgentResultMapping/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "agentresultmapping", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0779986, "relation_name": "`dbt`.`contracts_AgentResultMapping_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','agentresultmapping','calls']\n    )\n}}\n\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x99c43743a2dbd406160cc43cf08113b17178789c',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2025-06-30'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/AgentResultMapping/contracts_AgentResultMapping_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '99c43743a2dbd406160cc43cf08113b17178789c'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2025-06-30'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_AgentResultMapping_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '99c43743a2dbd406160cc43cf08113b17178789c'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_AgentResultMapping_events": {"database": "dbt", "schema": "dbt", "name": "contracts_AgentResultMapping_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/AgentResultMapping/contracts_AgentResultMapping_events.sql", "original_file_path": "models/contracts/AgentResultMapping/contracts_AgentResultMapping_events.sql", "unique_id": "model.gnosis_dbt.contracts_AgentResultMapping_events", "fqn": ["gnosis_dbt", "contracts", "AgentResultMapping", "contracts_AgentResultMapping_events"], "alias": "contracts_AgentResultMapping_events", "checksum": {"name": "sha256", "checksum": "5062654fe265250182e5e7014e5e5e6a08a8e5abf82d5762924e95c7edeec63e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "agentresultmapping", "events", "production", "contracts", "agentresultmapping", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "agentresultmapping", "events"], "description": "This model processes agent result mapping events, capturing details about contract interactions, timestamps, and related identifiers for analysis of agent performance and event occurrences.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block in UTC when the event was recorded.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_result_mapping_id": {"name": "agent_result_mapping_id", "description": "Unique identifier for the agent result mapping event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_id": {"name": "agent_id", "description": "Identifier of the agent associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_code": {"name": "result_code", "description": "Numeric code representing the result status.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_description": {"name": "result_description", "description": "Textual description of the result.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "Timestamp of when the event occurred, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that triggered the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing additional event details.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/AgentResultMapping/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "agentresultmapping", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.083367, "relation_name": "`dbt`.`contracts_AgentResultMapping_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','agentresultmapping','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x99c43743a2dbd406160cc43cf08113b17178789c',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2025-06-10'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/AgentResultMapping/contracts_AgentResultMapping_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '99c43743a2dbd406160cc43cf08113b17178789c'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2025-06-10'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_AgentResultMapping_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '99c43743a2dbd406160cc43cf08113b17178789c'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_Swapr_v3_AlgebraFactory_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_calls.sql", "original_file_path": "models/contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_calls.sql", "unique_id": "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls", "fqn": ["gnosis_dbt", "contracts", "Swapr", "contracts_Swapr_v3_AlgebraFactory_calls"], "alias": "contracts_Swapr_v3_AlgebraFactory_calls", "checksum": {"name": "sha256", "checksum": "7533f73bdd8c3adf8ab6b87cbb0a0d5a04c9ed4b6fa174e3fb87b629555cbfc0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "swapr", "calls", "production", "contracts", "swapr", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "swapr", "calls"], "description": "This model captures swapr algebra factory call events, including transaction details, contract addresses, and call-specific data for analysis and reporting.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique identifier of the transaction; used as primary key.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The block number in which the transaction was included.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp when the block was mined; in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract involved in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address initiating the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if the output is in JSON format; boolean.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_type": {"name": "output_type", "description": "Type of output returned by the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_value": {"name": "output_value", "description": "Result of the call, in JSON or string format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Swapr/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "swapr", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0889702, "relation_name": "`dbt`.`contracts_Swapr_v3_AlgebraFactory_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','swapr','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0xa0864cca6e114013ab0e27cbd5b6f4c8947da766',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-09-22'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'a0864cca6e114013ab0e27cbd5b6f4c8947da766'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-09-22'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_Swapr_v3_AlgebraFactory_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a0864cca6e114013ab0e27cbd5b6f4c8947da766'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_Swapr_v3_AlgebraPool_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Swapr/contracts_Swapr_v3_AlgebraPool_calls.sql", "original_file_path": "models/contracts/Swapr/contracts_Swapr_v3_AlgebraPool_calls.sql", "unique_id": "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls", "fqn": ["gnosis_dbt", "contracts", "Swapr", "contracts_Swapr_v3_AlgebraPool_calls"], "alias": "contracts_Swapr_v3_AlgebraPool_calls", "checksum": {"name": "sha256", "checksum": "2a1b040a411d3f9740c93a0e1d9fca9efbc94572d5b3de028bb260c7c75d49a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "swapr", "calls", "production", "contracts", "swapr", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "swapr", "calls"], "description": "This model captures call data related to Swapr v3 Algebra Pools, including transaction details, block info, and call specifics for analysis.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the call, indicating its position in the blockchain.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the transaction, indicating call order.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address initiating the call, in hexadecimal format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract being called, in hexadecimal format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload, in hexadecimal.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_type": {"name": "call_type", "description": "Type of call made, e.g., 'swap', 'addLiquidity'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Amount of gas used for the call, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Call execution status, e.g., 'success' or 'failure'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_start_time": {"name": "block_start_time", "description": "Start time of the block, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_end_time": {"name": "block_end_time", "description": "End time of the block, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Swapr/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "swapr", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.10056, "relation_name": "`dbt`.`contracts_Swapr_v3_AlgebraPool_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','swapr','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x2de7439f52d059e6cadbbeb4527683a94331cf65',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-11-30'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Swapr/contracts_Swapr_v3_AlgebraPool_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '2de7439f52d059e6cadbbeb4527683a94331cf65'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-11-30'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_Swapr_v3_AlgebraPool_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '2de7439f52d059e6cadbbeb4527683a94331cf65'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events": {"database": "dbt", "schema": "dbt", "name": "contracts_Swapr_v3_AlgebraPool_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Swapr/contracts_Swapr_v3_AlgebraPool_events.sql", "original_file_path": "models/contracts/Swapr/contracts_Swapr_v3_AlgebraPool_events.sql", "unique_id": "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events", "fqn": ["gnosis_dbt", "contracts", "Swapr", "contracts_Swapr_v3_AlgebraPool_events"], "alias": "contracts_Swapr_v3_AlgebraPool_events", "checksum": {"name": "sha256", "checksum": "9cff95cdedb4f8f78556163ff0d8b21ed9a228d050a9acd87bea9e237b7e0aac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "swapr", "events", "production", "contracts", "swapr", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "swapr", "events"], "description": "This model captures Swapr v3 Algebra Pool events, including transaction details, pool states, and event-specific data for analysis and reporting.", "columns": {"block_number": {"name": "block_number", "description": "Ethereum block number in which the event was included.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block containing the event, in UTC.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the event log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool_address": {"name": "pool_address", "description": "Address of the Algebra Pool contract involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted, e.g., 'Swap', 'Mint', 'Burn'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount0": {"name": "amount0", "description": "Amount of token0 involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount1": {"name": "amount1", "description": "Amount of token1 involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sqrt_price_x96": {"name": "sqrt_price_x96", "description": "Square root price at the time of the event, scaled by 2^96.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "liquidity": {"name": "liquidity", "description": "Total liquidity in the pool at the time of the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender": {"name": "sender", "description": "Address initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient": {"name": "recipient", "description": "Address receiving tokens or involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount0_scaled": {"name": "amount0_scaled", "description": "Scaled amount of token0 (e.g., in decimal form).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount1_scaled": {"name": "amount1_scaled", "description": "Scaled amount of token1 (e.g., in decimal form).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Swapr/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "swapr", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1077366, "relation_name": "`dbt`.`contracts_Swapr_v3_AlgebraPool_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','swapr','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x2de7439f52d059e6cadbbeb4527683a94331cf65',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-11-30'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Swapr/contracts_Swapr_v3_AlgebraPool_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '2de7439f52d059e6cadbbeb4527683a94331cf65'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-11-30'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_Swapr_v3_AlgebraPool_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '2de7439f52d059e6cadbbeb4527683a94331cf65'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events": {"database": "dbt", "schema": "dbt", "name": "contracts_Swapr_v3_AlgebraFactory_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_events.sql", "original_file_path": "models/contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_events.sql", "unique_id": "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events", "fqn": ["gnosis_dbt", "contracts", "Swapr", "contracts_Swapr_v3_AlgebraFactory_events"], "alias": "contracts_Swapr_v3_AlgebraFactory_events", "checksum": {"name": "sha256", "checksum": "4c6841d64cc3ad069b35a7e495b84d440b8ba908cae0b93c26e979467732ba24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "swapr", "events", "production", "contracts", "swapr", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "swapr", "events"], "description": "Events emitted by the Swapr v3 AlgebraFactory contract, including transaction details, block information, and event-specific data.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the emitted event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "args": {"name": "args", "description": "JSON object containing event-specific arguments.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Swapr/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "swapr", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.0936658, "relation_name": "`dbt`.`contracts_Swapr_v3_AlgebraFactory_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','swapr','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xa0864cca6e114013ab0e27cbd5b6f4c8947da766',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-09-22'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Swapr/contracts_Swapr_v3_AlgebraFactory_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'a0864cca6e114013ab0e27cbd5b6f4c8947da766'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-09-22'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_Swapr_v3_AlgebraFactory_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a0864cca6e114013ab0e27cbd5b6f4c8947da766'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events": {"database": "dbt", "schema": "dbt", "name": "contracts_aaveV3_PoolInstance_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/aave/contracts_aaveV3_PoolInstance_events.sql", "original_file_path": "models/contracts/aave/contracts_aaveV3_PoolInstance_events.sql", "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "fqn": ["gnosis_dbt", "contracts", "aave", "contracts_aaveV3_PoolInstance_events"], "alias": "contracts_aaveV3_PoolInstance_events", "checksum": {"name": "sha256", "checksum": "090fb130a41ffd1566e529c8c6cbe2504afbce8bdb2c8d97d3cb50a8bd4e2a9f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "aave", "v3", "contracts", "events", "production", "aave", "v3", "contracts", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "aave", "v3", "contracts", "events"], "description": "This model captures event logs related to Aave V3 pool instances, including transaction details, block information, and event-specific data for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "The hash identifying the transaction, unique per transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block, used to order logs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool_address": {"name": "pool_address", "description": "The address of the Aave V3 pool contract involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "The name of the event emitted, e.g., 'Deposit', 'Withdraw'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserve_asset": {"name": "reserve_asset", "description": "The asset involved in the event, represented as an address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount involved in the event, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_address": {"name": "user_address", "description": "The address of the user involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "Raw JSON data of the event for detailed analysis.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/aave/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "aave", "v3", "contracts", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1136985, "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','aave','v3','contracts','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xb50201558B00496A145fE76f7424749556E326D8',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-10-04'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/aave/contracts_aaveV3_PoolInstance_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'b50201558b00496a145fe76f7424749556e326d8'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-10-04'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events": {"database": "dbt", "schema": "dbt", "name": "contracts_aaveV3_PoolConfigurator_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/aave/contracts_aaveV3_PoolConfigurator_events.sql", "original_file_path": "models/contracts/aave/contracts_aaveV3_PoolConfigurator_events.sql", "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "fqn": ["gnosis_dbt", "contracts", "aave", "contracts_aaveV3_PoolConfigurator_events"], "alias": "contracts_aaveV3_PoolConfigurator_events", "checksum": {"name": "sha256", "checksum": "359542237ed350a6797e51e04bb3d0d081528a870554981cfe2a0d8bfad6968c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "aave", "v3", "contracts", "events", "production", "aave", "v3", "contracts", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "aave", "v3", "contracts", "events"], "description": "Events emitted by the Aave V3 PoolConfigurator contract, capturing configuration changes and related activities.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Log index within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the event emitted by the contract.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pool_address": {"name": "pool_address", "description": "Address of the pool associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "new_config_value": {"name": "new_config_value", "description": "New configuration value set by the event, in wei or relevant units.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "old_config_value": {"name": "old_config_value", "description": "Previous configuration value before the event, in wei or relevant units.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/aave/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "aave", "v3", "contracts", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.118801, "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','aave','v3','contracts','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x7304979ec9E4EaA0273b6A037a31c4e9e5A75D16',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2023-10-04'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/aave/contracts_aaveV3_PoolConfigurator_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-10-04'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_circles_v2_Hub_events": {"database": "dbt", "schema": "dbt", "name": "contracts_circles_v2_Hub_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Circles/contracts_circles_v2_Hub_events.sql", "original_file_path": "models/contracts/Circles/contracts_circles_v2_Hub_events.sql", "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "fqn": ["gnosis_dbt", "contracts", "Circles", "contracts_circles_v2_Hub_events"], "alias": "contracts_circles_v2_Hub_events", "checksum": {"name": "sha256", "checksum": "75dfc0a2f500725fe22106d8e468731291e5409fb9f2519d3b085ec8ac1ffccd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "circles", "events", "production", "contracts", "circles", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "circles", "events"], "description": "This model captures event data related to contract circles, including timestamps, identifiers, and event-specific details for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was recorded", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction associated with the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "circle_id": {"name": "circle_id", "description": "Unique identifier for the circle", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON containing event-specific data", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the system", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Circles/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "circles", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1295707, "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','circles','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xc12C1E50ABB450d6205Ea2C3Fa861b3B834d13e8',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Circles/contracts_circles_v2_Hub_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events": {"database": "dbt", "schema": "dbt", "name": "contracts_circles_v2_NameRegistry_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Circles/contracts_circles_v2_NameRegistry_events.sql", "original_file_path": "models/contracts/Circles/contracts_circles_v2_NameRegistry_events.sql", "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "fqn": ["gnosis_dbt", "contracts", "Circles", "contracts_circles_v2_NameRegistry_events"], "alias": "contracts_circles_v2_NameRegistry_events", "checksum": {"name": "sha256", "checksum": "552ef44e807515f2c9f8ef6069a9ec5bbbf0f7e14bb300d6a6d4c4f2cb371ccf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "circles", "events", "production", "contracts", "circles", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "circles", "events"], "description": "Events emitted by the NameRegistry contract, including details such as transaction hash, block number, and event-specific data.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp when the block was mined.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the emitted event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner": {"name": "owner", "description": "Address of the owner involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "registration_time": {"name": "registration_time", "description": "Time when the registration occurred.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Circles/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "contracts", "circles", "events"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1346915, "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','circles','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xA27566fD89162cC3D40Cb59c87AAaA49B85F3474',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Circles/contracts_circles_v2_NameRegistry_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_circles_v1_Hub_events": {"database": "dbt", "schema": "dbt", "name": "contracts_circles_v1_Hub_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Circles/contracts_circles_v1_Hub_events.sql", "original_file_path": "models/contracts/Circles/contracts_circles_v1_Hub_events.sql", "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "fqn": ["gnosis_dbt", "contracts", "Circles", "contracts_circles_v1_Hub_events"], "alias": "contracts_circles_v1_Hub_events", "checksum": {"name": "sha256", "checksum": "7ac10c6923eedcbe3210e5bcdf55883ea4ae301bc3f93651860475bc1198510b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "circles", "events", "production", "contracts", "circles", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "circles", "events"], "description": "This model captures event data related to contracts circles, including timestamps, identifiers, and related metadata for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block, used to order logs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "The hash of the transaction that generated the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "The name of the event emitted.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "The JSON payload of the event data.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "The address of the sender involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "The address of the recipient involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The amount transferred in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "The timestamp when the event was emitted, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Circles/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "circles", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1235535, "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','circles','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x29b9a7fbb8995b2423a71cc17cf9810798f6c543',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Circles/contracts_circles_v1_Hub_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n  \n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events": {"database": "dbt", "schema": "dbt", "name": "contracts_circles_v2_CirclesBackingFactory_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/Circles/contracts_circles_v2_CirclesBackingFactory_events.sql", "original_file_path": "models/contracts/Circles/contracts_circles_v2_CirclesBackingFactory_events.sql", "unique_id": "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events", "fqn": ["gnosis_dbt", "contracts", "Circles", "contracts_circles_v2_CirclesBackingFactory_events"], "alias": "contracts_circles_v2_CirclesBackingFactory_events", "checksum": {"name": "sha256", "checksum": "60f38c6439ed02be10a39e275600ce1452df1e9360544c3f13ac29fbbe000385"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "circles", "events", "production", "contracts", "circles", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "circles", "events"], "description": "Events emitted by the CirclesBackingFactory contract, including transaction details, block info, and event-specific data.", "columns": {"transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Block number in which the event was included.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block containing the event.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block, used to order events.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted, e.g., 'BackingAdded', 'BackingRemoved'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "backing_id": {"name": "backing_id", "description": "Identifier for the backing entity involved in the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_wei": {"name": "amount_wei", "description": "Amount associated with the event, in wei.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender who triggered the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "Address of the recipient involved in the event, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "Raw JSON data of the event, if available.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/Circles/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "contracts", "circles", "events"], "materialized": "incremental", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1395855, "relation_name": "`dbt`.`contracts_circles_v2_CirclesBackingFactory_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','circles','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xecEd91232C609A42F6016860E8223B8aEcaA7bd0',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2025-04-25'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/Circles/contracts_circles_v2_CirclesBackingFactory_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'eced91232c609a42f6016860e8223b8aecaa7bd0'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2025-04-25'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_CirclesBackingFactory_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'eced91232c609a42f6016860e8223b8aecaa7bd0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events": {"database": "dbt", "schema": "dbt", "name": "contracts_Seer_Wrapped1155Factory_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/SeerPM/contracts_Seer_Wrapped1155Factory_events.sql", "original_file_path": "models/contracts/SeerPM/contracts_Seer_Wrapped1155Factory_events.sql", "unique_id": "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events", "fqn": ["gnosis_dbt", "contracts", "SeerPM", "contracts_Seer_Wrapped1155Factory_events"], "alias": "contracts_Seer_Wrapped1155Factory_events", "checksum": {"name": "sha256", "checksum": "21c517a040a0217521544d56580a1021e1fd60eb0e7fe6c04f4464a91c5d9c5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "events", "production", "contracts", "seerpm", "wrapped1155factory", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "events"], "description": "Event logs emitted by the Wrapped1155Factory contract, capturing transaction details, event specifics, and block information.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "Name of the emitted event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "JSON object containing event-specific data.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the Wrapped1155Factory contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the record was created in the data warehouse.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/SeerPM/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1615257, "relation_name": "`dbt`.`contracts_Seer_Wrapped1155Factory_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','seerpm','wrapped1155factory','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0xd194319d1804c1051dd21ba1dc931ca72410b79f',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-02-07'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/SeerPM/contracts_Seer_Wrapped1155Factory_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = 'd194319d1804c1051dd21ba1dc931ca72410b79f'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-02-07'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_Seer_Wrapped1155Factory_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'd194319d1804c1051dd21ba1dc931ca72410b79f'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_Seer_Wrapped1155Factory_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/SeerPM/contracts_Seer_Wrapped1155Factory_calls.sql", "original_file_path": "models/contracts/SeerPM/contracts_Seer_Wrapped1155Factory_calls.sql", "unique_id": "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls", "fqn": ["gnosis_dbt", "contracts", "SeerPM", "contracts_Seer_Wrapped1155Factory_calls"], "alias": "contracts_Seer_Wrapped1155Factory_calls", "checksum": {"name": "sha256", "checksum": "8fd4ce8fe2652707311f265c45eb657ae2784cb09098a23760c4ce94001e8e2e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "calls", "production", "contracts", "seerpm", "wrapped1155factory", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "calls"], "description": "This model captures call data for the Seer Wrapped1155Factory contract, including transaction details, block information, and call specifics.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the transaction receipt.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller": {"name": "caller", "description": "Address of the caller initiating the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract being interacted with.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "function_name": {"name": "function_name", "description": "Name of the function invoked in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded data payload of the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Amount of wei transferred with the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json": {"name": "output_json", "description": "JSON-formatted output of the call, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/SeerPM/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "seerpm", "wrapped1155factory", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1570158, "relation_name": "`dbt`.`contracts_Seer_Wrapped1155Factory_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','seerpm','wrapped1155factory','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0xd194319d1804c1051dd21ba1dc931ca72410b79f',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-02-07'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/SeerPM/contracts_Seer_Wrapped1155Factory_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'd194319d1804c1051dd21ba1dc931ca72410b79f'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-02-07'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_Seer_Wrapped1155Factory_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'd194319d1804c1051dd21ba1dc931ca72410b79f'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Seer_MarketFactory_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_Seer_MarketFactory_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/SeerPM/contracts_Seer_MarketFactory_calls.sql", "original_file_path": "models/contracts/SeerPM/contracts_Seer_MarketFactory_calls.sql", "unique_id": "model.gnosis_dbt.contracts_Seer_MarketFactory_calls", "fqn": ["gnosis_dbt", "contracts", "SeerPM", "contracts_Seer_MarketFactory_calls"], "alias": "contracts_Seer_MarketFactory_calls", "checksum": {"name": "sha256", "checksum": "e47e72998c5e989504d70deb1ab542db4dfb352232a162a31a9f22913a00dd54"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "seermarketfactory", "calls", "production", "contracts", "seermarketfactory", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "seermarketfactory", "calls"], "description": "This model processes call data from the Seer MarketFactory contract, capturing transaction details, block info, and call specifics for analysis.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block containing the call, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Number of the block containing the call.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "Address of the caller initiating the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the contract being called, fixed as '0x83183da839ce8228e31ae41222ead9edbb5cdcf1'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded call data payload.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if the output is in JSON format; boolean flag.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "incremental_column": {"name": "incremental_column", "description": "Column used for incremental processing, typically 'block_timestamp'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_blocktime": {"name": "start_blocktime", "description": "The starting block timestamp for incremental loads, e.g., '2024-10-08'.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "settings_allow_nullable_key": {"name": "settings_allow_nullable_key", "description": "Setting indicating allowance of nullable keys, typically '1'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_hook": {"name": "pre_hook", "description": "SQL commands executed before model run, e.g., setting JSON type allowance.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/SeerPM/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "seermarketfactory", "calls"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.145363, "relation_name": "`dbt`.`contracts_Seer_MarketFactory_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','seermarketfactory','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x83183da839ce8228e31ae41222ead9edbb5cdcf1',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-10-08'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/SeerPM/contracts_Seer_MarketFactory_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '83183da839ce8228e31ae41222ead9edbb5cdcf1'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-10-08'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_Seer_MarketFactory_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83183da839ce8228e31ae41222ead9edbb5cdcf1'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_Seer_MarketFactory_events": {"database": "dbt", "schema": "dbt", "name": "contracts_Seer_MarketFactory_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/SeerPM/contracts_Seer_MarketFactory_events.sql", "original_file_path": "models/contracts/SeerPM/contracts_Seer_MarketFactory_events.sql", "unique_id": "model.gnosis_dbt.contracts_Seer_MarketFactory_events", "fqn": ["gnosis_dbt", "contracts", "SeerPM", "contracts_Seer_MarketFactory_events"], "alias": "contracts_Seer_MarketFactory_events", "checksum": {"name": "sha256", "checksum": "a080a69eac3fc9313d199f164c66e300feed5c3e8ca44195822de2dccb313c6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "seermarketfactory", "events", "production", "contracts", "seermarketfactory", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "seermarketfactory", "events"], "description": "This model captures event logs related to the Seer MarketFactory, including transaction details, block information, and event-specific data for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "The timestamp of the block when the event was recorded.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the block (order of logs).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "The hash identifying the transaction associated with the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "The number of the block containing the event.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract emitting the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_name": {"name": "event_name", "description": "The name/type of the event emitted.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_data": {"name": "event_data", "description": "The JSON payload containing event-specific data.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "The hash of the block containing the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "The index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "The address initiating the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receiver_address": {"name": "receiver_address", "description": "The address receiving the transaction, if applicable.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "The amount of gas used for the transaction, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "The gas price at the time of the transaction, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The value transferred in the transaction, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_base_fee_per_gas": {"name": "block_base_fee_per_gas", "description": "The base fee per gas in the block, in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Alias for block_timestamp for convenience.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/SeerPM/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "seermarketfactory", "events"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1505928, "relation_name": "`dbt`.`contracts_Seer_MarketFactory_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','seermarketfactory','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x83183da839ce8228e31ae41222ead9edbb5cdcf1',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2024-10-08'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/SeerPM/contracts_Seer_MarketFactory_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '83183da839ce8228e31ae41222ead9edbb5cdcf1'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2024-10-08'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_Seer_MarketFactory_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83183da839ce8228e31ae41222ead9edbb5cdcf1'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events": {"database": "dbt", "schema": "dbt", "name": "contracts_FPMMDeterministicFactory_events", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_events.sql", "original_file_path": "models/contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_events.sql", "unique_id": "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events", "fqn": ["gnosis_dbt", "contracts", "FPMMDeterministicFactory", "contracts_FPMMDeterministicFactory_events"], "alias": "contracts_FPMMDeterministicFactory_events", "checksum": {"name": "sha256", "checksum": "9acd7b51bdc105cc380ccf5832e282c7b53b7bccbfcc8283e41bd39daea19864"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "fpmm", "events", "production", "contracts", "fpmm", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, log_index)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "fpmm", "events"], "description": "This model processes deterministic factory event logs related to FPMM contracts, capturing event details for analysis and reporting.", "columns": {"block_timestamp": {"name": "block_timestamp", "description": "Timestamp of the block when the event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Index of the log within the block", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash of the transaction", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "event_type": {"name": "event_type", "description": "Type of the event emitted", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "factory_address": {"name": "factory_address", "description": "Address of the factory contract emitting the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "token_address": {"name": "token_address", "description": "Address of the token involved in the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount involved in the event, in wei", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sender_address": {"name": "sender_address", "description": "Address of the sender initiating the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "recipient_address": {"name": "recipient_address", "description": "Address of the recipient involved in the event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/FPMMDeterministicFactory/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "fpmm", "events"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, log_index)", "unique_key": "(block_timestamp, log_index)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1716273, "relation_name": "`dbt`.`contracts_FPMMDeterministicFactory_events`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, log_index)',\n        unique_key              = '(block_timestamp, log_index)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','fpmm','events']\n    )\n}}\n\n\n{{ \n    decode_logs(\n        source_table      = source('execution','logs'),\n        contract_address  = '0x9083a2b699c0a4ad06f63580bde2635d26a3eef0',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2020-09-04'\n    )\n}}", "language": "sql", "refs": [{"name": "event_signatures", "package": null, "version": null}], "sources": [["execution", "logs"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_logs"], "nodes": ["source.gnosis_dbt.execution.logs", "seed.gnosis_dbt.event_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_events.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE address = '9083a2b699c0a4ad06f63580bde2635d26a3eef0'\n  \n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2020-09-04'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_FPMMDeterministicFactory_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9083a2b699c0a4ad06f63580bde2635d26a3eef0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls": {"database": "dbt", "schema": "dbt", "name": "contracts_FPMMDeterministicFactory_calls", "resource_type": "model", "package_name": "gnosis_dbt", "path": "contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_calls.sql", "original_file_path": "models/contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_calls.sql", "unique_id": "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls", "fqn": ["gnosis_dbt", "contracts", "FPMMDeterministicFactory", "contracts_FPMMDeterministicFactory_calls"], "alias": "contracts_FPMMDeterministicFactory_calls", "checksum": {"name": "sha256", "checksum": "b30bd9f492ea6d62ef438d9a179e998c15c522c140f7facd6d03aa2992c95a99"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "contracts", "fpmm", "calls", "production", "contracts", "fpmm", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(block_timestamp, transaction_hash)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "contracts", "fpmm", "calls"], "description": "This model captures call data for the FPMM Deterministic Factory contracts, including transaction details, block information, and call specifics, used for analysis of contract interactions.", "columns": {"block_number": {"name": "block_number", "description": "The number of the block containing the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "The timestamp when the block was mined.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Unique hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "The index of the log within the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "The address of the contract involved in the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "caller_address": {"name": "caller_address", "description": "The address initiating the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_data": {"name": "call_data", "description": "Encoded data payload of the call.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "call_type": {"name": "call_type", "description": "The type of call (e.g., 'call', 'delegatecall').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_json_type": {"name": "output_json_type", "description": "Indicates if the output is in JSON format (boolean).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "output_data": {"name": "output_data", "description": "The output data from the call, in JSON format.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block containing the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Transaction execution status (e.g., 'success', 'failure').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Gas used for the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Gas price in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value transferred in wei.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/contracts/FPMMDeterministicFactory/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "incremental", "tags": ["production", "contracts", "fpmm", "calls"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(block_timestamp, transaction_hash)", "unique_key": "(block_timestamp, transaction_hash)", "partition_by": "toStartOfMonth(block_timestamp)", "settings": {"allow_nullable_key": 1}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1668506, "relation_name": "`dbt`.`contracts_FPMMDeterministicFactory_calls`", "raw_code": "{{ \n    config(\n        materialized            = 'incremental',\n        incremental_strategy    = 'delete+insert',\n        engine                  = 'ReplacingMergeTree()',\n        order_by                = '(block_timestamp, transaction_hash)',\n        unique_key              = '(block_timestamp, transaction_hash)',\n        partition_by            = 'toStartOfMonth(block_timestamp)',\n        settings                = { \n                                    'allow_nullable_key': 1 \n                                },\n        pre_hook                = [\n                                    \"SET allow_experimental_json_type = 1\"\n                                ],\n        tags                    = ['production','contracts','fpmm','calls']\n    )\n}}\n\n\n{{ \n    decode_calls(\n        tx_table      = source('execution','transactions'),\n        contract_address  = '0x9083a2b699c0a4ad06f63580bde2635d26a3eef0',\n        output_json_type  = true,\n        incremental_column= 'block_timestamp',\n        start_blocktime   = '2020-09-04'\n    )\n}}", "language": "sql", "refs": [{"name": "function_signatures", "package": null, "version": null}], "sources": [["execution", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.decode_calls"], "nodes": ["source.gnosis_dbt.execution.transactions", "seed.gnosis_dbt.function_signatures"]}, "compiled_path": "target/compiled/gnosis_dbt/models/contracts/FPMMDeterministicFactory/contracts_FPMMDeterministicFactory_calls.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '9083a2b699c0a4ad06f63580bde2635d26a3eef0'\n      \n        AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2020-09-04'))\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_FPMMDeterministicFactory_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9083a2b699c0a4ad06f63580bde2635d26a3eef0'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv4__neighbors": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv4__neighbors", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv4__neighbors.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv4__neighbors.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv4__neighbors", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv4__neighbors"], "alias": "stg_nebula_discv4__neighbors", "checksum": {"name": "sha256", "checksum": "b39caa1180ae91fcc591461acc8f5b0fa69ea9b72330fc2b900abdf89a379289"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv4", "neighbors", "production", "nebula_discv4", "neighbors"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv4", "neighbors"], "description": "Discovered neighbor relationships between peers from the nebula_discv4 neighbors data.", "columns": {"crawl_id": {"name": "crawl_id", "description": "Identifier for the specific crawl session.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "Timestamp when the crawl was initiated.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Prefix of the peer discovery ID, representing the source peer.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Prefix of the neighbor's discovery ID, representing the target peer.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_bits": {"name": "error_bits", "description": "Bitfield indicating errors encountered during neighbor discovery.", "meta": {}, "data_type": "UInt16", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv4", "neighbors"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.2123303, "relation_name": "`dbt`.`stg_nebula_discv4__neighbors`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','nebula_discv4','neighbors']\n    ) \n}}\n\nWITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM {{ source('nebula_discv4','neighbors') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv4", "neighbors"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv4.neighbors"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv4__neighbors.sql", "compiled": true, "compiled_code": "\n\nWITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula_discv4`.`neighbors` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv4__visits": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv4__visits", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv4__visits.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv4__visits.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv4__visits", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv4__visits"], "alias": "stg_nebula_discv4__visits", "checksum": {"name": "sha256", "checksum": "7354869edf12433335ed2f88b552c853e9d7ccc63c5df388470ed8b29bf1a9ea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv4", "visits", "production", "nebula_discv4", "visits"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv4", "visits"], "description": "Staging model for visits data from nebula_discv4 source, including peer and protocol metadata.", "columns": {"crawl_id": {"name": "crawl_id", "description": "Identifier for the crawl; nullable if not available.", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier for the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "Version string of the peer's agent.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocols": {"name": "protocols", "description": "List of protocols supported by the peer.", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_maddrs": {"name": "dial_maddrs", "description": "Array of dial multiaddresses.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "filtered_maddrs": {"name": "filtered_maddrs", "description": "Array of filtered multiaddresses.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_maddrs": {"name": "extra_maddrs", "description": "Array of extra multiaddresses.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "List of dial error messages.", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connect_maddr": {"name": "connect_maddr", "description": "Nullable connect multiaddress.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "Nullable crawl error message.", "meta": {}, "data_type": "LowCardinality(Nullable(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_started_at": {"name": "visit_started_at", "description": "Timestamp when the visit started.", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_ended_at": {"name": "visit_ended_at", "description": "Timestamp when the visit ended.", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "JSON object with peer properties.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv4", "visits"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.1962626, "relation_name": "`dbt`.`stg_nebula_discv4__visits`", "raw_code": "{{ \n    config(\n        pre_hook=[\n          \"SET allow_experimental_json_type = 1\"\n        ],\n        tags=['production','nebula_discv4','visits']\n    )\n}}\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM {{ source('nebula_discv4','visits') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv4", "visits"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv4.visits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv4__visits.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula_discv4`.`visits` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv5__discovery_id_prefixes_x_peer_ids.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv5__discovery_id_prefixes_x_peer_ids.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv5__discovery_id_prefixes_x_peer_ids"], "alias": "stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "checksum": {"name": "sha256", "checksum": "8830efd085553b0216eb2acd79d0b3a03ff5d28b788a458546dd12e7a32b7648"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv5", "discovery_id_prefixes_x_peer_ids", "production", "nebula_discv5", "discovery_id_prefixes_x_peer_ids"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv5", "discovery_id_prefixes_x_peer_ids"], "description": "Mapping from discovery ID prefix to peer_id, sourced from the nebula_discv5 discovery data.", "columns": {"discovery_id_prefix": {"name": "discovery_id_prefix", "description": "Discovery ID prefix as a UInt64 integer.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Peer identifier as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv5", "discovery_id_prefixes_x_peer_ids"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.2143166, "relation_name": "`dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','nebula_discv5','discovery_id_prefixes_x_peer_ids']\n    ) \n}}\n\nWITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM {{ source('nebula_discv5','discovery_id_prefixes_x_peer_ids') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv5", "discovery_id_prefixes_x_peer_ids"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv5__discovery_id_prefixes_x_peer_ids.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv5__neighbors": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv5__neighbors", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv5__neighbors.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv5__neighbors.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv5__neighbors", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv5__neighbors"], "alias": "stg_nebula_discv5__neighbors", "checksum": {"name": "sha256", "checksum": "45b9ad0b0dfbdd4bf80912bb49aed71d9b6f374e50fb62669012ab1bae2fd305"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv5", "neighbors", "production", "nebula_discv5", "neighbors"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv5", "neighbors"], "description": "Edges discovered between peers from neighbors responses in the nebula_discv5 schema.", "columns": {"crawl_id": {"name": "crawl_id", "description": "Identifier for the specific crawl session.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "Timestamp when the crawl was initiated.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Numeric prefix identifying the peer discovery ID.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Numeric prefix identifying the neighbor discovery ID.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_bits": {"name": "error_bits", "description": "Error bits indicating issues encountered during discovery.", "meta": {}, "data_type": "UInt16", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv5", "neighbors"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.216464, "relation_name": "`dbt`.`stg_nebula_discv5__neighbors`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','nebula_discv5','neighbors']\n    ) \n}}\n\nWITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM {{ source('nebula_discv5','neighbors') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv5", "neighbors"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv5.neighbors"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv5__neighbors.sql", "compiled": true, "compiled_code": "\n\nWITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula`.`neighbors` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__ipinfo": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__ipinfo", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_crawlers_data__ipinfo.sql", "original_file_path": "models/p2p/staging/stg_crawlers_data__ipinfo.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__ipinfo", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_crawlers_data__ipinfo"], "alias": "stg_crawlers_data__ipinfo", "checksum": {"name": "sha256", "checksum": "3d960f12736c5dae261327df46f3221070419c4bd038fb7e2937eca8f1c847bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "ipinfo", "production", "crawlers_data", "ipinfo"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data", "ipinfo"], "description": "Staging model that processes raw IP information data, categorizing providers, and normalizing fields for downstream analysis.", "columns": {"ip": {"name": "ip", "description": "IP address of the entity, stored as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hostname": {"name": "hostname", "description": "Resolved hostname for the IP, if available.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "City associated with the IP location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "Region or state where the IP is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country code or name for the IP location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "loc": {"name": "loc", "description": "Geographical coordinates (latitude, longitude) as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "org": {"name": "org", "description": "Organization name associated with the IP.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "postal": {"name": "postal", "description": "Postal code of the IP location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timezone": {"name": "timezone", "description": "Timezone of the IP location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asn": {"name": "asn", "description": "Autonomous System Number associated with the IP.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "company": {"name": "company", "description": "Company name linked to the IP.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier": {"name": "carrier", "description": "Carrier information for mobile or network provider.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_bogon": {"name": "is_bogon", "description": "Boolean indicating if the IP is a bogon (invalid or reserved).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mobile": {"name": "is_mobile", "description": "Boolean indicating if the IP belongs to a mobile network.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "generic_provider": {"name": "generic_provider", "description": "Categorized provider type based on organization name, e.g., AWS, Google, Azure, etc.", "meta": {}, "data_type": "String", "constraints": [], "quote": true, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "crawlers_data", "ipinfo"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.2079568, "relation_name": "`dbt`.`stg_crawlers_data__ipinfo`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data','ipinfo']\n    ) \n}}\n\nWITH\n\nsource AS (\n  SELECT \n    ip,\n    hostname,\n    city,\n    region,\n    country,\n    loc,\n    org,\n    postal,\n    timezone,\n    asn,\n    company,\n    carrier,\n    is_bogon,\n    is_mobile,\n    multiIf(\n      lowerUTF8(org) ILIKE '%amazon web services%' OR lowerUTF8(org) ILIKE '%amazon data services%' OR lowerUTF8(org) ILIKE '%aws%' OR lowerUTF8(org) ILIKE '%amazon.com%', 'AWS',\n      (lowerUTF8(org) ILIKE '%google cloud%' OR lowerUTF8(org) ILIKE '%google llc%' OR lowerUTF8(org) ILIKE '%gcp%' OR lowerUTF8(org) ILIKE '%google%') AND lowerUTF8(org) NOT ILIKE '%fiber%', 'Google',\n      lowerUTF8(org) ILIKE '%microsoft azure%' OR lowerUTF8(org) ILIKE '%azure%' OR lowerUTF8(org) ILIKE '%microsoft corporation%' OR lowerUTF8(org) ILIKE '%msft%', 'Azure',\n      lowerUTF8(org) ILIKE '%oracle cloud%' OR lowerUTF8(org) ILIKE '%oracle america%' OR lowerUTF8(org) ILIKE '%oci%', 'Oracle Cloud',\n      lowerUTF8(org) ILIKE '%alibaba cloud%' OR lowerUTF8(org) ILIKE '%aliyun%' OR lowerUTF8(org) ILIKE '%alibaba%', 'Alibaba Cloud',\n\n      lowerUTF8(org) ILIKE '%cloudflare%', 'Cloudflare',\n      (lowerUTF8(org) ILIKE '%akamai%' AND lowerUTF8(org) NOT ILIKE '%linode%'), 'Akamai',\n      lowerUTF8(org) ILIKE '%fastly%', 'Fastly',\n\n      lowerUTF8(org) ILIKE '%digitalocean%' OR lowerUTF8(org) ILIKE '%digital ocean%', 'DigitalOcean',\n      lowerUTF8(org) ILIKE '%ovh%', 'OVHcloud',\n      lowerUTF8(org) ILIKE '%hetzner%', 'Hetzner',\n      lowerUTF8(org) ILIKE '%scaleway%' OR lowerUTF8(org) ILIKE '%online s.a.s%' OR lowerUTF8(org) ILIKE '%iliad%', 'Scaleway',\n      lowerUTF8(org) ILIKE '%linode%', 'Linode',\n      lowerUTF8(org) ILIKE '%vultr%' OR lowerUTF8(org) ILIKE '%choopa%', 'Vultr',\n      lowerUTF8(org) ILIKE '%equinix metal%' OR lowerUTF8(org) ILIKE '%packet host%' OR lowerUTF8(org) ILIKE '%packet, inc%', 'Equinix Metal',\n      lowerUTF8(org) ILIKE '%fly.io%' OR lowerUTF8(org) ILIKE '%fly io%', 'Fly.io',\n      lowerUTF8(org) ILIKE '%netlify%', 'Netlify',\n      lowerUTF8(org) ILIKE '%vercel%' OR lowerUTF8(org) ILIKE '%zeit%', 'Vercel',\n      lowerUTF8(org) ILIKE '%heroku%', 'Heroku',\n      lowerUTF8(org) ILIKE '%render.com%' OR lowerUTF8(org) ILIKE '% render %', 'Render',\n\n      -- Carrier / transit networks (keep as its own bucket; change to 'Public ISP (Home/Office)' if you prefer)\n      lowerUTF8(org) ILIKE '%cogent%' OR lowerUTF8(org) ILIKE '%lumen%' OR lowerUTF8(org) ILIKE '%level 3%' OR lowerUTF8(org) ILIKE '%centurylink%' OR\n      lowerUTF8(org) ILIKE '%telia carrier%' OR lowerUTF8(org) ILIKE '%arelion%' OR lowerUTF8(org) ILIKE '%gtt%' OR lowerUTF8(org) ILIKE '%hurricane electric%' OR\n      lowerUTF8(org) ILIKE '%he.net%' OR lowerUTF8(org) ILIKE '%ntt communications%' OR lowerUTF8(org) ILIKE '%tata communications%' OR lowerUTF8(org) ILIKE '%zayo%' OR\n      lowerUTF8(org) ILIKE '%kddi%' OR lowerUTF8(org) ILIKE '%sparkle%' OR lowerUTF8(org) ILIKE '%backbone%' OR lowerUTF8(org) ILIKE '%chinanet-backbone%', 'Carrier/Transit',\n\n      -- Education / government \u2192 treat like public access\n      lowerUTF8(org) ILIKE '%university%' OR lowerUTF8(org) ILIKE '%college%' OR lowerUTF8(org) ILIKE '%school%' OR lowerUTF8(org) ILIKE '%ministry%' OR lowerUTF8(org) ILIKE '%government%', 'Public ISP (Home/Office)',\n\n      -- Generic hosting/CDN hints\n      lowerUTF8(org) ILIKE '%datacenter%' OR lowerUTF8(org) ILIKE '%data center%' OR lowerUTF8(org) ILIKE '%colo%' OR lowerUTF8(org) ILIKE '%hosting%' OR lowerUTF8(org) ILIKE '%vps%' OR lowerUTF8(org) ILIKE '%server%' OR lowerUTF8(org) ILIKE '%incapsula%' OR lowerUTF8(org) ILIKE '%imperva%', 'Hosting/CDN (Other)',\n\n      -- Fallback for residential & office ISPs\n      lowerUTF8(org) ILIKE '%telecom%' OR lowerUTF8(org) ILIKE '%telekom%' OR lowerUTF8(org) ILIKE '%telecommunications%' OR lowerUTF8(org) ILIKE '%communications%' OR lowerUTF8(org) ILIKE '%wireless%' OR\n      lowerUTF8(org) ILIKE '%cable%' OR lowerUTF8(org) ILIKE '%broadband%' OR lowerUTF8(org) ILIKE '%internet%' OR lowerUTF8(org) ILIKE '%fibre%' OR lowerUTF8(org) ILIKE '%fiber%' OR lowerUTF8(org) ILIKE '%mobile%', 'Public ISP (Home/Office)',\n      lowerUTF8(org) = '', 'Unknown',\n      'Public ISP (Home/Office)'\n  ) AS generic_provider\n  FROM {{ source('crawlers_data','ipinfo') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["crawlers_data", "ipinfo"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.ipinfo"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_crawlers_data__ipinfo.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    ip,\n    hostname,\n    city,\n    region,\n    country,\n    loc,\n    org,\n    postal,\n    timezone,\n    asn,\n    company,\n    carrier,\n    is_bogon,\n    is_mobile,\n    multiIf(\n      lowerUTF8(org) ILIKE '%amazon web services%' OR lowerUTF8(org) ILIKE '%amazon data services%' OR lowerUTF8(org) ILIKE '%aws%' OR lowerUTF8(org) ILIKE '%amazon.com%', 'AWS',\n      (lowerUTF8(org) ILIKE '%google cloud%' OR lowerUTF8(org) ILIKE '%google llc%' OR lowerUTF8(org) ILIKE '%gcp%' OR lowerUTF8(org) ILIKE '%google%') AND lowerUTF8(org) NOT ILIKE '%fiber%', 'Google',\n      lowerUTF8(org) ILIKE '%microsoft azure%' OR lowerUTF8(org) ILIKE '%azure%' OR lowerUTF8(org) ILIKE '%microsoft corporation%' OR lowerUTF8(org) ILIKE '%msft%', 'Azure',\n      lowerUTF8(org) ILIKE '%oracle cloud%' OR lowerUTF8(org) ILIKE '%oracle america%' OR lowerUTF8(org) ILIKE '%oci%', 'Oracle Cloud',\n      lowerUTF8(org) ILIKE '%alibaba cloud%' OR lowerUTF8(org) ILIKE '%aliyun%' OR lowerUTF8(org) ILIKE '%alibaba%', 'Alibaba Cloud',\n\n      lowerUTF8(org) ILIKE '%cloudflare%', 'Cloudflare',\n      (lowerUTF8(org) ILIKE '%akamai%' AND lowerUTF8(org) NOT ILIKE '%linode%'), 'Akamai',\n      lowerUTF8(org) ILIKE '%fastly%', 'Fastly',\n\n      lowerUTF8(org) ILIKE '%digitalocean%' OR lowerUTF8(org) ILIKE '%digital ocean%', 'DigitalOcean',\n      lowerUTF8(org) ILIKE '%ovh%', 'OVHcloud',\n      lowerUTF8(org) ILIKE '%hetzner%', 'Hetzner',\n      lowerUTF8(org) ILIKE '%scaleway%' OR lowerUTF8(org) ILIKE '%online s.a.s%' OR lowerUTF8(org) ILIKE '%iliad%', 'Scaleway',\n      lowerUTF8(org) ILIKE '%linode%', 'Linode',\n      lowerUTF8(org) ILIKE '%vultr%' OR lowerUTF8(org) ILIKE '%choopa%', 'Vultr',\n      lowerUTF8(org) ILIKE '%equinix metal%' OR lowerUTF8(org) ILIKE '%packet host%' OR lowerUTF8(org) ILIKE '%packet, inc%', 'Equinix Metal',\n      lowerUTF8(org) ILIKE '%fly.io%' OR lowerUTF8(org) ILIKE '%fly io%', 'Fly.io',\n      lowerUTF8(org) ILIKE '%netlify%', 'Netlify',\n      lowerUTF8(org) ILIKE '%vercel%' OR lowerUTF8(org) ILIKE '%zeit%', 'Vercel',\n      lowerUTF8(org) ILIKE '%heroku%', 'Heroku',\n      lowerUTF8(org) ILIKE '%render.com%' OR lowerUTF8(org) ILIKE '% render %', 'Render',\n\n      -- Carrier / transit networks (keep as its own bucket; change to 'Public ISP (Home/Office)' if you prefer)\n      lowerUTF8(org) ILIKE '%cogent%' OR lowerUTF8(org) ILIKE '%lumen%' OR lowerUTF8(org) ILIKE '%level 3%' OR lowerUTF8(org) ILIKE '%centurylink%' OR\n      lowerUTF8(org) ILIKE '%telia carrier%' OR lowerUTF8(org) ILIKE '%arelion%' OR lowerUTF8(org) ILIKE '%gtt%' OR lowerUTF8(org) ILIKE '%hurricane electric%' OR\n      lowerUTF8(org) ILIKE '%he.net%' OR lowerUTF8(org) ILIKE '%ntt communications%' OR lowerUTF8(org) ILIKE '%tata communications%' OR lowerUTF8(org) ILIKE '%zayo%' OR\n      lowerUTF8(org) ILIKE '%kddi%' OR lowerUTF8(org) ILIKE '%sparkle%' OR lowerUTF8(org) ILIKE '%backbone%' OR lowerUTF8(org) ILIKE '%chinanet-backbone%', 'Carrier/Transit',\n\n      -- Education / government \u2192 treat like public access\n      lowerUTF8(org) ILIKE '%university%' OR lowerUTF8(org) ILIKE '%college%' OR lowerUTF8(org) ILIKE '%school%' OR lowerUTF8(org) ILIKE '%ministry%' OR lowerUTF8(org) ILIKE '%government%', 'Public ISP (Home/Office)',\n\n      -- Generic hosting/CDN hints\n      lowerUTF8(org) ILIKE '%datacenter%' OR lowerUTF8(org) ILIKE '%data center%' OR lowerUTF8(org) ILIKE '%colo%' OR lowerUTF8(org) ILIKE '%hosting%' OR lowerUTF8(org) ILIKE '%vps%' OR lowerUTF8(org) ILIKE '%server%' OR lowerUTF8(org) ILIKE '%incapsula%' OR lowerUTF8(org) ILIKE '%imperva%', 'Hosting/CDN (Other)',\n\n      -- Fallback for residential & office ISPs\n      lowerUTF8(org) ILIKE '%telecom%' OR lowerUTF8(org) ILIKE '%telekom%' OR lowerUTF8(org) ILIKE '%telecommunications%' OR lowerUTF8(org) ILIKE '%communications%' OR lowerUTF8(org) ILIKE '%wireless%' OR\n      lowerUTF8(org) ILIKE '%cable%' OR lowerUTF8(org) ILIKE '%broadband%' OR lowerUTF8(org) ILIKE '%internet%' OR lowerUTF8(org) ILIKE '%fibre%' OR lowerUTF8(org) ILIKE '%fiber%' OR lowerUTF8(org) ILIKE '%mobile%', 'Public ISP (Home/Office)',\n      lowerUTF8(org) = '', 'Unknown',\n      'Public ISP (Home/Office)'\n  ) AS generic_provider\n  FROM `crawlers_data`.`ipinfo` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv5__visits": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv5__visits", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv5__visits.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv5__visits.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv5__visits", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv5__visits"], "alias": "stg_nebula_discv5__visits", "checksum": {"name": "sha256", "checksum": "5f09b3b564a37d76c2480da82b5820bf6bb544e9a72d7bfc1405eae45434d546"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv5", "visits", "production", "nebula_discv5", "visits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv5", "visits"], "description": "Staging model for nebula discv5 visits data, capturing peer visit details during network crawls.", "columns": {"crawl_id": {"name": "crawl_id", "description": "Identifier for the crawl session; nullable if not available.", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier of the visited peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "Version string of the peer's agent software.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocols": {"name": "protocols", "description": "List of protocols supported by the peer during visit.", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_maddrs": {"name": "dial_maddrs", "description": "Array of dial multiaddresses used during connection attempts.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "filtered_maddrs": {"name": "filtered_maddrs", "description": "Array of filtered multiaddresses associated with the peer.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_maddrs": {"name": "extra_maddrs", "description": "Additional multiaddresses discovered for the peer.", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "List of errors encountered during dialing attempts.", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connect_maddr": {"name": "connect_maddr", "description": "Multiaddress used for the successful connection, if any.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "Error message if the crawl encountered issues connecting to the peer.", "meta": {}, "data_type": "LowCardinality(Nullable(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_started_at": {"name": "visit_started_at", "description": "Timestamp when the visit started.", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_ended_at": {"name": "visit_ended_at", "description": "Timestamp when the visit ended.", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "JSON object containing additional peer metadata.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv5", "visits"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.2009819, "relation_name": "`dbt`.`stg_nebula_discv5__visits`", "raw_code": "{{ \n    config(\n        pre_hook=[\n          \"SET allow_experimental_json_type = 1\"\n        ],\n        tags=['production','nebula_discv5','visits']\n    )\n}}\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM {{ source('nebula_discv5','visits') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv5", "visits"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv5.visits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv5__visits.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula`.`visits` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids": {"database": "dbt", "schema": "dbt", "name": "stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/staging/stg_nebula_discv4__discovery_id_prefixes_x_peer_ids.sql", "original_file_path": "models/p2p/staging/stg_nebula_discv4__discovery_id_prefixes_x_peer_ids.sql", "unique_id": "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "fqn": ["gnosis_dbt", "p2p", "staging", "stg_nebula_discv4__discovery_id_prefixes_x_peer_ids"], "alias": "stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "checksum": {"name": "sha256", "checksum": "e4bb2c6b338dd5bdced7c1dc402cf531e2de03571bb040961adbaf8b8e99a97f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "nebula_discv4", "discovery_id_prefixes_x_peer_ids", "production", "nebula_discv4", "discovery_id_prefixes_x_peer_ids"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "nebula_discv4", "discovery_id_prefixes_x_peer_ids"], "description": "Mapping from discovery ID prefix to peer_id in the nebula_discv4 schema.", "columns": {"discovery_id_prefix": {"name": "discovery_id_prefix", "description": "Discovery ID prefix used to identify peers, type UInt64.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Peer identifier as a string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "nebula_discv4", "discovery_id_prefixes_x_peer_ids"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.2100992, "relation_name": "`dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','nebula_discv4','discovery_id_prefixes_x_peer_ids']\n    ) \n}}\n\nWITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM {{ source('nebula_discv4','discovery_id_prefixes_x_peer_ids') }} \n)\n\nSELECT * FROM source", "language": "sql", "refs": [], "sources": [["nebula_discv4", "discovery_id_prefixes_x_peer_ids"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/staging/stg_nebula_discv4__discovery_id_prefixes_x_peer_ids.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula_discv4`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_topology_latest": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_topology_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_topology_latest.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_topology_latest.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_topology_latest", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_topology_latest"], "alias": "int_p2p_discv5_topology_latest", "checksum": {"name": "sha256", "checksum": "8d09f9033d7a98db923076efc80fe4cb4b01fa1acfb85f6e739b2c190937ecc1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET enable_dynamic_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv5"], "description": "This model aggregates peer discovery and neighbor connection data from the Discv5 network, including peer properties, geographical info, and connection counts, to analyze network topology.", "columns": {"date": {"name": "date", "description": "The day of the crawl, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_ip": {"name": "peer_ip", "description": "IP address of the peer node.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Discovery ID prefix for the peer.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_cl_fork_name": {"name": "peer_cl_fork_name", "description": "Client fork name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_cl_next_fork_name": {"name": "peer_cl_next_fork_name", "description": "Next client fork name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_client": {"name": "peer_client", "description": "Client software name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Hostname of the peer, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City location of the peer, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country of the peer, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer IP, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_loc": {"name": "peer_loc", "description": "Geographical coordinates of the peer, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_ip": {"name": "neighbor_ip", "description": "IP address of the neighbor node.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Discovery ID prefix for the neighbor.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_cl_fork_name": {"name": "neighbor_cl_fork_name", "description": "Client fork name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_cl_next_fork_name": {"name": "neighbor_cl_next_fork_name", "description": "Next client fork name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_client": {"name": "neighbor_client", "description": "Client software name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_city": {"name": "neighbor_city", "description": "City location of the neighbor, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_country": {"name": "neighbor_country", "description": "Country of the neighbor, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_org": {"name": "neighbor_org", "description": "Organization associated with neighbor IP, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_loc": {"name": "neighbor_loc", "description": "Geographical coordinates of neighbor, from IP info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of neighbor edges between peer and neighbor.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "table", "tags": ["production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET enable_dynamic_type = 1"]}, "created_at": 1760535478.2589917, "relation_name": "`dbt`.`int_p2p_discv5_topology_latest`", "raw_code": "{{ \n    config(\n        materialized='table',\n        pre_hook=[\n            \"SET enable_dynamic_type = 1\"\n        ],\n        tags=['production','p2p','discv5']\n    )\n}}\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM {{ ref('stg_nebula_discv5__discovery_id_prefixes_x_peer_ids') }} AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM {{ ref('stg_nebula_discv5__neighbors') }} AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN {{ ref('stg_crawlers_data__ipinfo') }} AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN {{ ref('stg_crawlers_data__ipinfo') }} AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}, {"name": "stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "package": null, "version": null}, {"name": "stg_nebula_discv5__neighbors", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_peers", "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "model.gnosis_dbt.stg_nebula_discv5__neighbors", "model.gnosis_dbt.stg_crawlers_data__ipinfo"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_topology_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv5__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv4_visits_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv4_visits_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv4_visits_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv4_visits_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv4_visits_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv4_visits_daily"], "alias": "int_p2p_discv4_visits_daily", "checksum": {"name": "sha256", "checksum": "5b9733747cb11b7953226727244fb03335f09feaf62db727b7dc798949e9fad4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "production", "p2p", "discv4"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "p2p", "discv4"], "description": "Daily aggregated count of visits with total, successful, and crawl count metrics, filtered by network ID and date.", "columns": {"date": {"name": "date", "description": "The day of the visit, truncated to start of day.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_visits": {"name": "total_visits", "description": "Total number of visits on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "successful_visits": {"name": "successful_visits", "description": "Count of successful visits where no dial errors or crawl errors are present.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawls": {"name": "crawls", "description": "Number of distinct crawl IDs associated with the visits.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv4"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535478.2689114, "relation_name": "`dbt`.`int_p2p_discv4_visits_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','p2p','discv4']\n    ) \n}}\n\nWITH\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM {{ ref('stg_nebula_discv4__visits') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        toString(peer_properties.network_id) = '100'\n        {{ apply_monthly_incremental_filter(source_field='visit_ended_at',destination_field='date',add_and='true') }}\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "language": "sql", "refs": [{"name": "stg_nebula_discv4__visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_nebula_discv4__visits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv4_visits_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv4__visits`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        toString(peer_properties.network_id) = '100'\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_visits_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_visits_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_visits_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_visits_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_visits_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_visits_daily"], "alias": "int_p2p_discv5_visits_daily", "checksum": {"name": "sha256", "checksum": "85e7ac3bd1671365f008f233d2910bf698a7daf0b025bb01feb5475ca7e4a55a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date)", "partition_by": "toStartOfMonth(date)"}, "tags": ["production", "p2p", "discv5"], "description": "Aggregated daily visit data for P2P network peers using Discv5, including counts of total and successful visits, with associated fork information.", "columns": {"date": {"name": "date", "description": "The day for which the visit data is aggregated, in UTC.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_name": {"name": "fork_name", "description": "Name of the fork, e.g., 'Phase0', 'Altair', etc.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_digest": {"name": "fork_digest", "description": "Fork digest identifier as a hexadecimal string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_visits": {"name": "total_visits", "description": "Total number of visits recorded on the date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "successful_visits": {"name": "successful_visits", "description": "Number of visits that were successful (no dial errors or null crawl_error).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawls": {"name": "crawls", "description": "Count of distinct crawl IDs associated with the visits.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date)", "unique_key": "(date)", "partition_by": "toStartOfMonth(date)"}, "created_at": 1760535478.2712202, "relation_name": "`dbt`.`int_p2p_discv5_visits_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date)',\n        unique_key='(date)',\n        partition_by='toStartOfMonth(date)',\n        tags=['production','p2p','discv5']\n    ) \n}}\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM {{ ref('stg_nebula_discv5__visits') }}\n    WHERE\n      toStartOfDay(visit_ended_at) < today()\n      AND\n      (\n        toString(peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR toString(peer_properties.next_fork_version) LIKE '%064'\n      )\n      {{ apply_monthly_incremental_filter(source_field='visit_ended_at',destination_field='date',add_and='true') }}\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "language": "sql", "refs": [{"name": "stg_nebula_discv5__visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_nebula_discv5__visits"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_visits_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv5__visits`\n    WHERE\n      toStartOfDay(visit_ended_at) < today()\n      AND\n      (\n        toString(peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR toString(peer_properties.next_fork_version) LIKE '%064'\n      )\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv4_peers": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv4_peers", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv4_peers.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv4_peers.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv4_peers", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv4_peers"], "alias": "int_p2p_discv4_peers", "checksum": {"name": "sha256", "checksum": "787ca0a8e2c6bb7f0d322dd9084072331d228915251078374eeabfdeac3663c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "production", "p2p", "discv4"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(visit_ended_at, peer_id)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(visit_ended_at, peer_id)", "partition_by": "toStartOfMonth(visit_ended_at)"}, "tags": ["production", "p2p", "discv4"], "description": "A comprehensive view of peer visit data in the Discv4 network, including agent versions, connection addresses, peer properties, crawl errors, and enriched location info.", "columns": {"visit_ended_at": {"name": "visit_ended_at", "description": "Timestamp when the peer visit ended.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier for the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "Version string of the agent software used by the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connect_maddr": {"name": "connect_maddr", "description": "Multiaddress used to connect to the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "JSON object containing various properties of the peer, including network ID.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "Error message if the crawl encountered issues.", "meta": {}, "data_type": "LowCardinality(Nullable(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "Array of dial error messages encountered during connection attempts.", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client type extracted from peer's version info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant": {"name": "variant", "description": "Variant identifier parsed from version info, if available.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Peer software version extracted from version info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "channel": {"name": "channel", "description": "Channel information parsed from version info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "build": {"name": "build", "description": "Build identifier parsed from version info.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "platform": {"name": "platform", "description": "Platform name derived from agent version parts.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "runtime": {"name": "runtime", "description": "Runtime environment derived from agent version parts.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Resolved hostname of the peer's IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City location of the peer based on IP geolocation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country location of the peer based on IP geolocation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer's IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_loc": {"name": "peer_loc", "description": "Geographical location string of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "generic_provider": {"name": "generic_provider", "description": "Generic provider info from IP geolocation data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv4"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(visit_ended_at, peer_id)", "unique_key": "(visit_ended_at, peer_id)", "partition_by": "toStartOfMonth(visit_ended_at)", "pre-hook": ["SET allow_experimental_json_type = 1"]}, "created_at": 1760535478.2355008, "relation_name": "`dbt`.`int_p2p_discv4_peers`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(visit_ended_at, peer_id)',\n        unique_key='(visit_ended_at, peer_id)',\n        partition_by='toStartOfMonth(visit_ended_at)',\n        pre_hook=[\n          \"SET allow_experimental_json_type = 1\"\n        ],\n        tags=['production','p2p','discv4']\n    ) \n}}\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM {{ ref('stg_nebula_discv4__visits') }} A\n  WHERE\n      toString(peer_properties.network_id) = '100'\n      {{ apply_monthly_incremental_filter('visit_ended_at', add_and='true') }}\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  ),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    --replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    arrayElement(splitByChar('/', ifNull(connect_maddr, '')), 3) AS ip,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(\n      plus_build != '',\n      arrayElement(splitByChar('-', pre_blob), 1),\n      splitByChar('-', ver_blob)[1]\n    )                                                       AS version,\n    IF(\n      plus_build != '',\n      IF(\n        length(splitByChar('-', pre_blob)) >= 2,\n        arrayElement(splitByChar('-', pre_blob), 2),\n        ''\n      ),\n      IF(\n        length(splitByChar('-', ver_blob)) = 3,\n        arrayElement(splitByChar('-', ver_blob), 2),\n        ''\n      )\n    )                                                       AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(\n        length(splitByChar('-', ver_blob)) > 1,\n        arrayElement(splitByChar('-', ver_blob), -1),\n        ''\n      )\n    )                                                       AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  t1.platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN {{ ref('stg_crawlers_data__ipinfo') }} AS t2\n  ON t2.ip = t1.ip", "language": "sql", "refs": [{"name": "stg_nebula_discv4__visits", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_nebula_discv4__visits", "model.gnosis_dbt.stg_crawlers_data__ipinfo"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv4_peers.sql", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `dbt`.`stg_nebula_discv4__visits` A\n  WHERE\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv4_peers`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  ),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    --replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    arrayElement(splitByChar('/', ifNull(connect_maddr, '')), 3) AS ip,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(\n      plus_build != '',\n      arrayElement(splitByChar('-', pre_blob), 1),\n      splitByChar('-', ver_blob)[1]\n    )                                                       AS version,\n    IF(\n      plus_build != '',\n      IF(\n        length(splitByChar('-', pre_blob)) >= 2,\n        arrayElement(splitByChar('-', pre_blob), 2),\n        ''\n      ),\n      IF(\n        length(splitByChar('-', ver_blob)) = 3,\n        arrayElement(splitByChar('-', ver_blob), 2),\n        ''\n      )\n    )                                                       AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(\n        length(splitByChar('-', ver_blob)) > 1,\n        arrayElement(splitByChar('-', ver_blob), -1),\n        ''\n      )\n    )                                                       AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  t1.platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_clients_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_clients_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_clients_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_clients_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_clients_daily"], "alias": "int_p2p_discv5_clients_daily", "checksum": {"name": "sha256", "checksum": "f69082a63c62f926f4f083bcdbdce6ab3cc0c835a03587bb41e1e9914586548d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, metric, label)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, metric, label)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "p2p", "discv5"], "description": "Aggregated daily counts of peers, platforms, providers, and countries based on Discv5 peer visit data, grouped by date and label.", "columns": {"date": {"name": "date", "description": "The day of the peer visit, truncated to day level.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "The category of the count, e.g., 'Clients', 'Platform', 'Provider', 'Country'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "The specific label within the metric category, e.g., client name, platform name, provider name, country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The count of peers, platforms, providers, or countries for the given date and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, metric, label)", "unique_key": "(date, metric, label)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535478.2380035, "relation_name": "`dbt`.`int_p2p_discv5_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, metric, label)',\n        unique_key='(date, metric, label)',\n        partition_by='toStartOfMonth(date)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','p2p','discv5']\n    ) \n}}\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        {{ apply_monthly_incremental_filter('visit_ended_at','date','true') }}\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.int_p2p_discv5_peers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_clients_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv4_clients_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv4_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv4_clients_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv4_clients_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv4_clients_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv4_clients_daily"], "alias": "int_p2p_discv4_clients_daily", "checksum": {"name": "sha256", "checksum": "2782a0b5c068263e25d109ab3cbced03c26f767837fc5c3dcfbc40021c661e01"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "production", "p2p", "discv4"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, metric, label)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, metric, label)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "p2p", "discv4"], "description": "Aggregated daily counts of peers categorized by client, platform, provider, and country, based on Discv4 peer visit data.", "columns": {"date": {"name": "date", "description": "The day of the peer visit, truncated to day level.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "Category of the peer count, e.g., 'Clients', 'Platform', 'Provider', 'Country'.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Specific label within the metric category, e.g., client name, platform, provider, or country code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of peers for the given date, metric, and label.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv4"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, metric, label)", "unique_key": "(date, metric, label)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535478.2612424, "relation_name": "`dbt`.`int_p2p_discv4_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, metric, label)',\n        unique_key='(date, metric, label)',\n        partition_by='toStartOfMonth(date)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','p2p','discv4']\n    ) \n}}\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM {{ ref('int_p2p_discv4_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        {{ apply_monthly_incremental_filter('visit_ended_at','date','true') }}\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "language": "sql", "refs": [{"name": "int_p2p_discv4_peers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.int_p2p_discv4_peers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv4_clients_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv4_topology_latest": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv4_topology_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv4_topology_latest.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv4_topology_latest.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv4_topology_latest", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv4_topology_latest"], "alias": "int_p2p_discv4_topology_latest", "checksum": {"name": "sha256", "checksum": "a2734a0e2b6e8741da147fb6ad3949202f5a012eb8f524c8e13e6a98b751a12a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "production", "p2p", "discv4"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET enable_dynamic_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4"], "description": "A model representing the latest discovered peer-to-peer topology data, including peer and neighbor information with associated geolocation data and visit counts.", "columns": {"date": {"name": "date", "description": "The date of the crawl, truncated to day.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_ip": {"name": "peer_ip", "description": "IP address of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Discovery ID prefix of the peer.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_client": {"name": "peer_client", "description": "Client software used by the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Hostname of the peer's IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City location of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer's IP.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_loc": {"name": "peer_loc", "description": "Geographical coordinates of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_ip": {"name": "neighbor_ip", "description": "IP address of the neighbor peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Discovery ID prefix of the neighbor.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_client": {"name": "neighbor_client", "description": "Client software used by the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_city": {"name": "neighbor_city", "description": "City location of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_country": {"name": "neighbor_country", "description": "Country of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_org": {"name": "neighbor_org", "description": "Organization associated with the neighbor's IP.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_loc": {"name": "neighbor_loc", "description": "Geographical coordinates of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of edges between peer and neighbor for the given day.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "table", "tags": ["production", "p2p", "discv4"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET enable_dynamic_type = 1"]}, "created_at": 1760535478.266099, "relation_name": "`dbt`.`int_p2p_discv4_topology_latest`", "raw_code": "{{ \n    config(\n        materialized='table',\n        pre_hook=[\n            \"SET enable_dynamic_type = 1\"\n        ],\n        tags=['production','p2p','discv4']\n    )\n}}\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        ip,\n        any(client) AS client\n    FROM {{ ref('int_p2p_discv4_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM {{ ref('stg_nebula_discv4__discovery_id_prefixes_x_peer_ids') }} AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM {{ ref('stg_nebula_discv4__neighbors') }} AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN  {{ ref('stg_crawlers_data__ipinfo') }} AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN  {{ ref('stg_crawlers_data__ipinfo') }} AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "language": "sql", "refs": [{"name": "int_p2p_discv4_peers", "package": null, "version": null}, {"name": "stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "package": null, "version": null}, {"name": "stg_nebula_discv4__neighbors", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_peers", "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "model.gnosis_dbt.stg_nebula_discv4__neighbors", "model.gnosis_dbt.stg_crawlers_data__ipinfo"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv4_topology_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        ip,\n        any(client) AS client\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv4__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_forks_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_forks_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_forks_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_forks_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_forks_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_forks_daily"], "alias": "int_p2p_discv5_forks_daily", "checksum": {"name": "sha256", "checksum": "69435ca963ef2cbc243aa5288cc6807a80f7c220437b3694f8991f8ba1ac578e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date, label, fork)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date, label, fork)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "p2p", "discv5"], "description": "Aggregated daily counts of peers by current and next forks, derived from peer visit data, with grouping by date, label, and fork.", "columns": {"date": {"name": "date", "description": "The day of the peer visit, truncated to start of day.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label indicating whether the row counts current or next forks.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork": {"name": "fork", "description": "The fork identifier associated with the peer visit.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of peer visits for the given date, label, and fork.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date, label, fork)", "unique_key": "(date, label, fork)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535478.2404683, "relation_name": "`dbt`.`int_p2p_discv5_forks_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date, label, fork)',\n        unique_key='(date, label, fork)',\n        partition_by='toStartOfMonth(date)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','p2p','discv5']\n    ) \n}}\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        {{ apply_monthly_incremental_filter('visit_ended_at', 'date','true') }}\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.int_p2p_discv5_peers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_forks_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_forks_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_geo_daily": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_geo_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_geo_daily.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_geo_daily.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_geo_daily", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_geo_daily"], "alias": "int_p2p_discv5_geo_daily", "checksum": {"name": "sha256", "checksum": "ba5d695283316662c43ff63745214475c4ad3beb15a992e7fd473e121531aa3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(date,lat,long)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(date,lat,long)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "tags": ["production", "p2p", "discv5"], "description": "Daily aggregated geolocation data for P2P peers discovered via Discv5, including country, latitude, longitude, and count of peers per day.", "columns": {"date": {"name": "date", "description": "The day of the peer activity, truncated to day granularity.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lat": {"name": "lat", "description": "Latitude of peer location in decimal degrees; null if unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "long": {"name": "long", "description": "Longitude of peer location in decimal degrees; null if unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country code or name; 'Unknown' if not available.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of peers discovered for the given day and location.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(date,lat,long)", "unique_key": "(date,lat,long)", "partition_by": "toStartOfMonth(date)", "settings": {"allow_nullable_key": 1}}, "created_at": 1760535478.243438, "relation_name": "`dbt`.`int_p2p_discv5_geo_daily`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(date,lat,long)',\n        unique_key='(date,lat,long)',\n        partition_by='toStartOfMonth(date)',\n        settings={\n            'allow_nullable_key': 1\n        },\n        tags=['production','p2p','discv5']\n    ) \n}}\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM {{ ref('int_p2p_discv5_peers') }}\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        {{ apply_monthly_incremental_filter('visit_ended_at','date','true') }}\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[1]) AS lat\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[2]) AS long\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    {{ source('crawlers_data','ipinfo') }} t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2, 3, 4", "language": "sql", "refs": [{"name": "int_p2p_discv5_peers", "package": null, "version": null}], "sources": [["crawlers_data", "ipinfo"]], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["source.gnosis_dbt.crawlers_data.ipinfo", "model.gnosis_dbt.int_p2p_discv5_peers"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_geo_daily.sql", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[1]) AS lat\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[2]) AS long\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2, 3, 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_p2p_discv5_peers": {"database": "dbt", "schema": "dbt", "name": "int_p2p_discv5_peers", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/intermediate/int_p2p_discv5_peers.sql", "original_file_path": "models/p2p/intermediate/int_p2p_discv5_peers.sql", "unique_id": "model.gnosis_dbt.int_p2p_discv5_peers", "fqn": ["gnosis_dbt", "p2p", "intermediate", "int_p2p_discv5_peers"], "alias": "int_p2p_discv5_peers", "checksum": {"name": "sha256", "checksum": "9c3098fdc2be594a85b09292823095a21f6c50114ab5713d53c280512f7d86c9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET allow_experimental_json_type = 1", "transaction": true, "index": null}, {"sql": "SET enable_dynamic_type = 1", "transaction": true, "index": null}, {"sql": "SET join_use_nulls = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "(visit_ended_at, peer_id)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public", "engine": "ReplacingMergeTree()", "order_by": "(visit_ended_at, peer_id)", "partition_by": "toStartOfMonth(visit_ended_at)"}, "tags": ["production", "p2p", "discv5"], "description": "Contains detailed peer information extracted from Discv5 network crawl data, including version parsing, peer properties, and associated metadata for analysis.", "columns": {"crawl_id": {"name": "crawl_id", "description": "Unique identifier for the crawl session.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_ended_at": {"name": "visit_ended_at", "description": "Timestamp when the peer visit ended.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "Unique identifier for the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "Version string of the peer's agent software.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ip": {"name": "ip", "description": "Peer IP address extracted from connect_maddr.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork_digest": {"name": "fork_digest", "description": "Fork digest hash representing the fork version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cl_fork_name": {"name": "cl_fork_name", "description": "Human-readable name of the fork based on fork digest.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cl_next_fork_name": {"name": "cl_next_fork_name", "description": "Human-readable name of the next fork version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "next_fork_version": {"name": "next_fork_version", "description": "Hexadecimal string representing the next fork version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "JSON object containing various peer properties.", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "Error message if the crawl encountered issues with this peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "List of dial error messages encountered during connection attempts.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client identifier extracted from the agent version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant": {"name": "variant", "description": "Variant token parsed from the agent version string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Version token parsed from the agent version string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "channel": {"name": "channel", "description": "Channel information parsed from the version blob.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "build": {"name": "build", "description": "Build identifier parsed from the version blob.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "platform": {"name": "platform", "description": "Platform derived from agent version, normalized to known categories.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "runtime": {"name": "runtime", "description": "Runtime environment parsed from agent version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Hostname associated with the peer's IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City location derived from IP geolocation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country location derived from IP geolocation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_loc": {"name": "peer_loc", "description": "Geographical location details.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "generic_provider": {"name": "generic_provider", "description": "Generic provider information for the IP address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/intermediate/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "incremental", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "incremental_strategy": "delete+insert", "engine": "ReplacingMergeTree()", "order_by": "(visit_ended_at, peer_id)", "unique_key": "(visit_ended_at, peer_id)", "partition_by": "toStartOfMonth(visit_ended_at)", "pre-hook": ["SET allow_experimental_json_type = 1", "SET enable_dynamic_type = 1", "SET join_use_nulls = 1"]}, "created_at": 1760535478.2491958, "relation_name": "`dbt`.`int_p2p_discv5_peers`", "raw_code": "{{ \n    config(\n        materialized='incremental',\n        incremental_strategy='delete+insert',\n        engine='ReplacingMergeTree()',\n        order_by='(visit_ended_at, peer_id)',\n        unique_key='(visit_ended_at, peer_id)',\n        partition_by='toStartOfMonth(visit_ended_at)',\n        pre_hook=[\n          \"SET allow_experimental_json_type = 1\",\n          \"SET enable_dynamic_type = 1\",\n          \"SET join_use_nulls = 1\"\n        ],\n        tags=['production','p2p','discv5']\n    )\n}}\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.crawl_id,\n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.connect_maddr,\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM {{ ref('stg_nebula_discv5__visits') }} AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    {{ apply_monthly_incremental_filter('visit_ended_at', add_and='true') }}\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n),\n\nbasic_info AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    fork_digest,\n    cl_fork_name,\n    cl_next_fork_name,\n    next_fork_version,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n    IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n    )                                                                          AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.crawl_id,\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.fork_digest,\n  t1.cl_fork_name,\n  t1.cl_next_fork_name,\n  t1.next_fork_version,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  CASE\n      WHEN t1.platform = '' THEN 'Unknown'\n      WHEN t1.platform = 'aarch64-linux' THEN 'linux-aarch_64'\n      WHEN t1.platform = 'x86_64-linux' THEN 'linux-x86_64'\n      WHEN t1.platform = 'x86_64-windows' THEN 'windows-x86_64'\n      ELSE t1.platform\n  END AS platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN {{ ref('stg_crawlers_data__ipinfo') }} AS t2\n  ON t2.ip = t1.ip", "language": "sql", "refs": [{"name": "stg_nebula_discv5__visits", "package": null, "version": null}, {"name": "stg_crawlers_data__ipinfo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gnosis_dbt.apply_monthly_incremental_filter"], "nodes": ["model.gnosis_dbt.stg_nebula_discv5__visits", "model.gnosis_dbt.stg_crawlers_data__ipinfo"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/intermediate/int_p2p_discv5_peers.sql", "compiled": true, "compiled_code": "\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.crawl_id,\n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.connect_maddr,\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM `dbt`.`stg_nebula_discv5__visits` AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv5_peers`\n    )\n  \n\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n),\n\nbasic_info AS (\n  SELECT\n    crawl_id,\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    fork_digest,\n    cl_fork_name,\n    cl_next_fork_name,\n    next_fork_version,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n    IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n    )                                                                          AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.crawl_id,\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.fork_digest,\n  t1.cl_fork_name,\n  t1.cl_next_fork_name,\n  t1.next_fork_version,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  CASE\n      WHEN t1.platform = '' THEN 'Unknown'\n      WHEN t1.platform = 'aarch64-linux' THEN 'linux-aarch_64'\n      WHEN t1.platform = 'x86_64-linux' THEN 'linux-x86_64'\n      WHEN t1.platform = 'x86_64-windows' THEN 'windows-x86_64'\n      ELSE t1.platform\n  END AS platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv5_clients_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv5_clients_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv5_clients_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_discv5_clients_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv5_clients_latest"], "alias": "api_p2p_discv5_clients_latest", "checksum": {"name": "sha256", "checksum": "989357afe5af63b89bc7a97d7e86e144de1154bdbe2eb93397e21d79f8c71ff7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "clients", "production", "p2p", "discv5", "clients"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv5", "clients"], "description": "A view summarizing the latest P2P Discv5 client metrics, including labels and values, filtered to the most recent date.", "columns": {"label": {"name": "label", "description": "Client label or identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "Metric name associated with the client.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv5", "clients"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3390734, "relation_name": "`dbt`.`api_p2p_discv5_clients_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv5','clients']\n    ) \n}}\n\nSELECT\n    metric\n    ,label\n    ,value\nFROM {{ ref('int_p2p_discv5_clients_daily') }}\nWHERE date = (SELECT MAX(date) FROM  {{ ref('int_p2p_discv5_clients_daily') }} )\nORDER BY metric, label", "language": "sql", "refs": [{"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv5_clients_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv5_clients_daily` )\nORDER BY metric, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv5_next_fork_daily": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv5_next_fork_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv5_next_fork_daily.sql", "original_file_path": "models/p2p/marts/api_p2p_discv5_next_fork_daily.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv5_next_fork_daily", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv5_next_fork_daily"], "alias": "api_p2p_discv5_next_fork_daily", "checksum": {"name": "sha256", "checksum": "5ffd0842a8d496ec15a033b38d995715494d6f3d16d234ddc828aa7129120c09"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "forks", "production", "p2p", "discv4", "forks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4", "forks"], "description": "Daily count of the next fork in the Discv5 P2P network, filtered by label 'Next Fork' and ordered by date and fork.", "columns": {"date": {"name": "date", "description": "The date of the record, in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork": {"name": "fork", "description": "Identifier of the fork.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences for the specific fork on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv4", "forks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3172889, "relation_name": "`dbt`.`api_p2p_discv5_next_fork_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv4','forks']\n    ) \n}}\n\n\nSELECT\n    date\n    ,fork\n    ,cnt\nFROM {{ ref('int_p2p_discv5_forks_daily') }}\nWHERE label = 'Next Fork' \nORDER BY date ASC, fork ASC", "language": "sql", "refs": [{"name": "int_p2p_discv5_forks_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv5_next_fork_daily.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Next Fork' \nORDER BY date ASC, fork ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_topology_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_topology_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_topology_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_topology_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_topology_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_topology_latest"], "alias": "api_p2p_topology_latest", "checksum": {"name": "sha256", "checksum": "815dcfc7ed2f1bdcbc0897f9c4ef637a6b55dc028be7e5ae8bc4e7e3473ea147"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "topology", "production", "p2p", "topology"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "topology"], "description": "View containing the latest P2P topology data with peer and neighbor details, filtered for valid latitude entries.", "columns": {"protocol": {"name": "protocol", "description": "Protocol used in the P2P connection.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "Date of the topology snapshot.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Unique prefix identifying the peer discovery.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_client": {"name": "peer_client", "description": "Client software used by the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City where the peer is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country where the peer is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lat": {"name": "peer_lat", "description": "Latitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lon": {"name": "peer_lon", "description": "Longitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Unique prefix identifying the neighbor discovery.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_client": {"name": "neighbor_client", "description": "Client software used by the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_city": {"name": "neighbor_city", "description": "City where the neighbor is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_country": {"name": "neighbor_country", "description": "Country where the neighbor is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_org": {"name": "neighbor_org", "description": "Organization associated with the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lat": {"name": "neighbor_lat", "description": "Latitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lon": {"name": "neighbor_lon", "description": "Longitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences or connections.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "p2p", "topology"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3426046, "relation_name": "`dbt`.`api_p2p_topology_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','topology']\n    )\n}}\n\nSELECT\n    protocol,\n    date,\n    peer_discovery_id_prefix,\n    peer_client,\n    peer_city,\n    peer_country,\n    peer_org,\n    peer_lat,\n    peer_lon,\n    neighbor_discovery_id_prefix,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    neighbor_lat,\n    neighbor_lon,\n    cnt\nFROM dbt.fct_p2p_topology_latest\nWHERE peer_lat != '' AND neighbor_lat != ''\nORDER BY protocol DESC", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_topology_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    protocol,\n    date,\n    peer_discovery_id_prefix,\n    peer_client,\n    peer_city,\n    peer_country,\n    peer_org,\n    peer_lat,\n    peer_lon,\n    neighbor_discovery_id_prefix,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    neighbor_lat,\n    neighbor_lon,\n    cnt\nFROM dbt.fct_p2p_topology_latest\nWHERE peer_lat != '' AND neighbor_lat != ''\nORDER BY protocol DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv5_clients_daily": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv5_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv5_clients_daily.sql", "original_file_path": "models/p2p/marts/api_p2p_discv5_clients_daily.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_daily", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv5_clients_daily"], "alias": "api_p2p_discv5_clients_daily", "checksum": {"name": "sha256", "checksum": "eb32f9d0b11022065e548c97b782ab02e7b07c5943058837d8391b0c20c11ed5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "clients", "production", "p2p", "discv5", "clients"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv5", "clients"], "description": "Daily metrics for P2P Discv5 clients, including date, metric, label, and value.", "columns": {"date": {"name": "date", "description": "The date of the metrics in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "The name of the metric being recorded.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "The label associated with the metric, e.g., client version or network.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The numeric value of the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5", "clients"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.311192, "relation_name": "`dbt`.`api_p2p_discv5_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv5','clients']\n    ) \n}}\n\nSELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM {{ ref('int_p2p_discv5_clients_daily') }}\nWHERE date < today()\nORDER BY date, metric, label", "language": "sql", "refs": [{"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv5_clients_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_clients_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_clients_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_clients_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_clients_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_clients_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_clients_latest"], "alias": "api_p2p_clients_latest", "checksum": {"name": "sha256", "checksum": "5b455f195c9e377661a6921c6f50e0c927a878dee922b10bbe054895cdbae043"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "clients", "production", "p2p", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "clients"], "description": "A view aggregating the latest P2P client counts and percentage changes for Discv4 and Discv5 metrics based on daily client data.", "columns": {"discv4_count": {"name": "discv4_count", "description": "Total number of Discv4 clients for the latest date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_discv4_pct": {"name": "change_discv4_pct", "description": "Percentage change in Discv4 clients compared to 7 days prior, rounded to 1 decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv5_count": {"name": "discv5_count", "description": "Total number of Discv5 clients for the latest date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_discv5_pct": {"name": "change_discv5_pct", "description": "Percentage change in Discv5 clients compared to 7 days prior, rounded to 1 decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "access": "public", "tags": ["production", "p2p", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3326278, "relation_name": "`dbt`.`api_p2p_clients_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','clients']\n    ) \n}}\n\nWITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM {{ ref('int_p2p_discv4_clients_daily') }}\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_p2p_discv4_clients_daily') }}), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM {{ ref('int_p2p_discv4_clients_daily') }}\n    WHERE \n        date = (SELECT MAX(date) FROM {{ ref('int_p2p_discv4_clients_daily') }})\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM {{ ref('int_p2p_discv5_clients_daily') }}\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_p2p_discv5_clients_daily') }}), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM {{ ref('int_p2p_discv5_clients_daily') }}\n    WHERE \n        date = (SELECT MAX(date) FROM {{ ref('int_p2p_discv5_clients_daily') }})\n        AND metric = 'Clients'\n    GROUP BY date\n)\n\nSELECT\n    t2.discv4_count AS discv4_count,\n    ROUND((COALESCE(t2.discv4_count / NULLIF(t1.discv4_count, 0), 0) - 1) * 100, 1) AS change_discv4_pct,\n    t4.discv5_count AS discv5_count,\n    ROUND((COALESCE(t4.discv5_count / NULLIF(t3.discv5_count, 0), 0) - 1) * 100, 1) AS change_discv5_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "language": "sql", "refs": [{"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_clients_daily", "model.gnosis_dbt.int_p2p_discv5_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_clients_latest.sql", "compiled": true, "compiled_code": "\n\nWITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n)\n\nSELECT\n    t2.discv4_count AS discv4_count,\n    ROUND((COALESCE(t2.discv4_count / NULLIF(t1.discv4_count, 0), 0) - 1) * 100, 1) AS change_discv4_pct,\n    t4.discv5_count AS discv5_count,\n    ROUND((COALESCE(t4.discv5_count / NULLIF(t3.discv5_count, 0), 0) - 1) * 100, 1) AS change_discv5_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_visits_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_visits_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_visits_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_visits_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_visits_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_visits_latest"], "alias": "api_p2p_visits_latest", "checksum": {"name": "sha256", "checksum": "c4e11483a803516427f146b50f074e60ac8491d164cba3220e1c7799c0c3720a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "discv5", "production", "p2p", "discv4", "discv5", "visits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4", "discv5", "visits"], "description": "View aggregating latest P2P visit data, including counts and percentage success metrics for Discv4 and Discv5 crawls.", "columns": {"discv4_total_visits": {"name": "discv4_total_visits", "description": "Total number of visits recorded in the latest Discv4 crawl.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv4_pct_successful": {"name": "discv4_pct_successful", "description": "Percentage of successful visits in the latest Discv4 crawl, rounded to one decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv4_crawls": {"name": "discv4_crawls", "description": "Number of crawls in the latest Discv4 dataset.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_discv4_crawls_pct": {"name": "change_discv4_crawls_pct", "description": "Percentage change in crawls compared to the previous 7 days for Discv4.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv5_total_visits": {"name": "discv5_total_visits", "description": "Total number of visits recorded in the latest Discv5 crawl.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv5_pct_successful": {"name": "discv5_pct_successful", "description": "Percentage of successful visits in the latest Discv5 crawl, rounded to one decimal.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "discv5_crawls": {"name": "discv5_crawls", "description": "Number of crawls in the latest Discv5 dataset.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_discv5_crawls_pct": {"name": "change_discv5_crawls_pct", "description": "Percentage change in crawls compared to the previous 7 days for Discv5.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv4", "discv5", "visits"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3476057, "relation_name": "`dbt`.`api_p2p_visits_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv4','discv5','visits']\n    ) \n}}\n\nWITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM {{ ref('int_p2p_discv4_visits_daily') }}\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_p2p_discv4_visits_daily') }}), 7)\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM {{ ref('int_p2p_discv4_visits_daily') }}\n    WHERE \n        date = (SELECT MAX(date) FROM {{ ref('int_p2p_discv4_visits_daily') }})\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM {{ ref('int_p2p_discv5_visits_daily') }}\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM {{ ref('int_p2p_discv5_visits_daily') }}), 7)\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM {{ ref('int_p2p_discv5_visits_daily') }}\n    WHERE \n        date = (SELECT MAX(date) FROM {{ ref('int_p2p_discv5_visits_daily') }})\n)\n\nSELECT\n    t2.total_visits AS discv4_total_visits,\n    t2.pct_successful AS discv4_pct_successful,\n    t2.crawls AS discv4_crawls,\n    ROUND((COALESCE(t2.crawls / NULLIF(t1.crawls, 0), 0) - 1) * 100, 1) AS change_discv4_crawls_pct,\n    t4.total_visits AS discv5_total_visits,\n    t4.pct_successful AS discv5_pct_successful,\n    t4.crawls AS discv5_crawls,\n    ROUND((COALESCE(t4.crawls / NULLIF(t3.crawls, 0), 0) - 1) * 100, 1) AS change_discv5_crawls_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "language": "sql", "refs": [{"name": "int_p2p_discv4_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_visits_daily", "package": null, "version": null}, {"name": "int_p2p_discv5_visits_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_visits_daily", "model.gnosis_dbt.int_p2p_discv5_visits_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_visits_latest.sql", "compiled": true, "compiled_code": "\n\nWITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`), 7)\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`)\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`), 7)\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`)\n)\n\nSELECT\n    t2.total_visits AS discv4_total_visits,\n    t2.pct_successful AS discv4_pct_successful,\n    t2.crawls AS discv4_crawls,\n    ROUND((COALESCE(t2.crawls / NULLIF(t1.crawls, 0), 0) - 1) * 100, 1) AS change_discv4_crawls_pct,\n    t4.total_visits AS discv5_total_visits,\n    t4.pct_successful AS discv5_pct_successful,\n    t4.crawls AS discv5_crawls,\n    ROUND((COALESCE(t4.crawls / NULLIF(t3.crawls, 0), 0) - 1) * 100, 1) AS change_discv5_crawls_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv4_clients_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv4_clients_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv4_clients_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_discv4_clients_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv4_clients_latest"], "alias": "api_p2p_discv4_clients_latest", "checksum": {"name": "sha256", "checksum": "b8dc3d4430f39b6aff3b20502ec300c494f08d0aa58247a1cd908b529598f658"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "clients", "production", "p2p", "discv4", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4", "clients"], "description": "A view aggregating the latest P2P Discv4 client metrics, including labels and values, filtered for the most recent date.", "columns": {"label": {"name": "label", "description": "Client label or identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "Metric name associated with the client.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the metric for the client.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv4", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3369913, "relation_name": "`dbt`.`api_p2p_discv4_clients_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv4','clients']\n    ) \n}}\n\nSELECT\n    metric\n    ,label\n    ,value\nFROM {{ ref('int_p2p_discv4_clients_daily') }}\nWHERE date = (SELECT MAX(date) FROM  {{ ref('int_p2p_discv4_clients_daily') }} )\nORDER BY metric, label", "language": "sql", "refs": [{"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}, {"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv4_clients_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv4_clients_daily` )\nORDER BY metric, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv5_topology_latest": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv5_topology_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv5_topology_latest.sql", "original_file_path": "models/p2p/marts/api_p2p_discv5_topology_latest.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv5_topology_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv5_topology_latest"], "alias": "api_p2p_discv5_topology_latest", "checksum": {"name": "sha256", "checksum": "2d113579b5440f45842828530c0532f3916736fb4f96562b692d0579702c7a8e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv5", "production", "p2p", "discv5"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET enable_dynamic_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv5"], "description": "View containing the latest topology data from the Discv5 P2P network crawl, including peer and neighbor details, geographic info, and connection counts.", "columns": {"date": {"name": "date", "description": "Date of the topology snapshot.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_ip": {"name": "peer_ip", "description": "IP address of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Unique identifier prefix for the peer discovery ID.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_cl_fork_name": {"name": "peer_cl_fork_name", "description": "Client fork name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_cl_next_fork_name": {"name": "peer_cl_next_fork_name", "description": "Next client fork name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_client": {"name": "peer_client", "description": "Client software name of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Hostname of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City location of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lat": {"name": "peer_lat", "description": "Latitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lon": {"name": "peer_lon", "description": "Longitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_ip": {"name": "neighbor_ip", "description": "IP address of the neighbor peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Unique identifier prefix for the neighbor discovery ID.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_cl_fork_name": {"name": "neighbor_cl_fork_name", "description": "Client fork name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_cl_next_fork_name": {"name": "neighbor_cl_next_fork_name", "description": "Next client fork name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_client": {"name": "neighbor_client", "description": "Client software name of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_city": {"name": "neighbor_city", "description": "City location of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_country": {"name": "neighbor_country", "description": "Country of the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_org": {"name": "neighbor_org", "description": "Organization associated with the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lat": {"name": "neighbor_lat", "description": "Latitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lon": {"name": "neighbor_lon", "description": "Longitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of connections or occurrences.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "discv5"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET enable_dynamic_type = 1"]}, "created_at": 1760535478.324656, "relation_name": "`dbt`.`api_p2p_discv5_topology_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        pre_hook=[\n            \"SET enable_dynamic_type = 1\"\n        ],\n        tags=['production','p2p','discv5']\n    )\n}}\n\nSELECT\n    date,\n    peer_ip,\n    peer_discovery_id_prefix,\n    peer_cl_fork_name,\n    peer_cl_next_fork_name,\n    peer_client,\n    peer_hostname,\n    peer_city,\n    peer_country,\n    peer_org,\n    splitByChar(',', peer_loc)[1] AS peer_lat,\n    splitByChar(',', peer_loc)[2] AS peer_lon,\n    neighbor_ip,\n    neighbor_discovery_id_prefix,\n    neighbor_cl_fork_name,\n    neighbor_cl_next_fork_name,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n    splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n    cnt\nFROM  {{ ref('int_p2p_discv5_topology_latest') }}", "language": "sql", "refs": [{"name": "int_p2p_discv5_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_topology_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv5_topology_latest.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    peer_ip,\n    peer_discovery_id_prefix,\n    peer_cl_fork_name,\n    peer_cl_next_fork_name,\n    peer_client,\n    peer_hostname,\n    peer_city,\n    peer_country,\n    peer_org,\n    splitByChar(',', peer_loc)[1] AS peer_lat,\n    splitByChar(',', peer_loc)[2] AS peer_lon,\n    neighbor_ip,\n    neighbor_discovery_id_prefix,\n    neighbor_cl_fork_name,\n    neighbor_cl_next_fork_name,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n    splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n    cnt\nFROM  `dbt`.`int_p2p_discv5_topology_latest`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_p2p_discv5_forks_daily": {"database": "dbt", "schema": "dbt", "name": "fct_p2p_discv5_forks_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/fct_p2p_discv5_forks_daily.sql", "original_file_path": "models/p2p/marts/fct_p2p_discv5_forks_daily.sql", "unique_id": "model.gnosis_dbt.fct_p2p_discv5_forks_daily", "fqn": ["gnosis_dbt", "p2p", "marts", "fct_p2p_discv5_forks_daily"], "alias": "fct_p2p_discv5_forks_daily", "checksum": {"name": "sha256", "checksum": "48f0d6bde4c72ccd6e3b9188a1cbabb77904173b860dff3e757b7dcf3864d286"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["analytics", "discv5"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["analytics", "discv5"], "description": "Daily count of Discv5 forks identified, aggregated by date, fork, and label.", "columns": {"date": {"name": "date", "description": "Date of the record in YYYY-MM-DD format.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label categorizing the fork type or status.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork": {"name": "fork", "description": "Identifier for the specific fork.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of forks observed on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["analytics", "discv5"], "materialized": "table", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3271012, "relation_name": "`dbt`.`fct_p2p_discv5_forks_daily`", "raw_code": "SELECT\n    date\n    ,label\n    ,fork\n    ,cnt\nFROM {{ ref('int_p2p_discv5_forks_daily') }}", "language": "sql", "refs": [{"name": "int_p2p_discv5_forks_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/fct_p2p_discv5_forks_daily.sql", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.fct_p2p_topology_latest": {"database": "dbt", "schema": "dbt", "name": "fct_p2p_topology_latest", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/fct_p2p_topology_latest.sql", "original_file_path": "models/p2p/marts/fct_p2p_topology_latest.sql", "unique_id": "model.gnosis_dbt.fct_p2p_topology_latest", "fqn": ["gnosis_dbt", "p2p", "marts", "fct_p2p_topology_latest"], "alias": "fct_p2p_topology_latest", "checksum": {"name": "sha256", "checksum": "138a6478e550e176a266c278430c6e535bc3186d1820d85116dcd50051420c10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "topology", "production", "p2p", "topology"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "SET enable_dynamic_type = 1", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "topology"], "description": "Aggregated topology data combining DiscV4 and DiscV5 protocols, including peer and neighbor details with geographic coordinates.", "columns": {"protocol": {"name": "protocol", "description": "Protocol identifier indicating the topology source ('DiscV4' or 'DiscV5').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date": {"name": "date", "description": "Date of the topology record.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_ip": {"name": "peer_ip", "description": "IP address of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "Numeric prefix used for peer discovery identification.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_client": {"name": "peer_client", "description": "Client software used by the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_hostname": {"name": "peer_hostname", "description": "Hostname of the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_city": {"name": "peer_city", "description": "City where the peer is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_country": {"name": "peer_country", "description": "Country where the peer is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_org": {"name": "peer_org", "description": "Organization associated with the peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lat": {"name": "peer_lat", "description": "Latitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_lon": {"name": "peer_lon", "description": "Longitude coordinate of the peer's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_ip": {"name": "neighbor_ip", "description": "IP address of the neighbor peer.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "Numeric prefix used for neighbor discovery identification.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_client": {"name": "neighbor_client", "description": "Client software used by the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_city": {"name": "neighbor_city", "description": "City where the neighbor is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_country": {"name": "neighbor_country", "description": "Country where the neighbor is located.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_org": {"name": "neighbor_org", "description": "Organization associated with the neighbor.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lat": {"name": "neighbor_lat", "description": "Latitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_lon": {"name": "neighbor_lon", "description": "Longitude coordinate of the neighbor's location.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences or connections.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "p2p", "topology"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "pre-hook": ["SET enable_dynamic_type = 1"]}, "created_at": 1760535478.3527195, "relation_name": "`dbt`.`fct_p2p_topology_latest`", "raw_code": "{{ \n    config(\n        materialized='view',\n        pre_hook=[\n            \"SET enable_dynamic_type = 1\"\n        ],\n        tags=['production','p2p','topology']\n    )\n}}\n\nWITH\n\ndiscv4_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM {{ ref('int_p2p_discv4_topology_latest') }}\n),\n\ndiscv5_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM {{ ref('int_p2p_discv5_topology_latest') }}\n)\n\nSELECT 'DiscV4' AS protocol, * FROM discv4_topology\nUNION ALL\nSELECT 'DiscV5' AS protocol, * FROM discv5_topology", "language": "sql", "refs": [{"name": "int_p2p_discv4_topology_latest", "package": null, "version": null}, {"name": "int_p2p_discv5_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_topology_latest", "model.gnosis_dbt.int_p2p_discv5_topology_latest"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/fct_p2p_topology_latest.sql", "compiled": true, "compiled_code": "\n\nWITH\n\ndiscv4_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv4_topology_latest`\n),\n\ndiscv5_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv5_topology_latest`\n)\n\nSELECT 'DiscV4' AS protocol, * FROM discv4_topology\nUNION ALL\nSELECT 'DiscV5' AS protocol, * FROM discv5_topology", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv5_current_fork_daily": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv5_current_fork_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv5_current_fork_daily.sql", "original_file_path": "models/p2p/marts/api_p2p_discv5_current_fork_daily.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv5_current_fork_daily", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv5_current_fork_daily"], "alias": "api_p2p_discv5_current_fork_daily", "checksum": {"name": "sha256", "checksum": "0dadb5b11435bf1ab6a5d010a4d53fff8857600bae831be93f5023470f28b148"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "forks", "production", "p2p", "discv4", "forks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4", "forks"], "description": "Daily count of current forks in the Discv5 network, filtered by label 'Current Fork'.", "columns": {"date": {"name": "date", "description": "Date of the record in YYYY-MM-DD format.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fork": {"name": "fork", "description": "Identifier of the fork; string representing fork version or hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cnt": {"name": "cnt", "description": "Count of occurrences for the specific fork on the given date.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv4", "forks"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3132918, "relation_name": "`dbt`.`api_p2p_discv5_current_fork_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv4','forks']\n    ) \n}}\n\nSELECT\n    date\n    ,fork\n    ,cnt\nFROM {{ ref('int_p2p_discv5_forks_daily') }}\nWHERE label = 'Current Fork' \nORDER BY date ASC, fork ASC", "language": "sql", "refs": [{"name": "int_p2p_discv5_forks_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv5_current_fork_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Current Fork' \nORDER BY date ASC, fork ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_p2p_discv4_clients_daily": {"database": "dbt", "schema": "dbt", "name": "api_p2p_discv4_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "p2p/marts/api_p2p_discv4_clients_daily.sql", "original_file_path": "models/p2p/marts/api_p2p_discv4_clients_daily.sql", "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_daily", "fqn": ["gnosis_dbt", "p2p", "marts", "api_p2p_discv4_clients_daily"], "alias": "api_p2p_discv4_clients_daily", "checksum": {"name": "sha256", "checksum": "73956cd43b584fc526d7efafcb3efcb4179dd302f917698a26d9eac14cc31e53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "p2p", "discv4", "clients", "production", "p2p", "discv4", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "p2p", "discv4", "clients"], "description": "Daily metrics data for P2P Discv4 clients, including date, metric, label, and value.", "columns": {"date": {"name": "date", "description": "Date of the metrics record (YYYY-MM-DD).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metric": {"name": "metric", "description": "Name of the metric being recorded.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label": {"name": "label", "description": "Label associated with the metric, e.g., client version or network.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the metric.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/p2p/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "p2p", "discv4", "clients"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.3347764, "relation_name": "`dbt`.`api_p2p_discv4_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','p2p','discv4','clients']\n    ) \n}}\n\nSELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM {{ ref('int_p2p_discv4_clients_daily') }}\nWHERE date < today()\nORDER BY date, metric, label", "language": "sql", "refs": [{"name": "int_p2p_discv4_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.int_p2p_discv4_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/p2p/marts/api_p2p_discv4_clients_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__dune_prices": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__dune_prices", "resource_type": "model", "package_name": "gnosis_dbt", "path": "crawlers_data/staging/stg_crawlers_data__dune_prices.sql", "original_file_path": "models/crawlers_data/staging/stg_crawlers_data__dune_prices.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__dune_prices", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "stg_crawlers_data__dune_prices"], "alias": "stg_crawlers_data__dune_prices", "checksum": {"name": "sha256", "checksum": "17f14a5bc1caab6f9d5eff5932553d6b616a25b439f2aad344bc9cc14428b19f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "crawlers_data"], "meta": {"owner": "analytics", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["staging", "crawlers_data"], "description": "Daily token prices per symbol from the Dune crawler (generic per-token table).", "columns": {"date": {"name": "date", "description": "Date (UTC) for the price snapshot.", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "symbol": {"name": "symbol", "description": "Uppercased token symbol.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Latest observed price for the token on that day.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/crawlers_data/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": "analytics", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["staging", "crawlers_data"]}, "created_at": 1760535478.3928947, "relation_name": "`dbt`.`stg_crawlers_data__dune_prices`", "raw_code": "{{\n  config(\n    materialized='view', \n    tags=['staging','crawlers_data']\n  )\n}}\n\nSELECT\n  toDate(block_date)                    AS date,\n  upper(symbol)                         AS symbol,\n  anyLast(toFloat64(price))             AS price   \nFROM {{ source('crawlers_data','dune_prices') }}\nGROUP BY date, symbol\nORDER BY date, symbol", "language": "sql", "refs": [], "sources": [["crawlers_data", "dune_prices"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/stg_crawlers_data__dune_prices.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  toDate(block_date)                    AS date,\n  upper(symbol)                         AS symbol,\n  anyLast(toFloat64(price))             AS price   \nFROM `crawlers_data`.`dune_prices`\nGROUP BY date, symbol\nORDER BY date, symbol", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["date", "symbol"], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__dune_labels": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__dune_labels", "resource_type": "model", "package_name": "gnosis_dbt", "path": "crawlers_data/staging/stg_crawlers_data__dune_labels.sql", "original_file_path": "models/crawlers_data/staging/stg_crawlers_data__dune_labels.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__dune_labels", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "stg_crawlers_data__dune_labels"], "alias": "stg_crawlers_data__dune_labels", "checksum": {"name": "sha256", "checksum": "0304e3fd0bcbb34026e81da88404af2ac37f1f26eb3ae917f791784d24f01994"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging", "crawlers_data"], "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["staging", "crawlers_data"], "description": "(helpful, business-facing; use a folded block scalar `>`; no blank lines)", "columns": {"label": {"name": "label", "description": "concise", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "concise", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "introduced_at": {"name": "introduced_at", "description": "concise", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "label_raw": {"name": "label_raw", "description": "concise", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/crawlers_data/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "meta": {"owner": null, "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view", "tags": ["staging", "crawlers_data"]}, "created_at": 1760535478.3903642, "relation_name": "`dbt`.`stg_crawlers_data__dune_labels`", "raw_code": "{{\n  config(\n    materialized='view',\n    tags=['staging','crawlers_data']\n  )\n}}\n\n\nWITH latest AS (\n  SELECT\n    lower(address) AS address,\n    argMax( (label, introduced_at), (introduced_at, label) ) AS agg\n  FROM {{ source('crawlers_data','dune_labels') }}\n  GROUP BY address\n),\n\nclean AS (\n  SELECT\n    address,\n    tupleElement(agg, 1) AS label_raw,\n    tupleElement(agg, 2) AS introduced_at,\n\n    trim(replaceRegexpAll(tupleElement(agg, 1), '\\\\s*([:/|>])\\\\s*', '\\\\1'))                           AS s1,\n\n    replaceRegexpAll(\n      replaceRegexpAll(s1, '_0x[0-9a-fA-F]{40}$', ''),\n      '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$',\n      ''\n    )                                                                                                AS s2,\n\n    trim(extract(s2, '^([^:/|>]+)'))                                                                 AS s3,\n\n    trim(replaceRegexpAll(s3, '(?:\\\\s*[-_ ]?[Vv]\\\\d+(?:[._-]\\\\d+)*)\\\\b', ''))                        AS s4,\n\n    lowerUTF8(s4)                                                                                    AS s4_l,\n\n    (\n      match(s1, '_0x[0-9a-fA-F]{40}$')\n      OR match(s1, '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$')\n    )                                                                                                AS looks_like_token_tail\n  FROM latest\n),\n\nwl AS (\n  SELECT\n    lower(address) AS address,\n    symbol\n  FROM {{ ref('tokens_whitelist') }}\n),\n\nbucketed AS (\n \n  SELECT\n    c.address,\n    c.label_raw,\n    c.introduced_at,\n    c.s4,\n    c.s4_l,\n    c.looks_like_token_tail,\n    w.symbol AS wl_symbol,\n\n    coalesce(\n      if(c.looks_like_token_tail,\n         if(w.symbol IS NOT NULL, w.symbol, 'ERC20'),\n         NULL\n      ),\n\n      multiIf(\n        match(c.s4_l, '^(realtoken|realtokens)\\\\b'),              'REALTOKEN',\n        match(lowerUTF8(c.label_raw), '(^|[^a-z0-9])gnosis[\\\\s_-]*safe(?:l2)?([^a-z0-9]|$)') OR match(c.s4_l, '^(safe(?:l2)?)\\\\b'), 'Safe',\n\n        match(c.s4_l, '(^|[^a-z])balancer([^a-z]|$)'),            'Balancer',\n        match(c.s4_l, '(^|[-_])gaug(e)?(\\\\b|_)'),                 'Balancer',\n        match(c.s4_l, '\\\\b\\\\d{1,3}%[a-z0-9._-]+'),                'Balancer',\n        match(c.s4_l, '\\\\b(w?moo)[a-z0-9]*balancer'),             'Balancer',\n\n        match(c.s4_l, '(^|[^a-z])curve([^a-z]|$)'),               'Curve',\n        match(c.s4_l, '^(yv\\\\s*curve|yvcurve|y\\\\s*curve|ycurve)'), 'Curve',\n        match(c.s4_l, '^curvefi\\\\b'),                             'Curve',\n\n        match(c.s4_l, '\\\\buniswap\\\\b'),                           'Uniswap',\n        match(c.s4_l, '\\\\buni[- _]?v?3\\\\b'),                      'Uniswap',\n        match(c.s4_l, '\\\\buni[- _]?v?2\\\\b'),                      'Uniswap',\n        match(c.s4_l, '\\\\bnonfungiblepositionmanager\\\\b'),        'Uniswap',\n        match(c.s4_l, '\\\\bpositions?\\\\s*nft\\\\b'),                 'Uniswap',\n        match(c.s4_l, '\\\\b(rcow|cow|moo\\\\w*)\\\\s*uniswap'),        'Uniswap',\n\n        match(c.s4_l, 'sushi'),                                   'Sushi',\n\n        match(c.s4_l, '\\\\bswapr\\\\b'),                             'Swapr',\n        match(c.s4_l, '^swaprv?3\\\\b'),                            'Swapr',\n        match(c.s4_l, '\\\\bswpr\\\\b'),                              'Swapr',\n\n        match(c.s4_l, '\\\\bcow\\\\s*swap\\\\b|\\\\bcow[_\\\\s-]?protocol\\\\b|^b_cow_amm\\\\b'), 'CowSwap',\n        match(c.s4_l, '^aave\\\\b'),                                'Aave',\n        match(c.s4_l, '\\\\baave\\\\s*v?2\\\\b|\\\\baave\\\\s*v?3\\\\b'),     'Aave',\n        match(c.s4_l, '^aavepool\\\\b'),                            'Aave',\n\n        c.s4\n      )\n    ) AS s5\n  FROM clean c\n  LEFT JOIN wl w\n    ON c.address = w.address\n),\n\ntidy AS (\n  SELECT\n    address,\n    label_raw,\n    introduced_at,\n    trim(\n      replaceRegexpAll(\n        replaceRegexpAll(\n          replaceRegexpAll(\n            left(s5, length(\n              replaceRegexpAll(\n                lowerUTF8(s5),\n                '\\\\b(factory|router|vault|pool|implementation|proxy|token|bridge|aggregator|registry|controller|manager|oracle|staking|treasury|multisig|gnosis\\\\s*safe|deployer|fee\\\\s*collector|minter|burner|timelock|governor|council|rewards?|distributor|airdrop)s?\\\\s*$',\n                ''\n              )\n            )),\n            '\\\\s*\\\\([^)]*\\\\)\\\\s*$', ''\n          ),\n          '\\\\?+$', ''\n        ),\n        '[_\\\\s-]+', ' '\n      )\n    ) AS s7\n  FROM bucketed\n),\n\ncanon AS (\n  SELECT\n    address,\n    label_raw,\n    introduced_at,\n    s7,\n    multiIf(\n      match(lowerUTF8(s7), '^(aa\\\\s*entrypoint|erc-?4337\\\\s*entry\\\\s*point|entrypointsimulations|pimlicoentrypointsimulations)$'), 'ERC-4337 Entry Point',\n      match(lowerUTF8(s7), '^(uni|uni\\\\s*v?3\\\\s*swaprouter02)$'),                                      'Uniswap',\n      match(lowerUTF8(s7), '^(oneinch)$'),                                                             '1inch',\n      match(lowerUTF8(s7), '^layerzero$'),                                                             'LayerZero',\n      match(lowerUTF8(s7), '^(cowswap|b_cow_amm)$'),                                                   'CowSwap',\n      match(lowerUTF8(s7), '^angle(\\\\s+ageur)?$'),                                                     'Angle',\n      match(lowerUTF8(s7), '^sablier(\\\\s+.*)?$|^sablier\\\\s*flow\\\\b|^sablier\\\\s*lockup\\\\b'),            'Sablier',\n      match(lowerUTF8(s7), '^hats[_\\\\s-]?protocol'),                                                   'Hats Protocol',\n      match(lowerUTF8(s7), '^seaport\\\\??$'),                                                           'Seaport',\n      match(lowerUTF8(s7), '^poap(\\\\s+top)?$'),                                                        'POAP',\n      match(lowerUTF8(s7), '^merkly(\\\\s+onft)?$'),                                                     'Merkly',\n      match(lowerUTF8(s7), '^circles(\\\\s*ubi)?$'),                                                     'Circles',\n      match(lowerUTF8(s7), '^(hop|hop\\\\s*protocol)$'),                                                 'Hop Protocol',\n      match(lowerUTF8(s7), '^opensea$'),                                                               'OpenSea',\n      match(lowerUTF8(s7), '^paraswap$'),                                                              'ParaSwap',\n      match(lowerUTF8(s7), '^realt(oken)?(\\\\s*money\\\\s*market)?$|^realtoken\\\\s*dao$|^realtyam$|^real_rmm$'), 'REALTOKEN',\n      match(lowerUTF8(s7), '^nulladdress$|^burn\\\\s*address$'),                                         'Null/Burn',\n      match(lowerUTF8(s7), '^eoa$'),                                                                   'EOA',\n      match(lowerUTF8(s7), '^proxyadmin$|^transparentupgradeableproxy$|^upgradeablecommunitytoken$|^contractaddressfeehelper$|^controllermodule$'), 'Infrastructure',\n      match(lowerUTF8(s7), '^unnamed$|^oracle\\\\?$|^dex\\\\s*aggregator\\\\?$|^\\\\?$'),                      'Unknown',\n      s7\n    ) AS project_canon\n  FROM tidy\n)\n\nSELECT\n  address,\n  if(\n    lengthUTF8(project_canon) = 0\n    OR positionCaseInsensitive(project_canon, '0x') > 0\n    OR match(label_raw, '_0x[0-9a-fA-F]{40}$')\n    OR match(label_raw, '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$'),\n    'ERC20',\n    project_canon\n  ) AS project,\n  label_raw AS project_raw,\n  introduced_at\nFROM canon", "language": "sql", "refs": [{"name": "tokens_whitelist", "package": null, "version": null}], "sources": [["crawlers_data", "dune_labels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.dune_labels", "seed.gnosis_dbt.tokens_whitelist"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/stg_crawlers_data__dune_labels.sql", "compiled": true, "compiled_code": "\n\n\nWITH latest AS (\n  SELECT\n    lower(address) AS address,\n    argMax( (label, introduced_at), (introduced_at, label) ) AS agg\n  FROM `crawlers_data`.`dune_labels`\n  GROUP BY address\n),\n\nclean AS (\n  SELECT\n    address,\n    tupleElement(agg, 1) AS label_raw,\n    tupleElement(agg, 2) AS introduced_at,\n\n    trim(replaceRegexpAll(tupleElement(agg, 1), '\\\\s*([:/|>])\\\\s*', '\\\\1'))                           AS s1,\n\n    replaceRegexpAll(\n      replaceRegexpAll(s1, '_0x[0-9a-fA-F]{40}$', ''),\n      '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$',\n      ''\n    )                                                                                                AS s2,\n\n    trim(extract(s2, '^([^:/|>]+)'))                                                                 AS s3,\n\n    trim(replaceRegexpAll(s3, '(?:\\\\s*[-_ ]?[Vv]\\\\d+(?:[._-]\\\\d+)*)\\\\b', ''))                        AS s4,\n\n    lowerUTF8(s4)                                                                                    AS s4_l,\n\n    (\n      match(s1, '_0x[0-9a-fA-F]{40}$')\n      OR match(s1, '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$')\n    )                                                                                                AS looks_like_token_tail\n  FROM latest\n),\n\nwl AS (\n  SELECT\n    lower(address) AS address,\n    symbol\n  FROM `dbt`.`tokens_whitelist`\n),\n\nbucketed AS (\n \n  SELECT\n    c.address,\n    c.label_raw,\n    c.introduced_at,\n    c.s4,\n    c.s4_l,\n    c.looks_like_token_tail,\n    w.symbol AS wl_symbol,\n\n    coalesce(\n      if(c.looks_like_token_tail,\n         if(w.symbol IS NOT NULL, w.symbol, 'ERC20'),\n         NULL\n      ),\n\n      multiIf(\n        match(c.s4_l, '^(realtoken|realtokens)\\\\b'),              'REALTOKEN',\n        match(lowerUTF8(c.label_raw), '(^|[^a-z0-9])gnosis[\\\\s_-]*safe(?:l2)?([^a-z0-9]|$)') OR match(c.s4_l, '^(safe(?:l2)?)\\\\b'), 'Safe',\n\n        match(c.s4_l, '(^|[^a-z])balancer([^a-z]|$)'),            'Balancer',\n        match(c.s4_l, '(^|[-_])gaug(e)?(\\\\b|_)'),                 'Balancer',\n        match(c.s4_l, '\\\\b\\\\d{1,3}%[a-z0-9._-]+'),                'Balancer',\n        match(c.s4_l, '\\\\b(w?moo)[a-z0-9]*balancer'),             'Balancer',\n\n        match(c.s4_l, '(^|[^a-z])curve([^a-z]|$)'),               'Curve',\n        match(c.s4_l, '^(yv\\\\s*curve|yvcurve|y\\\\s*curve|ycurve)'), 'Curve',\n        match(c.s4_l, '^curvefi\\\\b'),                             'Curve',\n\n        match(c.s4_l, '\\\\buniswap\\\\b'),                           'Uniswap',\n        match(c.s4_l, '\\\\buni[- _]?v?3\\\\b'),                      'Uniswap',\n        match(c.s4_l, '\\\\buni[- _]?v?2\\\\b'),                      'Uniswap',\n        match(c.s4_l, '\\\\bnonfungiblepositionmanager\\\\b'),        'Uniswap',\n        match(c.s4_l, '\\\\bpositions?\\\\s*nft\\\\b'),                 'Uniswap',\n        match(c.s4_l, '\\\\b(rcow|cow|moo\\\\w*)\\\\s*uniswap'),        'Uniswap',\n\n        match(c.s4_l, 'sushi'),                                   'Sushi',\n\n        match(c.s4_l, '\\\\bswapr\\\\b'),                             'Swapr',\n        match(c.s4_l, '^swaprv?3\\\\b'),                            'Swapr',\n        match(c.s4_l, '\\\\bswpr\\\\b'),                              'Swapr',\n\n        match(c.s4_l, '\\\\bcow\\\\s*swap\\\\b|\\\\bcow[_\\\\s-]?protocol\\\\b|^b_cow_amm\\\\b'), 'CowSwap',\n        match(c.s4_l, '^aave\\\\b'),                                'Aave',\n        match(c.s4_l, '\\\\baave\\\\s*v?2\\\\b|\\\\baave\\\\s*v?3\\\\b'),     'Aave',\n        match(c.s4_l, '^aavepool\\\\b'),                            'Aave',\n\n        c.s4\n      )\n    ) AS s5\n  FROM clean c\n  LEFT JOIN wl w\n    ON c.address = w.address\n),\n\ntidy AS (\n  SELECT\n    address,\n    label_raw,\n    introduced_at,\n    trim(\n      replaceRegexpAll(\n        replaceRegexpAll(\n          replaceRegexpAll(\n            left(s5, length(\n              replaceRegexpAll(\n                lowerUTF8(s5),\n                '\\\\b(factory|router|vault|pool|implementation|proxy|token|bridge|aggregator|registry|controller|manager|oracle|staking|treasury|multisig|gnosis\\\\s*safe|deployer|fee\\\\s*collector|minter|burner|timelock|governor|council|rewards?|distributor|airdrop)s?\\\\s*$',\n                ''\n              )\n            )),\n            '\\\\s*\\\\([^)]*\\\\)\\\\s*$', ''\n          ),\n          '\\\\?+$', ''\n        ),\n        '[_\\\\s-]+', ' '\n      )\n    ) AS s7\n  FROM bucketed\n),\n\ncanon AS (\n  SELECT\n    address,\n    label_raw,\n    introduced_at,\n    s7,\n    multiIf(\n      match(lowerUTF8(s7), '^(aa\\\\s*entrypoint|erc-?4337\\\\s*entry\\\\s*point|entrypointsimulations|pimlicoentrypointsimulations)$'), 'ERC-4337 Entry Point',\n      match(lowerUTF8(s7), '^(uni|uni\\\\s*v?3\\\\s*swaprouter02)$'),                                      'Uniswap',\n      match(lowerUTF8(s7), '^(oneinch)$'),                                                             '1inch',\n      match(lowerUTF8(s7), '^layerzero$'),                                                             'LayerZero',\n      match(lowerUTF8(s7), '^(cowswap|b_cow_amm)$'),                                                   'CowSwap',\n      match(lowerUTF8(s7), '^angle(\\\\s+ageur)?$'),                                                     'Angle',\n      match(lowerUTF8(s7), '^sablier(\\\\s+.*)?$|^sablier\\\\s*flow\\\\b|^sablier\\\\s*lockup\\\\b'),            'Sablier',\n      match(lowerUTF8(s7), '^hats[_\\\\s-]?protocol'),                                                   'Hats Protocol',\n      match(lowerUTF8(s7), '^seaport\\\\??$'),                                                           'Seaport',\n      match(lowerUTF8(s7), '^poap(\\\\s+top)?$'),                                                        'POAP',\n      match(lowerUTF8(s7), '^merkly(\\\\s+onft)?$'),                                                     'Merkly',\n      match(lowerUTF8(s7), '^circles(\\\\s*ubi)?$'),                                                     'Circles',\n      match(lowerUTF8(s7), '^(hop|hop\\\\s*protocol)$'),                                                 'Hop Protocol',\n      match(lowerUTF8(s7), '^opensea$'),                                                               'OpenSea',\n      match(lowerUTF8(s7), '^paraswap$'),                                                              'ParaSwap',\n      match(lowerUTF8(s7), '^realt(oken)?(\\\\s*money\\\\s*market)?$|^realtoken\\\\s*dao$|^realtyam$|^real_rmm$'), 'REALTOKEN',\n      match(lowerUTF8(s7), '^nulladdress$|^burn\\\\s*address$'),                                         'Null/Burn',\n      match(lowerUTF8(s7), '^eoa$'),                                                                   'EOA',\n      match(lowerUTF8(s7), '^proxyadmin$|^transparentupgradeableproxy$|^upgradeablecommunitytoken$|^contractaddressfeehelper$|^controllermodule$'), 'Infrastructure',\n      match(lowerUTF8(s7), '^unnamed$|^oracle\\\\?$|^dex\\\\s*aggregator\\\\?$|^\\\\?$'),                      'Unknown',\n      s7\n    ) AS project_canon\n  FROM tidy\n)\n\nSELECT\n  address,\n  if(\n    lengthUTF8(project_canon) = 0\n    OR positionCaseInsensitive(project_canon, '0x') > 0\n    OR match(label_raw, '_0x[0-9a-fA-F]{40}$')\n    OR match(label_raw, '_0x[0-9a-fA-F]{1,}\u2026[0-9a-fA-F]{1,}$'),\n    'ERC20',\n    project_canon\n  ) AS project,\n  label_raw AS project_raw,\n  introduced_at\nFROM canon", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.int_crawlers_data_labels": {"database": "dbt", "schema": "dbt", "name": "int_crawlers_data_labels", "resource_type": "model", "package_name": "gnosis_dbt", "path": "crawlers_data/intermediate/int_crawlers_data_labels.sql", "original_file_path": "models/crawlers_data/intermediate/int_crawlers_data_labels.sql", "unique_id": "model.gnosis_dbt.int_crawlers_data_labels", "fqn": ["gnosis_dbt", "crawlers_data", "intermediate", "int_crawlers_data_labels"], "alias": "int_crawlers_data_labels", "checksum": {"name": "sha256", "checksum": "4aff96a91a6930f4010173a0c452890de05b8219fba36295ab1b6d6912f53a0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "labels"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["production", "crawlers_data", "labels"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["production", "crawlers_data", "labels"]}, "created_at": 1760535476.5722985, "relation_name": "`dbt`.`int_crawlers_data_labels`", "raw_code": "{{\n  config(\n    materialized='table',\n    tags=['production','crawlers_data','labels']\n  )\n}}\n\nWITH src AS (\n  SELECT\n    lower(address) AS address,\n    project\n  FROM {{ ref('stg_crawlers_data__dune_labels') }}\n),\n\nlabeled AS (\n  SELECT\n    address,\n    project,\n\n    multiIf(\n\n      match(project, '(?i)^Unknown$'),           'Unknown',\n      match(project, '(?i)^EOA$'),               'EOAs',\n      match(project, '(?i)^ERC20$'),             'ERC20 Tokens',\n\n      match(project, '(?i)(uniswap|sushi|swapr|balancer|curve|honeyswap|levinswap|openocean|openoceanexchange|1inch|paraswap|cow\\\\s*swap|cowswap|gnosis\\\\s*protocol|xswap|symmetric(\\\\s*finance)?|elk\\\\s*finance|\\\\bdex\\\\b|aggregator|dex\\\\s*aggregator|zerion|kinetex\\\\s*xswap|baoswap)'),\n      'DEX',\n\n      match(project, '(?i)(\\\\baave\\\\b|spark(\\\\s*protocol)?|agave|compound|compoundadapter|\\\\bidle\\\\b|beefy|jarvis(\\\\s*network)?|gyroscope|qidao|powerpool|lending(manager)?|stakewise|aura\\\\s*finance|merkl)'),\n      'Lending & Yield',\n\n      match(project, '(?i)(\\\\bbridge\\\\b|omnibridge|hop(\\\\s*protocol)?|\\\\bbungee\\\\b|\\\\bacross\\\\b|connext|celer|stargate|lifi|li\\\\.?fi|\\\\bamb\\\\b|eth\\\\s*xdai\\\\s*amb|bsc\\\\s*xdai\\\\s*amb|\\\\brelay\\\\b|spokebridge|spokegateway|socket(\\\\b|\\\\s)|rango\\\\s*exchange|rubic(\\\\s*(onchain|crosschain))?|swaps?\\\\s*io|eywa|symbiosis|squid(\\\\s*spoke)?)'),\n      'Bridges',\n\n      match(project, '(?i)(layer\\\\s*zero|hyperlane|zk\\\\s*bridge|zkbridge|polyhedra|zk(light|client)|telepathy|messag(?:ing|e)|everclear|interop)'),\n      'Messaging / Interop',\n\n      match(project, '(?i)(safe(?:\\\\s*l2)?|gnosis\\\\s*safe|ambirewallet|biconomy|erc[- ]?4337|erc\\\\s*4337\\\\s*entry\\\\s*point|entry\\\\s*point|wethgateway|tokenbound|delegatecash|rhinestone|apex\\\\s*smart\\\\s*wallet|zeroexsettlerdeployersafemodule)'),\n      'Wallets & AA',\n\n      match(project, '(?i)(monerium(\\\\s*(iske|usde|blacklist))?|gnosis\\\\s*pay(\\\\s*(vip|spender|eiffel))?|\\\\bgpay\\\\b|request(\\\\s*network)?|\\\\busdc\\\\b|\\\\bsdai\\\\b|\\\\bxdai\\\\b|payments?|invoice|smart\\\\s*invoice|superfluid|sablier|swing\\\\s*xdai\\\\s*single\\\\s*chain)'),\n      'Payments & Stablecoins',\n\n      match(project, '(?i)(chainlink|tellor|pyth|\\\\boracle\\\\b|origin\\\\s*trail|origintrail|marketview|analytics|\\\\bdata\\\\b|\\\\bindex\\\\b|mu\\\\s*exchange\\\\s*pythoracle)'),\n      'Oracles & Data',\n\n      match(project, '(?i)(opensea|seaport|poap|nifty(ink|fair)?|\\\\bnft\\\\b|erc721|erc1155|foundation|eporio|marketplace|creator|mint|mech\\\\s*marketplace|ghost\\\\s*nft\\\\s*faucet|nfts2me|crypto\\\\s*stamp|nondescriptive\\\\s*1155)'),\n      'NFTs & Marketplaces',\n\n      match(project, '(?i)(dark\\\\s*forest|conquest\\\\.eth|mithraeum|\\\\bgame\\\\b|gaming)'),\n      'Gaming',\n\n      match(project, '(?i)(dao\\\\s*haus|daoh?a?us|daostack|\\\\bdao\\\\b|daosquare|plazadao|zodiac|snapshot|kleros(\\\\s*curate)?|reality\\\\s*eth|vocdoni|proof\\\\s*of\\\\s*humanity|sismo(\\\\s*(badges|roots|attestations\\\\s*registry))?|attestation|identity|omen|ran\\\\s*dao|circles|polkamarkets)'),\n      'DAOs & Governance',\n\n      match(project, '(?i)(tornado(?:\\\\.?\\\\s*cash)?|tornado\\\\s*cash\\\\s*nova|umbra|privacy|\\\\bmix\\\\b)'),\n      'Privacy',\n\n      match(project, '(?i)(autonolas|gnosis\\\\s*ai|autonomous|agent)'),\n      'AI & Agents',\n\n      match(project, '(?i)(real\\\\s*token|realtoken|real\\\\s*rmm|\\\\brmm\\\\b|emblem)'),\n      'RWA & Tokenization',\n\n      match(project, '(?i)(^infrastructure$|gelato|opengsn|obol|ankr|shutter|infra(structure)?|registry|deployer|factory|controller|manager|router|vault|pool|proxy|multisig|gnosis\\\\s*protocol|gnosis\\\\s*chain|xdai\\\\s*posdao|swarm|ethswarm|address\\\\s*tag\\\\s*registry|judicialassetfactory|hopr(\\\\s*(token|network|protocol))?)'),\n      'Infrastructure & DevTools',\n\n      'Others'\n    ) AS sector\n  FROM src\n)\n\nSELECT\n  address,\n  anyLast(project) AS project,\n  anyLast(sector)  AS sector\nFROM labeled\nGROUP BY address", "language": "sql", "refs": [{"name": "stg_crawlers_data__dune_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__dune_labels"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/intermediate/int_crawlers_data_labels.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    lower(address) AS address,\n    project\n  FROM `dbt`.`stg_crawlers_data__dune_labels`\n),\n\nlabeled AS (\n  SELECT\n    address,\n    project,\n\n    multiIf(\n\n      match(project, '(?i)^Unknown$'),           'Unknown',\n      match(project, '(?i)^EOA$'),               'EOAs',\n      match(project, '(?i)^ERC20$'),             'ERC20 Tokens',\n\n      match(project, '(?i)(uniswap|sushi|swapr|balancer|curve|honeyswap|levinswap|openocean|openoceanexchange|1inch|paraswap|cow\\\\s*swap|cowswap|gnosis\\\\s*protocol|xswap|symmetric(\\\\s*finance)?|elk\\\\s*finance|\\\\bdex\\\\b|aggregator|dex\\\\s*aggregator|zerion|kinetex\\\\s*xswap|baoswap)'),\n      'DEX',\n\n      match(project, '(?i)(\\\\baave\\\\b|spark(\\\\s*protocol)?|agave|compound|compoundadapter|\\\\bidle\\\\b|beefy|jarvis(\\\\s*network)?|gyroscope|qidao|powerpool|lending(manager)?|stakewise|aura\\\\s*finance|merkl)'),\n      'Lending & Yield',\n\n      match(project, '(?i)(\\\\bbridge\\\\b|omnibridge|hop(\\\\s*protocol)?|\\\\bbungee\\\\b|\\\\bacross\\\\b|connext|celer|stargate|lifi|li\\\\.?fi|\\\\bamb\\\\b|eth\\\\s*xdai\\\\s*amb|bsc\\\\s*xdai\\\\s*amb|\\\\brelay\\\\b|spokebridge|spokegateway|socket(\\\\b|\\\\s)|rango\\\\s*exchange|rubic(\\\\s*(onchain|crosschain))?|swaps?\\\\s*io|eywa|symbiosis|squid(\\\\s*spoke)?)'),\n      'Bridges',\n\n      match(project, '(?i)(layer\\\\s*zero|hyperlane|zk\\\\s*bridge|zkbridge|polyhedra|zk(light|client)|telepathy|messag(?:ing|e)|everclear|interop)'),\n      'Messaging / Interop',\n\n      match(project, '(?i)(safe(?:\\\\s*l2)?|gnosis\\\\s*safe|ambirewallet|biconomy|erc[- ]?4337|erc\\\\s*4337\\\\s*entry\\\\s*point|entry\\\\s*point|wethgateway|tokenbound|delegatecash|rhinestone|apex\\\\s*smart\\\\s*wallet|zeroexsettlerdeployersafemodule)'),\n      'Wallets & AA',\n\n      match(project, '(?i)(monerium(\\\\s*(iske|usde|blacklist))?|gnosis\\\\s*pay(\\\\s*(vip|spender|eiffel))?|\\\\bgpay\\\\b|request(\\\\s*network)?|\\\\busdc\\\\b|\\\\bsdai\\\\b|\\\\bxdai\\\\b|payments?|invoice|smart\\\\s*invoice|superfluid|sablier|swing\\\\s*xdai\\\\s*single\\\\s*chain)'),\n      'Payments & Stablecoins',\n\n      match(project, '(?i)(chainlink|tellor|pyth|\\\\boracle\\\\b|origin\\\\s*trail|origintrail|marketview|analytics|\\\\bdata\\\\b|\\\\bindex\\\\b|mu\\\\s*exchange\\\\s*pythoracle)'),\n      'Oracles & Data',\n\n      match(project, '(?i)(opensea|seaport|poap|nifty(ink|fair)?|\\\\bnft\\\\b|erc721|erc1155|foundation|eporio|marketplace|creator|mint|mech\\\\s*marketplace|ghost\\\\s*nft\\\\s*faucet|nfts2me|crypto\\\\s*stamp|nondescriptive\\\\s*1155)'),\n      'NFTs & Marketplaces',\n\n      match(project, '(?i)(dark\\\\s*forest|conquest\\\\.eth|mithraeum|\\\\bgame\\\\b|gaming)'),\n      'Gaming',\n\n      match(project, '(?i)(dao\\\\s*haus|daoh?a?us|daostack|\\\\bdao\\\\b|daosquare|plazadao|zodiac|snapshot|kleros(\\\\s*curate)?|reality\\\\s*eth|vocdoni|proof\\\\s*of\\\\s*humanity|sismo(\\\\s*(badges|roots|attestations\\\\s*registry))?|attestation|identity|omen|ran\\\\s*dao|circles|polkamarkets)'),\n      'DAOs & Governance',\n\n      match(project, '(?i)(tornado(?:\\\\.?\\\\s*cash)?|tornado\\\\s*cash\\\\s*nova|umbra|privacy|\\\\bmix\\\\b)'),\n      'Privacy',\n\n      match(project, '(?i)(autonolas|gnosis\\\\s*ai|autonomous|agent)'),\n      'AI & Agents',\n\n      match(project, '(?i)(real\\\\s*token|realtoken|real\\\\s*rmm|\\\\brmm\\\\b|emblem)'),\n      'RWA & Tokenization',\n\n      match(project, '(?i)(^infrastructure$|gelato|opengsn|obol|ankr|shutter|infra(structure)?|registry|deployer|factory|controller|manager|router|vault|pool|proxy|multisig|gnosis\\\\s*protocol|gnosis\\\\s*chain|xdai\\\\s*posdao|swarm|ethswarm|address\\\\s*tag\\\\s*registry|judicialassetfactory|hopr(\\\\s*(token|network|protocol))?)'),\n      'Infrastructure & DevTools',\n\n      'Others'\n    ) AS sector\n  FROM src\n)\n\nSELECT\n  address,\n  anyLast(project) AS project,\n  anyLast(sector)  AS sector\nFROM labeled\nGROUP BY address", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__probelab_agent_semvers_avg_1d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/staging/stg_crawlers_data__probelab_agent_semvers_avg_1d.sql", "original_file_path": "models/probelab/staging/stg_crawlers_data__probelab_agent_semvers_avg_1d.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d", "fqn": ["gnosis_dbt", "probelab", "staging", "stg_crawlers_data__probelab_agent_semvers_avg_1d"], "alias": "stg_crawlers_data__probelab_agent_semvers_avg_1d", "checksum": {"name": "sha256", "checksum": "3892fb8358d110f3b3ba78e0ff817accaa6c6002924126f69c8b604c30e263c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "probelab_agent_semvers_avg_1d", "production", "crawlers_data", "probelab_agent_semvers_avg_1d"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data", "probelab_agent_semvers_avg_1d"], "description": "Daily average distribution of agent semantic versions across crawls.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "Type of agent version, nullable string.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "Earliest crawl timestamp in the period, nullable DateTime64(6).", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "Latest crawl timestamp in the period, nullable DateTime64(6).", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver": {"name": "agent_version_semver", "description": "Array of semantic version integers, nullable array of nullable Int64.", "meta": {}, "data_type": "Array(Nullable(Int64))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver_str": {"name": "agent_version_semver_str", "description": "Semantic version as string, nullable string.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "Count of records in the period, nullable float.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "Number of samples, nullable unsigned int.", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "Percentage share, nullable float.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "Total count, nullable float.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "crawlers_data", "probelab_agent_semvers_avg_1d"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4763377, "relation_name": "`dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data', 'probelab_agent_semvers_avg_1d']\n    ) \n}}\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    agent_version_semver,\n    agent_version_semver_str,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    {{ source('crawlers_data','probelab_agent_semvers_avg_1d') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "probelab_agent_semvers_avg_1d"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/staging/stg_crawlers_data__probelab_agent_semvers_avg_1d.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    agent_version_semver,\n    agent_version_semver_str,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_agent_semvers_avg_1d`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__probelab_quic_support_over_7d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/staging/stg_crawlers_data__probelab_quic_support_over_7d.sql", "original_file_path": "models/probelab/staging/stg_crawlers_data__probelab_quic_support_over_7d.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d", "fqn": ["gnosis_dbt", "probelab", "staging", "stg_crawlers_data__probelab_quic_support_over_7d"], "alias": "stg_crawlers_data__probelab_quic_support_over_7d", "checksum": {"name": "sha256", "checksum": "579d2d210c172497081d5e278067b5b7f56ab36da2d1967acbea707b8fe0935b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "probelab_quic_support_over_7d", "production", "crawlers_data", "probelab_quic_support_over_7d"], "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data", "probelab_quic_support_over_7d"], "description": "7\u2011day time series average share of QUIC support.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "Type of agent version; nullable string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "Earliest crawl timestamp in the period; nullable DateTime64(6).", "meta": {}, "data_type": "DateTime64(6)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "Latest crawl timestamp in the period; nullable DateTime64(6).", "meta": {}, "data_type": "DateTime64(6)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "quic_support": {"name": "quic_support", "description": "Support status for QUIC; nullable string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "Count of records in the period; nullable float.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "Number of samples; nullable UInt32.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "Percentage support; nullable float.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "Total count used for percentage calculation; nullable float.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "crawlers_data", "probelab_quic_support_over_7d"], "materialized": "view", "meta": {"owner": "analytics_team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4840481, "relation_name": "`dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data', 'probelab_quic_support_over_7d']\n    ) \n}}\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    crawl_created_at,\n    quic_support,\n    __count,\n    __pct,\n    __total\nFROM \n    {{ source('crawlers_data','probelab_quic_support_over_7d') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "probelab_quic_support_over_7d"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/staging/stg_crawlers_data__probelab_quic_support_over_7d.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    crawl_created_at,\n    quic_support,\n    __count,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_quic_support_over_7d`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__probelab_cloud_provider_avg_1d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/staging/stg_crawlers_data__probelab_cloud_provider_avg_1d.sql", "original_file_path": "models/probelab/staging/stg_crawlers_data__probelab_cloud_provider_avg_1d.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d", "fqn": ["gnosis_dbt", "probelab", "staging", "stg_crawlers_data__probelab_cloud_provider_avg_1d"], "alias": "stg_crawlers_data__probelab_cloud_provider_avg_1d", "checksum": {"name": "sha256", "checksum": "2fcfa8f6a72de170919ffb141ee79ab34faf42f089774af0fb53c56f18e4cca3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "probelab_cloud_provider_avg_1d", "production", "crawlers_data", "probelab_cloud_provider_avg_1d"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data", "probelab_cloud_provider_avg_1d"], "description": "Daily average share of cloud providers across crawls, representing the proportion of each cloud provider in the dataset for each day.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "Type of agent version; nullable if not available.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "Earliest crawl timestamp for the period; nullable if not available.", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "Latest crawl timestamp for the period; nullable if not available.", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_provider": {"name": "cloud_provider", "description": "Name of the cloud provider; nullable if not specified.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "Count of records contributing to the average; nullable.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "Number of samples used; nullable.", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "Percentage share of the cloud provider; nullable.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "Total count used to compute percentage; nullable.", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "crawlers_data", "probelab_cloud_provider_avg_1d"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4787302, "relation_name": "`dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data', 'probelab_cloud_provider_avg_1d']\n    ) \n}}\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    cloud_provider,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    {{ source('crawlers_data','probelab_cloud_provider_avg_1d') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "probelab_cloud_provider_avg_1d"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/staging/stg_crawlers_data__probelab_cloud_provider_avg_1d.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    cloud_provider,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_cloud_provider_avg_1d`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d": {"database": "dbt", "schema": "dbt", "name": "stg_crawlers_data__probelab_countries_avg_1d", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/staging/stg_crawlers_data__probelab_countries_avg_1d.sql", "original_file_path": "models/probelab/staging/stg_crawlers_data__probelab_countries_avg_1d.sql", "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d", "fqn": ["gnosis_dbt", "probelab", "staging", "stg_crawlers_data__probelab_countries_avg_1d"], "alias": "stg_crawlers_data__probelab_countries_avg_1d", "checksum": {"name": "sha256", "checksum": "d9bfd094cfb2704dc94e5c77943ece13b7dad7bfac050ac49d181d47d07ec7e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "crawlers_data", "probelab_countries_avg_1d", "production", "crawlers_data", "probelab_countries_avg_1d"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "crawlers_data", "probelab_countries_avg_1d"], "description": "Daily average share of peer countries with data aggregated from crawls.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "Type of agent version; nullable if unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "Earliest crawl timestamp in the period.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "Latest crawl timestamp in the period.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "Human-readable country name; nullable if unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country code or identifier; nullable if unknown.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "Count of records in the aggregation.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "Number of samples used for averaging.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "Percentage share of the country relative to total.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "Total count or sum used for percentage calculation.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/staging/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "crawlers_data", "probelab_countries_avg_1d"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "materialized": "view"}, "created_at": 1760535478.4813077, "relation_name": "`dbt`.`stg_crawlers_data__probelab_countries_avg_1d`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','crawlers_data', 'probelab_countries_avg_1d']\n    ) \n}}\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    country_name,\n    country,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    {{ source('crawlers_data','probelab_countries_avg_1d') }}", "language": "sql", "refs": [], "sources": [["crawlers_data", "probelab_countries_avg_1d"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/staging/stg_crawlers_data__probelab_countries_avg_1d.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    country_name,\n    country,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_countries_avg_1d`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_probelab_clients_version_daily": {"database": "dbt", "schema": "dbt", "name": "api_probelab_clients_version_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/marts/api_probelab_clients_version_daily.sql", "original_file_path": "models/probelab/marts/api_probelab_clients_version_daily.sql", "unique_id": "model.gnosis_dbt.api_probelab_clients_version_daily", "fqn": ["gnosis_dbt", "probelab", "marts", "api_probelab_clients_version_daily"], "alias": "api_probelab_clients_version_daily", "checksum": {"name": "sha256", "checksum": "357f0e6a8c6bc62a19db7bd0b53b620f1e35be05281de975efc8a99efddf3951"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "probelab", "production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "probelab"], "description": "Daily aggregated data on API probelab clients, including version info and counts.", "columns": {"date": {"name": "date", "description": "The start of the day for the aggregated data (UTC).", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Type of agent version client.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Semantic version string of the client.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of occurrences for the given day, client, and version.", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.495208, "relation_name": "`dbt`.`api_probelab_clients_version_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','probelab']\n    ) \n}}\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,agent_version_semver_str AS version\n    ,toInt32(floor(__count)) AS value\nFROM \n    {{ ref('stg_crawlers_data__probelab_agent_semvers_avg_1d') }} \nORDER BY date ASC, client ASC, version ASC", "language": "sql", "refs": [{"name": "stg_crawlers_data__probelab_agent_semvers_avg_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/marts/api_probelab_clients_version_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,agent_version_semver_str AS version\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nORDER BY date ASC, client ASC, version ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_probelab_clients_daily": {"database": "dbt", "schema": "dbt", "name": "api_probelab_clients_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/marts/api_probelab_clients_daily.sql", "original_file_path": "models/probelab/marts/api_probelab_clients_daily.sql", "unique_id": "model.gnosis_dbt.api_probelab_clients_daily", "fqn": ["gnosis_dbt", "probelab", "marts", "api_probelab_clients_daily"], "alias": "api_probelab_clients_daily", "checksum": {"name": "sha256", "checksum": "742211461a2866cbb06584e2f1bd603c82b224191216df592498a0f356bb9de0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "probelab", "production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "probelab"], "description": "Daily aggregated data on Probelab clients, including the maximum crawl creation timestamp, client version type, and the aggregated value of a specific metric.", "columns": {"date": {"name": "date", "description": "The start of the day for the aggregated data, derived from max_crawl_created_at.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "The client version type associated with the data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Aggregated metric value, represented as an integer after conversion.", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "tags": ["production", "probelab"], "materialized": "view", "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4908614, "relation_name": "`dbt`.`api_probelab_clients_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','probelab']\n    ) \n}}\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,any_value(toInt32(floor(__total))) AS value\nFROM \n    {{ ref('stg_crawlers_data__probelab_agent_semvers_avg_1d') }} \nGROUP BY 1, 2\nORDER BY date ASC, client ASC", "language": "sql", "refs": [{"name": "stg_crawlers_data__probelab_agent_semvers_avg_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/marts/api_probelab_clients_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,any_value(toInt32(floor(__total))) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nGROUP BY 1, 2\nORDER BY date ASC, client ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_probelab_clients_cloud_daily": {"database": "dbt", "schema": "dbt", "name": "api_probelab_clients_cloud_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/marts/api_probelab_clients_cloud_daily.sql", "original_file_path": "models/probelab/marts/api_probelab_clients_cloud_daily.sql", "unique_id": "model.gnosis_dbt.api_probelab_clients_cloud_daily", "fqn": ["gnosis_dbt", "probelab", "marts", "api_probelab_clients_cloud_daily"], "alias": "api_probelab_clients_cloud_daily", "checksum": {"name": "sha256", "checksum": "a5dd3d0d433174d53de1a1b40e216bbf62b650e24c7ed736ac01a61d719747a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "probelab", "production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "probelab"], "description": "Daily aggregated data on probelab clients, including cloud provider, client version, and other metrics derived from crawlers.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the aggregated data.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client version type indicating the client software version.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud": {"name": "cloud", "description": "Cloud provider name associated with the client.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Integer count of clients or instances for the given date, client, and cloud.", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4867005, "relation_name": "`dbt`.`api_probelab_clients_cloud_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','probelab']\n    ) \n}}\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,cloud_provider AS cloud\n    ,toInt32(floor(__count)) AS value\nFROM \n    {{ ref('stg_crawlers_data__probelab_cloud_provider_avg_1d') }} \nORDER BY date ASC, client ASC, cloud ASC", "language": "sql", "refs": [{"name": "stg_crawlers_data__probelab_cloud_provider_avg_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/marts/api_probelab_clients_cloud_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,cloud_provider AS cloud\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d` \nORDER BY date ASC, client ASC, cloud ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_probelab_clients_country_daily": {"database": "dbt", "schema": "dbt", "name": "api_probelab_clients_country_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/marts/api_probelab_clients_country_daily.sql", "original_file_path": "models/probelab/marts/api_probelab_clients_country_daily.sql", "unique_id": "model.gnosis_dbt.api_probelab_clients_country_daily", "fqn": ["gnosis_dbt", "probelab", "marts", "api_probelab_clients_country_daily"], "alias": "api_probelab_clients_country_daily", "checksum": {"name": "sha256", "checksum": "b7ce97e3121e0fb130ba438b750ac018e5a11cea78bb6f8dfc1930f1305061bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "probelab", "production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "probelab"], "description": "Daily aggregated data on client activity by country, including date, client type, country, and associated values, derived from crawlers data.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the aggregated data (UTC).", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client version type or category.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country code or name.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Integer value representing count or metric for the day.", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4888055, "relation_name": "`dbt`.`api_probelab_clients_country_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','probelab']\n    ) \n}}\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,country\n    ,toInt32(floor(__count)) AS value\nFROM \n    {{ ref('stg_crawlers_data__probelab_countries_avg_1d') }} \nORDER BY date ASC, client ASC, country ASC", "language": "sql", "refs": [{"name": "stg_crawlers_data__probelab_countries_avg_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/marts/api_probelab_clients_country_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,country\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_countries_avg_1d` \nORDER BY date ASC, client ASC, country ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.gnosis_dbt.api_probelab_clients_quic_daily": {"database": "dbt", "schema": "dbt", "name": "api_probelab_clients_quic_daily", "resource_type": "model", "package_name": "gnosis_dbt", "path": "probelab/marts/api_probelab_clients_quic_daily.sql", "original_file_path": "models/probelab/marts/api_probelab_clients_quic_daily.sql", "unique_id": "model.gnosis_dbt.api_probelab_clients_quic_daily", "fqn": ["gnosis_dbt", "probelab", "marts", "api_probelab_clients_quic_daily"], "alias": "api_probelab_clients_quic_daily", "checksum": {"name": "sha256", "checksum": "e89327aa17c190ad8d144f30a940e4f79ad32ba0f90eb8d86048c0e737deb693"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["production", "probelab", "production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "public"}, "tags": ["production", "probelab"], "description": "Daily aggregated data on QUIC support, client versions, and related metrics derived from crawlers, used for business analysis and monitoring.", "columns": {"date": {"name": "date", "description": "Date representing the start of the day for the aggregated data", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "client": {"name": "client", "description": "Client version type identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "quic": {"name": "quic", "description": "Support status for QUIC protocol", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Count of records for the given date, client, and QUIC support status", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "gnosis_dbt://models/probelab/marts/schema.yml", "build_path": null, "unrendered_config": {"access": "public", "materialized": "view", "tags": ["production", "probelab"], "meta": {"owner": "analytics-team", "authoritative": false, "generated_by": "schema-writer"}}, "created_at": 1760535478.4931066, "relation_name": "`dbt`.`api_probelab_clients_quic_daily`", "raw_code": "{{ \n    config(\n        materialized='view',\n        tags=['production','probelab']\n    ) \n}}\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,quic_support AS quic\n    ,__count AS value\nFROM \n    {{ ref('stg_crawlers_data__probelab_quic_support_over_7d') }} \nORDER BY date ASC, client ASC, quic ASC", "language": "sql", "refs": [{"name": "stg_crawlers_data__probelab_quic_support_over_7d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d"]}, "compiled_path": "target/compiled/gnosis_dbt/models/probelab/marts/api_probelab_clients_quic_daily.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,quic_support AS quic\n    ,__count AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d` \nORDER BY date ASC, client ASC, quic ASC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.gnosis_dbt.function_signatures": {"database": "dbt", "schema": "dbt", "name": "function_signatures", "resource_type": "seed", "package_name": "gnosis_dbt", "path": "function_signatures.csv", "original_file_path": "seeds/function_signatures.csv", "unique_id": "seed.gnosis_dbt.function_signatures", "fqn": ["gnosis_dbt", "function_signatures"], "alias": "function_signatures", "checksum": {"name": "sha256", "checksum": "c1778b137f1a270d469034db143aa4865ab3b978f03275c5e51dd01d8b4b45d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"contract_address": "String", "implementation_address": "String", "contract_name": "String", "function_name": "String", "signature": "String", "state_mutability": "String", "input_params": "String", "output_params": "String"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false, "engine": "MergeTree()", "order_by": ["contract_address", "signature", "function_name"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": false, "engine": "MergeTree()", "order_by": ["contract_address", "signature", "function_name"], "column_types": {"contract_address": "String", "implementation_address": "String", "contract_name": "String", "function_name": "String", "signature": "String", "state_mutability": "String", "input_params": "String", "output_params": "String"}}, "created_at": 1760535476.7600734, "relation_name": "`dbt`.`function_signatures`", "raw_code": "", "root_path": "/home/runner/work/dbt-cerebro/dbt-cerebro", "depends_on": {"macros": []}}, "seed.gnosis_dbt.tokens_whitelist": {"database": "dbt", "schema": "dbt", "name": "tokens_whitelist", "resource_type": "seed", "package_name": "gnosis_dbt", "path": "tokens_whitelist.csv", "original_file_path": "seeds/tokens_whitelist.csv", "unique_id": "seed.gnosis_dbt.tokens_whitelist", "fqn": ["gnosis_dbt", "tokens_whitelist"], "alias": "tokens_whitelist", "checksum": {"name": "sha256", "checksum": "26454b2821dd0da1238e22d3d7e969879ced32bed3baf8d934a4acdabb2d98f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": false}, "created_at": 1760535476.762753, "relation_name": "`dbt`.`tokens_whitelist`", "raw_code": "", "root_path": "/home/runner/work/dbt-cerebro/dbt-cerebro", "depends_on": {"macros": []}}, "seed.gnosis_dbt.event_signatures": {"database": "dbt", "schema": "dbt", "name": "event_signatures", "resource_type": "seed", "package_name": "gnosis_dbt", "path": "event_signatures.csv", "original_file_path": "seeds/event_signatures.csv", "unique_id": "seed.gnosis_dbt.event_signatures", "fqn": ["gnosis_dbt", "event_signatures"], "alias": "event_signatures", "checksum": {"name": "sha256", "checksum": "afd690cdeec8d984f79a04170c1917fd54adbebaeb032799da6a71ec21ff9fac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"contract_address": "String", "implementation_address": "String", "contract_name": "String", "event_name": "String", "signature": "String", "anonymous": "Int32", "params": "String", "indexed_params": "String", "non_indexed_params": "String"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false, "engine": "MergeTree()", "order_by": ["contract_address", "signature", "event_name"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": false, "engine": "MergeTree()", "order_by": ["contract_address", "signature", "event_name"], "column_types": {"contract_address": "String", "implementation_address": "String", "contract_name": "String", "event_name": "String", "signature": "String", "anonymous": "Int32", "params": "String", "indexed_params": "String", "non_indexed_params": "String"}}, "created_at": 1760535476.7652347, "relation_name": "`dbt`.`event_signatures`", "raw_code": "", "root_path": "/home/runner/work/dbt-cerebro/dbt-cerebro", "depends_on": {"macros": []}}, "seed.gnosis_dbt.contracts_abi": {"database": "dbt", "schema": "dbt", "name": "contracts_abi", "resource_type": "seed", "package_name": "gnosis_dbt", "path": "contracts_abi.csv", "original_file_path": "seeds/contracts_abi.csv", "unique_id": "seed.gnosis_dbt.contracts_abi", "fqn": ["gnosis_dbt", "contracts_abi"], "alias": "contracts_abi", "checksum": {"name": "sha256", "checksum": "dd2935fbe11028a1089ed53877087917c0e9389271d93a102ed4197b171dc6ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"contract_address": "String", "implementation_address": "String", "abi_json": "String", "contract_name": "String", "source": "String", "updated_at": "String"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false, "engine": "ReplacingMergeTree()", "order_by": ["contract_address", "implementation_address"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"quote_columns": false, "engine": "ReplacingMergeTree()", "order_by": ["contract_address", "implementation_address"], "column_types": {"contract_address": "String", "implementation_address": "String", "abi_json": "String", "contract_name": "String", "source": "String", "updated_at": "String"}}, "created_at": 1760535476.7678, "relation_name": "`dbt`.`contracts_abi`", "raw_code": "", "root_path": "/home/runner/work/dbt-cerebro/dbt-cerebro", "depends_on": {"macros": []}}, "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_consensus_power_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_consensus_power_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_consensus_power_type"], "alias": "not_null_esg_consensus_power_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0785701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_consensus_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_consensus_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_consensus_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_consensus_power_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_consensus_power_client.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_consensus_power_client"], "alias": "not_null_esg_consensus_power_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0804496, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_consensus_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.esg_consensus_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('esg_consensus_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_consensus_power_mean", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_consensus_power_mean.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_consensus_power_mean"], "alias": "not_null_esg_consensus_power_mean", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0822837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_consensus_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mean", "file_key_name": "models.esg_consensus_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "mean", "model": "{{ get_where_subquery(ref('esg_consensus_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_country_power_consumption_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_country_power_consumption_date.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_country_power_consumption_date"], "alias": "not_null_esg_country_power_consumption_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0838754, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_country_power_consumption", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.esg_country_power_consumption", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('esg_country_power_consumption')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_country_power_consumption_country", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_country_power_consumption_country.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_country_power_consumption_country"], "alias": "not_null_esg_country_power_consumption_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0854676, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_country_power_consumption", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.esg_country_power_consumption", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('esg_country_power_consumption')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_execution_power_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_execution_power_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_execution_power_type"], "alias": "not_null_esg_execution_power_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0870345, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_execution_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_execution_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_execution_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_execution_power_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_execution_power_client.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_execution_power_client"], "alias": "not_null_esg_execution_power_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.088606, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_execution_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.esg_execution_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('esg_execution_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_execution_power_mean", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_execution_power_mean.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_execution_power_mean"], "alias": "not_null_esg_execution_power_mean", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0901537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_execution_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mean", "file_key_name": "models.esg_execution_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "mean", "model": "{{ get_where_subquery(ref('esg_execution_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_architecture", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_architecture.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_architecture"], "alias": "not_null_esg_hardware_config_architecture", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0917928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "architecture", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "architecture", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_os", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_os.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_os"], "alias": "not_null_esg_hardware_config_os", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.093352, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "os", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "os", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_ram", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_ram.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_ram"], "alias": "not_null_esg_hardware_config_ram", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0948877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ram", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ram", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_storage", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_storage.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_storage"], "alias": "not_null_esg_hardware_config_storage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.0964327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "storage", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "storage", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_type"], "alias": "not_null_esg_hardware_config_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.097962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_esg_hardware_config_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_esg_hardware_config_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529", "fqn": ["gnosis_dbt", "ESG", "intermediate", "unique_esg_hardware_config_type"], "alias": "unique_esg_hardware_config_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.099514, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_cpu", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_cpu.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_cpu"], "alias": "not_null_esg_hardware_config_cpu", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1011302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cpu", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cpu", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_cores_threads", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_cores_threads.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_cores_threads"], "alias": "not_null_esg_hardware_config_cores_threads", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1026921, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cores_threads", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cores_threads", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_psu", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_psu.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_psu"], "alias": "not_null_esg_hardware_config_psu", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1043515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "psu", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "psu", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_case", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_case.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_case"], "alias": "not_null_esg_hardware_config_case", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.105938, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "case", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "case", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_hardware_config_gpu", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_hardware_config_gpu.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_hardware_config_gpu"], "alias": "not_null_esg_hardware_config_gpu", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1075068, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_hardware_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gpu", "file_key_name": "models.esg_hardware_config", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gpu", "model": "{{ get_where_subquery(ref('esg_hardware_config')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_idle_electric_power_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_idle_electric_power_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_idle_electric_power_type"], "alias": "not_null_esg_idle_electric_power_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.109053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_idle_electric_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_idle_electric_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_idle_electric_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_idle_electric_power_mean", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_idle_electric_power_mean.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_idle_electric_power_mean"], "alias": "not_null_esg_idle_electric_power_mean", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1107652, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_idle_electric_power", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mean", "file_key_name": "models.esg_idle_electric_power", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "mean", "model": "{{ get_where_subquery(ref('esg_idle_electric_power')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_node_distribution_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_node_distribution_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_node_distribution_type"], "alias": "not_null_esg_node_distribution_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1124198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_node_distribution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_node_distribution", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_node_distribution')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_esg_node_distribution_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_esg_node_distribution_type.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a", "fqn": ["gnosis_dbt", "ESG", "intermediate", "unique_esg_node_distribution_type"], "alias": "unique_esg_node_distribution_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1139715, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_node_distribution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.esg_node_distribution", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('esg_node_distribution')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_node_distribution_distribution", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_node_distribution_distribution.sql", "original_file_path": "models/ESG/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178", "fqn": ["gnosis_dbt", "ESG", "intermediate", "not_null_esg_node_distribution_distribution"], "alias": "not_null_esg_node_distribution_distribution", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1155267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_node_distribution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distribution", "file_key_name": "models.esg_node_distribution", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "distribution", "model": "{{ get_where_subquery(ref('esg_node_distribution')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_carbon_emissions_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_carbon_emissions_date.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_carbon_emissions_date"], "alias": "not_null_esg_carbon_emissions_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1762202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_carbon_emissions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.esg_carbon_emissions", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('esg_carbon_emissions')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_carbon_emissions_country", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_carbon_emissions_country.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_carbon_emissions_country"], "alias": "not_null_esg_carbon_emissions_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.177825, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_carbon_emissions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.esg_carbon_emissions", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('esg_carbon_emissions')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_power_consumption_top10_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_power_consumption_top10_date.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_power_consumption_top10_date"], "alias": "not_null_esg_power_consumption_top10_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1793947, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_power_consumption_top10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.esg_power_consumption_top10", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('esg_power_consumption_top10')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_power_consumption_top10_country", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_power_consumption_top10_country.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_power_consumption_top10_country"], "alias": "not_null_esg_power_consumption_top10_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.180935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_power_consumption_top10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.esg_power_consumption_top10", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('esg_power_consumption_top10')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_power_consumption_top10_power", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_power_consumption_top10_power.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_power_consumption_top10_power"], "alias": "not_null_esg_power_consumption_top10_power", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1826181, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_power_consumption_top10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "power", "file_key_name": "models.esg_power_consumption_top10", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "power", "model": "{{ get_where_subquery(ref('esg_power_consumption_top10')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_esg_power_consumption_top10_rank", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_esg_power_consumption_top10_rank.sql", "original_file_path": "models/ESG/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7", "fqn": ["gnosis_dbt", "ESG", "marts", "not_null_esg_power_consumption_top10_rank"], "alias": "not_null_esg_power_consumption_top10_rank", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.1841629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "esg_power_consumption_top10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rank", "file_key_name": "models.esg_power_consumption_top10", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rank", "model": "{{ get_where_subquery(ref('esg_power_consumption_top10')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_rwa_backedfi_prices_bticker", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_rwa_backedfi_prices_bticker.sql", "original_file_path": "models/execution/rwa/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355", "fqn": ["gnosis_dbt", "execution", "rwa", "intermediate", "not_null_rwa_backedfi_prices_bticker"], "alias": "not_null_rwa_backedfi_prices_bticker", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.5842204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bticker", "file_key_name": "models.rwa_backedfi_prices", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bticker", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_rwa_backedfi_prices_bticker", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_rwa_backedfi_prices_bticker.sql", "original_file_path": "models/execution/rwa/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059", "fqn": ["gnosis_dbt", "execution", "rwa", "intermediate", "unique_rwa_backedfi_prices_bticker"], "alias": "unique_rwa_backedfi_prices_bticker", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.5858705, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bticker", "file_key_name": "models.rwa_backedfi_prices", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "bticker", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_rwa_backedfi_prices_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_rwa_backedfi_prices_date.sql", "original_file_path": "models/execution/rwa/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3", "fqn": ["gnosis_dbt", "execution", "rwa", "intermediate", "not_null_rwa_backedfi_prices_date"], "alias": "not_null_rwa_backedfi_prices_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.5874898, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.rwa_backedfi_prices", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_rwa_backedfi_prices_1d_bticker", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_rwa_backedfi_prices_1d_bticker.sql", "original_file_path": "models/execution/rwa/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0", "fqn": ["gnosis_dbt", "execution", "rwa", "marts", "not_null_rwa_backedfi_prices_1d_bticker"], "alias": "not_null_rwa_backedfi_prices_1d_bticker", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.595353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bticker", "file_key_name": "models.rwa_backedfi_prices_1d", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bticker", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices_1d')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_rwa_backedfi_prices_1d_bticker", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_rwa_backedfi_prices_1d_bticker.sql", "original_file_path": "models/execution/rwa/marts/schema.yml", "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c", "fqn": ["gnosis_dbt", "execution", "rwa", "marts", "unique_rwa_backedfi_prices_1d_bticker"], "alias": "unique_rwa_backedfi_prices_1d_bticker", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.596977, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bticker", "file_key_name": "models.rwa_backedfi_prices_1d", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "bticker", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices_1d')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_rwa_backedfi_prices_1d_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_rwa_backedfi_prices_1d_date.sql", "original_file_path": "models/execution/rwa/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b", "fqn": ["gnosis_dbt", "execution", "rwa", "marts", "not_null_rwa_backedfi_prices_1d_date"], "alias": "not_null_rwa_backedfi_prices_1d_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.5985787, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "rwa_backedfi_prices_1d", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.rwa_backedfi_prices_1d", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('rwa_backedfi_prices_1d')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_yields_sdai_rate_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_yields_sdai_rate_daily_date.sql", "original_file_path": "models/execution/yields/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956", "fqn": ["gnosis_dbt", "execution", "yields", "intermediate", "not_null_yields_sdai_rate_daily_date"], "alias": "not_null_yields_sdai_rate_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6065261, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yields_sdai_rate_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.yields_sdai_rate_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('yields_sdai_rate_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_yields_sdai_apy_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_yields_sdai_apy_daily_date.sql", "original_file_path": "models/execution/yields/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13", "fqn": ["gnosis_dbt", "execution", "yields", "marts", "not_null_yields_sdai_apy_daily_date"], "alias": "not_null_yields_sdai_apy_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6145413, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yields_sdai_apy_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.yields_sdai_apy_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('yields_sdai_apy_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_yields_sdai_apy_daily_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_yields_sdai_apy_daily_label.sql", "original_file_path": "models/execution/yields/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2", "fqn": ["gnosis_dbt", "execution", "yields", "marts", "not_null_yields_sdai_apy_daily_label"], "alias": "not_null_yields_sdai_apy_daily_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6161692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yields_sdai_apy_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.yields_sdai_apy_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('yields_sdai_apy_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_version_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_version_daily_date.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_execution_blocks_clients_version_daily_date"], "alias": "not_null_execution_blocks_clients_version_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6336312, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.execution_blocks_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('execution_blocks_clients_version_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_version_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_version_daily_client.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_execution_blocks_clients_version_daily_client"], "alias": "not_null_execution_blocks_clients_version_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6352751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.execution_blocks_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('execution_blocks_clients_version_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_version_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_version_daily_value.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_execution_blocks_clients_version_daily_value"], "alias": "not_null_execution_blocks_clients_version_daily_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.636883, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.execution_blocks_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('execution_blocks_clients_version_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_production_block_timestamp", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_production_block_timestamp.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_execution_blocks_production_block_timestamp"], "alias": "not_null_execution_blocks_production_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6384845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_production", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.execution_blocks_production", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('execution_blocks_production')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_date.1b2b9e203e": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_blocks_gas_usage_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_blocks_gas_usage_daily_date.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_date.1b2b9e203e", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_int_execution_blocks_gas_usage_daily_date"], "alias": "not_null_int_execution_blocks_gas_usage_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6400537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_blocks_gas_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/intermediate/schema.yml/not_null_int_execution_blocks_gas_usage_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_blocks_gas_usage_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.int_execution_blocks_gas_usage_daily", "attached_node": "model.gnosis_dbt.int_execution_blocks_gas_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_execution_blocks_gas_usage_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.21cc0473f2": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_blocks_gas_usage_daily_gas_used_sum", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.21cc0473f2", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_int_execution_blocks_gas_usage_daily_gas_used_sum"], "alias": "not_null_int_execution_blocks_gas_usage_daily_gas_used_sum", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6416364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_blocks_gas_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/intermediate/schema.yml/not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used_sum\nfrom `dbt`.`int_execution_blocks_gas_usage_daily`\nwhere gas_used_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_used_sum", "file_key_name": "models.int_execution_blocks_gas_usage_daily", "attached_node": "model.gnosis_dbt.int_execution_blocks_gas_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used_sum", "model": "{{ get_where_subquery(ref('int_execution_blocks_gas_usage_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.2a534bfddb": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.sql", "original_file_path": "models/execution/blocks/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.2a534bfddb", "fqn": ["gnosis_dbt", "execution", "blocks", "intermediate", "not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum"], "alias": "not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6433342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_blocks_gas_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/intermediate/schema.yml/not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_limit_sum\nfrom `dbt`.`int_execution_blocks_gas_usage_daily`\nwhere gas_limit_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_limit_sum", "file_key_name": "models.int_execution_blocks_gas_usage_daily", "attached_node": "model.gnosis_dbt.int_execution_blocks_gas_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit_sum", "model": "{{ get_where_subquery(ref('int_execution_blocks_gas_usage_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_daily_date.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_execution_blocks_clients_daily_date"], "alias": "not_null_execution_blocks_clients_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6654959, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.execution_blocks_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('execution_blocks_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_daily_client.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_execution_blocks_clients_daily_client"], "alias": "not_null_execution_blocks_clients_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6671007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.execution_blocks_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('execution_blocks_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_pct_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_pct_daily_date.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_execution_blocks_clients_pct_daily_date"], "alias": "not_null_execution_blocks_clients_pct_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6686962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_pct_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.execution_blocks_clients_pct_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('execution_blocks_clients_pct_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_blocks_clients_pct_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_blocks_clients_pct_daily_client.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_execution_blocks_clients_pct_daily_client"], "alias": "not_null_execution_blocks_clients_pct_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6702878, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_blocks_clients_pct_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.execution_blocks_clients_pct_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('execution_blocks_clients_pct_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_blocks_clients_cnt_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_blocks_clients_cnt_daily_date.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_api_execution_blocks_clients_cnt_daily_date"], "alias": "not_null_api_execution_blocks_clients_cnt_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6719034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_blocks_clients_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_api_execution_blocks_clients_cnt_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_blocks_clients_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_blocks_clients_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_blocks_clients_cnt_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_blocks_clients_cnt_daily_client.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_api_execution_blocks_clients_cnt_daily_client"], "alias": "not_null_api_execution_blocks_clients_cnt_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6736295, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_blocks_clients_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_api_execution_blocks_clients_cnt_daily_client.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere client is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.api_execution_blocks_clients_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('api_execution_blocks_clients_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_blocks_clients_cnt_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_blocks_clients_cnt_daily_value.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_api_execution_blocks_clients_cnt_daily_value"], "alias": "not_null_api_execution_blocks_clients_cnt_daily_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6752217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_blocks_clients_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_api_execution_blocks_clients_cnt_daily_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_blocks_clients_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_blocks_clients_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_blocks_clients_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_blocks_clients_daily_date.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_fct_execution_blocks_clients_daily_date"], "alias": "not_null_fct_execution_blocks_clients_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6768196, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_fct_execution_blocks_clients_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_execution_blocks_clients_daily", "attached_node": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_execution_blocks_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_blocks_clients_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_blocks_clients_daily_client.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_fct_execution_blocks_clients_daily_client"], "alias": "not_null_fct_execution_blocks_clients_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6783996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_fct_execution_blocks_clients_daily_client.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere client is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.fct_execution_blocks_clients_daily", "attached_node": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('fct_execution_blocks_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_cnt.b8671865c8": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_blocks_clients_daily_cnt", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_blocks_clients_daily_cnt.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_cnt.b8671865c8", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_fct_execution_blocks_clients_daily_cnt"], "alias": "not_null_fct_execution_blocks_clients_daily_cnt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6799364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_blocks_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/blocks/marts/schema.yml/not_null_fct_execution_blocks_clients_daily_cnt.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere cnt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cnt", "file_key_name": "models.fct_execution_blocks_clients_daily", "attached_node": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cnt", "model": "{{ get_where_subquery(ref('fct_execution_blocks_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly.4d4ab2ab39": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_blocks__fc4759db16f6e37f49f5326444555775.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly.4d4ab2ab39", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly"], "alias": "not_null_fct_execution_blocks__fc4759db16f6e37f49f5326444555775", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "not_null_fct_execution_blocks__fc4759db16f6e37f49f5326444555775", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_execution_blocks__fc4759db16f6e37f49f5326444555775"}, "created_at": 1760535477.6815097, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_execution_blocks__fc4759db16f6e37f49f5326444555775\") }}", "language": "sql", "refs": [{"name": "fct_execution_blocks_gas_usage_pct_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_used_sum_monthly", "file_key_name": "models.fct_execution_blocks_gas_usage_pct_monthly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used_sum_monthly", "model": "{{ get_where_subquery(ref('fct_execution_blocks_gas_usage_pct_monthly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly.4327145e38": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_blocks__f84f214d1448745018af7edbd83e7b00.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly.4327145e38", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly"], "alias": "not_null_fct_execution_blocks__f84f214d1448745018af7edbd83e7b00", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "not_null_fct_execution_blocks__f84f214d1448745018af7edbd83e7b00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_execution_blocks__f84f214d1448745018af7edbd83e7b00"}, "created_at": 1760535477.6831706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_execution_blocks__f84f214d1448745018af7edbd83e7b00\") }}", "language": "sql", "refs": [{"name": "fct_execution_blocks_gas_usage_pct_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_limit_sum_monthly", "file_key_name": "models.fct_execution_blocks_gas_usage_pct_monthly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit_sum_monthly", "model": "{{ get_where_subquery(ref('fct_execution_blocks_gas_usage_pct_monthly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_date.b2df547512": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_blocks_gas_usage_monthly_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_blocks_gas_usage_monthly_date.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_date.b2df547512", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_api_execution_blocks_gas_usage_monthly_date"], "alias": "not_null_api_execution_blocks_gas_usage_monthly_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.6847723, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_blocks_gas_usage_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_blocks_gas_usage_monthly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_blocks_gas_usage_monthly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_value.fc2d79fa3a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_blocks_gas_usage_monthly_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_blocks_gas_usage_monthly_value.sql", "original_file_path": "models/execution/blocks/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_value.fc2d79fa3a", "fqn": ["gnosis_dbt", "execution", "blocks", "marts", "not_null_api_execution_blocks_gas_usage_monthly_value"], "alias": "not_null_api_execution_blocks_gas_usage_monthly_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.686374, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_blocks_gas_usage_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_blocks_gas_usage_monthly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_blocks_gas_usage_monthly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_block_number", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_block_number.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_block_number"], "alias": "not_null_transfers_erc20_bluechips_block_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7032578, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_number", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_number", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_block_timestamp", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_block_timestamp.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_block_timestamp"], "alias": "not_null_transfers_erc20_bluechips_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7048945, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_transaction_index", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_transaction_index.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_transaction_index"], "alias": "not_null_transfers_erc20_bluechips_transaction_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7065318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_index", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_index", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_log_index", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_log_index.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_log_index"], "alias": "not_null_transfers_erc20_bluechips_log_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.708091, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "log_index", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_index", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_transaction_hash", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_transaction_hash.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_transaction_hash"], "alias": "not_null_transfers_erc20_bluechips_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.709683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_transfers_erc20_bluechips_transaction_hash", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_transfers_erc20_bluechips_transaction_hash.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "unique_transfers_erc20_bluechips_transaction_hash"], "alias": "unique_transfers_erc20_bluechips_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.711266, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_token_address", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_token_address.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_token_address"], "alias": "not_null_transfers_erc20_bluechips_token_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7129407, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token_address", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_from", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_from.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_from"], "alias": "not_null_transfers_erc20_bluechips_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7145302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_transfers_erc20_bluechips_to", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_transfers_erc20_bluechips_to.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_transfers_erc20_bluechips_to"], "alias": "not_null_transfers_erc20_bluechips_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7160833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to", "file_key_name": "models.transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to", "model": "{{ get_where_subquery(ref('transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_block_number", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_block_number.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_block_number"], "alias": "not_null_int_transfers_erc20_block_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.717685, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_number", "file_key_name": "models.int_transfers_erc20", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_number", "model": "{{ get_where_subquery(ref('int_transfers_erc20')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_transaction_hash", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_transaction_hash.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_transaction_hash"], "alias": "not_null_int_transfers_erc20_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.719269, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.int_transfers_erc20", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('int_transfers_erc20')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_int_transfers_erc20_transaction_hash", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_int_transfers_erc20_transaction_hash.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "unique_int_transfers_erc20_transaction_hash"], "alias": "unique_int_transfers_erc20_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7208302, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.int_transfers_erc20", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('int_transfers_erc20')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_block_timestamp", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_block_timestamp.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_block_timestamp"], "alias": "not_null_int_transfers_erc20_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7227023, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.int_transfers_erc20", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('int_transfers_erc20')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips_block_number", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips_block_number.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips_block_number"], "alias": "not_null_int_transfers_erc20_bluechips_block_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7242844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_number", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_number", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips_block_timestamp", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips_block_timestamp.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips_block_timestamp"], "alias": "not_null_int_transfers_erc20_bluechips_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7259045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips_transaction_index", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips_transaction_index.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips_transaction_index"], "alias": "not_null_int_transfers_erc20_bluechips_transaction_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7274983, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_index", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_index", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips__transaction_hash_", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips__transaction_hash_.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips__transaction_hash_"], "alias": "not_null_int_transfers_erc20_bluechips__transaction_hash_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7290647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "\"transaction_hash\"", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"transaction_hash\"", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips__token_address_", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips__token_address_.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips__token_address_"], "alias": "not_null_int_transfers_erc20_bluechips__token_address_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7306406, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "\"token_address\"", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"token_address\"", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips__from_", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips__from_.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips__from_"], "alias": "not_null_int_transfers_erc20_bluechips__from_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7323337, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "\"from\"", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"from\"", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_transfers_erc20_bluechips__to_", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_transfers_erc20_bluechips__to_.sql", "original_file_path": "models/execution/transfers/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1", "fqn": ["gnosis_dbt", "execution", "transfers", "intermediate", "not_null_int_transfers_erc20_bluechips__to_"], "alias": "not_null_int_transfers_erc20_bluechips__to_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7339122, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_transfers_erc20_bluechips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "\"to\"", "file_key_name": "models.int_transfers_erc20_bluechips", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "\"to\"", "model": "{{ get_where_subquery(ref('int_transfers_erc20_bluechips')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_info_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_info_daily_date.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_info_daily_date"], "alias": "not_null_int_execution_transactions_info_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7640367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_info_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.int_execution_transactions_info_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_info_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_execution_transactions_info_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_info_daily_transaction_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_info_daily_transaction_type.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_info_daily_transaction_type"], "alias": "not_null_int_execution_transactions_info_daily_transaction_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7656827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_info_daily_transaction_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere transaction_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_type", "file_key_name": "models.int_execution_transactions_info_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_info_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_type", "model": "{{ get_where_subquery(ref('int_execution_transactions_info_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_info_daily_success", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_info_daily_success.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_info_daily_success"], "alias": "not_null_int_execution_transactions_info_daily_success", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7672806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_info_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_info_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_info_daily_success.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere success is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "success", "file_key_name": "models.int_execution_transactions_info_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_info_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "success", "model": "{{ get_where_subquery(ref('int_execution_transactions_info_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_date.fe1b429be9": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_by_project_daily_date.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_date.fe1b429be9", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_daily_date"], "alias": "not_null_int_execution_transactions_by_project_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.768917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_by_project_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_transactions_by_project_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.int_execution_transactions_by_project_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_project.94b35ddc4b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_daily_project", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_by_project_daily_project.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_project.94b35ddc4b", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_daily_project"], "alias": "not_null_int_execution_transactions_by_project_daily_project", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7706451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_by_project_daily_project.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project\nfrom `dbt`.`int_execution_transactions_by_project_daily`\nwhere project is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "project", "file_key_name": "models.int_execution_transactions_by_project_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_sector.40d857cb69": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_daily_sector", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_by_project_daily_sector.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_sector.40d857cb69", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_daily_sector"], "alias": "not_null_int_execution_transactions_by_project_daily_sector", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.7722154, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_by_project_daily_sector.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sector\nfrom `dbt`.`int_execution_transactions_by_project_daily`\nwhere sector is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sector", "file_key_name": "models.int_execution_transactions_by_project_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sector", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_tx_count.f7f9e187b1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_daily_tx_count", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transactions_by_project_daily_tx_count.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_tx_count.f7f9e187b1", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_daily_tx_count"], "alias": "not_null_int_execution_transactions_by_project_daily_tx_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.773882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transactions_by_project_daily_tx_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tx_count\nfrom `dbt`.`int_execution_transactions_by_project_daily`\nwhere tx_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tx_count", "file_key_name": "models.int_execution_transactions_by_project_daily", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_hour.5270417e9a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_hourly_recent_hour", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_hour.5270417e9a", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_hourly_recent_hour"], "alias": "not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795"}, "created_at": 1760535477.7754989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_0acf479e2ce3983faab41f8fb9955795.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hour\nfrom `dbt`.`int_execution_transactions_by_project_hourly_recent`\nwhere hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour", "file_key_name": "models.int_execution_transactions_by_project_hourly_recent", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_hourly_recent')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_project.72a63a38ad": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_hourly_recent_project", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_project.72a63a38ad", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_hourly_recent_project"], "alias": "not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508"}, "created_at": 1760535477.7770848, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_0cf23afe96af8e163e8df40ca300c508.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project\nfrom `dbt`.`int_execution_transactions_by_project_hourly_recent`\nwhere project is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "project", "file_key_name": "models.int_execution_transactions_by_project_hourly_recent", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_hourly_recent')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_tx_count.1b15e22668": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_hourly_recent_tx_count", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_tx_count.1b15e22668", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_hourly_recent_tx_count"], "alias": "not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9"}, "created_at": 1760535477.7786703, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_a9f7dfce6fb80c141df1946a3d125bb9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tx_count\nfrom `dbt`.`int_execution_transactions_by_project_hourly_recent`\nwhere tx_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tx_count", "file_key_name": "models.int_execution_transactions_by_project_hourly_recent", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_hourly_recent')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_active_accounts.82b19fb74d": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_hourly_recent_active_accounts", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_active_accounts.82b19fb74d", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_hourly_recent_active_accounts"], "alias": "not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929"}, "created_at": 1760535477.7803552, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_hourly_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_cab4afbbb69651cfceb9c38977c25929.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_accounts\nfrom `dbt`.`int_execution_transactions_by_project_hourly_recent`\nwhere active_accounts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "active_accounts", "file_key_name": "models.int_execution_transactions_by_project_hourly_recent", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_accounts", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_hourly_recent')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_month.89db02a301": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_alltime_state_month", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_month.89db02a301", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_alltime_state_month"], "alias": "not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f"}, "created_at": 1760535477.7819283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_alltime_state", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_38647f63b4e2562b3889be6da605ba0f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom `dbt`.`int_execution_transactions_by_project_alltime_state`\nwhere month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "month", "file_key_name": "models.int_execution_transactions_by_project_alltime_state", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_alltime_state')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_project.5dd2512fcd": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_int_execution_transactions_by_project_alltime_state_project", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15.sql", "original_file_path": "models/execution/transactions/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_project.5dd2512fcd", "fqn": ["gnosis_dbt", "execution", "transactions", "intermediate", "not_null_int_execution_transactions_by_project_alltime_state_project"], "alias": "not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15"}, "created_at": 1760535477.7835183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15\") }}", "language": "sql", "refs": [{"name": "int_execution_transactions_by_project_alltime_state", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/intermediate/schema.yml/not_null_int_execution_transac_17261e84e4dded200ae452eecadf6a15.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project\nfrom `dbt`.`int_execution_transactions_by_project_alltime_state`\nwhere project is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "project", "file_key_name": "models.int_execution_transactions_by_project_alltime_state", "attached_node": "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project", "model": "{{ get_where_subquery(ref('int_execution_transactions_by_project_alltime_state')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date.52939ba037": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date.52939ba037", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date"], "alias": "not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e"}, "created_at": 1760535477.853672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_a826557ff3582fe88c803956ac063b9e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_active_accounts_by_project_monthly_top5`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_active_accounts_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label.25162cce36": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label.25162cce36", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label"], "alias": "not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15"}, "created_at": 1760535477.8552911, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_ffadeab3fda77fa96f55004449109e15.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_active_accounts_by_project_monthly_top5`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_active_accounts_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value.f4b4dece42": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value.f4b4dece42", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value"], "alias": "not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287"}, "created_at": 1760535477.8568635, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_d6ef0e0ca623a73d91401f4fb31cb287.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_active_accounts_by_project_monthly_top5`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_active_accounts_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_date.e77654a051": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_sector_hourly_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_date.e77654a051", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_sector_hourly_date"], "alias": "not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a"}, "created_at": 1760535477.8585863, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_f008065a7f587e9f863ceccfb4327e0a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_active_accounts_by_sector_hourly`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_active_accounts_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_label.7f2d083570": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_sector_hourly_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_label.7f2d083570", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_sector_hourly_label"], "alias": "not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615"}, "created_at": 1760535477.860175, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_8b3411c62516522cf81d8cc8f77cc615.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_active_accounts_by_sector_hourly`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_active_accounts_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_value.4aa505dc36": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_active_accounts_by_sector_hourly_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_value.4aa505dc36", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_active_accounts_by_sector_hourly_value"], "alias": "not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed"}, "created_at": 1760535477.8617783, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_active_accounts_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_67c07e09168eeae849ec4b8b1dd747ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_active_accounts_by_sector_hourly`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_active_accounts_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_active_accounts_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_date.7d6d9bbca5": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_daily_date.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_date.7d6d9bbca5", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_daily_date"], "alias": "not_null_api_execution_transactions_by_sector_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8636227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_by_sector_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_label.8ad1b1eb25": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_daily_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_daily_label.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_label.8ad1b1eb25", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_daily_label"], "alias": "not_null_api_execution_transactions_by_sector_daily_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8651946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_daily_label.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_by_sector_daily`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_value.70d25812b1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_daily_value.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_value.70d25812b1", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_daily_value"], "alias": "not_null_api_execution_transactions_by_sector_daily_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8667722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_daily_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_by_sector_daily`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_date.d5137ceba4": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_hourly_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_hourly_date.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_date.d5137ceba4", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_hourly_date"], "alias": "not_null_api_execution_transactions_by_sector_hourly_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8684514, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_hourly_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_by_sector_hourly`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_label.ccee33f0c2": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_hourly_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_hourly_label.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_label.ccee33f0c2", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_hourly_label"], "alias": "not_null_api_execution_transactions_by_sector_hourly_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8700044, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_hourly_label.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_by_sector_hourly`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_value.e817ca373a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_by_sector_hourly_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_by_sector_hourly_value.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_value.e817ca373a", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_by_sector_hourly_value"], "alias": "not_null_api_execution_transactions_by_sector_hourly_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8715754, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_by_sector_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_by_sector_hourly_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_by_sector_hourly`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_by_sector_hourly", "attached_node": "model.gnosis_dbt.api_execution_transactions_by_sector_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_by_sector_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_date.f29b9945e6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_cnt_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_cnt_daily_date.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_date.f29b9945e6", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_cnt_daily_date"], "alias": "not_null_api_execution_transactions_cnt_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8731458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_cnt_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_cnt_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_transaction_type.b0dc7eaceb": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_cnt_daily_transaction_type", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_cnt_daily_transaction_type.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_transaction_type.b0dc7eaceb", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_cnt_daily_transaction_type"], "alias": "not_null_api_execution_transactions_cnt_daily_transaction_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8747382, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_cnt_daily_transaction_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`api_execution_transactions_cnt_daily`\nwhere transaction_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_type", "file_key_name": "models.api_execution_transactions_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_type", "model": "{{ get_where_subquery(ref('api_execution_transactions_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_value.12fb2dc1d2": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_cnt_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_cnt_daily_value.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_value.12fb2dc1d2", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_cnt_daily_value"], "alias": "not_null_api_execution_transactions_cnt_daily_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8763335, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_cnt_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_cnt_daily_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_cnt_daily`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_cnt_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_cnt_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date.32ac91a2c0": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date.32ac91a2c0", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date"], "alias": "not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b"}, "created_at": 1760535477.8780458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_fees_native_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_f28e565965b92915fb0b0e94bac36d5b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_fees_native_by_project_monthly_top5`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_fees_native_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_fees_native_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label.c774ef9c4a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label.c774ef9c4a", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label"], "alias": "not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85"}, "created_at": 1760535477.8796287, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_fees_native_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_65a46da01d294812b0cc2c67bcfd0f85.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_fees_native_by_project_monthly_top5`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_fees_native_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_fees_native_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value.618a58b73e": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value.618a58b73e", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value"], "alias": "not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6"}, "created_at": 1760535477.881189, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_fees_native_by_project_monthly_top5", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_f0835c755586153a0032af29b1a055f6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_fees_native_by_project_monthly_top5`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_fees_native_by_project_monthly_top5", "attached_node": "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_fees_native_by_project_monthly_top5')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_date.9a0f9c0df3": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_gas_share_by_project_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_date.9a0f9c0df3", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_gas_share_by_project_daily_date"], "alias": "not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18"}, "created_at": 1760535477.8827908, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_gas_share_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_59692498e32f4a0f56601b43fea27b18.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_gas_share_by_project_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_gas_share_by_project_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_gas_share_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_label.f033fcb95a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_gas_share_by_project_daily_label", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_label.f033fcb95a", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_gas_share_by_project_daily_label"], "alias": "not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb"}, "created_at": 1760535477.8843546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_gas_share_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_bc9236c9cb1ea974ce06cd5a2fa1fbfb.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_execution_transactions_gas_share_by_project_daily`\nwhere label is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "label", "file_key_name": "models.api_execution_transactions_gas_share_by_project_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "label", "model": "{{ get_where_subquery(ref('api_execution_transactions_gas_share_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_value.339c013119": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_gas_share_by_project_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_value.339c013119", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_gas_share_by_project_daily_value"], "alias": "not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f"}, "created_at": 1760535477.885924, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f\") }}", "language": "sql", "refs": [{"name": "api_execution_transactions_gas_share_by_project_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transac_a4bae9210022b6463e3c186296cac48f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_transactions_gas_share_by_project_daily`\nwhere value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.api_execution_transactions_gas_share_by_project_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('api_execution_transactions_gas_share_by_project_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_date.1f6b125a22": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_gas_used_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_gas_used_daily_date.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_date.1f6b125a22", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_gas_used_daily_date"], "alias": "not_null_api_execution_transactions_gas_used_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.887567, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_gas_used_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_gas_used_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_gas_used_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_transactions_gas_used_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_execution_transactions_gas_used_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_execution_transactions_gas_used_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_gas_used.8db0fee0ba": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_execution_transactions_gas_used_daily_gas_used", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_execution_transactions_gas_used_daily_gas_used.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_gas_used.8db0fee0ba", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_api_execution_transactions_gas_used_daily_gas_used"], "alias": "not_null_api_execution_transactions_gas_used_daily_gas_used", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8891282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_execution_transactions_gas_used_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.api_execution_transactions_gas_used_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_api_execution_transactions_gas_used_daily_gas_used.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used\nfrom `dbt`.`api_execution_transactions_gas_used_daily`\nwhere gas_used is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_used", "file_key_name": "models.api_execution_transactions_gas_used_daily", "attached_node": "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used", "model": "{{ get_where_subquery(ref('api_execution_transactions_gas_used_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_date.cf19023a9f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transactions_by_sector_daily_date.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_date.cf19023a9f", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_date"], "alias": "not_null_fct_execution_transactions_by_sector_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8907225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transactions_by_sector_daily_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_sector.0d9bc9ca69": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_sector", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transactions_by_sector_daily_sector.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_sector.0d9bc9ca69", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_sector"], "alias": "not_null_fct_execution_transactions_by_sector_daily_sector", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8923159, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transactions_by_sector_daily_sector.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sector\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere sector is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sector", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sector", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_active_accounts.a97d812173": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_active_accounts", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_active_accounts.a97d812173", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_active_accounts"], "alias": "not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e"}, "created_at": 1760535477.8939555, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e\") }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transac_b3b316b720c7a281ea100a8eee6e345e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_accounts\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere active_accounts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "active_accounts", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_accounts", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_txs.571093b839": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_txs", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transactions_by_sector_daily_txs.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_txs.571093b839", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_txs"], "alias": "not_null_fct_execution_transactions_by_sector_daily_txs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.8955464, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transactions_by_sector_daily_txs.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect txs\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere txs is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txs", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "txs", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_gas_used_sum.f2684b1b10": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_gas_used_sum", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_gas_used_sum.f2684b1b10", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_gas_used_sum"], "alias": "not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f"}, "created_at": 1760535477.897218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f\") }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transac_fcc352ae4d9eebc9b1ecc45fd4be419f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used_sum\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere gas_used_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gas_used_sum", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used_sum", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_fee_native_sum.d48374bd5e": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_execution_transactions_by_sector_daily_fee_native_sum", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f.sql", "original_file_path": "models/execution/transactions/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_fee_native_sum.d48374bd5e", "fqn": ["gnosis_dbt", "execution", "transactions", "marts", "not_null_fct_execution_transactions_by_sector_daily_fee_native_sum"], "alias": "not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f"}, "created_at": 1760535477.8988016, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f\") }}", "language": "sql", "refs": [{"name": "fct_execution_transactions_by_sector_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"]}, "compiled_path": "target/compiled/gnosis_dbt/models/execution/transactions/marts/schema.yml/not_null_fct_execution_transac_10ea75f4e5993644af17ea909544811f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fee_native_sum\nfrom `dbt`.`fct_execution_transactions_by_sector_daily`\nwhere fee_native_sum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fee_native_sum", "file_key_name": "models.fct_execution_transactions_by_sector_daily", "attached_node": "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fee_native_sum", "model": "{{ get_where_subquery(ref('fct_execution_transactions_by_sector_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_state_size_diff_daily_address", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_state_size_diff_daily_address.sql", "original_file_path": "models/execution/state/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c", "fqn": ["gnosis_dbt", "execution", "state", "intermediate", "not_null_execution_state_size_diff_daily_address"], "alias": "not_null_execution_state_size_diff_daily_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.9372451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_size_diff_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address", "file_key_name": "models.execution_state_size_diff_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address", "model": "{{ get_where_subquery(ref('execution_state_size_diff_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_execution_state_size_diff_daily_address", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_execution_state_size_diff_daily_address.sql", "original_file_path": "models/execution/state/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a", "fqn": ["gnosis_dbt", "execution", "state", "intermediate", "unique_execution_state_size_diff_daily_address"], "alias": "unique_execution_state_size_diff_daily_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.9388528, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_size_diff_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address", "file_key_name": "models.execution_state_size_diff_daily", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "address", "model": "{{ get_where_subquery(ref('execution_state_size_diff_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_state_size_diff_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_state_size_diff_daily_date.sql", "original_file_path": "models/execution/state/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6", "fqn": ["gnosis_dbt", "execution", "state", "intermediate", "not_null_execution_state_size_diff_daily_date"], "alias": "not_null_execution_state_size_diff_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.940681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_size_diff_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.execution_state_size_diff_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('execution_state_size_diff_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_state_address_current_address", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_state_address_current_address.sql", "original_file_path": "models/execution/state/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94", "fqn": ["gnosis_dbt", "execution", "state", "marts", "not_null_execution_state_address_current_address"], "alias": "not_null_execution_state_address_current_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.9500256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_address_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address", "file_key_name": "models.execution_state_address_current", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address", "model": "{{ get_where_subquery(ref('execution_state_address_current')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_execution_state_address_current_address", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_execution_state_address_current_address.sql", "original_file_path": "models/execution/state/marts/schema.yml", "unique_id": "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66", "fqn": ["gnosis_dbt", "execution", "state", "marts", "unique_execution_state_address_current_address"], "alias": "unique_execution_state_address_current_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.9517994, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_address_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address", "file_key_name": "models.execution_state_address_current", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "address", "model": "{{ get_where_subquery(ref('execution_state_address_current')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_execution_state_size_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_execution_state_size_daily_date.sql", "original_file_path": "models/execution/state/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec", "fqn": ["gnosis_dbt", "execution", "state", "marts", "not_null_execution_state_size_daily_date"], "alias": "not_null_execution_state_size_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535477.953423, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "execution_state_size_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.execution_state_size_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('execution_state_size_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_info_visit_ended_at", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_info_visit_ended_at.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_peers_info_visit_ended_at"], "alias": "not_null_p2p_peers_info_visit_ended_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.275845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_ended_at", "file_key_name": "models.p2p_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_ended_at", "model": "{{ get_where_subquery(ref('p2p_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_peers_info_peer_id"], "alias": "not_null_p2p_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.27749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b", "fqn": ["gnosis_dbt", "p2p", "intermediate", "unique_p2p_peers_info_peer_id"], "alias": "unique_p2p_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2790716, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_info", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv4_peers_info_visit_ended_at", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv4_peers_info_visit_ended_at.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv4_peers_info_visit_ended_at"], "alias": "not_null_p2p_discv4_peers_info_visit_ended_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2806473, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_ended_at", "file_key_name": "models.p2p_discv4_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_ended_at", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv4_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv4_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv4_peers_info_peer_id"], "alias": "not_null_p2p_discv4_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.282203, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv4_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_discv4_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_discv4_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf", "fqn": ["gnosis_dbt", "p2p", "intermediate", "unique_p2p_discv4_peers_info_peer_id"], "alias": "unique_p2p_discv4_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2839217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv4_peers_info", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_visit_ended_at.ebb19916fd": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv4_peers_info2_visit_ended_at", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv4_peers_info2_visit_ended_at.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_visit_ended_at.ebb19916fd", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv4_peers_info2_visit_ended_at"], "alias": "not_null_p2p_discv4_peers_info2_visit_ended_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2855618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_ended_at", "file_key_name": "models.p2p_discv4_peers_info2", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_ended_at", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info2')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_peer_id.dc105cdb6a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv4_peers_info2_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv4_peers_info2_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_peer_id.dc105cdb6a", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv4_peers_info2_peer_id"], "alias": "not_null_p2p_discv4_peers_info2_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2871592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv4_peers_info2", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info2')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_discv4_peers_info2_peer_id.1089251f32": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_discv4_peers_info2_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_discv4_peers_info2_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_discv4_peers_info2_peer_id.1089251f32", "fqn": ["gnosis_dbt", "p2p", "intermediate", "unique_p2p_discv4_peers_info2_peer_id"], "alias": "unique_p2p_discv4_peers_info2_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2887433, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv4_peers_info2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv4_peers_info2", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv4_peers_info2')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv5_peers_info_visit_ended_at", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv5_peers_info_visit_ended_at.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv5_peers_info_visit_ended_at"], "alias": "not_null_p2p_discv5_peers_info_visit_ended_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.290366, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv5_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_ended_at", "file_key_name": "models.p2p_discv5_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_ended_at", "model": "{{ get_where_subquery(ref('p2p_discv5_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv5_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv5_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv5_peers_info_peer_id"], "alias": "not_null_p2p_discv5_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2919488, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv5_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv5_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv5_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_discv5_peers_info_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_discv5_peers_info_peer_id.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd", "fqn": ["gnosis_dbt", "p2p", "intermediate", "unique_p2p_discv5_peers_info_peer_id"], "alias": "unique_p2p_discv5_peers_info_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2936206, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv5_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_discv5_peers_info", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_discv5_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_discv5_peers_info_fork_digest", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_discv5_peers_info_fork_digest.sql", "original_file_path": "models/p2p/intermediate/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75", "fqn": ["gnosis_dbt", "p2p", "intermediate", "not_null_p2p_discv5_peers_info_fork_digest"], "alias": "not_null_p2p_discv5_peers_info_fork_digest", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.2951727, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_discv5_peers_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fork_digest", "file_key_name": "models.p2p_discv5_peers_info", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fork_digest", "model": "{{ get_where_subquery(ref('p2p_discv5_peers_info')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_cl_fork_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_cl_fork_daily_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_cl_fork_daily_date"], "alias": "not_null_p2p_peers_cl_fork_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.353824, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_cl_fork_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_cl_fork_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_cl_fork_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_clients_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_clients_daily_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_clients_daily_date"], "alias": "not_null_p2p_peers_clients_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3554897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_clients_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_clients_daily_client.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_clients_daily_client"], "alias": "not_null_p2p_peers_clients_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.357077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.p2p_peers_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('p2p_peers_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_clients_daily_value", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_clients_daily_value.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_clients_daily_value"], "alias": "not_null_p2p_peers_clients_daily_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3586729, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.p2p_peers_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('p2p_peers_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_daily_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_daily_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_daily_peer_id"], "alias": "not_null_p2p_peers_geo_daily_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3602574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_peers_geo_daily_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_peers_geo_daily_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223", "fqn": ["gnosis_dbt", "p2p", "marts", "unique_p2p_peers_geo_daily_peer_id"], "alias": "unique_p2p_peers_geo_daily_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3618357, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_daily", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_daily_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_daily_date"], "alias": "not_null_p2p_peers_geo_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3636746, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_geo_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_daily_cnt", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_daily_cnt.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_daily_cnt"], "alias": "not_null_p2p_peers_geo_daily_cnt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3652635, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cnt", "file_key_name": "models.p2p_peers_geo_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cnt", "model": "{{ get_where_subquery(ref('p2p_peers_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_hourly_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_hourly_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_hourly_date"], "alias": "not_null_p2p_peers_geo_hourly_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3668308, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_geo_hourly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_geo_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_hourly_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_hourly_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_hourly_peer_id"], "alias": "not_null_p2p_peers_geo_hourly_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3684022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_hourly", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_peers_geo_hourly_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_peers_geo_hourly_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e", "fqn": ["gnosis_dbt", "p2p", "marts", "unique_p2p_peers_geo_hourly_peer_id"], "alias": "unique_p2p_peers_geo_hourly_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.369936, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_hourly", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_hourly')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_latest_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_latest_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_latest_peer_id"], "alias": "not_null_p2p_peers_geo_latest_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.37151, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91": {"database": "dbt", "schema": "dbt_test__audit", "name": "unique_p2p_peers_geo_latest_peer_id", "resource_type": "test", "package_name": "gnosis_dbt", "path": "unique_p2p_peers_geo_latest_peer_id.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91", "fqn": ["gnosis_dbt", "p2p", "marts", "unique_p2p_peers_geo_latest_peer_id"], "alias": "unique_p2p_peers_geo_latest_peer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.373153, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_id", "file_key_name": "models.p2p_peers_geo_latest", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "peer_id", "model": "{{ get_where_subquery(ref('p2p_peers_geo_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_latest_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_latest_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_latest_date"], "alias": "not_null_p2p_peers_geo_latest_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3747106, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_geo_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_geo_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_topology_latest_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_topology_latest_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_topology_latest_date"], "alias": "not_null_p2p_peers_geo_topology_latest_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3762863, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.p2p_peers_geo_topology_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('p2p_peers_geo_topology_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_topology_latest_peer_ip", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_topology_latest_peer_ip.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_topology_latest_peer_ip"], "alias": "not_null_p2p_peers_geo_topology_latest_peer_ip", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3778503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_ip", "file_key_name": "models.p2p_peers_geo_topology_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_ip", "model": "{{ get_where_subquery(ref('p2p_peers_geo_topology_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix"], "alias": "not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3794322, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "peer_discovery_id_prefix", "file_key_name": "models.p2p_peers_geo_topology_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "peer_discovery_id_prefix", "model": "{{ get_where_subquery(ref('p2p_peers_geo_topology_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_p2p_peers_geo_topology_latest_cnt", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_p2p_peers_geo_topology_latest_cnt.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_p2p_peers_geo_topology_latest_cnt"], "alias": "not_null_p2p_peers_geo_topology_latest_cnt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.380971, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "p2p_peers_geo_topology_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cnt", "file_key_name": "models.p2p_peers_geo_topology_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cnt", "model": "{{ get_where_subquery(ref('p2p_peers_geo_topology_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_api_p2p_discv5_geo_latest_date.1514705801": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_api_p2p_discv5_geo_latest_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_api_p2p_discv5_geo_latest_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_geo_latest_date.1514705801", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_api_p2p_discv5_geo_latest_date"], "alias": "not_null_api_p2p_discv5_geo_latest_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.382633, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "api_p2p_discv5_geo_latest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.api_p2p_discv5_geo_latest", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('api_p2p_discv5_geo_latest')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_date.f297f01de6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_p2p_discv5_geo_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_p2p_discv5_geo_daily_date.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_date.f297f01de6", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_fct_p2p_discv5_geo_daily_date"], "alias": "not_null_fct_p2p_discv5_geo_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3841777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_p2p_discv5_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_p2p_discv5_geo_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_p2p_discv5_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_country.2e88c184f6": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_fct_p2p_discv5_geo_daily_country", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_fct_p2p_discv5_geo_daily_country.sql", "original_file_path": "models/p2p/marts/schema.yml", "unique_id": "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_country.2e88c184f6", "fqn": ["gnosis_dbt", "p2p", "marts", "not_null_fct_p2p_discv5_geo_daily_country"], "alias": "not_null_fct_p2p_discv5_geo_daily_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3857243, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_p2p_discv5_geo_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.fct_p2p_discv5_geo_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('fct_p2p_discv5_geo_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_date.a7e4d781b8": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_stg_crawlers_data__dune_prices_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_stg_crawlers_data__dune_prices_date.sql", "original_file_path": "models/crawlers_data/staging/schema.yml", "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_date.a7e4d781b8", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "not_null_stg_crawlers_data__dune_prices_date"], "alias": "not_null_stg_crawlers_data__dune_prices_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3939154, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_crawlers_data__dune_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/schema.yml/not_null_stg_crawlers_data__dune_prices_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`stg_crawlers_data__dune_prices`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.stg_crawlers_data__dune_prices", "attached_node": "model.gnosis_dbt.stg_crawlers_data__dune_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_crawlers_data__dune_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_symbol.4496b19dac": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_stg_crawlers_data__dune_prices_symbol", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_stg_crawlers_data__dune_prices_symbol.sql", "original_file_path": "models/crawlers_data/staging/schema.yml", "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_symbol.4496b19dac", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "not_null_stg_crawlers_data__dune_prices_symbol"], "alias": "not_null_stg_crawlers_data__dune_prices_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3957508, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_crawlers_data__dune_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/schema.yml/not_null_stg_crawlers_data__dune_prices_symbol.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect symbol\nfrom `dbt`.`stg_crawlers_data__dune_prices`\nwhere symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "symbol", "file_key_name": "models.stg_crawlers_data__dune_prices", "attached_node": "model.gnosis_dbt.stg_crawlers_data__dune_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "symbol", "model": "{{ get_where_subquery(ref('stg_crawlers_data__dune_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_price.c31ece6228": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_stg_crawlers_data__dune_prices_price", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_stg_crawlers_data__dune_prices_price.sql", "original_file_path": "models/crawlers_data/staging/schema.yml", "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_price.c31ece6228", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "not_null_stg_crawlers_data__dune_prices_price"], "alias": "not_null_stg_crawlers_data__dune_prices_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.3973403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_crawlers_data__dune_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/schema.yml/not_null_stg_crawlers_data__dune_prices_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `dbt`.`stg_crawlers_data__dune_prices`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.stg_crawlers_data__dune_prices", "attached_node": "model.gnosis_dbt.stg_crawlers_data__dune_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('stg_crawlers_data__dune_prices')) }}"}, "namespace": null}}, "test.gnosis_dbt.dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol.12e0dbaa70": {"database": "dbt", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol", "resource_type": "test", "package_name": "gnosis_dbt", "path": "dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0.sql", "original_file_path": "models/crawlers_data/staging/schema.yml", "unique_id": "test.gnosis_dbt.dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol.12e0dbaa70", "fqn": ["gnosis_dbt", "crawlers_data", "staging", "dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol"], "alias": "dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0"}, "created_at": 1760535478.3989358, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0\") }}", "language": "sql", "refs": [{"name": "stg_crawlers_data__dune_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"]}, "compiled_path": "target/compiled/gnosis_dbt/models/crawlers_data/staging/schema.yml/dbt_utils_unique_combination_o_530e88e7319a1bfe65a8a026e6528af0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date, symbol\n    from `dbt`.`stg_crawlers_data__dune_prices`\n    group by date, symbol\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_crawlers_data__dune_prices", "attached_node": "model.gnosis_dbt.stg_crawlers_data__dune_prices", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date", "symbol"], "model": "{{ get_where_subquery(ref('stg_crawlers_data__dune_prices')) }}"}, "namespace": "dbt_utils"}}, "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_cloud_daily_cloud", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_cloud_daily_cloud.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_cloud_daily_cloud"], "alias": "not_null_probelab_peers_clients_cloud_daily_cloud", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4571788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_cloud_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cloud", "file_key_name": "models.probelab_peers_clients_cloud_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cloud", "model": "{{ get_where_subquery(ref('probelab_peers_clients_cloud_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_cloud_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_cloud_daily_date.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_cloud_daily_date"], "alias": "not_null_probelab_peers_clients_cloud_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4588144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_cloud_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.probelab_peers_clients_cloud_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('probelab_peers_clients_cloud_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_country_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_country_daily_date.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_country_daily_date"], "alias": "not_null_probelab_peers_clients_country_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4604201, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_country_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.probelab_peers_clients_country_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('probelab_peers_clients_country_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_country_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_country_daily_client.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_country_daily_client"], "alias": "not_null_probelab_peers_clients_country_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4619977, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_country_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.probelab_peers_clients_country_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('probelab_peers_clients_country_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_country_daily_country", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_country_daily_country.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_country_daily_country"], "alias": "not_null_probelab_peers_clients_country_daily_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4636621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_country_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.probelab_peers_clients_country_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('probelab_peers_clients_country_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_daily_date.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_daily_date"], "alias": "not_null_probelab_peers_clients_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4652076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.probelab_peers_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('probelab_peers_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_daily_client.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_daily_client"], "alias": "not_null_probelab_peers_clients_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4667668, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.probelab_peers_clients_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('probelab_peers_clients_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_quic_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_quic_daily_date.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_quic_daily_date"], "alias": "not_null_probelab_peers_clients_quic_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4683254, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_quic_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.probelab_peers_clients_quic_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('probelab_peers_clients_quic_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_version_daily_date", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_version_daily_date.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_version_daily_date"], "alias": "not_null_probelab_peers_clients_version_daily_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.469915, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.probelab_peers_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('probelab_peers_clients_version_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_version_daily_client", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_version_daily_client.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_version_daily_client"], "alias": "not_null_probelab_peers_clients_version_daily_client", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4715016, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client", "file_key_name": "models.probelab_peers_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "client", "model": "{{ get_where_subquery(ref('probelab_peers_clients_version_daily')) }}"}, "namespace": null}}, "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00": {"database": "dbt", "schema": "dbt_test__audit", "name": "not_null_probelab_peers_clients_version_daily_version", "resource_type": "test", "package_name": "gnosis_dbt", "path": "not_null_probelab_peers_clients_version_daily_version.sql", "original_file_path": "models/probelab/schema.yml", "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00", "fqn": ["gnosis_dbt", "probelab", "not_null_probelab_peers_clients_version_daily_version"], "alias": "not_null_probelab_peers_clients_version_daily_version", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760535478.4731183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "probelab_peers_clients_version_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "version", "file_key_name": "models.probelab_peers_clients_version_daily", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version", "model": "{{ get_where_subquery(ref('probelab_peers_clients_version_daily')) }}"}, "namespace": null}}}, "sources": {"source.gnosis_dbt.consensus.blocks": {"database": "", "schema": "consensus", "name": "blocks", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.blocks", "fqn": ["gnosis_dbt", "consensus", "consensus", "blocks"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Beacon blocks with execution payload fields when applicable.", "columns": {"slot": {"name": "slot", "description": "Slot number.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_index": {"name": "proposer_index", "description": "Index of the proposing validator.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_root": {"name": "parent_root", "description": "Parent block root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "State root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "Block signature.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "Fork version label for this block (e.g., bellatrix, capella).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "randao_reveal": {"name": "randao_reveal", "description": "RANDAO reveal for randomness.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "graffiti": {"name": "graffiti", "description": "Graffiti field.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_deposit_root": {"name": "eth1_deposit_root", "description": "Eth1 deposit root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_deposit_count": {"name": "eth1_deposit_count", "description": "Eth1 deposit count.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "eth1_block_hash": {"name": "eth1_block_hash", "description": "Eth1 block hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp materialized from slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_aggregate_participation": {"name": "sync_aggregate_participation", "description": "Number of sync committee participants.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_aggregate_signature": {"name": "sync_aggregate_signature", "description": "Signature for sync aggregate.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_block_hash": {"name": "execution_payload_block_hash", "description": "Execution payload block hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_parent_hash": {"name": "execution_payload_parent_hash", "description": "Execution payload parent hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_fee_recipient": {"name": "execution_payload_fee_recipient", "description": "Fee recipient (coinbase) for execution payload.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_state_root": {"name": "execution_payload_state_root", "description": "Execution payload state root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_receipts_root": {"name": "execution_payload_receipts_root", "description": "Execution payload receipts root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_logs_bloom": {"name": "execution_payload_logs_bloom", "description": "Execution payload logs bloom.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_prev_randao": {"name": "execution_payload_prev_randao", "description": "Execution payload prev randao.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_block_number": {"name": "execution_payload_block_number", "description": "Execution payload block number.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_gas_limit": {"name": "execution_payload_gas_limit", "description": "Execution payload gas limit.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_gas_used": {"name": "execution_payload_gas_used", "description": "Execution payload gas used.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_timestamp": {"name": "execution_payload_timestamp", "description": "Execution payload timestamp (seconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_extra_data": {"name": "execution_payload_extra_data", "description": "Execution payload extra data.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_payload_base_fee_per_gas": {"name": "execution_payload_base_fee_per_gas", "description": "Execution payload base fee per gas.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_root": {"name": "withdrawals_root", "description": "Root of withdrawals.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_count": {"name": "withdrawals_count", "description": "Count of withdrawals in block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_kzg_commitments_count": {"name": "blob_kzg_commitments_count", "description": "Blob KZG commitments count (Deneb+).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_kzg_commitments_root": {"name": "blob_kzg_commitments_root", "description": "Root of blob KZG commitments.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_requests_count": {"name": "execution_requests_count", "description": "Count of execution requests.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`blocks`", "created_at": 1760535478.5008771, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.attestations": {"database": "", "schema": "consensus", "name": "attestations", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.attestations", "fqn": ["gnosis_dbt", "consensus", "consensus", "attestations"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "attestations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Attestation records included in blocks.", "columns": {"slot": {"name": "slot", "description": "Enclosing block slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestation_index": {"name": "attestation_index", "description": "Index within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "aggregation_bits": {"name": "aggregation_bits", "description": "Aggregation bitfield.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "BLS signature.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestation_slot": {"name": "attestation_slot", "description": "Attested slot.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "committee_index": {"name": "committee_index", "description": "Committee index.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "beacon_block_root": {"name": "beacon_block_root", "description": "Beacon block root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_epoch": {"name": "source_epoch", "description": "Source epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_root": {"name": "source_root", "description": "Source root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_epoch": {"name": "target_epoch", "description": "Target epoch.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_root": {"name": "target_root", "description": "Target root.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "UTC timestamp from slot.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`attestations`", "created_at": 1760535478.5024478, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.attester_slashings": {"database": "", "schema": "consensus", "name": "attester_slashings", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.attester_slashings", "fqn": ["gnosis_dbt", "consensus", "consensus", "attester_slashings"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "attester_slashings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Attester slashing events.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slashing_index": {"name": "slashing_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_slot": {"name": "att_1_slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_committee_index": {"name": "att_1_committee_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_beacon_block_root": {"name": "att_1_beacon_block_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_source_epoch": {"name": "att_1_source_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_source_root": {"name": "att_1_source_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_target_epoch": {"name": "att_1_target_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_target_root": {"name": "att_1_target_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_signature": {"name": "att_1_signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_attesting_indices": {"name": "att_1_attesting_indices", "description": "", "meta": {}, "data_type": "Array(UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_1_validator_count": {"name": "att_1_validator_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_slot": {"name": "att_2_slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_committee_index": {"name": "att_2_committee_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_beacon_block_root": {"name": "att_2_beacon_block_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_source_epoch": {"name": "att_2_source_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_source_root": {"name": "att_2_source_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_target_epoch": {"name": "att_2_target_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_target_root": {"name": "att_2_target_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_signature": {"name": "att_2_signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_attesting_indices": {"name": "att_2_attesting_indices", "description": "", "meta": {}, "data_type": "Array(UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "att_2_validator_count": {"name": "att_2_validator_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_slashed_validators": {"name": "total_slashed_validators", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`attester_slashings`", "created_at": 1760535478.5027206, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.blob_commitments": {"database": "", "schema": "consensus", "name": "blob_commitments", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.blob_commitments", "fqn": ["gnosis_dbt", "consensus", "consensus", "blob_commitments"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "blob_commitments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "KZG blob commitments per slot.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "commitment_index": {"name": "commitment_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "commitment": {"name": "commitment", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`blob_commitments`", "created_at": 1760535478.502926, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.blob_sidecars": {"database": "", "schema": "consensus", "name": "blob_sidecars", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.blob_sidecars", "fqn": ["gnosis_dbt", "consensus", "consensus", "blob_sidecars"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "blob_sidecars", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Blob sidecars accompanying Deneb blocks.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_index": {"name": "blob_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "kzg_commitment": {"name": "kzg_commitment", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "kzg_proof": {"name": "kzg_proof", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_size": {"name": "blob_size", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_hash": {"name": "blob_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`blob_sidecars`", "created_at": 1760535478.5031354, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.bls_changes": {"database": "", "schema": "consensus", "name": "bls_changes", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.bls_changes", "fqn": ["gnosis_dbt", "consensus", "consensus", "bls_changes"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "bls_changes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "BLS-to-execution address change operations.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "change_index": {"name": "change_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_bls_pubkey": {"name": "from_bls_pubkey", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_execution_address": {"name": "to_execution_address", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`bls_changes`", "created_at": 1760535478.5033557, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.deposits": {"database": "", "schema": "consensus", "name": "deposits", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.deposits", "fqn": ["gnosis_dbt", "consensus", "consensus", "deposits"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "deposits", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Eth1 deposits included in the beacon chain.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposit_index": {"name": "deposit_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pubkey": {"name": "pubkey", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_credentials": {"name": "withdrawal_credentials", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proof": {"name": "proof", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`deposits`", "created_at": 1760535478.5035632, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.execution_payloads": {"database": "", "schema": "consensus", "name": "execution_payloads", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.execution_payloads", "fqn": ["gnosis_dbt", "consensus", "consensus", "execution_payloads"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "execution_payloads", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Execution payloads embedded in beacon blocks.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_hash": {"name": "parent_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_recipient": {"name": "fee_recipient", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipts_root": {"name": "receipts_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "logs_bloom": {"name": "logs_bloom", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "prev_randao": {"name": "prev_randao", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_fee_per_gas": {"name": "base_fee_per_gas", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "blob_gas_used": {"name": "blob_gas_used", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "excess_blob_gas": {"name": "excess_blob_gas", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_data": {"name": "extra_data", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transactions_count": {"name": "transactions_count", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_count": {"name": "withdrawals_count", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`execution_payloads`", "created_at": 1760535478.5038009, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.execution_requests": {"database": "", "schema": "consensus", "name": "execution_requests", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.execution_requests", "fqn": ["gnosis_dbt", "consensus", "consensus", "execution_requests"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "execution_requests", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Execution requests (deposits/withdrawals/consolidations) payload counts per slot.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload": {"name": "payload", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deposits_count": {"name": "deposits_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_count": {"name": "withdrawals_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "consolidations_count": {"name": "consolidations_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`execution_requests`", "created_at": 1760535478.5039985, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.genesis": {"database": "", "schema": "consensus", "name": "genesis", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.genesis", "fqn": ["gnosis_dbt", "consensus", "consensus", "genesis"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "genesis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Genesis information for the beacon chain.", "columns": {"genesis_time": {"name": "genesis_time", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "genesis_validators_root": {"name": "genesis_validators_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "genesis_fork_version": {"name": "genesis_fork_version", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`genesis`", "created_at": 1760535478.5041873, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.raw_blocks": {"database": "", "schema": "consensus", "name": "raw_blocks", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.raw_blocks", "fqn": ["gnosis_dbt", "consensus", "consensus", "raw_blocks"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "raw_blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw JSON payloads of beacon blocks as retrieved.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_root": {"name": "block_root", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload": {"name": "payload", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload_hash": {"name": "payload_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "retrieved_at": {"name": "retrieved_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`raw_blocks`", "created_at": 1760535478.5044067, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.raw_genesis": {"database": "", "schema": "consensus", "name": "raw_genesis", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.raw_genesis", "fqn": ["gnosis_dbt", "consensus", "consensus", "raw_genesis"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "raw_genesis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw JSON payload of beacon genesis endpoint.", "columns": {"payload": {"name": "payload", "description": "", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "retrieved_at": {"name": "retrieved_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`raw_genesis`", "created_at": 1760535478.5047603, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.raw_rewards": {"database": "", "schema": "consensus", "name": "raw_rewards", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.raw_rewards", "fqn": ["gnosis_dbt", "consensus", "consensus", "raw_rewards"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "raw_rewards", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw rewards API snapshots.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload": {"name": "payload", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload_hash": {"name": "payload_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "retrieved_at": {"name": "retrieved_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`raw_rewards`", "created_at": 1760535478.504964, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.raw_specs": {"database": "", "schema": "consensus", "name": "raw_specs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.raw_specs", "fqn": ["gnosis_dbt", "consensus", "consensus", "raw_specs"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "raw_specs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw network spec parameters as JSON.", "columns": {"payload": {"name": "payload", "description": "", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}, "retrieved_at": {"name": "retrieved_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`raw_specs`", "created_at": 1760535478.5051534, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.raw_validators": {"database": "", "schema": "consensus", "name": "raw_validators", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.raw_validators", "fqn": ["gnosis_dbt", "consensus", "consensus", "raw_validators"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "raw_validators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw validators API snapshots.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload": {"name": "payload", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payload_hash": {"name": "payload_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "retrieved_at": {"name": "retrieved_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`raw_validators`", "created_at": 1760535478.5053737, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.rewards": {"database": "", "schema": "consensus", "name": "rewards", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.rewards", "fqn": ["gnosis_dbt", "consensus", "consensus", "rewards"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "rewards", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Per-slot proposer reward breakdowns.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_index": {"name": "proposer_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total": {"name": "total", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attestations": {"name": "attestations", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_aggregate": {"name": "sync_aggregate", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "proposer_slashings": {"name": "proposer_slashings", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attester_slashings": {"name": "attester_slashings", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`rewards`", "created_at": 1760535478.5055828, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.specs": {"database": "", "schema": "consensus", "name": "specs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.specs", "fqn": ["gnosis_dbt", "consensus", "consensus", "specs"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "specs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Flattened network spec parameters.", "columns": {"parameter_name": {"name": "parameter_name", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parameter_value": {"name": "parameter_value", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`specs`", "created_at": 1760535478.5057712, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.sync_aggregates": {"database": "", "schema": "consensus", "name": "sync_aggregates", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.sync_aggregates", "fqn": ["gnosis_dbt", "consensus", "consensus", "sync_aggregates"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "sync_aggregates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sync committee aggregates per slot.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_committee_bits": {"name": "sync_committee_bits", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sync_committee_signature": {"name": "sync_committee_signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "participation_count": {"name": "participation_count", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "participating_validators": {"name": "participating_validators", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`sync_aggregates`", "created_at": 1760535478.5059671, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.time_helpers": {"database": "", "schema": "consensus", "name": "time_helpers", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.time_helpers", "fqn": ["gnosis_dbt", "consensus", "consensus", "time_helpers"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "time_helpers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Helper table for converting slots to timestamps.", "columns": {"genesis_time_unix": {"name": "genesis_time_unix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "seconds_per_slot": {"name": "seconds_per_slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slots_per_epoch": {"name": "slots_per_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`time_helpers`", "created_at": 1760535478.5061543, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.transactions": {"database": "", "schema": "consensus", "name": "transactions", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.transactions", "fqn": ["gnosis_dbt", "consensus", "consensus", "transactions"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Execution transactions as referenced from the beacon chain (redundant with execution.transactions but keyed by slot).", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_recipient": {"name": "fee_recipient", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_fee_per_gas": {"name": "base_fee_per_gas", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "input": {"name": "input", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`transactions`", "created_at": 1760535478.506392, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.transformer_progress": {"database": "", "schema": "consensus", "name": "transformer_progress", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.transformer_progress", "fqn": ["gnosis_dbt", "consensus", "consensus", "transformer_progress"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "transformer_progress", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "insert_version", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Status of raw->modeled consensus transformations.", "columns": {"raw_table_name": {"name": "raw_table_name", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_slot": {"name": "start_slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_slot": {"name": "end_slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "", "meta": {}, "data_type": "Enum8('processing'=1, 'completed'=2, 'failed'=3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_count": {"name": "processed_count", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "failed_count": {"name": "failed_count", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_message": {"name": "error_message", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`transformer_progress`", "created_at": 1760535478.5065958, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.validators": {"database": "", "schema": "consensus", "name": "validators", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.validators", "fqn": ["gnosis_dbt", "consensus", "consensus", "validators"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "validators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Validator registry and dynamic balance/status data per slot.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "balance": {"name": "balance", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pubkey": {"name": "pubkey", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_credentials": {"name": "withdrawal_credentials", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_balance": {"name": "effective_balance", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slashed": {"name": "slashed", "description": "", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "activation_eligibility_epoch": {"name": "activation_eligibility_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "activation_epoch": {"name": "activation_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exit_epoch": {"name": "exit_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawable_epoch": {"name": "withdrawable_epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`validators`", "created_at": 1760535478.5068192, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.voluntary_exits": {"database": "", "schema": "consensus", "name": "voluntary_exits", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.voluntary_exits", "fqn": ["gnosis_dbt", "consensus", "consensus", "voluntary_exits"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "voluntary_exits", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Voluntary exit messages.", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exit_index": {"name": "exit_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "signature": {"name": "signature", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "epoch": {"name": "epoch", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`voluntary_exits`", "created_at": 1760535478.507022, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.consensus.withdrawals": {"database": "", "schema": "consensus", "name": "withdrawals", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/consensus/consensus_sources.yml", "original_file_path": "models/consensus/consensus_sources.yml", "unique_id": "source.gnosis_dbt.consensus.withdrawals", "fqn": ["gnosis_dbt", "consensus", "consensus", "withdrawals"], "source_name": "consensus", "source_description": "Consensus-layer (Beacon chain) data captured from Gnosis Chain beacon nodes. Authoritative state from crawler-transformed beacon API responses.", "loader": "", "identifier": "withdrawals", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "slot_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Beacon-chain withdrawals list per slot (Capella+).", "columns": {"slot": {"name": "slot", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_index": {"name": "withdrawal_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot_timestamp": {"name": "slot_timestamp", "description": "", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "beacon", "consensus", "gnosis"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`consensus`.`withdrawals`", "created_at": 1760535478.5072217, "unrendered_database": null, "unrendered_schema": "consensus"}, "source.gnosis_dbt.execution.blocks": {"database": "", "schema": "execution", "name": "blocks", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.blocks", "fqn": ["gnosis_dbt", "execution", "execution", "blocks"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Canonical block headers (one row per block).", "columns": {"block_number": {"name": "block_number", "description": "Height of the block containing the record.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Keccak-256 hash of the block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_hash": {"name": "parent_hash", "description": "Hash of the parent block header.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "uncles_hash": {"name": "uncles_hash", "description": "Keccak-256 hash of the ommers list.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "author": {"name": "author", "description": "Address (20-byte hex) of the validator/miner that proposed the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state_root": {"name": "state_root", "description": "Root hash of the state trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transactions_root": {"name": "transactions_root", "description": "Root hash of the transactions trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipts_root": {"name": "receipts_root", "description": "Root hash of the receipts trie.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Total gas consumed by transactions in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "Maximum gas allowed in the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_data": {"name": "extra_data", "description": "Arbitrary extra-data bytes set by the block proposer (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "logs_bloom": {"name": "logs_bloom", "description": "Bloom filter for logs in this block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Unix epoch seconds when the block was proposed.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Serialized block size in bytes.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "mix_hash": {"name": "mix_hash", "description": "Mix hash (pre-merge PoW) or random field.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Block nonce (legacy field).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_fee_per_gas": {"name": "base_fee_per_gas", "description": "Base fee per gas introduced by EIP-1559 (wei).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_root": {"name": "withdrawals_root", "description": "Root hash of withdrawals list (Shanghai+).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier (100 for Gnosis).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp for the block (materialized from `timestamp`).", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`blocks`", "created_at": 1760535478.5074914, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.transactions": {"database": "", "schema": "execution", "name": "transactions", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.transactions", "fqn": ["gnosis_dbt", "execution", "execution", "transactions"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Signed EVM transactions included in blocks.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block containing the transaction.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Zero-based index of the transaction within the block.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Keccak-256 hash identifying the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "nonce": {"name": "nonce", "description": "Transaction count of the sender before this transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "Sender address (EOA or contract) that signed the transaction.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "Recipient address (null for contract creation).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_binary": {"name": "value_binary", "description": "Value (native token) as 32-byte big-endian binary.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_string": {"name": "value_string", "description": "Value as a decimal string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_f64": {"name": "value_f64", "description": "Value converted to floating-point GNO/XDAI (may lose precision).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "input": {"name": "input", "description": "Calldata / input data supplied with the transaction (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_limit": {"name": "gas_limit", "description": "Gas limit provided by the sender.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_used": {"name": "gas_used", "description": "Actual gas used by the transaction.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gas_price": {"name": "gas_price", "description": "Legacy gas price (wei) for pre-EIP-1559 txs.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Envelope type (0 = legacy, 1 = access-list, 2 = EIP-1559).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_priority_fee_per_gas": {"name": "max_priority_fee_per_gas", "description": "Maximum miner tip per gas (wei) for EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_fee_per_gas": {"name": "max_fee_per_gas", "description": "Maximum total fee per gas (wei) under EIP-1559.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "1 if the transaction succeeded; 0 if it reverted.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_bytes": {"name": "n_input_bytes", "description": "Byte length of the input data.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_zero_bytes": {"name": "n_input_zero_bytes", "description": "Number of zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_input_nonzero_bytes": {"name": "n_input_nonzero_bytes", "description": "Number of non-zero bytes in the input.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_rlp_bytes": {"name": "n_rlp_bytes", "description": "Total RLP-encoded payload size (bytes) if available.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timestamp": {"name": "timestamp", "description": "Block timestamp (seconds since epoch).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "r": {"name": "r", "description": "ECDSA signature r.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "s": {"name": "s", "description": "ECDSA signature s.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "v": {"name": "v", "description": "ECDSA recovery id / y-parity.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the enclosing block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`transactions`", "created_at": 1760535478.5077634, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.logs": {"database": "", "schema": "execution", "name": "logs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.logs", "fqn": ["gnosis_dbt", "execution", "execution", "logs"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Event logs emitted by smart contracts.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block containing the log.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the enclosing block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "log_index": {"name": "log_index", "description": "Zero-based index of the log within the receipt.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Contract address that emitted the event.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "topic0": {"name": "topic0", "description": "First indexed topic (event signature hash).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "topic1": {"name": "topic1", "description": "Second indexed topic.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "topic2": {"name": "topic2", "description": "Third indexed topic.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "topic3": {"name": "topic3", "description": "Fourth indexed topic.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "data": {"name": "data", "description": "Non-indexed event data payload (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_data_bytes": {"name": "n_data_bytes", "description": "Length of `data` in bytes.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`logs`", "created_at": 1760535478.5080013, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.native_transfers": {"database": "", "schema": "execution", "name": "native_transfers", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.native_transfers", "fqn": ["gnosis_dbt", "execution", "execution", "native_transfers"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "native_transfers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Value (XDAI) transfers decoded from transactions.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Block hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transfer_index": {"name": "transfer_index", "description": "Zero-based native-transfer index within the tx.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_address": {"name": "from_address", "description": "Sender address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_address": {"name": "to_address", "description": "Recipient address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_binary": {"name": "value_binary", "description": "Transfer value as 32-byte big-endian binary.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_string": {"name": "value_string", "description": "Transfer value as decimal string.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_f64": {"name": "value_f64", "description": "Transfer value as floating-point ether.", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`native_transfers`", "created_at": 1760535478.5082922, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.contracts": {"database": "", "schema": "execution", "name": "contracts", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.contracts", "fqn": ["gnosis_dbt", "execution", "execution", "contracts"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Smart contracts created on-chain with deployment metadata.", "columns": {"block_number": {"name": "block_number", "description": "Block in which the contract was created.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "create_index": {"name": "create_index", "description": "Index of this contract creation within the tx.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction that deployed the contract.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_address": {"name": "contract_address", "description": "Address of the newly created contract.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deployer": {"name": "deployer", "description": "Address that initiated the creation.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "factory": {"name": "factory", "description": "Factory contract address (if applicable).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_code": {"name": "init_code", "description": "Constructor byte-code executed on deployment.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "Runtime byte-code stored at the address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "init_code_hash": {"name": "init_code_hash", "description": "Keccak-256 hash of `init_code`.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_init_code_bytes": {"name": "n_init_code_bytes", "description": "Size of `init_code` in bytes.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "n_code_bytes": {"name": "n_code_bytes", "description": "Size of `code` in bytes.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "code_hash": {"name": "code_hash", "description": "Keccak-256 hash of runtime code.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`contracts`", "created_at": 1760535478.50852, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.traces": {"database": "", "schema": "execution", "name": "traces", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.traces", "fqn": ["gnosis_dbt", "execution", "execution", "traces"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "traces", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Execution traces (internal calls, creates, rewards) for every transaction.", "columns": {"action_from": {"name": "action_from", "description": "Sender address of the trace action.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_to": {"name": "action_to", "description": "Recipient address (null for CREATE).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_value": {"name": "action_value", "description": "Native value transferred (wei, decimal string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_gas": {"name": "action_gas", "description": "Gas provided to the action.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_input": {"name": "action_input", "description": "Input calldata for the action.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_call_type": {"name": "action_call_type", "description": "Specific call-type (CALL, DELEGATECALL, etc.).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_init": {"name": "action_init", "description": "Init code for CREATE/CREATE2.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_reward_type": {"name": "action_reward_type", "description": "Reward type for mining rewards (block, uncle).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "action_type": {"name": "action_type", "description": "Overall trace action type.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_gas_used": {"name": "result_gas_used", "description": "Gas actually used by the action.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_output": {"name": "result_output", "description": "Return data (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_code": {"name": "result_code", "description": "Runtime byte-code produced by CREATE.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "result_address": {"name": "result_address", "description": "Address of the newly-created contract.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "trace_address": {"name": "trace_address", "description": "Dot-separated path of the call tree (e.g., '0.1').", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtraces": {"name": "subtraces", "description": "Number of immediate child traces.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the parent transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Parent transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_number": {"name": "block_number", "description": "Block height.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Block hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error": {"name": "error", "description": "Error string if the action reverted/failed.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`traces`", "created_at": 1760535478.5087705, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.balance_diffs": {"database": "", "schema": "execution", "name": "balance_diffs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.balance_diffs", "fqn": ["gnosis_dbt", "execution", "execution", "balance_diffs"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "balance_diffs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Balance changes for accounts caused by each transaction.", "columns": {"block_number": {"name": "block_number", "description": "Height of the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Index of the transaction within the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Account address whose balance changed.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value_binary": {"name": "from_value_binary", "description": "Balance before change (32-byte binary).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value_string": {"name": "from_value_string", "description": "Balance before change (decimal string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value_f64": {"name": "from_value_f64", "description": "Balance before change (floating-point ether).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value_binary": {"name": "to_value_binary", "description": "Balance after change (32-byte binary).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value_string": {"name": "to_value_string", "description": "Balance after change (decimal string).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value_f64": {"name": "to_value_f64", "description": "Balance after change (floating-point ether).", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`balance_diffs`", "created_at": 1760535478.5089943, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.storage_diffs": {"database": "", "schema": "execution", "name": "storage_diffs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.storage_diffs", "fqn": ["gnosis_dbt", "execution", "execution", "storage_diffs"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "storage_diffs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Storage-slot mutations produced by each transaction.", "columns": {"block_number": {"name": "block_number", "description": "Block height.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Transaction index in the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Contract address whose storage changed.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "slot": {"name": "slot", "description": "32-byte storage-slot key.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value": {"name": "from_value", "description": "Value before change (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value": {"name": "to_value", "description": "Value after change (hex).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`storage_diffs`", "created_at": 1760535478.5092056, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.code_diffs": {"database": "", "schema": "execution", "name": "code_diffs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.code_diffs", "fqn": ["gnosis_dbt", "execution", "execution", "code_diffs"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "code_diffs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Smart-contract runtime-code changes produced by transactions (e.g., self-destruct & new code).", "columns": {"block_number": {"name": "block_number", "description": "Block height.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Transaction index in the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Contract address whose code changed.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value": {"name": "from_value", "description": "Runtime code hash before change.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value": {"name": "to_value", "description": "Runtime code hash after change.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`code_diffs`", "created_at": 1760535478.509447, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.nonce_diffs": {"database": "", "schema": "execution", "name": "nonce_diffs", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.nonce_diffs", "fqn": ["gnosis_dbt", "execution", "execution", "nonce_diffs"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "nonce_diffs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Nonce updates for accounts produced by each transaction.", "columns": {"block_number": {"name": "block_number", "description": "Block height.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_index": {"name": "transaction_index", "description": "Transaction index in the block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Account address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "from_value": {"name": "from_value", "description": "Nonce before change.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "to_value": {"name": "to_value", "description": "Nonce after change.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`nonce_diffs`", "created_at": 1760535478.5096593, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.withdrawals": {"database": "", "schema": "execution", "name": "withdrawals", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.withdrawals", "fqn": ["gnosis_dbt", "execution", "execution", "withdrawals"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "withdrawals", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Execution-layer representation of beacon-chain withdrawals bridged into blocks (Shanghai+).", "columns": {"block_number": {"name": "block_number", "description": "Height of the enclosing block.", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_hash": {"name": "block_hash", "description": "Hash of the enclosing block.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawals_root": {"name": "withdrawals_root", "description": "Root of withdrawals list.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "withdrawal_index": {"name": "withdrawal_index", "description": "Global withdrawal index (string) as emitted by engine.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "validator_index": {"name": "validator_index", "description": "Validator index (string) as emitted by engine.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "address": {"name": "address", "description": "Recipient address.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount withdrawn (gwei).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chain_id": {"name": "chain_id", "description": "EVM chain identifier.", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "UTC timestamp of the enclosing block.", "meta": {}, "data_type": "DateTime64(0, 'UTC')", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`withdrawals`", "created_at": 1760535478.5098758, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.indexing_state": {"database": "", "schema": "execution", "name": "indexing_state", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.indexing_state", "fqn": ["gnosis_dbt", "execution", "execution", "indexing_state"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "indexing_state", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Worker-reported state for each indexed range across datasets and modes.", "columns": {"mode": {"name": "mode", "description": "Ingestion mode (e.g., backfill, realtime).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dataset": {"name": "dataset", "description": "Dataset identifier (e.g., transactions, blocks).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_block": {"name": "start_block", "description": "Start block (inclusive).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_block": {"name": "end_block", "description": "End block (exclusive).", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Current status of this range (pending, processing, failed, completed).", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "worker_id": {"name": "worker_id", "description": "Identifier for worker processing this range.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attempt_count": {"name": "attempt_count", "description": "Number of attempts made.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "When this range was first created.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "completed_at": {"name": "completed_at", "description": "When this range was completed (if completed).", "meta": {}, "data_type": "Nullable(DateTime)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_indexed": {"name": "rows_indexed", "description": "Rows written for the range, if tracked.", "meta": {}, "data_type": "Nullable(UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_message": {"name": "error_message", "description": "Last error message, if any.", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "insert_version": {"name": "insert_version", "description": "Monotonic ingestion version (nanoseconds).", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`indexing_state`", "created_at": 1760535478.5100975, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.indexing_progress": {"database": "", "schema": "execution", "name": "indexing_progress", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.indexing_progress", "fqn": ["gnosis_dbt", "execution", "execution", "indexing_progress"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "indexing_progress", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View aggregating execution.indexing_state into per-(mode,dataset) stats.", "columns": {"mode": {"name": "mode", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dataset": {"name": "dataset", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_ranges": {"name": "total_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "completed_ranges": {"name": "completed_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "processing_ranges": {"name": "processing_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "failed_ranges": {"name": "failed_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_ranges": {"name": "pending_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "lowest_block_attempted": {"name": "lowest_block_attempted", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "highest_block_attempted": {"name": "highest_block_attempted", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "highest_block_completed": {"name": "highest_block_completed", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_rows_indexed": {"name": "total_rows_indexed", "description": "", "meta": {}, "data_type": "Nullable(UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "completion_percentage": {"name": "completion_percentage", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "overall_status": {"name": "overall_status", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_attempt": {"name": "first_attempt", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_completion": {"name": "last_completion", "description": "", "meta": {}, "data_type": "Nullable(DateTime)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`indexing_progress`", "created_at": 1760535478.5103402, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.continuous_ranges": {"database": "", "schema": "execution", "name": "continuous_ranges", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.continuous_ranges", "fqn": ["gnosis_dbt", "execution", "execution", "continuous_ranges"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "continuous_ranges", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View summarizing continuous completed ranges and data continuity for each (mode,dataset).", "columns": {"mode": {"name": "mode", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dataset": {"name": "dataset", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continuous_start": {"name": "continuous_start", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continuous_end": {"name": "continuous_end", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "num_segments": {"name": "num_segments", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_blocks": {"name": "total_blocks", "description": "", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "range_description": {"name": "range_description", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "coverage_percentage": {"name": "coverage_percentage", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continuity_status": {"name": "continuity_status", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`continuous_ranges`", "created_at": 1760535478.5105498, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.indexing_summary": {"database": "", "schema": "execution", "name": "indexing_summary", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.indexing_summary", "fqn": ["gnosis_dbt", "execution", "execution", "indexing_summary"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "indexing_summary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View joining progress with continuity to summarize end-to-end indexing state.", "columns": {"mode": {"name": "mode", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dataset": {"name": "dataset", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_ranges": {"name": "total_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "completed_ranges": {"name": "completed_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "processing_ranges": {"name": "processing_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "failed_ranges": {"name": "failed_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_ranges": {"name": "pending_ranges", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "completion_percentage": {"name": "completion_percentage", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "overall_status": {"name": "overall_status", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "highest_block_completed": {"name": "highest_block_completed", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_rows_indexed": {"name": "total_rows_indexed", "description": "", "meta": {}, "data_type": "Nullable(UInt64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continuous_segments": {"name": "continuous_segments", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_continuous_block": {"name": "first_continuous_block", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_continuous_block": {"name": "last_continuous_block", "description": "", "meta": {}, "data_type": "UInt32", "constraints": [], "quote": null, "tags": [], "granularity": null}, "continuity_description": {"name": "continuity_description", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`indexing_summary`", "created_at": 1760535478.51077, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.execution.migrations": {"database": "", "schema": "execution", "name": "migrations", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/execution/execution_sources.yml", "original_file_path": "models/execution/execution_sources.yml", "unique_id": "source.gnosis_dbt.execution.migrations", "fqn": ["gnosis_dbt", "execution", "execution", "migrations"], "source_name": "execution", "source_description": "Raw execution-layer tables captured from Gnosis Chain (an Ethereum L1 fork). Each table is ingested directly from the node crawler and should be treated as authoritative chain data.", "loader": "", "identifier": "migrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "block_timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "One row per data migration executed by the crawler/ETL.", "columns": {"name": {"name": "name", "description": "Migration identifier.", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "executed_at": {"name": "executed_at", "description": "Execution time.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "1 if migration succeeded.", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["authoritative", "crawler", "execution", "gnosis", "l1"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`execution`.`migrations`", "created_at": 1760535478.5109568, "unrendered_database": null, "unrendered_schema": "execution"}, "source.gnosis_dbt.nebula_discv5.crawls": {"database": "", "schema": "nebula", "name": "crawls", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv5.crawls", "fqn": ["gnosis_dbt", "p2p", "nebula_discv5", "crawls"], "source_name": "nebula_discv5", "source_description": "P2P network crawl results using Discv5 (Ethereum portal/beacon network focused).", "loader": "", "identifier": "crawls", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Per-crawl summary metadata.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "Enum8('started'=1,'cancelled'=2,'failed'=3,'succeeded'=4)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "finished_at": {"name": "finished_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(3))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawled_peers": {"name": "crawled_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dialable_peers": {"name": "dialable_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "undialable_peers": {"name": "undialable_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "remaining_peers": {"name": "remaining_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "network_id": {"name": "network_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv5", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula`.`crawls`", "created_at": 1760535478.5116584, "unrendered_database": null, "unrendered_schema": "nebula"}, "source.gnosis_dbt.nebula_discv5.visits": {"database": "", "schema": "nebula", "name": "visits", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv5.visits", "fqn": ["gnosis_dbt", "p2p", "nebula_discv5", "visits"], "source_name": "nebula_discv5", "source_description": "P2P network crawl results using Discv5 (Ethereum portal/beacon network focused).", "loader": "", "identifier": "visits", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "One row per visited peer during a crawl, including agent and protocol metadata.", "columns": {"crawl_id": {"name": "crawl_id", "description": "", "meta": {}, "data_type": "Nullable(UUID)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocols": {"name": "protocols", "description": "", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_maddrs": {"name": "dial_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "filtered_maddrs": {"name": "filtered_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_maddrs": {"name": "extra_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connect_maddr": {"name": "connect_maddr", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "", "meta": {}, "data_type": "LowCardinality(Nullable(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_started_at": {"name": "visit_started_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_ended_at": {"name": "visit_ended_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv5", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula`.`visits`", "created_at": 1760535478.5118861, "unrendered_database": null, "unrendered_schema": "nebula"}, "source.gnosis_dbt.nebula_discv5.neighbors": {"database": "", "schema": "nebula", "name": "neighbors", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv5.neighbors", "fqn": ["gnosis_dbt", "p2p", "nebula_discv5", "neighbors"], "source_name": "nebula_discv5", "source_description": "P2P network crawl results using Discv5 (Ethereum portal/beacon network focused).", "loader": "", "identifier": "neighbors", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Edges discovered between peers from neighbors responses.", "columns": {"crawl_id": {"name": "crawl_id", "description": "", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_bits": {"name": "error_bits", "description": "", "meta": {}, "data_type": "UInt16", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv5", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula`.`neighbors`", "created_at": 1760535478.5120852, "unrendered_database": null, "unrendered_schema": "nebula"}, "source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids": {"database": "", "schema": "nebula", "name": "discovery_id_prefixes_x_peer_ids", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids", "fqn": ["gnosis_dbt", "p2p", "nebula_discv5", "discovery_id_prefixes_x_peer_ids"], "source_name": "nebula_discv5", "source_description": "P2P network crawl results using Discv5 (Ethereum portal/beacon network focused).", "loader": "", "identifier": "discovery_id_prefixes_x_peer_ids", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping from discovery ID prefix to peer_id.", "columns": {"discovery_id_prefix": {"name": "discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv5", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula`.`discovery_id_prefixes_x_peer_ids`", "created_at": 1760535478.5122852, "unrendered_database": null, "unrendered_schema": "nebula"}, "source.gnosis_dbt.nebula_discv5.schema_migrations": {"database": "", "schema": "nebula", "name": "schema_migrations", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv5.schema_migrations", "fqn": ["gnosis_dbt", "p2p", "nebula_discv5", "schema_migrations"], "source_name": "nebula_discv5", "source_description": "P2P network crawl results using Discv5 (Ethereum portal/beacon network focused).", "loader": "", "identifier": "schema_migrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Schema migrations for nebula.", "columns": {"version": {"name": "version", "description": "", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dirty": {"name": "dirty", "description": "", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sequence": {"name": "sequence", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv5", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula`.`schema_migrations`", "created_at": 1760535478.5124736, "unrendered_database": null, "unrendered_schema": "nebula"}, "source.gnosis_dbt.nebula_discv4.crawls": {"database": "", "schema": "nebula_discv4", "name": "crawls", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv4.crawls", "fqn": ["gnosis_dbt", "p2p", "nebula_discv4", "crawls"], "source_name": "nebula_discv4", "source_description": "P2P network crawl results using Discv4.", "loader": "", "identifier": "crawls", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Per-crawl summary metadata.", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "Enum8('started'=1,'cancelled'=2,'failed'=3,'succeeded'=4)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "finished_at": {"name": "finished_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(3))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawled_peers": {"name": "crawled_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dialable_peers": {"name": "dialable_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "undialable_peers": {"name": "undialable_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "remaining_peers": {"name": "remaining_peers", "description": "", "meta": {}, "data_type": "Nullable(Int32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "version": {"name": "version", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "network_id": {"name": "network_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv4", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula_discv4`.`crawls`", "created_at": 1760535478.5126822, "unrendered_database": null, "unrendered_schema": "nebula_discv4"}, "source.gnosis_dbt.nebula_discv4.visits": {"database": "", "schema": "nebula_discv4", "name": "visits", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv4.visits", "fqn": ["gnosis_dbt", "p2p", "nebula_discv4", "visits"], "source_name": "nebula_discv4", "source_description": "P2P network crawl results using Discv4.", "loader": "", "identifier": "visits", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "One row per visited peer during a crawl.", "columns": {"crawl_id": {"name": "crawl_id", "description": "", "meta": {}, "data_type": "Nullable(UUID)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version": {"name": "agent_version", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "protocols": {"name": "protocols", "description": "", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_maddrs": {"name": "dial_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "filtered_maddrs": {"name": "filtered_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "extra_maddrs": {"name": "extra_maddrs", "description": "", "meta": {}, "data_type": "Array(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dial_errors": {"name": "dial_errors", "description": "", "meta": {}, "data_type": "Array(LowCardinality(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "connect_maddr": {"name": "connect_maddr", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_error": {"name": "crawl_error", "description": "", "meta": {}, "data_type": "LowCardinality(Nullable(String))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_started_at": {"name": "visit_started_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "visit_ended_at": {"name": "visit_ended_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_properties": {"name": "peer_properties", "description": "", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv4", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula_discv4`.`visits`", "created_at": 1760535478.5128927, "unrendered_database": null, "unrendered_schema": "nebula_discv4"}, "source.gnosis_dbt.nebula_discv4.neighbors": {"database": "", "schema": "nebula_discv4", "name": "neighbors", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv4.neighbors", "fqn": ["gnosis_dbt", "p2p", "nebula_discv4", "neighbors"], "source_name": "nebula_discv4", "source_description": "P2P network crawl results using Discv4.", "loader": "", "identifier": "neighbors", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Edges discovered between peers from neighbors responses.", "columns": {"crawl_id": {"name": "crawl_id", "description": "", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_discovery_id_prefix": {"name": "peer_discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "neighbor_discovery_id_prefix": {"name": "neighbor_discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_bits": {"name": "error_bits", "description": "", "meta": {}, "data_type": "UInt16", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv4", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula_discv4`.`neighbors`", "created_at": 1760535478.5130813, "unrendered_database": null, "unrendered_schema": "nebula_discv4"}, "source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids": {"database": "", "schema": "nebula_discv4", "name": "discovery_id_prefixes_x_peer_ids", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids", "fqn": ["gnosis_dbt", "p2p", "nebula_discv4", "discovery_id_prefixes_x_peer_ids"], "source_name": "nebula_discv4", "source_description": "P2P network crawl results using Discv4.", "loader": "", "identifier": "discovery_id_prefixes_x_peer_ids", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping from discovery ID prefix to peer_id.", "columns": {"discovery_id_prefix": {"name": "discovery_id_prefix", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "peer_id": {"name": "peer_id", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv4", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula_discv4`.`discovery_id_prefixes_x_peer_ids`", "created_at": 1760535478.5132756, "unrendered_database": null, "unrendered_schema": "nebula_discv4"}, "source.gnosis_dbt.nebula_discv4.schema_migrations": {"database": "", "schema": "nebula_discv4", "name": "schema_migrations", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/p2p/p2p_sources.yml", "original_file_path": "models/p2p/p2p_sources.yml", "unique_id": "source.gnosis_dbt.nebula_discv4.schema_migrations", "fqn": ["gnosis_dbt", "p2p", "nebula_discv4", "schema_migrations"], "source_name": "nebula_discv4", "source_description": "P2P network crawl results using Discv4.", "loader": "", "identifier": "schema_migrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Schema migrations for nebula_discv4.", "columns": {"version": {"name": "version", "description": "", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dirty": {"name": "dirty", "description": "", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sequence": {"name": "sequence", "description": "", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["discv4", "network-crawl", "p2p"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`nebula_discv4`.`schema_migrations`", "created_at": 1760535478.51346, "unrendered_database": null, "unrendered_schema": "nebula_discv4"}, "source.gnosis_dbt.crawlers_data.dune_labels": {"database": "", "schema": "crawlers_data", "name": "dune_labels", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/crawlers_data/sources.yml", "original_file_path": "models/crawlers_data/sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.dune_labels", "fqn": ["gnosis_dbt", "crawlers_data", "crawlers_data", "dune_labels"], "source_name": "crawlers_data", "source_description": "", "loader": "", "identifier": "dune_labels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`dune_labels`", "created_at": 1760535478.5136385, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.dune_prices": {"database": "", "schema": "crawlers_data", "name": "dune_prices", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/crawlers_data/sources.yml", "original_file_path": "models/crawlers_data/sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.dune_prices", "fqn": ["gnosis_dbt", "crawlers_data", "crawlers_data", "dune_prices"], "source_name": "crawlers_data", "source_description": "", "loader": "", "identifier": "dune_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`dune_prices`", "created_at": 1760535478.51382, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.country_codes": {"database": "", "schema": "crawlers_data", "name": "country_codes", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.country_codes", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "country_codes"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "country_codes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ISO3166 country codes mapping.", "columns": {"name": {"name": "name", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "alpha-2": {"name": "alpha-2", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "alpha-3": {"name": "alpha-3", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country-code": {"name": "country-code", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "iso_3166-2": {"name": "iso_3166-2", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub-region": {"name": "sub-region", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "intermediate-region": {"name": "intermediate-region", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region-code": {"name": "region-code", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sub-region-code": {"name": "sub-region-code", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "intermediate-region-code": {"name": "intermediate-region-code", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`country_codes`", "created_at": 1760535478.5140367, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.ember_electricity_data": {"database": "", "schema": "crawlers_data", "name": "ember_electricity_data", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.ember_electricity_data", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "ember_electricity_data"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "ember_electricity_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ember electricity statistics (daily).", "columns": {"Area": {"name": "Area", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ISO 3 code": {"name": "ISO 3 code", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Date": {"name": "Date", "description": "", "meta": {}, "data_type": "Date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Area type": {"name": "Area type", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Continent": {"name": "Continent", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Ember region": {"name": "Ember region", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "EU": {"name": "EU", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "OECD": {"name": "OECD", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "G20": {"name": "G20", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "G7": {"name": "G7", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ASEAN": {"name": "ASEAN", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Category": {"name": "Category", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Subcategory": {"name": "Subcategory", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Variable": {"name": "Variable", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Unit": {"name": "Unit", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "Value": {"name": "Value", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "YoY absolute change": {"name": "YoY absolute change", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}, "YoY % change": {"name": "YoY % change", "description": "", "meta": {}, "data_type": "Float64", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`ember_electricity_data`", "created_at": 1760535478.514277, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.gpay_wallets": {"database": "", "schema": "crawlers_data", "name": "gpay_wallets", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.gpay_wallets", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "gpay_wallets"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "gpay_wallets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Subset of SAFE wallet addresses discovered via gpay integration crawler.", "columns": {"SAFE_address": {"name": "SAFE_address", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SAFE_createdAt": {"name": "SAFE_createdAt", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`gpay_wallets`", "created_at": 1760535478.514458, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.ipinfo": {"database": "", "schema": "crawlers_data", "name": "ipinfo", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.ipinfo", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "ipinfo"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "ipinfo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "IP intelligence enrichment from ipinfo.io lookups.", "columns": {"ip": {"name": "ip", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hostname": {"name": "hostname", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "loc": {"name": "loc", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "org": {"name": "org", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "postal": {"name": "postal", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "timezone": {"name": "timezone", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "asn": {"name": "asn", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "company": {"name": "company", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier": {"name": "carrier", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_bogon": {"name": "is_bogon", "description": "", "meta": {}, "data_type": "Bool", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mobile": {"name": "is_mobile", "description": "", "meta": {}, "data_type": "Bool", "constraints": [], "quote": null, "tags": [], "granularity": null}, "abuse_email": {"name": "abuse_email", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "abuse_phone": {"name": "abuse_phone", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "error": {"name": "error", "description": "", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": [], "granularity": null}, "attempts": {"name": "attempts", "description": "", "meta": {}, "data_type": "UInt8", "constraints": [], "quote": null, "tags": [], "granularity": null}, "success": {"name": "success", "description": "", "meta": {}, "data_type": "Bool", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`ipinfo`", "created_at": 1760535478.5146823, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d": {"database": "", "schema": "crawlers_data", "name": "probelab_agent_semvers_avg_1d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_agent_semvers_avg_1d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_agent_semvers_avg_1d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Daily average distribution of agent semantic versions across crawls.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver": {"name": "agent_version_semver", "description": "", "meta": {}, "data_type": "Array(Nullable(Int64))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver_str": {"name": "agent_version_semver_str", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_agent_semvers_avg_1d`", "created_at": 1760535478.5148742, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_agent_semvers_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_agent_semvers_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_agent_semvers_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series of agent semantic versions.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver": {"name": "agent_version_semver", "description": "", "meta": {}, "data_type": "Array(Nullable(Int64))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_semver_str": {"name": "agent_version_semver_str", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_agent_semvers_over_7d`", "created_at": 1760535478.5150685, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_agent_types_avg_1d": {"database": "", "schema": "crawlers_data", "name": "probelab_agent_types_avg_1d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_agent_types_avg_1d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_agent_types_avg_1d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_agent_types_avg_1d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Daily average distribution of agent types.", "columns": {"min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_agent_types_avg_1d`", "created_at": 1760535478.5152726, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_agent_types_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_agent_types_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_agent_types_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_agent_types_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_agent_types_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series of agent types.", "columns": {"min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_agent_types_over_7d`", "created_at": 1760535478.5154703, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d": {"database": "", "schema": "crawlers_data", "name": "probelab_cloud_provider_avg_1d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_cloud_provider_avg_1d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_cloud_provider_avg_1d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Daily average share of cloud providers.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_provider": {"name": "cloud_provider", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_cloud_provider_avg_1d`", "created_at": 1760535478.5157065, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_cloud_provider_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_cloud_provider_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_cloud_provider_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series of cloud providers.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_provider": {"name": "cloud_provider", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_cloud_provider_over_7d`", "created_at": 1760535478.515901, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d": {"database": "", "schema": "crawlers_data", "name": "probelab_countries_avg_1d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_countries_avg_1d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_countries_avg_1d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Daily average share of peer countries.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_countries_avg_1d`", "created_at": 1760535478.516094, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_countries_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_countries_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_countries_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_countries_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_countries_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series of peer countries.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_countries_over_7d`", "created_at": 1760535478.5163143, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_discv5_stale_records": {"database": "", "schema": "crawlers_data", "name": "probelab_discv5_stale_records", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_discv5_stale_records", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_discv5_stale_records"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_discv5_stale_records", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Share of stale records discovered in Discv5 crawls.", "columns": {"crawl_id": {"name": "crawl_id", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "total": {"name": "total", "description": "", "meta": {}, "data_type": "Nullable(Int64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reachability": {"name": "reachability", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "count": {"name": "count", "description": "", "meta": {}, "data_type": "Nullable(Int64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "percentage": {"name": "percentage", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_discv5_stale_records`", "created_at": 1760535478.5164998, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_is_cloud_avg_1d": {"database": "", "schema": "crawlers_data", "name": "probelab_is_cloud_avg_1d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_is_cloud_avg_1d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_is_cloud_avg_1d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_is_cloud_avg_1d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Daily average share of peers detected in cloud.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_cloud": {"name": "is_cloud", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_is_cloud_avg_1d`", "created_at": 1760535478.516686, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_is_cloud_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_is_cloud_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_is_cloud_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_is_cloud_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_is_cloud_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series of cloud share.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "crawl_created_at": {"name": "crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_cloud": {"name": "is_cloud", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_is_cloud_over_7d`", "created_at": 1760535478.5168777, "unrendered_database": null, "unrendered_schema": "crawlers_data"}, "source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d": {"database": "", "schema": "crawlers_data", "name": "probelab_quic_support_over_7d", "resource_type": "source", "package_name": "gnosis_dbt", "path": "models/probelab/probelab_sources.yml", "original_file_path": "models/probelab/probelab_sources.yml", "unique_id": "source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d", "fqn": ["gnosis_dbt", "probelab", "crawlers_data", "probelab_quic_support_over_7d"], "source_name": "crawlers_data", "source_description": "External datasets ingested by various crawlers (not consensus/execution authoritative state).", "loader": "", "identifier": "probelab_quic_support_over_7d", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "7\u2011day time series average share of QUIC support.", "columns": {"agent_version_type": {"name": "agent_version_type", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "min_crawl_created_at": {"name": "min_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_crawl_created_at": {"name": "max_crawl_created_at", "description": "", "meta": {}, "data_type": "Nullable(DateTime64(6))", "constraints": [], "quote": null, "tags": [], "granularity": null}, "quic_support": {"name": "quic_support", "description": "", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__count": {"name": "__count", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__samples": {"name": "__samples", "description": "", "meta": {}, "data_type": "Nullable(UInt32)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__pct": {"name": "__pct", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "__total": {"name": "__total", "description": "", "meta": {}, "data_type": "Nullable(Float64)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": ["crawlers", "enrichment", "external"], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`crawlers_data`.`probelab_quic_support_over_7d`", "created_at": 1760535478.5170686, "unrendered_database": null, "unrendered_schema": "crawlers_data"}}, "macros": {"macro.gnosis_dbt.drop_dbt_trash": {"name": "drop_dbt_trash", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/db/cleanup.sql", "original_file_path": "macros/db/cleanup.sql", "unique_id": "macro.gnosis_dbt.drop_dbt_trash", "macro_sql": "{% macro drop_dbt_trash(database_name) %}\n    {{ log(\"Dropping leftover dbt tables in \" ~ database_name, info=True) }}\n\n    -- 1) Gather the list of leftover tables\n    {% set trash_tables_query %}\n      SELECT name\n      FROM system.tables\n      WHERE database = '{{ database_name }}'\n        AND name LIKE '%__dbt_%'\n    {% endset %}\n\n    {% set trash_tables = run_query(trash_tables_query).rows %}\n\n    -- 2) Loop over each table name and DROP it\n    {% for row in trash_tables %}\n        {% set table_name = row[0] %}\n        {{ log(\"Dropping table \" ~ table_name, info=True) }}\n\n        -- Here is where we actually run the DDL drop command\n        {% do run_query(\"DROP TABLE IF EXISTS \" ~ database_name ~ \".\" ~ table_name) %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0520496, "supported_languages": null}, "macro.gnosis_dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/db/clickhouse_utils.sql", "original_file_path": "macros/db/clickhouse_utils.sql", "unique_id": "macro.gnosis_dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n        {{ default_schema }}\n    {%- else -%}\n        {{ custom_schema_name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0528479, "supported_languages": null}, "macro.gnosis_dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/db/clickhouse_utils.sql", "original_file_path": "macros/db/clickhouse_utils.sql", "unique_id": "macro.gnosis_dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name, node) -%}\n    {%- set default_database = target.schema -%}\n    {%- if custom_database_name is none -%}\n        {{ default_database }}\n    {%- else -%}\n        {{ custom_database_name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0533726, "supported_languages": null}, "macro.gnosis_dbt.apply_monthly_incremental_filter": {"name": "apply_monthly_incremental_filter", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/db/get_incremental_filter.sql", "original_file_path": "macros/db/get_incremental_filter.sql", "unique_id": "macro.gnosis_dbt.apply_monthly_incremental_filter", "macro_sql": "{% macro apply_monthly_incremental_filter(source_field, destination_field=None, add_and=False) %}\n  {% if is_incremental() %}\n    {% if destination_field is none %}\n      {% set dest_field = source_field %}\n    {% else %}\n      {% set dest_field = destination_field %}\n    {% endif %}\n\n    {{ \"AND \" if add_and else \"WHERE \" }}\n    toStartOfMonth(toStartOfDay({{ source_field }})) >= (\n      SELECT\n        max(toStartOfMonth({{ dest_field }}))\n      FROM {{ this }}\n    )\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0545225, "supported_languages": null}, "macro.gnosis_dbt.fetch_and_insert_abi": {"name": "fetch_and_insert_abi", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/decoding/fetch_and_insert_abi.sql", "original_file_path": "macros/decoding/fetch_and_insert_abi.sql", "unique_id": "macro.gnosis_dbt.fetch_and_insert_abi", "macro_sql": "{% macro fetch_and_insert_abi(address) %}\n    -- Fetch the initial contract details from blockscout\n    {% set contract_data = fetch_abi_from_blockscout(address) %}\n    {% set abi_json = contract_data['abi_json'] %}\n    {% set contract_name = contract_data['contract_name'] %}\n    {% set implementations_array = contract_data['implementations'] %}\n    \n    {{ log(\"Contract \" ~ address ~ \" has name: \" ~ contract_name, info=true) }}\n    {{ log(\"Contract \" ~ address ~ \" implementations array: \" ~ implementations_array, info=true) }}\n    \n    -- First insert the contract ABI\n    {% if abi_json and abi_json != '[]' and abi_json != '{}' %}\n        -- Escape single quotes for ClickHouse VALUES syntax\n        {% set abi_safe = abi_json | replace(\"'\", \"\\\\'\") %}\n        \n        -- Check if this contract entry already exists\n        {% set check_existing_sql %}\n            SELECT count(*) as cnt\n            FROM contracts_abi\n            WHERE contract_address = '{{ address }}'\n              AND implementation_address = ''\n        {% endset %}\n        \n        {% set existing_result = run_query(check_existing_sql) %}\n        {% set exists = existing_result.rows[0][0] > 0 %}\n        \n        {% if exists %}\n            -- If exists, first delete the existing entry\n            {% set delete_sql %}\n                ALTER TABLE contracts_abi \n                DELETE WHERE contract_address = '{{ address }}' AND implementation_address = ''\n            {% endset %}\n            \n            {{ log(\"Deleting existing ABI for \" ~ address, info=true) }}\n            {% do run_query(delete_sql) %}\n        {% endif %}\n        \n        -- Insert the contract ABI\n        {% set insert_sql %}\n            INSERT INTO contracts_abi (\n                contract_address, \n                implementation_address,\n                abi_json, \n                contract_name,\n                source, \n                updated_at\n            )\n            VALUES (\n                '{{ address }}', \n                '',\n                '{{ abi_safe }}',\n                '{{ contract_name | replace(\"'\", \"\\\\'\") }}',\n                'blockscout',\n                now()\n            )\n        {% endset %}\n\n        {{ log(\"Inserting ABI for \" ~ address, info=true) }}\n        {% do run_query(insert_sql) %}\n    {% else %}\n        {{ log(\"No ABI to insert for \" ~ address, info=true) }}\n    {% endif %}\n    \n    -- Check if implementations array has content and appears to be an array\n    {% set has_impls = implementations_array != '[]' and implementations_array != '' %}\n    \n    -- If this is a proxy contract with implementations\n    {% if has_impls %}\n        {{ log(\"Contract has implementations, extracting addresses using direct blockscout query\", info=true) }}\n        \n        -- First run a command to enable JSON type support\n        {% set enable_json_sql %}\n            SET allow_experimental_json_type = 1\n        {% endset %}\n        \n        {{ log(\"Enabling JSON type support\", info=true) }}\n        {% do run_query(enable_json_sql) %}\n        \n        -- Now extract implementation data in a separate query\n        {% set extract_impl_query %}\n            WITH src AS (\n                SELECT body \n                FROM url(\n                    'https://gnosis.blockscout.com/api/v2/smart-contracts/{{ address | lower }}',\n                    'Raw',\n                    'body String'\n                )\n            ),\n            data AS (\n                SELECT \n                    JSONExtractArrayRaw(body, 'implementations') AS implementations\n                FROM src\n            )\n            SELECT\n                JSONExtractString(implementations[1], 'address_hash') AS impl_address,\n                JSONExtractString(implementations[1], 'name') AS impl_name\n            FROM data\n        {% endset %}\n        \n        {{ log(\"Executing implementation extraction query\", info=true) }}\n        {% set impl_result = run_query(extract_impl_query) %}\n        \n        {% if impl_result.rows | length > 0 %}\n            {% set impl_address = impl_result[0][0] %}\n            {% set impl_name = impl_result[0][1] %}\n            \n            {{ log(\"Found implementation \" ~ impl_address ~ \" with name \" ~ impl_name, info=true) }}\n            \n            -- Fetch the implementation contract ABI\n            {% set impl_data = fetch_abi_from_blockscout(impl_address) %}\n            {% set impl_abi_json = impl_data['abi_json'] %}\n            \n            {% if impl_abi_json and impl_abi_json != '[]' and impl_abi_json != '{}' %}\n                -- Escape single quotes for ClickHouse VALUES syntax\n                {% set impl_abi_safe = impl_abi_json | replace(\"'\", \"\\\\'\") %}\n                \n                -- Check if this implementation entry already exists\n                {% set check_impl_sql %}\n                    SELECT count(*) as cnt\n                    FROM contracts_abi\n                    WHERE contract_address = '{{ address }}'\n                      AND implementation_address = '{{ impl_address }}'\n                {% endset %}\n                \n                {% set impl_existing_result = run_query(check_impl_sql) %}\n                {% set impl_exists = impl_existing_result.rows[0][0] > 0 %}\n                \n                {% if impl_exists %}\n                    -- If exists, first delete the existing entry\n                    {% set delete_impl_sql %}\n                        ALTER TABLE contracts_abi \n                        DELETE WHERE contract_address = '{{ address }}' AND implementation_address = '{{ impl_address }}'\n                    {% endset %}\n                    \n                    {{ log(\"Deleting existing implementation ABI for \" ~ address ~ \" -> \" ~ impl_address, info=true) }}\n                    {% do run_query(delete_impl_sql) %}\n                {% endif %}\n                \n                -- Insert the implementation ABI associated with the proxy\n                {% set insert_impl_sql %}\n                    INSERT INTO contracts_abi (\n                        contract_address, \n                        implementation_address,\n                        abi_json, \n                        contract_name,\n                        source, \n                        updated_at\n                    )\n                    VALUES (\n                        '{{ address }}', \n                        '{{ impl_address }}',\n                        '{{ impl_abi_safe }}',\n                        '{{ impl_name | replace(\"'\", \"\\\\'\") }}',\n                        'blockscout',\n                        now()\n                    )\n                {% endset %}\n\n                {{ log(\"Inserting implementation ABI for \" ~ address ~ \" -> \" ~ impl_address, info=true) }}\n                {% do run_query(insert_impl_sql) %}\n                \n                -- DO NOT insert the implementation as its own entry anymore\n            {% else %}\n                {{ log(\"No ABI available for implementation \" ~ impl_address, info=true) }}\n            {% endif %}\n        {% else %}\n            {{ log(\"No implementation found\", info=true) }}\n        {% endif %}\n    {% else %}\n        {{ log(\"Contract \" ~ address ~ \" has no implementations\", info=true) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.gnosis_dbt.fetch_abi_from_blockscout", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0642147, "supported_languages": null}, "macro.gnosis_dbt.decode_array_component": {"name": "decode_array_component", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/decoding/decode_calls.sql", "original_file_path": "macros/decoding/decode_calls.sql", "unique_id": "macro.gnosis_dbt.decode_array_component", "macro_sql": "{% macro decode_array_component(args_raw_hex, head_words, param_objs, i, j, component_type) %}\n  {% if component_type == 'string' %}\n    arrayMap(k ->\n      replaceRegexpAll(\n        reinterpretAsString(unhex(\n          substring(\n            {{ args_raw_hex }},\n            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2)\n              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                  substring(\n                    {{ args_raw_hex }},\n                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                      substring({{ args_raw_hex }},\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                                64)))\n                    ))) * 2),\n                    64\n                  )\n                )))) * 2\n              + 64\n              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                  substring(\n                    {{ args_raw_hex }},\n                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                      substring({{ args_raw_hex }},\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                                64)))\n                    ))) * 2) + 64 + k*64,\n                    64\n                  )\n                )))) * 2,\n            toUInt64(reinterpretAsUInt256(reverse(unhex(\n              substring(\n                {{ args_raw_hex }},\n                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                  substring({{ args_raw_hex }},\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                            64)))\n                ))) * 2)\n                  + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                      substring(\n                        {{ args_raw_hex }},\n                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring({{ args_raw_hex }},\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                                    64)))\n                        ))) * 2) + 64 + k*64,\n                        64\n                      )\n                    )))) * 2,\n                64\n              )\n            )))) * 2\n          )\n        )),\n        '\\0',''\n      ),\n      range(\n        toUInt64(reinterpretAsUInt256(reverse(unhex(\n          substring(\n            {{ args_raw_hex }},\n            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n              substring({{ args_raw_hex }},\n                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                        64)))\n            ))) * 2),\n            64\n          )\n        ))))\n      )\n    )\n  {% elif component_type == 'address' %}\n    arrayMap(k ->\n      concat(\n        '0x',\n        substring(\n          substring(\n            {{ args_raw_hex }},\n            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n              substring({{ args_raw_hex }},\n                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                        64)))\n            ))) * 2) + 64 + k*64,\n            64\n          ),\n          25, 40\n        )\n      ),\n      range(\n        toUInt64(reinterpretAsUInt256(reverse(unhex(\n          substring(\n            {{ args_raw_hex }},\n            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n              substring({{ args_raw_hex }},\n                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement({{ head_words }},{{ i }}+1))))) * 2) + {{ j }}*64,\n                        64)))\n            ))) * 2),\n            64\n          )\n        ))))\n      )\n    )\n  {% else %}\n    []\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0685022, "supported_languages": null}, "macro.gnosis_dbt.decode_calls": {"name": "decode_calls", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/decoding/decode_calls.sql", "original_file_path": "macros/decoding/decode_calls.sql", "unique_id": "macro.gnosis_dbt.decode_calls", "macro_sql": "{% macro decode_calls(\n        tx_table,\n        contract_address,\n        output_json_type=false,\n        incremental_column='block_timestamp',\n        selector_column='to_address',\n        start_blocktime=null\n) %}\n\n{% set addr = contract_address | lower | replace('0x','') %}\n\n{% set sig_sql %}\nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM {{ ref('function_signatures') }}\nWHERE replaceAll(lower(contract_address),'0x','') = '{{ addr }}'\n{% endset %}\n\n{% set sql_body %}\nWITH\n  tx AS (\n    SELECT *\n    FROM {{ tx_table }}\n    WHERE replaceAll(lower({{ selector_column }}),'0x','') = '{{ addr }}'\n      {% if start_blocktime %}\n        AND toStartOfMonth({{ incremental_column }}) >= toStartOfMonth(toDateTime('{{ start_blocktime }}'))\n      {% endif %}\n      {% if incremental_column and not flags.FULL_REFRESH %}\n        AND {{ incremental_column }} >\n            (SELECT coalesce(max({{ incremental_column }}), '1970-01-01') FROM {{ this }})\n      {% endif %}\n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n  abi AS ( {{ sig_sql }} ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i -> if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n               range(greatest(length(param_types),1)*16)) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'),''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  if(\n                    endsWith(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '[]'\n                    ),\n                    toJSONString([]),\n                    if(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'),''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ) = 'address',\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                          64\n                        )\n                      )\n                    )\n                  ),\n                  range(\n                    length(ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString()))\n                  )\n                )\n              )\n            ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                if(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                            64)\n                              )))) * 2\n                              + 64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                                          + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(args_raw_hex,\n                                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                                                        64)\n                                          )))) * 2,\n                                        64)\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                  if(\n                    base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2),\n                                    64)\n                        ))))\n                      )\n                    ),\n                    []\n                  )\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  if(\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                      concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        if(\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          if(\n            i < n_params AND param_types[i+1] = 'bytes' AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n            raw_values_str[i+1]\n          )\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      {% if output_json_type %}\n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      {% else %}\n        toJSONString(mapFromArrays(param_names, param_values_str)) AS decoded_input\n      {% endif %}\n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n{% endset %}\n\n{{ sql_body | trim }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0708065, "supported_languages": null}, "macro.gnosis_dbt.decode_logs": {"name": "decode_logs", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/decoding/decode_logs.sql", "original_file_path": "macros/decoding/decode_logs.sql", "unique_id": "macro.gnosis_dbt.decode_logs", "macro_sql": "{% macro decode_logs(\n        source_table,\n        contract_address,\n        output_json_type=false,\n        incremental_column='block_timestamp',\n        address_column='address',\n        start_blocktime=null  \n) %}\n\n{# \u2014 normalize contract address \u2014 #}\n{% set addr = contract_address | lower | replace('0x','') %}\n\n{# \u2014 pull in the ABI for this contract \u2014 #}\n{% set sig_sql %}\nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM {{ ref('event_signatures') }}\nWHERE replaceAll(lower(contract_address),'0x','') = '{{ addr }}'\n{% endset %}\n\n{% set sql_body %}\nWITH\n\nlogs AS (\n  SELECT *\n  FROM {{ source_table }}\n  WHERE {{ address_column }} = '{{ addr }}'\n  \n    {% if start_blocktime is not none and start_blocktime|trim != '' %}\n      AND toStartOfMonth({{ incremental_column }}) >= toStartOfMonth(toDateTime('{{ start_blocktime }}'))\n    {% endif %}\n\n    {% if incremental_column and not flags.FULL_REFRESH %}\n      AND {{ incremental_column }} >\n        (SELECT coalesce(max({{ incremental_column }}),'1970-01-01')\n         FROM {{ this }})\n    {% endif %}\n),\n\nabi AS ( {{ sig_sql }} ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    {% if output_json_type %}\n      mapFromArrays(param_names, param_values) AS decoded_params\n    {% else %}\n      toJSONString(mapFromArrays(param_names, param_values)) AS decoded_params\n    {% endif %}\n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    --ON l.topic0 = concat('0x', a.topic0_sig)\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n{% endset %}\n\n{{ sql_body | trim }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.075049, "supported_languages": null}, "macro.gnosis_dbt.fetch_abi_from_blockscout": {"name": "fetch_abi_from_blockscout", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/decoding/fetch_abi_from_blockscout.sql", "original_file_path": "macros/decoding/fetch_abi_from_blockscout.sql", "unique_id": "macro.gnosis_dbt.fetch_abi_from_blockscout", "macro_sql": "{% macro fetch_abi_from_blockscout(contract_address) %}\n    {% set blockscout_query %}\n        WITH src AS (\n            SELECT body \n            FROM url(\n                'https://gnosis.blockscout.com/api/v2/smart-contracts/{{ contract_address | lower }}',\n                'Raw',\n                'body String'\n            )\n        )\n        SELECT \n            JSONExtractRaw(body, 'abi') AS abi_json,\n            JSONExtractString(body, 'name') AS contract_name,\n            JSONExtractArrayRaw(body, 'implementations') AS implementations\n        FROM src\n        LIMIT 1\n    {% endset %}\n    \n    {% set abi_result = run_query(blockscout_query) %}\n    \n    {% if abi_result.rows | length > 0 %}\n        {% set result = {\n            'abi_json': abi_result[0][0],\n            'contract_name': abi_result[0][1],\n            'implementations': abi_result[0][3]\n        } %}\n        \n        {{ return(result) }}\n    {% else %}\n        {{ log(\"Failed to fetch ABI for contract \" ~ contract_address, info=true) }}\n        {{ return({'abi_json': '[]', 'contract_name': '', 'implementations': '[]'}) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0769756, "supported_languages": null}, "macro.gnosis_dbt.decode_hex_split": {"name": "decode_hex_split", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/execution/decode_hex_split.sql", "original_file_path": "macros/execution/decode_hex_split.sql", "unique_id": "macro.gnosis_dbt.decode_hex_split", "macro_sql": "{% macro decode_hex_split(column) %}\n    arrayFilter(\n      x -> x != '',\n      splitByChar(\n        ' ',\n        arrayStringConcat(\n          arrayMap(\n            i -> if(\n              reinterpretAsUInt8(substring(unhex({{ column }}), i, 1)) BETWEEN 32 AND 126,\n              reinterpretAsString(substring(unhex({{ column }}), i, 1)),\n              ' '\n            ),\n            range(1, length(unhex({{ column }})) + 1)\n          ),\n          ''\n        )\n      )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.077837, "supported_languages": null}, "macro.gnosis_dbt.decode_hex_tokens": {"name": "decode_hex_tokens", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/execution/decode_hex_split.sql", "original_file_path": "macros/execution/decode_hex_split.sql", "unique_id": "macro.gnosis_dbt.decode_hex_tokens", "macro_sql": "{% macro decode_hex_tokens(column) %}\narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(coalesce({{ column }}, '')), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(coalesce({{ column }}, '')), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(coalesce({{ column }}, ''))) + 1)\n            ),\n            ''\n        )\n    )\n)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0781968, "supported_languages": null}, "macro.gnosis_dbt.decode_hex_tokens2": {"name": "decode_hex_tokens2", "resource_type": "macro", "package_name": "gnosis_dbt", "path": "macros/execution/decode_hex_split.sql", "original_file_path": "macros/execution/decode_hex_split.sql", "unique_id": "macro.gnosis_dbt.decode_hex_tokens2", "macro_sql": "{% macro decode_hex_tokens2(column) %}\n/* Safely decode a hex string column to printable tokens, returning [] on NULL/invalid */\narrayFilter(\n  x -> x != '',\n  splitByRegexp(\n    '[^A-Za-z0-9\\\\.]+',\n    arrayStringConcat(\n      arrayMap(\n        i -> if(\n          reinterpretAsUInt8(substring(\n            unhex(\n              if(\n                isNull({{ column }}) OR {{ column }} = '' \n                OR NOT match({{ column }}, '^[0-9A-Fa-f]+$')\n                OR (length({{ column }}) % 2 = 1),\n                '',\n                {{ column }}\n              )\n            ),\n            i, 1\n          )) BETWEEN 32 AND 126,\n          reinterpretAsString(substring(\n            unhex(\n              if(\n                isNull({{ column }}) OR {{ column }} = '' \n                OR NOT match({{ column }}, '^[0-9A-Fa-f]+$')\n                OR (length({{ column }}) % 2 = 1),\n                '',\n                {{ column }}\n              )\n            ),\n            i, 1\n          )),\n          ' '\n        ),\n        range(\n          1,\n          length(unhex(\n            if(\n              isNull({{ column }}) OR {{ column }} = '' \n              OR NOT match({{ column }}, '^[0-9A-Fa-f]+$')\n              OR (length({{ column }}) % 2 = 1),\n              '',\n              {{ column }}\n            )\n          )) + 1\n        )\n      ),\n      ''\n    )\n  )\n)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.079028, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_catalog": {"name": "clickhouse__get_catalog", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_catalog", "macro_sql": "{% macro clickhouse__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n      '' as table_database,\n      columns.database as table_schema,\n      columns.table as table_name,\n      if(tables.engine not in ('MaterializedView', 'View'), 'table', 'view') as table_type,\n      nullIf(tables.comment, '') as table_comment,\n      columns.name as column_name,\n      columns.position as column_index,\n      columns.type as column_type,\n      nullIf(columns.comment, '') as column_comment,\n      null as table_owner\n    from system.columns as columns\n    join system.tables as tables on tables.database = columns.database and tables.name = columns.table\n    where database != 'system' and\n    (\n    {%- for schema in schemas -%}\n      columns.database = '{{ schema }}'\n      {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by columns.database, columns.table, columns.position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0800693, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_schemas": {"name": "clickhouse__list_schemas", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_schemas", "macro_sql": "{% macro clickhouse__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select name from system.databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0820827, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_schema": {"name": "clickhouse__create_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_schema", "macro_sql": "{% macro clickhouse__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create database if not exists {{ relation.without_identifier().include(database=False) }}\n        {{ on_cluster_clause(relation)}}\n        {{ adapter.clickhouse_db_engine_clause() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0826802, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_schema": {"name": "clickhouse__drop_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_schema", "macro_sql": "{% macro clickhouse__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop database if exists {{ relation.without_identifier().include(database=False) }} {{ on_cluster_clause(relation)}}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0832045, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_relations_without_caching": {"name": "clickhouse__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_relations_without_caching", "macro_sql": "{% macro clickhouse__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      t.name as name,\n      t.database as schema,\n      multiIf(\n        engine in ('MaterializedView', 'View'), 'view',\n        engine = 'Dictionary', 'dictionary',\n        'table'\n      ) as type,\n      db.engine as db_engine,\n      {%- if adapter.get_clickhouse_cluster_name() -%}\n        count(distinct _shard_num) > 1  as  is_on_cluster\n        from clusterAllReplicas({{ adapter.get_clickhouse_cluster_name() }}, system.tables) as t\n          join system.databases as db on t.database = db.name\n        where schema = '{{ schema_relation.schema }}'\n        group by name, schema, type, db_engine\n      {%- else -%}\n        0 as is_on_cluster\n          from system.tables as t join system.databases as db on t.database = db.name\n        where schema = '{{ schema_relation.schema }}'\n      {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.084082, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_relation": {"name": "clickhouse__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_relation", "macro_sql": "{% macro clickhouse__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns', fetch_result=True) %}\n    select name, type from system.columns where table = '{{ relation.identifier }}'\n    {% if relation.schema %}\n      and database = '{{ relation.schema }}'\n    {% endif %}\n    order by position\n  {% endcall %}\n  {{ return(sql_convert_columns_in_relation(load_result('get_columns').table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.084828, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_relation": {"name": "clickhouse__drop_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_relation", "macro_sql": "{% macro clickhouse__drop_relation(relation, obj_type='table') -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ obj_type }} if exists {{ relation }} {{ on_cluster_clause(relation, True)}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0853963, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__rename_relation": {"name": "clickhouse__rename_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__rename_relation", "macro_sql": "{% macro clickhouse__rename_relation(from_relation, to_relation, obj_type='table') -%}\n  {% call statement('drop_relation') %}\n    drop {{ obj_type }} if exists {{ to_relation }} {{ on_cluster_clause(to_relation)}}\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename {{ obj_type }} {{ from_relation }} to {{ to_relation }} {{ on_cluster_clause(from_relation)}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0862098, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__truncate_relation": {"name": "clickhouse__truncate_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__truncate_relation", "macro_sql": "{% macro clickhouse__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }} {{ on_cluster_clause(relation)}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0866237, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__make_temp_relation": {"name": "clickhouse__make_temp_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__make_temp_relation", "macro_sql": "{% macro clickhouse__make_temp_relation(base_relation, suffix) %}\n  {% set tmp_identifier = base_relation.identifier ~ suffix %}\n  {% set tmp_relation = base_relation.incorporate(\n                              path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n  {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0873773, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__generate_database_name": {"name": "clickhouse__generate_database_name", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__generate_database_name", "macro_sql": "{% macro clickhouse__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return('') %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.087701, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_query": {"name": "clickhouse__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_query", "macro_sql": "{% macro clickhouse__get_columns_in_query(select_sql) %}\n  {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    limit 0\n  {% endcall %}\n\n  {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0883605, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_column_type": {"name": "clickhouse__alter_column_type", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_column_type", "macro_sql": "{% macro clickhouse__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} {{ on_cluster_clause(relation)}} modify column {{ adapter.quote(column_name) }} {{ new_column_type }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.088932, "supported_languages": null}, "macro.dbt_clickhouse.exchange_tables_atomic": {"name": "exchange_tables_atomic", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.exchange_tables_atomic", "macro_sql": "{% macro exchange_tables_atomic(old_relation, target_relation, obj_types='TABLES') %}\n\n  {%- if adapter.get_clickhouse_cluster_name() is not none and obj_types == 'TABLES' and 'Replicated' in engine_clause() %}\n    {%- call statement('exchange_table_sync_replica') -%}\n      SYSTEM SYNC REPLICA  {{ on_cluster_clause(target_relation) }} {{ target_relation.schema }}.{{ target_relation.identifier }}\n    {% endcall %}\n  {%- endif %}\n  {%- call statement('exchange_tables_atomic') -%}\n    EXCHANGE {{ obj_types }} {{ old_relation }} AND {{ target_relation }} {{ on_cluster_clause(target_relation)}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.engine_clause", "macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0900536, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent": {"name": "clickhouse__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/column_spec_ddl.sql", "original_file_path": "macros/column_spec_ddl.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent", "macro_sql": "{% macro clickhouse__get_assert_columns_equivalent(sql) -%}\n  {%- set user_defined_columns = model['columns'] -%}\n\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {%- set yaml_columns = user_defined_columns.values() -%}\n\n  {%- set sql_file_provided_columns = adapter.get_column_schema_from_query(sql) -%}\n  {%- set sql_columns = adapter.format_columns(sql_file_provided_columns) -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['data_type'] != yaml_col[0]['data_type'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.093017, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_relation": {"name": "one_alter_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_relation", "macro_sql": "{% macro one_alter_relation(relation, alter_comments) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} {{ alter_comments }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.09415, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_column_comment": {"name": "one_alter_column_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_column_comment", "macro_sql": "{% macro one_alter_column_comment(relation, column_name, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} comment column `{{ column_name }}` '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0945716, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_relation_comment": {"name": "clickhouse__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_relation_comment", "macro_sql": "{% macro clickhouse__alter_relation_comment(relation, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} modify comment '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0949235, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__persist_docs": {"name": "clickhouse__persist_docs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__persist_docs", "macro_sql": "{% macro clickhouse__persist_docs(relation, model, for_relation, for_columns) %}\n  {%- set alter_comments = [] %}\n\n  {%- if for_relation and config.persist_relation_docs() and model.description -%}\n    {% set escaped_comment = clickhouse_escape_comment(model.description) %}\n    {% do alter_comments.append(\"modify comment {comment}\".format(comment=escaped_comment)) %}\n  {%- endif -%}\n\n  {%- if for_columns and config.persist_column_docs() and model.columns -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% for column_name in model.columns if (column_name in existing_columns) %}\n      {%- set comment = model.columns[column_name]['description'] -%}\n      {%- if comment %}\n        {% set escaped_comment = clickhouse_escape_comment(comment) %}\n        {% do alter_comments.append(\"comment column `{column_name}` {comment}\".format(column_name=column_name, comment=escaped_comment)) %}\n      {%- endif %}\n    {%- endfor -%}\n  {%- endif -%}\n\n  {%- if alter_comments | length > 0 -%}\n    {% do run_query(one_alter_relation(relation, alter_comments|join(', '))) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse_escape_comment", "macro.dbt.run_query", "macro.dbt_clickhouse.one_alter_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0972412, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_escape_comment": {"name": "clickhouse_escape_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_escape_comment", "macro_sql": "{% macro clickhouse_escape_comment(comment) -%}\n  {% if adapter.is_before_version('21.9.2.17') %}\n    {% do exceptions.raise_compiler_error('Unsupported ClickHouse version for using heredoc syntax') %}\n  {% endif %}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.09837, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments": {"name": "clickhouse__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments", "macro_sql": "{% macro clickhouse__snapshot_hash_arguments(args) -%}\n  halfMD5({%- for arg in args -%}\n    coalesce(cast({{ arg }} as varchar ), '')\n    {% if not loop.last %} || '|' || {% endif %}\n  {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.0999217, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__post_snapshot": {"name": "clickhouse__post_snapshot", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__post_snapshot", "macro_sql": "{% macro clickhouse__post_snapshot(staging_relation) %}\n    {{ drop_relation_if_exists(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1001782, "supported_languages": null}, "macro.dbt_clickhouse.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1010444, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql": {"name": "clickhouse__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql", "macro_sql": "{% macro clickhouse__snapshot_merge_sql(target, source, insert_cols) -%}\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set valid_to_col = adapter.quote('dbt_valid_to') -%}\n\n  {%- set upsert = target.derivative('__snapshot_upsert') -%}\n  {% call statement('create_upsert_relation') %}\n    create table if not exists {{ upsert }} {{ on_cluster_clause(upsert) }} as {{ target }}\n  {% endcall %}\n\n  {% call statement('insert_unchanged_data') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }}\n    where dbt_scd_id not in (\n      select {{ source }}.dbt_scd_id from {{ source }} \n    )\n  {% endcall %}\n\n {% call statement('insert_updated_and_deleted') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    with updates_and_deletes as (\n      select\n        dbt_scd_id,\n        dbt_valid_to\n      from {{ source }}\n      where dbt_change_type IN ('update', 'delete')\n    )\n    select {% for column in insert_cols %}\n      {%- if column == valid_to_col -%}\n        updates_and_deletes.dbt_valid_to as dbt_valid_to\n      {%- else -%}\n        target.{{ column }} as {{ column }}\n      {%- endif %} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }} target\n    join updates_and_deletes on target.dbt_scd_id = updates_and_deletes.dbt_scd_id;\n  {% endcall %}\n\n  {% call statement('insert_new') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }}\n    where {{ source }}.dbt_change_type IN ('insert');\n  {% endcall %}\n\n  {% if target.can_exchange %}\n    {% do exchange_tables_atomic(upsert, target) %}\n    {% call statement('drop_exchanged_relation') %}\n      drop table if exists {{ upsert }};\n    {% endcall %}\n  {% else %}\n    {% call statement('drop_target_relation') %}\n      drop table if exists {{ target }};\n    {% endcall %}\n    {% call statement('rename_upsert_relation') %}\n      rename table {{ upsert }} to {{ target }};\n    {% endcall %}\n  {% endif %}\n\n  {% do return ('select 1') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.exchange_tables_atomic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1049075, "supported_languages": null}, "macro.dbt_clickhouse.materialization_table_clickhouse": {"name": "materialization_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.materialization_table_clickhouse", "macro_sql": "{% materialization table, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1119382, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.engine_clause": {"name": "engine_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.engine_clause", "macro_sql": "{% macro engine_clause() %}\n  engine = {{ config.get('engine', default='MergeTree()') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1123009, "supported_languages": null}, "macro.dbt_clickhouse.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.partition_cols", "macro_sql": "{% macro partition_cols(label) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.113323, "supported_languages": null}, "macro.dbt_clickhouse.primary_key_clause": {"name": "primary_key_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.primary_key_clause", "macro_sql": "{% macro primary_key_clause(label) %}\n  {%- set primary_key = config.get('primary_key', validator=validation.any[basestring]) -%}\n\n  {%- if primary_key is not none %}\n    {{ label }} {{ primary_key }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1138973, "supported_languages": null}, "macro.dbt_clickhouse.order_cols": {"name": "order_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.order_cols", "macro_sql": "{% macro order_cols(label) %}\n  {%- set cols = config.get('order_by', validator=validation.any[list, basestring]) -%}\n  {%- set engine = config.get('engine', default='MergeTree()') -%}\n  {%- set supported = [\n    'HDFS',\n    'MaterializedPostgreSQL',\n    'S3',\n    'EmbeddedRocksDB',\n    'Hive'\n  ] -%}\n\n  {%- if 'MergeTree' in engine or engine in supported %}\n    {%- if cols is not none %}\n      {%- if cols is string -%}\n        {%- set cols = [cols] -%}\n      {%- endif -%}\n      {{ label }} (\n      {%- for item in cols -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n    {%- else %}\n      {{ label }} (tuple())\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1155396, "supported_languages": null}, "macro.dbt_clickhouse.ttl_config": {"name": "ttl_config", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.ttl_config", "macro_sql": "{% macro ttl_config(label) %}\n  {%- if config.get(\"ttl\")%}\n    {{ label }} {{ config.get(\"ttl\") }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1159906, "supported_languages": null}, "macro.dbt_clickhouse.on_cluster_clause": {"name": "on_cluster_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.on_cluster_clause", "macro_sql": "{% macro on_cluster_clause(relation, force_sync) %}\n  {% set active_cluster = adapter.get_clickhouse_cluster_name() %}\n  {%- if active_cluster is not none and relation.should_on_cluster %}\n    {# Add trailing whitespace to avoid problems when this clause is not last #}\n    ON CLUSTER {{ active_cluster + ' ' }}\n    {%- if force_sync %}\n    SYNC\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1166284, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_table_as": {"name": "clickhouse__create_table_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_table_as", "macro_sql": "{% macro clickhouse__create_table_as(temporary, relation, sql) -%}\n    {% set has_contract = config.get('contract').enforced %}\n    {% set create_table = create_table_or_empty(temporary, relation, sql, has_contract) %}\n    {% if adapter.is_before_version('22.7.1.2484') or temporary -%}\n        {{ create_table }}\n    {%- else %}\n        {% call statement('create_table_empty') %}\n            {{ create_table }}\n        {% endcall %}\n         {{ add_index_and_projections(relation) }}\n\n        {{ clickhouse__insert_into(relation, sql, has_contract) }}\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.create_table_or_empty", "macro.dbt.statement", "macro.dbt_clickhouse.add_index_and_projections", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1177592, "supported_languages": null}, "macro.dbt_clickhouse.add_index_and_projections": {"name": "add_index_and_projections", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.add_index_and_projections", "macro_sql": "{% macro add_index_and_projections(relation) %}\n    {%- set projections = config.get('projections', default=[]) -%}\n    {%- set indexes = config.get('indexes', default=[]) -%}\n    \n    {% if projections | length > 0 or indexes | length > 0 %}\n        {% call statement('add_projections_and_indexes') %}\n            ALTER TABLE {{ relation }}\n            {%- if projections %}\n                {%- for projection in projections %}\n                    ADD PROJECTION {{ projection.get('name') }} ({{ projection.get('query') }})\n                    {%- if not loop.last or indexes | length > 0 -%}\n                        ,\n                    {% endif %}\n                {%- endfor %}\n            {%- endif %}\n            {%- if indexes %}\n                {%- for index in indexes %}\n                    ADD INDEX {{ index.get('name') }} {{ index.get('definition') }}\n                    {%- if not loop.last -%}\n                        ,\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endcall %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1197076, "supported_languages": null}, "macro.dbt_clickhouse.create_table_or_empty": {"name": "create_table_or_empty", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.create_table_or_empty", "macro_sql": "{% macro create_table_or_empty(temporary, relation, sql, has_contract) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    {% if temporary -%}\n        create temporary table {{ relation }}\n        engine Memory\n        {{ adapter.get_model_settings(model, 'Memory') }}\n        as (\n          {{ sql }}\n        )\n    {%- else %}\n        create table {{ relation }}\n        {{ on_cluster_clause(relation)}}\n        {%- if has_contract%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n        {%- endif %}\n        {{ engine_clause() }}\n        {{ order_cols(label=\"order by\") }}\n        {{ primary_key_clause(label=\"primary key\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ ttl_config(label=\"ttl\")}}\n        {{ adapter.get_model_settings(model, config.get('engine', default='MergeTree')) }}\n\n        {%- if not has_contract %}\n          {%- if not adapter.is_before_version('22.7.1.2484') %}\n            empty\n          {%- endif %}\n          as (\n            {{ sql }}\n          )\n        {%- endif %}\n        {{ adapter.get_model_query_settings(model) }}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.partition_cols", "macro.dbt_clickhouse.ttl_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1219637, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__insert_into": {"name": "clickhouse__insert_into", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__insert_into", "macro_sql": "{% macro clickhouse__insert_into(target_relation, sql, has_contract) %}\n  {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n  insert into {{ target_relation }}\n        ({{ dest_cols_csv }})\n  {%- if has_contract -%}\n    -- Use a subquery to get columns in the right order\n          SELECT {{ dest_cols_csv }} FROM ( {{ sql }} )\n  {%- else -%}\n      {{ sql }}\n  {%- endif -%}\n  {{ adapter.get_model_query_settings(model) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.122915, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_table_clickhouse": {"name": "materialization_distributed_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_table_clickhouse", "macro_sql": "{% materialization distributed_table, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n  {%- set local_db_prefix = adapter.get_clickhouse_local_db_prefix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set on_cluster = on_cluster_clause(target_relation) %}\n  {% if on_cluster.strip() == '' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization cluster setting in dbt profile must be set') %}\n  {% endif %}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if target_relation is not none else none %}\n\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation_local is not none %}\n    {%- set backup_relation_type = existing_relation_local.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation_local) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n  {% set view_relation = default__make_temp_relation(target_relation, '__dbt_tmp') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation) }}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ create_empty_table_from_relation(backup_relation, view_relation) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation_local) %}\n  {% else %}\n    {% do run_query(create_empty_table_from_relation(intermediate_relation, view_relation)) or '' %}\n    {{ adapter.rename_relation(existing_relation_local, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation_local) }}\n  {% endif %}  \n    {% do run_query(create_distributed_table(target_relation, target_relation_local)) or '' %}\n  {% do run_query(clickhouse__insert_into(target_relation, sql)) or '' %}\n  {{ drop_relation_if_exists(view_relation) }}\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation_local, grant_config, should_revoke=should_revoke) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.13166, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.create_distributed_table": {"name": "create_distributed_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_table", "macro_sql": "{% macro create_distributed_table(relation, local_relation) %}\n    {%- set cluster = adapter.get_clickhouse_cluster_name() -%}\n   {% if cluster is none %}\n        {% do exceptions.raise_compiler_error('Cluster name should be defined for using distributed materializations, current is None') %}\n    {% endif %}\n\n   {%- set cluster = cluster[1:-1] -%}\n   {%- set sharding = config.get('sharding_key') -%}\n\n    create or replace table {{ relation }} {{ on_cluster_clause(relation) }} as {{ local_relation }}\n    ENGINE = Distributed('{{ cluster}}', '{{ local_relation.schema }}', '{{ local_relation.name }}'\n    {%- if sharding is not none and sharding.strip() != '' -%}\n        , {{ sharding }}\n    {%- else %}\n        , rand()\n    {% endif -%}\n    )\n {% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1331317, "supported_languages": null}, "macro.dbt_clickhouse.create_empty_table_from_relation": {"name": "create_empty_table_from_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_empty_table_from_relation", "macro_sql": "{% macro create_empty_table_from_relation(relation, source_relation, sql=none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- if sql -%}\n    {%- set columns = adapter.get_column_schema_from_query(sql) | list -%}\n  {%- else -%}\n    {%- set columns = adapter.get_columns_in_relation(source_relation) | list -%}\n  {%- endif -%}\n  {%- set col_list = [] -%}\n  {% for col in columns %}\n    {{col_list.append(col.name + ' ' + col.data_type) or '' }}\n  {% endfor %}\n  {{ sql_header if sql_header is not none }}\n\n  create table {{ relation.include(database=False) }}\n  {{ on_cluster_clause(relation) }} (\n      {{col_list | join(', ')}}\n\n    {% if config.get('projections') %}\n      {% set projections = config.get('projections') %}\n      {% for projection in projections %}\n        , PROJECTION {{ projection.get(\"name\") }} (\n            {{ projection.get(\"query\") }}\n        )\n      {% endfor %}\n  {% endif %}\n  )\n  \n  {{ engine_clause() }}\n  {{ order_cols(label=\"order by\") }}\n  {{ primary_key_clause(label=\"primary key\") }}\n  {{ partition_cols(label=\"partition by\") }}\n  {{ ttl_config(label=\"ttl\")}}\n  {{ adapter.get_model_settings(model, config.get('engine', default='MergeTree')) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.partition_cols", "macro.dbt_clickhouse.ttl_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1358707, "supported_languages": null}, "macro.dbt_clickhouse.create_distributed_local_table": {"name": "create_distributed_local_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_local_table", "macro_sql": "{% macro create_distributed_local_table(distributed_relation, shard_relation, structure_relation, sql_query=none) -%}\n  {{ drop_relation_if_exists(shard_relation) }}\n  {{ drop_relation_if_exists(distributed_relation) }}\n  {{ create_schema(shard_relation) }}\n  {% do run_query(create_empty_table_from_relation(shard_relation, structure_relation, sql_query)) or '' %}\n  {% do run_query(create_distributed_table(distributed_relation, shard_relation)) or '' %}\n  {% if sql_query is not none %}\n    {% do run_query(clickhouse__insert_into(distributed_relation, sql_query)) or '' %}\n  {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.create_schema", "macro.dbt.run_query", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1370423, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_s3source": {"name": "clickhouse_s3source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/s3.sql", "original_file_path": "macros/materializations/s3.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_s3source", "macro_sql": "{% macro clickhouse_s3source(config_name='', bucket='', path='', fmt='', structure='',\n    aws_access_key_id='', aws_secret_access_key='', role_arn='', compression='') %}\n  {% if config_name and not config_name.lower().endswith('s3') %}\n    {{ exceptions.raise_compiler_error(\"S3 configuration should end with 's3'\") }}\n  {% endif %}\n  {% set s3config = config.get(config_name, {}) %}\n  {{ adapter.s3source_clause(\n    config_name=config_name,\n    s3_model_config=s3config,\n    bucket=bucket,\n    path=path,\n    fmt=fmt,\n    structure=structure,\n    aws_access_key_id=aws_access_key_id,\n    aws_secret_access_key=aws_secret_access_key,\n    role_arn=role_arn,\n    compression=compression) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1387162, "supported_languages": null}, "macro.dbt_clickhouse.materialization_view_clickhouse": {"name": "materialization_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.materialization_view_clickhouse", "macro_sql": "{%- materialization view, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n  {% else %}\n    {{ log('Relation ' + target_relation.name + ' already exists, replacing it' )}}\n  {% endif %}\n\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.141818, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.get_sql_security_clause": {"name": "get_sql_security_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.get_sql_security_clause", "macro_sql": "{% macro get_sql_security_clause(relation) %}\n  {% set sql_security = config.get('sql_security') %}\n  {% if sql_security -%}\n    {% if sql_security == 'definer' -%}\n    {%- set definer = config.require('definer') -%}\n      {% if not definer -%}\n        {{ exceptions.raise_compiler_error(\"Invalid config parameter `definer`. No value was provided.\") }}\n      {%- endif %}\n      DEFINER = {{ definer }} SQL SECURITY DEFINER\n    {%- elif sql_security == 'invoker' %}\n    SQL SECURITY INVOKER\n    {%- else %}\n      {{ exceptions.raise_compiler_error(\"Invalid config parameter `sql_security`. Got: `\" + sql_security + \"`, but only definer | invoker allowed.\") }}\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1429563, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_view_as": {"name": "clickhouse__create_view_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_view_as", "macro_sql": "{% macro clickhouse__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation.include(database=False) }} {{ on_cluster_clause(relation) }}\n    {{ get_sql_security_clause(relation) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n    {{ adapter.get_model_query_settings(model) }}\n  )\n      {% if model.get('config').get('materialized') == 'view' %}\n      {{ adapter.get_model_settings(model, config.get('engine', default='MergeTree')) }}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.get_sql_security_clause", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.144495, "supported_languages": null}, "macro.dbt_clickhouse.materialization_dictionary_clickhouse": {"name": "materialization_dictionary_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.materialization_dictionary_clickhouse", "macro_sql": "{%- materialization dictionary, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='dictionary') -%}\n  {%- set cluster_clause = on_cluster_clause(target_relation) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {# create our new dictionary #}\n  {% call statement('main') -%}\n    {{ clickhouse__get_create_dictionary_as_sql(target_relation, cluster_clause, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(target_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1476333, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql": {"name": "clickhouse__get_create_dictionary_as_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql", "macro_sql": "{% macro clickhouse__get_create_dictionary_as_sql(relation, cluster_clause, sql) %}\n  {%- set fields = config.get('fields') -%}\n  {%- set source_type = config.get('source_type') -%}\n\n  CREATE OR REPLACE DICTIONARY {{ relation }} {{ cluster_clause }}\n  (\n  {%- for (name, data_type) in fields -%}\n    {{ name }} {{ data_type }}{%- if not loop.last -%},{%- endif -%}\n  {%- endfor -%}\n  )\n  {{ primary_key_clause(label=\"primary key\") }}\n  SOURCE(\n    {%- if source_type == 'http' %}\n      {{ http_source() }}\n    {% else %}\n      {{ clickhouse_source(sql) }}\n    {% endif -%}\n  )\n  LAYOUT({{ config.get('layout') }})\n  LIFETIME({{ config.get('lifetime') }})\n  {%- if config.get('range') %}\n  RANGE({{ config.get('range') }})\n  {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.http_source", "macro.dbt_clickhouse.clickhouse_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1493535, "supported_languages": null}, "macro.dbt_clickhouse.http_source": {"name": "http_source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.http_source", "macro_sql": "{% macro http_source() %}\n  HTTP(URL '{{ config.get(\"url\") }}' FORMAT '{{ config.get(\"format\") }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1497092, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_source": {"name": "clickhouse_source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_source", "macro_sql": "{% macro clickhouse_source(sql) %}\n  {%- set credentials = adapter.get_credentials(config.get(\"connection_overrides\", {})) -%}\n  {%- set table = config.get('table') -%}\n  CLICKHOUSE(\n      {% if credentials.get(\"user\") -%}\n      user '{{ credentials.get(\"user\") }}'\n      {%- endif %}\n      {% if credentials.get(\"password\") -%}\n      password '{{ credentials.get(\"password\") }}'\n      {%- endif %}\n      {% if credentials.get(\"database\") -%}\n      db '{{ credentials.get(\"database\") }}'\n      {%- endif %}\n      {%- if table is not none %}\n        table '{{ table }}'\n      {% else %}\n        query \"{{ sql }}\"\n      {% endif -%}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1511283, "supported_languages": null}, "macro.dbt_clickhouse.drop_dictionary_if_exists": {"name": "drop_dictionary_if_exists", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.drop_dictionary_if_exists", "macro_sql": "{% macro drop_dictionary_if_exists(relation, cluster_clause) %}\n  {% if relation.type != 'dictionary' %}\n    {{ log(relation ~ ' is not a dictionary; defaulting to drop_relation_if_exists') }}\n    {{ drop_relation_if_exists(relation) }}\n  {% else %}\n    {% call statement('drop_dictionary_if_exists') %}\n      drop dictionary if exists {{ relation }} {{ cluster_clause }}\n    {% endcall %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.151887, "supported_languages": null}, "macro.dbt_clickhouse.materialization_materialized_view_clickhouse": {"name": "materialization_materialized_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.materialization_materialized_view_clickhouse", "macro_sql": "\n{%- materialization materialized_view, adapter='clickhouse' -%}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set cluster_clause = on_cluster_clause(target_relation) -%}\n  {%- set refreshable_clause = refreshable_mv_clause() -%}\n\n\n  {# look for an existing relation for the target table and create backup relations if necessary #}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- extract the names of the materialized views from the sql\n  {% set view_names = modules.re.findall('--(?:\\s)?([^:]+):begin', sql) %}\n\n  -- extract the sql for each of the materialized view into a map\n  {% set views = {} %}\n  {% if view_names %}\n    {% for view_name in view_names %}\n      {% set view_sql = modules.re.findall('--(?:\\s)?' + view_name + ':begin(.*)--(?:\\s)?' + view_name + ':end', sql, flags=modules.re.DOTALL)[0] %}\n      {%- set _ = views.update({view_name: view_sql}) -%}\n    {% endfor %}\n  {% else %}\n    {%- set _ = views.update({\"mv\": sql}) -%}\n  {% endif %}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new materialized view ' + target_relation.name )}}\n    {% set catchup_data = config.get(\"catchup\", True) %}\n    {{ clickhouse__get_create_materialized_view_as_sql(target_relation, sql, views, catchup_data) }}\n  {% elif existing_relation.can_exchange %}\n    {{ log('Replacing existing materialized view ' + target_relation.name) }}\n    -- in this section, we look for mvs that has the same pattern as this model, but for some reason,\n    -- are not listed in the model. This might happen when using multiple mv, and renaming one of the mv in the model.\n    -- In case such mv found, we raise a warning to the user, that they might need to drop the mv manually.\n    {{ log('Searching for existing materialized views with the pattern of ' + target_relation.name) }}\n    {{ log('Views dictionary contents: ' + views | string) }}\n\n        {% set tables_query %}\n            select table_name\n            from information_schema.tables\n            where table_schema = '{{ existing_relation.schema }}'\n              and table_name like '%{{ target_relation.name }}%'\n              and table_type = 'VIEW'\n        {% endset %}\n\n    {% set tables_result = run_query(tables_query) %}\n    {% if tables_result is not none and tables_result.columns %}\n        {% set tables = tables_result.columns[0].values() %}\n        {{ log('Current mvs found in ClickHouse are: ' + tables | join(', ')) }}\n        {% set mv_names = [] %}\n        {% for key in views.keys() %}\n            {% do mv_names.append(target_relation.name ~ \"_\" ~ key) %}\n        {% endfor %}\n        {{ log('Model mvs to replace ' + mv_names | string) }}\n        {% for table in tables %}\n            {% if table not in mv_names %}\n                {{ log('Warning - Table \"' + table + '\" was detected with the same pattern as model name \"' + target_relation.name + '\" but was not found in this run. In case it is a renamed mv that was previously part of this model, drop it manually (!!!)') }}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {{ log('No existing mvs found matching the pattern. continuing..', info=True) }}\n    {% endif %}\n    {% if should_full_refresh() %}\n      {{ clickhouse__drop_mvs(target_relation, cluster_clause, views) }}\n\n      {% call statement('main') -%}\n        {{ get_create_table_as_sql(False, backup_relation, sql) }}\n      {%- endcall %}\n      {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n\n      {{ clickhouse__create_mvs(existing_relation, cluster_clause, refreshable_clause, views) }}\n    {% else %}\n      -- we need to have a 'main' statement\n      {% call statement('main') -%}\n        select 1\n      {%- endcall %}\n\n      -- try to alter view first to replace sql, else drop and create\n      {{ clickhouse__update_mvs(target_relation, cluster_clause, refreshable_clause, views) }}\n\n    {% endif %}\n  {% else %}\n    {{ log('Replacing existing materialized view ' + target_relation.name) }}\n    {{ clickhouse__replace_mv(target_relation, existing_relation, intermediate_relation, backup_relation, sql, views) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set relations = [target_relation] %}\n  {% for view in views %}\n    {{ relations.append(target_relation.derivative('_' + view, 'materialized_view')) }}\n  {% endfor %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.refreshable_mv_clause", "macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql", "macro.dbt.run_query", "macro.dbt.should_full_refresh", "macro.dbt_clickhouse.clickhouse__drop_mvs", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.clickhouse__create_mvs", "macro.dbt_clickhouse.clickhouse__update_mvs", "macro.dbt_clickhouse.clickhouse__replace_mv", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1646829, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql": {"name": "clickhouse__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql", "macro_sql": "{% macro clickhouse__get_create_materialized_view_as_sql(relation, sql, views, catchup=True ) -%}\n  {% call statement('main') %}\n  {% if catchup == True %}\n    {{ get_create_table_as_sql(False, relation, sql) }}\n  {% else %}\n  {{ log('Catchup data config was set to false, skipping mv-target-table initial insertion ')}}\n   {% set has_contract = config.get('contract').enforced %}\n    {{ create_table_or_empty(False, relation, sql, has_contract) }}\n  {% endif %}\n  {% endcall %}\n  {%- set cluster_clause = on_cluster_clause(relation) -%}\n  {%- set refreshable_clause = refreshable_mv_clause() -%}\n  {%- set mv_relation = relation.derivative('_mv', 'materialized_view') -%}\n  {{ clickhouse__create_mvs(relation, cluster_clause, refreshable_clause, views) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.create_table_or_empty", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.refreshable_mv_clause", "macro.dbt_clickhouse.clickhouse__create_mvs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1663067, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_mv": {"name": "clickhouse__drop_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_mv", "macro_sql": "{% macro clickhouse__drop_mv(mv_relation, cluster_clause)  -%}\n  {% call statement('drop existing mv: ' + mv_relation.name) -%}\n    drop view if exists {{ mv_relation }} {{ cluster_clause }}\n  {% endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.166743, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_mv": {"name": "clickhouse__create_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_mv", "macro_sql": "{% macro clickhouse__create_mv(mv_relation, target_relation, cluster_clause, refreshable_clause, view_sql)  -%}\n  {% call statement('create existing mv: ' + mv_relation.name) -%}\n    create materialized view if not exists {{ mv_relation }} {{ cluster_clause }}\n    {{ refreshable_clause }}\n    to {{ target_relation }}\n    as {{ view_sql }}\n  {% endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1673517, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__modify_mv": {"name": "clickhouse__modify_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__modify_mv", "macro_sql": "{% macro clickhouse__modify_mv(mv_relation, cluster_clause, view_sql)  -%}\n  {% call statement('modify existing mv: ' + mv_relation.name) -%}\n    alter table {{ mv_relation }} {{ cluster_clause }} modify query {{ view_sql }}\n  {% endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1678286, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__update_mv": {"name": "clickhouse__update_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__update_mv", "macro_sql": "{% macro clickhouse__update_mv(mv_relation, target_relation, cluster_clause, refreshable_clause, view_sql)  -%}\n  {% set existing_relation = adapter.get_relation(database=mv_relation.database, schema=mv_relation.schema, identifier=mv_relation.identifier) %}\n  {% if existing_relation %}\n    {{ clickhouse__modify_mv(mv_relation, cluster_clause, view_sql) }};\n  {% else %}\n    {{ clickhouse__drop_mv(mv_relation, cluster_clause) }};\n    {{ clickhouse__create_mv(mv_relation, target_relation, cluster_clause, refreshable_clause, view_sql) }};\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__modify_mv", "macro.dbt_clickhouse.clickhouse__drop_mv", "macro.dbt_clickhouse.clickhouse__create_mv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1688457, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_mvs": {"name": "clickhouse__drop_mvs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_mvs", "macro_sql": "{% macro clickhouse__drop_mvs(target_relation, cluster_clause, views)  -%}\n  {% for view in views.keys() %}\n    {%- set mv_relation = target_relation.derivative('_' + view, 'materialized_view') -%}\n    {{ clickhouse__drop_mv(mv_relation, cluster_clause) }};\n  {% endfor %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_mv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1694736, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_mvs": {"name": "clickhouse__create_mvs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_mvs", "macro_sql": "{% macro clickhouse__create_mvs(target_relation, cluster_clause, refreshable_clause, views)  -%}\n  {% for view, view_sql in views.items() %}\n    {%- set mv_relation = target_relation.derivative('_' + view, 'materialized_view') -%}\n    {{ clickhouse__create_mv(mv_relation, target_relation, cluster_clause, refreshable_clause, view_sql) }};\n  {% endfor %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_mv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1701932, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__update_mvs": {"name": "clickhouse__update_mvs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__update_mvs", "macro_sql": "{% macro clickhouse__update_mvs(target_relation, cluster_clause, refreshable_clause, views)  -%}\n  {% for view, view_sql in views.items() %}\n    {%- set mv_relation = target_relation.derivative('_' + view, 'materialized_view') -%}\n    {{ clickhouse__update_mv(mv_relation, target_relation, cluster_clause, refreshable_clause, view_sql) }};\n  {% endfor %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__update_mv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1709273, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace_mv": {"name": "clickhouse__replace_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace_mv", "macro_sql": "{% macro clickhouse__replace_mv(target_relation, existing_relation, intermediate_relation, backup_relation, sql, views) %}\n  {# drop existing materialized view while we recreate the target table #}\n  {%- set cluster_clause = on_cluster_clause(target_relation) -%}\n  {%- set refreshable_clause = refreshable_mv_clause() -%}\n  {{ clickhouse__drop_mvs(target_relation, cluster_clause, views) }}\n\n  {# recreate the target table #}\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n  {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {# now that the target table is recreated, we can finally create our new view #}\n  {{ clickhouse__create_mvs(target_relation, cluster_clause, refreshable_clause, views) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.refreshable_mv_clause", "macro.dbt_clickhouse.clickhouse__drop_mvs", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__create_mvs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1721787, "supported_languages": null}, "macro.dbt_clickhouse.refreshable_mv_clause": {"name": "refreshable_mv_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.refreshable_mv_clause", "macro_sql": "{% macro refreshable_mv_clause() %}\n  {%- if config.get('refreshable') is not none -%}\n\n    {% set refreshable_config = config.get('refreshable') %}\n    {% if refreshable_config is not mapping %}\n      {% do exceptions.raise_compiler_error(\n        \"The 'refreshable' configuration must be defined as a dictionary. Please review the docs for more details.\"\n      ) %}\n    {% endif %}\n\n    {% set refresh_interval = refreshable_config.get('interval', none) %}\n    {% set refresh_randomize = refreshable_config.get('randomize', none) %}\n    {% set depends_on = refreshable_config.get('depends_on', none) %}\n    {% set depends_on_validation = refreshable_config.get('depends_on_validation', false) %}\n    {% set append = refreshable_config.get('append', false) %}\n\n    {% if not refresh_interval %}\n      {% do exceptions.raise_compiler_error(\n        \"The 'refreshable' configuration is defined, but 'interval' is missing. \"\n        ~ \"This is required to create a refreshable materialized view.\"\n      ) %}\n    {% endif %}\n\n    {% if refresh_interval %}\n      REFRESH {{ refresh_interval }}\n      {# This is a comment to force a new line between REFRESH and RANDOMIZE clauses #}\n      {%- if refresh_randomize -%}\n        RANDOMIZE FOR {{ refresh_randomize }}\n      {%- endif -%}\n    {% endif %}\n\n    {% if depends_on %}\n      {% set depends_on_list = [] %}\n\n      {% if depends_on is string %}\n        {% set depends_on_list = [depends_on] %}\n      {% elif depends_on is iterable %}\n        {% set temp_list = depends_on_list %}\n        {%- for dep in depends_on %}\n          {% if dep is string %}\n            {% do temp_list.append(dep) %}\n          {% else %}\n            {% do exceptions.raise_compiler_error(\n              \"The 'depends_on' configuration must be either a string or a list of strings.\"\n            ) %}\n          {% endif %}\n        {% endfor %}\n        {% set depends_on_list = temp_list %}\n      {% else %}\n        {% do exceptions.raise_compiler_error(\n          \"The 'depends_on' configuration must be either a string or a list of strings.\"\n        ) %}\n      {% endif %}\n\n      {% if depends_on_validation and depends_on_list | length > 0 %}\n        {%- for dep in depends_on_list %}\n          {% do validate_refreshable_mv_existence(dep) %}\n        {%- endfor %}\n      {% endif %}\n\n      DEPENDS ON {{ depends_on_list | join(', ') }}\n    {% endif %}\n\n    {%- if append -%}\n      APPEND\n    {%- endif -%}\n\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.validate_refreshable_mv_existence"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.176252, "supported_languages": null}, "macro.dbt_clickhouse.validate_refreshable_mv_existence": {"name": "validate_refreshable_mv_existence", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.validate_refreshable_mv_existence", "macro_sql": "{% macro validate_refreshable_mv_existence(mv) %}\n  {{ log(mv + ' was recognized as a refreshable mv dependency, checking its existence') }}\n  {% set default_database = \"default\" %}\n\n  {%- set parts = mv.split('.') %}\n  {%- if parts | length == 2 %}\n    {%- set database = parts[0] %}\n    {%- set table = parts[1] %}\n  {%- else %}\n    {%- set database = default_database %}\n    {%- set table = parts[0] %}\n  {%- endif %}\n\n  {%- set condition = \"database='\" + database + \"' and view='\" + table + \"'\" %}\n\n  {% set query %}\n    select count(*)\n    from system.view_refreshes\n    where {{ condition }}\n  {% endset %}\n\n  {% set tables_result = run_query(query) %}\n    {{ log(tables_result.columns[0].values()[0]) }}\n  {% if tables_result.columns[0].values()[0] > 0 %}\n    {{ log('MV ' + mv + ' exists.') }}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\n      'No existing MV found matching MV: ' + mv\n    ) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1784096, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% if data_sql %}\n    {% set sql -%}\n      insert into {{ this.render() }} ({{ cols_sql }})\n      {{ adapter.get_model_query_settings(model) }}\n      format CSV\n      {{ data_sql }}\n    {%- endset %}\n\n    {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1800482, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_csv_table": {"name": "clickhouse__create_csv_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_csv_table", "macro_sql": "{% macro clickhouse__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} {{ on_cluster_clause(this) }} (\n      {%- for col_name in agate_table.column_names -%}\n        {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n        {%- set type = column_override.get(col_name, inferred_type) -%}\n        {%- set column_name = (col_name | string) -%}\n          {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n      {%- endfor -%}\n    )\n    {{ engine_clause() }}\n    {{ order_cols(label='order by') }}\n    {{ partition_cols(label='partition by') }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1821256, "supported_languages": null}, "macro.dbt_clickhouse.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/is_incremental.sql", "original_file_path": "macros/materializations/incremental/is_incremental.sql", "unique_id": "macro.dbt_clickhouse.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and (model.config.materialized == 'incremental' or model.config.materialized == 'distributed_incremental' )\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.183361, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__apply_column_changes": {"name": "clickhouse__apply_column_changes", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/schema_changes.sql", "original_file_path": "macros/materializations/incremental/schema_changes.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__apply_column_changes", "macro_sql": "{% macro clickhouse__apply_column_changes(column_changes, existing_relation, is_distributed=False) %}\n    {{ log('Schema changes detected. Trying to apply the following changes: ' ~ column_changes) }}\n    {%- set existing_local = none -%}\n    {% if is_distributed %}\n        {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n        {%- set local_db_prefix = adapter.get_clickhouse_local_db_prefix() -%}\n        {%- set existing_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if existing_relation is not none else none -%}\n    {% endif %}\n\n    {% if column_changes.on_schema_change == 'append_new_columns' %}\n        {% do clickhouse__add_columns(column_changes.columns_to_add, existing_relation, existing_local, is_distributed) %}\n\n    {% elif column_changes.on_schema_change == 'sync_all_columns' %}\n        {% do clickhouse__drop_columns(column_changes.columns_to_drop, existing_relation, existing_local, is_distributed) %}\n        {% do clickhouse__add_columns(column_changes.columns_to_add, existing_relation, existing_local, is_distributed) %}\n        {% do clickhouse__modify_columns(column_changes.columns_to_modify, existing_relation, existing_local, is_distributed) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__add_columns", "macro.dbt_clickhouse.clickhouse__drop_columns", "macro.dbt_clickhouse.clickhouse__modify_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1862533, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__add_columns": {"name": "clickhouse__add_columns", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/schema_changes.sql", "original_file_path": "macros/materializations/incremental/schema_changes.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__add_columns", "macro_sql": "{% macro clickhouse__add_columns(columns, existing_relation, existing_local=none, is_distributed=False) %}\n    {% for column in columns %}\n        {% set alter_action -%}\n            add column if not exists `{{ column.name }}` {{ column.data_type }}\n        {%- endset %}\n        {% do clickhouse__run_alter_table_command(alter_action, existing_relation, existing_local, is_distributed) %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__run_alter_table_command"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1870387, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_columns": {"name": "clickhouse__drop_columns", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/schema_changes.sql", "original_file_path": "macros/materializations/incremental/schema_changes.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_columns", "macro_sql": "{% macro clickhouse__drop_columns(columns, existing_relation, existing_local=none, is_distributed=False) %}\n    {% for column in columns %}\n        {% set alter_action -%}\n            drop column if exists `{{ column.name }}`\n        {%- endset %}\n        {% do clickhouse__run_alter_table_command(alter_action, existing_relation, existing_local, is_distributed) %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__run_alter_table_command"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1877666, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__modify_columns": {"name": "clickhouse__modify_columns", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/schema_changes.sql", "original_file_path": "macros/materializations/incremental/schema_changes.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__modify_columns", "macro_sql": "{% macro clickhouse__modify_columns(columns, existing_relation, existing_local=none, is_distributed=False) %}\n    {% for column in columns %}\n        {% set alter_action -%}\n            modify column if exists `{{ column.name }}` {{ column.data_type }}\n        {%- endset %}\n        {% do clickhouse__run_alter_table_command(alter_action, existing_relation, existing_local, is_distributed) %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__run_alter_table_command"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1885338, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__run_alter_table_command": {"name": "clickhouse__run_alter_table_command", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/schema_changes.sql", "original_file_path": "macros/materializations/incremental/schema_changes.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__run_alter_table_command", "macro_sql": "{% macro clickhouse__run_alter_table_command(alter_action, existing_relation, existing_local=none, is_distributed=False) %}\n    {% if is_distributed %}\n        {% call statement('alter_table') %}\n            alter table {{ existing_local }} {{ on_cluster_clause(existing_relation) }} {{ alter_action }}\n        {% endcall %}\n        {% call statement('alter_table') %}\n            alter table {{ existing_relation }} {{ on_cluster_clause(existing_relation) }} {{ alter_action }}\n        {% endcall %}\n\n    {% else %}\n        {% call statement('alter_table') %}\n            alter table {{ existing_relation }} {{ alter_action }}\n        {% endcall %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.1897278, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse": {"name": "materialization_distributed_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/distributed_incremental.sql", "original_file_path": "macros/materializations/incremental/distributed_incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse", "macro_sql": "{% materialization distributed_incremental, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n  {%- set local_db_prefix = adapter.get_clickhouse_local_db_prefix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set on_cluster = on_cluster_clause(target_relation) %}\n  {% if on_cluster.strip() == '' %}\n     {% do exceptions.raise_compiler_error('To use distributed materializations cluster setting in dbt profile must be set') %}\n  {% endif %}\n\n  {% set existing_relation_local = load_cached_relation(this.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema})) %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if target_relation is not none else none %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n\n  {{ create_schema(target_relation_local) }}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation_local)-%}\n  {%- set distributed_intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n  {%- set distributed_backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  {%- set view_relation = default__make_temp_relation(target_relation, '__dbt_view_tmp') -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n  {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n  {% set schema_changes = none %}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation_local is none %}\n    -- No existing local table, recreate local and distributed tables\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation, sql) }}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, view_relation, sql) }}\n    {% do adapter.drop_relation(distributed_intermediate_relation) or '' %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% if existing_relation is none %}\n      {% do run_query(create_distributed_table(target_relation, target_relation_local)) %}\n      {% set existing_relation = target_relation %}\n    {% endif %}\n\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', []) or config.get('incremental_predicates', []) %}\n    {% set partition_by = config.get('partition_by') %}\n    {% do adapter.validate_incremental_strategy(incremental_strategy, incremental_predicates, unique_key, partition_by) %}\n    {%- if on_schema_change != 'ignore' %}\n      {%- set local_column_changes = adapter.check_incremental_schema_changes(on_schema_change, existing_relation_local, sql) -%}\n      {% if local_column_changes and incremental_strategy != 'legacy' %}\n        {% do clickhouse__apply_column_changes(local_column_changes, existing_relation, True) %}\n        {% set existing_relation = load_cached_relation(this) %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, local_column_changes, unique_key, True) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, True) %}\n    {% elif incremental_strategy == 'insert_overwrite' %}\n      {% do clickhouse__incremental_insert_overwrite(existing_relation, partition_by, True) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if False %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation_local) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation_local, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation_local) %}\n      {% endif %}\n\n      -- Structure could have changed, need to update distributed table from replaced local table\n      {% set target_relation_new = target_relation.incorporate(path={\"identifier\": target_relation.identifier + '_temp'}) %}\n      {{ drop_relation_if_exists(target_relation_new) }}\n      {% do run_query(create_distributed_table(target_relation_new, target_relation_local)) %}\n\n      {% if False %}\n        {% do adapter.rename_relation(target_relation_new, distributed_backup_relation) %}\n        {% do exchange_tables_atomic(distributed_backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, distributed_backup_relation) %}\n        {% do adapter.rename_relation(target_relation_new, target_relation) %}\n      {% endif %}\n\n      {% do to_drop.append(backup_relation) %}\n      {% do to_drop.append(distributed_backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do apply_grants(target_relation_local, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.create_schema", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__apply_column_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.clickhouse__incremental_insert_overwrite", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2048879, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.materialization_incremental_clickhouse": {"name": "materialization_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_incremental_clickhouse", "macro_sql": "{% materialization incremental, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {% endcall %}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {% endcall %}\n    {% set need_swap = true %}\n\n  {% elif\n      inserts_only\n      or unique_key is none\n      and config.get('incremental_strategy', none) != 'insert_overwrite' -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    -- insert_overwrite strategy does not require unique_key => is an exception.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set column_changes = none %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', []) or config.get('incremental_predicates', []) %}\n    {% set partition_by = config.get('partition_by') %}\n    {% do adapter.validate_incremental_strategy(incremental_strategy, incremental_predicates, unique_key, partition_by) %}\n    {%- if on_schema_change != 'ignore' %}\n      {%- set column_changes = adapter.check_incremental_schema_changes(on_schema_change, existing_relation, sql) -%}\n      {% if column_changes and incremental_strategy != 'legacy' %}\n        {% do clickhouse__apply_column_changes(column_changes, existing_relation) %}\n        {% set existing_relation = load_cached_relation(this) %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, column_changes, unique_key) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% elif incremental_strategy == 'microbatch' %}\n      {%- if config.get(\"__dbt_internal_microbatch_event_time_start\") -%}\n        {% do incremental_predicates.append(config.get(\"event_time\") ~ \" >= toDateTime('\" ~ config.get(\"__dbt_internal_microbatch_event_time_start\").strftime(\"%Y-%m-%d %H:%M:%S\") ~ \"')\") %}\n      {%- endif -%}\n      {%- if model.config.__dbt_internal_microbatch_event_time_end -%}\n        {% do incremental_predicates.append(config.get(\"event_time\") ~ \" < toDateTime('\" ~ config.get(\"__dbt_internal_microbatch_event_time_end\").strftime(\"%Y-%m-%d %H:%M:%S\") ~ \"')\") %}\n      {%- endif -%}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% elif incremental_strategy == 'insert_overwrite' %}\n      {% do clickhouse__incremental_insert_overwrite(existing_relation, partition_by, False) %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if existing_relation.can_exchange %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% endif %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt_clickhouse.clickhouse__apply_column_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.clickhouse__incremental_insert_overwrite", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2188237, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__incremental_legacy": {"name": "clickhouse__incremental_legacy", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro_sql": "{% macro clickhouse__incremental_legacy(existing_relation, intermediate_relation, column_changes, unique_key, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_new_data'}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n\n    {%- set inserted_relation = intermediate_relation -%}\n    {%- set inserting_relation = new_data_relation -%}\n\n    -- First create a temporary table for all of the new data\n    {% if is_distributed %}\n      {% if column_changes %}\n        {% do exceptions.raise_compiler_error('Schema changes not supported with Distributed tables ') %}\n      {% endif %}\n      -- Need to use distributed table to have data on all shards\n      {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_distributed_new_data'}) -%}\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% elif column_changes %}\n      {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% else %}\n      {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    -- Next create another temporary table that will eventually be used to replace the existing table.  We can't\n    -- use the table just created in the previous step because we don't want to override any updated rows with\n    -- old rows when we insert the old data\n    {% if is_distributed %}\n      {%- set distributed_intermediate_relation = make_intermediate_relation(existing_relation) -%}\n      {%- set inserted_relation = distributed_intermediate_relation -%}\n      {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, existing_relation) }}\n    {% else %}\n      {% call statement('main') %}\n          create table {{ intermediate_relation }} {{ on_cluster_clause(existing_relation) }} as {{ new_data_relation }}\n      {% endcall %}\n    {% endif %}\n\n    -- Insert all the existing rows into the new temporary table, ignoring any rows that have keys in the \"new data\"\n    -- table.\n    {%- set source_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set source_columns_csv = source_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_existing_data') %}\n        insert into {{ inserted_relation }} ({{ source_columns_csv }})\n        select {{ source_columns_csv }}\n        from {{ existing_relation }}\n          where ({{ unique_key }}) not in (\n            select {{ unique_key }}\n            from {{ inserting_relation }}\n          )\n       {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    -- Insert all of the new data into the temporary table\n    {% if column_changes %}\n        {%- set dest_columns = adapter.get_columns_in_relation(new_data_relation) -%}\n        {%- set dest_columns_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% else %}\n        {%- set dest_columns_csv = source_columns_csv %}\n    {% endif %}\n    {% call statement('insert_new_data') %}\n     insert into {{ inserted_relation }} ({{ dest_columns_csv }})\n        select {{ dest_columns_csv }}\n        from {{ inserting_relation }}\n      {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    {% do adapter.drop_relation(new_data_relation) %}\n    {% if is_distributed %}\n      {{ drop_relation_if_exists(distributed_new_data_relation) }}\n      {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_intermediate_relation", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.223864, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_delete_insert": {"name": "clickhouse__incremental_delete_insert", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro_sql": "{% macro clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier\n       + '__dbt_new_data_' + invocation_id.replace('-', '_')}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_distributed_new_data'}) -%}\n\n    {%- set inserting_relation = new_data_relation -%}\n\n    {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n    {%- set local_db_prefix = adapter.get_clickhouse_local_db_prefix() -%}\n\n    {% if is_distributed %}\n      -- Need to use distributed table to have data on all shards\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% else %}\n      {% call statement('main') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    {% call statement('delete_existing_data') %}\n      {% if is_distributed %}\n          {% set existing_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if existing_relation is not none else none %}\n            delete from {{ existing_local }} {{ on_cluster_clause(existing_relation) }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ inserting_relation }})\n      {% else %}\n            delete from {{ existing_relation }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ inserting_relation }})\n      {% endif %}\n      {%- if incremental_predicates %}\n        {% for predicate in incremental_predicates %}\n            and {{ predicate }}\n        {% endfor %}\n      {%- endif -%}\n      {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_new_data') %}\n        insert into {{ existing_relation }} select {{ dest_cols_csv }} from {{ inserting_relation }} {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n    {% do adapter.drop_relation(new_data_relation) %}\n    {{ drop_relation_if_exists(distributed_new_data_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.227866, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_insert_overwrite": {"name": "clickhouse__incremental_insert_overwrite", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_insert_overwrite", "macro_sql": "{% macro clickhouse__incremental_insert_overwrite(existing_relation, partition_by, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier\n       + '__dbt_new_data_' + invocation_id.replace('-', '_')}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_distributed_new_data'}) -%}\n\n\n    {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n    {%- set local_db_prefix = adapter.get_clickhouse_local_db_prefix() -%}\n    {% set existing_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix, \"schema\": local_db_prefix + this.schema}) if existing_relation is not none else none %}\n\n    {% if is_distributed %}\n        {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% else %}\n        {% call statement('main') %}\n            {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n        {% endcall %}\n    {% endif %}\n\n    {# Get the parts from the cluster table, since the partitions between shards may not overlap due to distribution #}\n    {% if execute %}\n      {% set select_changed_partitions %}\n          SELECT DISTINCT partition_id\n          {% if is_distributed %}\n            FROM cluster({{ adapter.get_clickhouse_cluster_name() }}, system.parts)\n          {% else %}\n            FROM system.parts\n          {% endif %}\n          WHERE active\n            AND database = '{{ new_data_relation.schema }}'\n            AND table = '{{ new_data_relation.identifier }}'\n      {% endset %}\n      {% set changed_partitions = run_query(select_changed_partitions).rows %}\n    {% else %}\n      {% set changed_partitions = [] %}\n    {% endif %}\n\n    {% if changed_partitions %}\n        {% call statement('replace_partitions') %}\n            {% if is_distributed %}\n                alter table {{ existing_local }} {{ on_cluster_clause(existing_relation) }}\n            {% else %}\n                 alter table {{ existing_relation }}\n            {% endif %}\n            {%- for partition in changed_partitions %}\n                replace partition id '{{ partition['partition_id'] }}'\n                from {{ new_data_relation }}\n                {{- ', ' if not loop.last }}\n            {%- endfor %}\n      {% endcall %}\n    {% endif %}\n\n    {% do adapter.drop_relation(distributed_new_data_relation) %}\n    {% do adapter.drop_relation(new_data_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2316556, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__current_timestamp": {"name": "clickhouse__current_timestamp", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__current_timestamp", "macro_sql": "{% macro clickhouse__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2319715, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time": {"name": "clickhouse__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time", "macro_sql": "{% macro clickhouse__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"toDateTime('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2323503, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_test_sql": {"name": "clickhouse__get_test_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_test_sql", "macro_sql": "{% macro clickhouse__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    {% set main_sql_formatted = clickhouse__place_limit(main_sql, limit) if limit !=None else main_sql%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql_formatted }}\n    ) dbt_internal_test\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__place_limit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2343402, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__place_limit": {"name": "clickhouse__place_limit", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__place_limit", "macro_sql": "{% macro clickhouse__place_limit(query, limit) -%}\n   {% if 'settings' in query.lower()%}\n        {% if '-- end_of_sql' not in query.lower()%}\n            {{exceptions.raise_compiler_error(\"-- end_of_sql must be set when using ClickHouse settings\")}}\n        {% endif %}\n        {% set split_by_settings_sections = query.split(\"-- end_of_sql\")%}\n        {% set split_by_settings_sections_with_limit = split_by_settings_sections[-2] + \"\\n LIMIT \" + limit|string  + \"\\n\" %}\n        {% set query_with_limit = \"-- end_of_sql\".join(split_by_settings_sections[:-2] + [split_by_settings_sections_with_limit, split_by_settings_sections[-1]])%}\n        {{query_with_limit}}\n    {% else %}\n    {{query}}\n    {{\"limit \" ~ limit}}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.235771, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__any_value": {"name": "clickhouse__any_value", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__any_value", "macro_sql": "{% macro clickhouse__any_value(expression) -%}\n    any({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2359965, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__bool_or": {"name": "clickhouse__bool_or", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__bool_or", "macro_sql": "{% macro clickhouse__bool_or(expression) -%}\n    max({{ expression }}) > 0\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2362099, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__cast_bool_to_text": {"name": "clickhouse__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__cast_bool_to_text", "macro_sql": "{% macro clickhouse__cast_bool_to_text(field) %}\n    multiIf({{ field }} > 0, 'true', {{ field }} = 0, 'false', NULL)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.236547, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__hash": {"name": "clickhouse__hash", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__hash", "macro_sql": "{% macro clickhouse__hash(field) -%}\n    lower(hex(MD5(toString({{ field }} ))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2367861, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__last_day": {"name": "clickhouse__last_day", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__last_day", "macro_sql": "\n\n\n{%- macro clickhouse__last_day(date, datepart) -%}\n    {{ dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.237309, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) %}\n    splitByString({{delimiter_text}}, {{ string_text }})[{{ part_number }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2376354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(field, old_chars, new_chars) %}\n   replaceAll({{ field }},'{{ old_chars }}','{{ new_chars }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2379558, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if order_by_clause and 'order by' == ' '.join(order_by_clause.split()[:2]).lower() -%}\n      {% set order_by_clause_tokens = order_by_clause.split() %}\n      {% if ',' in order_by_clause_tokens %}\n        {{ exceptions.raise_compiler_error(\n          'ClickHouse does not support multiple order by fields.')\n        }}\n      {%- endif  %}\n      {% set order_by_clause_tokens = order_by_clause_tokens[2:] %}\n      {% set sort_direction = '' %}\n      {% if 'desc' in ''.join(order_by_clause_tokens[1:]).lower() %}\n        {% set sort_direction = 'Reverse' %}\n      {% endif %}\n      {% set order_by_field = order_by_clause_tokens[0] %}\n\n      {% set arr = \"arrayMap(x -> x.1, array{}Sort(x -> x.2, arrayZip(array_agg({}), array_agg({}))))\".format(sort_direction, measure, order_by_field) %}\n    {% else -%}\n      {% set arr = \"array_agg({})\".format(measure) %}\n    {%- endif %}\n\n    {% if limit_num -%}\n      arrayStringConcat(arraySlice({{ arr }}, 1, {{ limit_num }}), {{delimiter_text}})\n    {% else -%}\n      arrayStringConcat({{ arr }}, {{delimiter_text}})\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2400808, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_construct": {"name": "clickhouse__array_construct", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_construct", "macro_sql": "{% macro clickhouse__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    emptyArray{{data_type}}()\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2406988, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_append": {"name": "clickhouse__array_append", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_append", "macro_sql": "{% macro clickhouse__array_append(array, new_element) -%}\n    arrayPushBack({{ array }}, {{ new_element }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2409785, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_concat": {"name": "clickhouse__array_concat", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_concat", "macro_sql": "{% macro clickhouse__array_concat(array_1, array_2) -%}\n   arrayConcat({{ array_1 }}, {{ array_2 }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2412636, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__test_relationships": {"name": "clickhouse__test_relationships", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__test_relationships", "macro_sql": "{% macro clickhouse__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n-- end_of_sql\nsettings join_use_nulls = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2418504, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_or_create_relation": {"name": "clickhouse__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_or_create_relation", "macro_sql": "{% macro clickhouse__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set can_exchange = adapter.can_exchange(schema, type) %}\n  {%- set should_on_cluster = adapter.should_on_cluster(config.get('materialized'), engine_clause()) %}\n  {%- set new_relation = api.Relation.create(\n      database=None,\n      schema=schema,\n      identifier=identifier,\n      type=type,\n      can_exchange=can_exchange,\n      can_on_cluster=should_on_cluster\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.engine_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2436347, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_database": {"name": "clickhouse__get_database", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_database", "macro_sql": "{% macro clickhouse__get_database(database) %}\n    {% call statement('get_database', fetch_result=True) %}\n        select name, engine, comment\n        from system.databases\n        where name = '{{ database }}'\n   {% endcall %}\n   {% do return(load_result('get_database').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2441847, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_show_grant_sql": {"name": "clickhouse__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_show_grant_sql", "macro_sql": "{% macro clickhouse__get_show_grant_sql(relation) %}\n    SELECT access_type as privilege_type, COALESCE(user_name, role_name) as grantee from system.grants where table = '{{ relation.name }}'\n    AND database = '{{ relation.schema }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2448285, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__call_dcl_statements": {"name": "clickhouse__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__call_dcl_statements", "macro_sql": "{% macro clickhouse__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n      {% call statement('dcl') %}\n        {{ dcl_statement }};\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2453246, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_grant_sql": {"name": "clickhouse__get_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_grant_sql", "macro_sql": "\n\n\n{%- macro clickhouse__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ on_cluster_clause(relation)}} {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.245784, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_revoke_sql": {"name": "clickhouse__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_revoke_sql", "macro_sql": "{%- macro clickhouse__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ on_cluster_clause(relation)}} {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2462454, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.247572, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2478833, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2497356, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2505393, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2516859, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.252606, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2527726, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2544615, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2549741, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2552888, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2555745, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.255858, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.256442, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2570434, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2576575, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2617106, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.265838, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2688487, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2696235, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.270112, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2728899, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2733753, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.274673, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2758074, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.277851, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2813754, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2818918, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2833405, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.283856, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.28511, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2867033, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.287793, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2891023, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2895823, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2909908, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.292222, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2927017, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2930765, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.293666, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2940342, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.294744, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2951186, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2956498, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2960172, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.296331, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2966928, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.297013, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2975864, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.2998316, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3022416, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3047304, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.306408, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3147736, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3154073, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3157477, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3207293, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3212376, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.321483, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3232439, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3250208, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.325505, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.32649, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3268661, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3271353, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.327458, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.327703, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3280253, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3282902, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3292482, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3297312, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.332132, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3370042, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3450494, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3488543, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3495255, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3498652, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3500562, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3503733, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3506234, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3510318, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3515382, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3597927, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3602211, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.36128, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3621292, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3633869, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3642867, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3648489, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3655665, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.366703, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.367126, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.367562, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3715367, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.371878, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.372342, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3742735, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3746064, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3749447, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3778672, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.380725, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3815565, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3831737, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3861465, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3905962, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3916426, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3922617, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3926744, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3938925, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.394533, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3953176, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3958082, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3960638, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3965175, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3966794, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3972933, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3978124, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.398109, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3987212, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.399193, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3996928, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.3999116, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4004145, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.400739, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4012976, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.401571, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.402504, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4037013, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.404156, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.404886, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.405446, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4057202, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.406445, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4069479, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4074867, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4077744, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.409081, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.409421, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4098608, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4101694, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4105287, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.410839, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4111576, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4115233, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4118416, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.412137, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4124744, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4127684, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4130871, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4134035, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4140327, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.414632, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4151862, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4154851, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4160085, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4162896, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4169848, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4173462, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4179244, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4184923, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4187717, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4193769, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4197145, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4203281, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4209206, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.421407, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4217305, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4222982, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4225848, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4231777, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4235291, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.424056, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.424364, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4248025, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4249759, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4254715, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4256916, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4266653, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4275024, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.427985, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.428201, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4290247, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4298747, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4302704, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4313135, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4318047, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4320278, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4327729, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4336696, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4342768, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4348204, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4358492, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.438372, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4392803, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4401352, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4405646, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4412565, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4419181, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4424808, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.442996, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4434574, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4443636, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4451404, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4455192, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.445928, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4463334, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4469223, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4473443, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.44793, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.448366, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.448884, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4493155, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4498336, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4501297, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4506483, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.450942, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.452002, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.452408, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4529471, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4532492, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4537377, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.453988, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.45458, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4548497, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4562628, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.456517, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.457585, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.457921, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.458216, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4608512, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4616125, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4622862, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4629905, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4633286, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4636881, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4645565, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4655435, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4658408, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4680464, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.468458, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4689286, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.469453, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.469756, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4702206, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.470488, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4716558, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4720333, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4729006, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4743857, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.475323, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4756913, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4760454, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4765882, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4768827, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4774005, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4777048, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4781632, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.47843, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4830842, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4843278, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4865515, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4869657, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4871624, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.488179, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4887779, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.489254, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4898205, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.490538, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4912977, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.491974, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4925058, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4933436, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4938776, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.494463, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4969244, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4984384, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.4990132, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5004208, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5027168, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5041559, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5046146, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5059023, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5062444, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5069911, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5075746, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.508043, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5086763, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5090325, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5094395, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5099254, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5109916, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5114458, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.511729, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5132732, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5139022, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5143137, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5148268, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5152605, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.515586, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5159366, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5164323, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5168288, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5174315, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5177932, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.518109, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.518478, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5187926, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5191135, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5194316, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5198379, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5201752, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.521066, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5213873, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5216768, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5218928, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5228353, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5231705, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5233467, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5236728, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5239992, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5246284, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.524999, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5254314, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.525812, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5266864, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5275166, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5279229, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5285547, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5292974, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5296626, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5300395, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5305796, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5310261, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5319421, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.532238, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5325677, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5335155, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.533886, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5341754, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5345497, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5348132, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5368366, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5370808, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5374603, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.537689, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5383818, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5387547, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5390017, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.539468, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5398865, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5403457, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.540755, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5412052, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.542674, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5430481, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5435593, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5440052, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.546286, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5484838, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.548813, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5494456, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5500176, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5504603, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.550868, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5512362, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5535393, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5542428, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5546055, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5552945, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5557384, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5571475, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.557664, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.559274, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5601113, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5604675, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.560863, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5611913, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5617201, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5626483, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.56355, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5641108, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5647445, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5653427, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5661356, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5669255, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5676448, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5683827, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5693936, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.571175, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5721576, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5731122, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.574057, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5747497, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5755966, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5772417, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5780468, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.579308, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5800102, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5806174, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5816514, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5834882, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5842676, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5851645, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5866737, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.589862, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5906367, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5913463, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.592405, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5943668, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.5965085, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6043243, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6052854, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6070418, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6081722, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.610324, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6109781, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6122622, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.612847, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6134915, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.614058, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6149607, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6164958, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6181564, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6195226, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6225972, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6236932, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6241202, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6244955, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.624884, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.625239, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6255813, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6259265, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6267178, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6281602, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6289964, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6299102, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6303093, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6317677, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6355681, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6362581, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6367297, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.637408, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6385734, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6391704, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.639862, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.640423, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6406991, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6416059, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6427863, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6432445, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6439402, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6448553, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6465223, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6479967, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6487267, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6501787, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6516094, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6525962, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6532211, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6543097, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6552007, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6568587, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6588237, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6658015, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6666863, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6672504, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.668379, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6699822, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.670586, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6712773, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6726334, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6754541, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.67616, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.677449, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6782346, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6796787, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6803017, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6805944, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6808748, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6811502, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.681701, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6823316, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.683058, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6836293, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6844618, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6852818, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.685656, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6866837, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6873295, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6884048, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.688901, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6892383, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.690719, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6915932, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6921208, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.692514, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.6929932, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.693351, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760535474.694834, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.gnosis_dbt.stg_crawlers_data__country_codes": ["source.gnosis_dbt.crawlers_data.country_codes"], "model.gnosis_dbt.stg_crawlers_data__ember_electricity_data": ["source.gnosis_dbt.crawlers_data.ember_electricity_data"], "model.gnosis_dbt.int_esg_node_client_distribution": ["model.gnosis_dbt.int_esg_node_classification", "model.gnosis_dbt.int_p2p_discv4_clients_daily", "model.gnosis_dbt.int_p2p_discv5_clients_daily"], "model.gnosis_dbt.int_esg_node_geographic_distribution": ["model.gnosis_dbt.int_esg_node_classification", "model.gnosis_dbt.stg_crawlers_data__country_codes"], "model.gnosis_dbt.int_esg_carbon_intensity_ensemble": ["model.gnosis_dbt.stg_crawlers_data__ember_electricity_data"], "model.gnosis_dbt.int_esg_node_classification": ["model.gnosis_dbt.int_esg_node_population_chao1", "model.gnosis_dbt.int_p2p_discv5_peers"], "model.gnosis_dbt.int_esg_dynamic_power_consumption": ["model.gnosis_dbt.int_esg_carbon_intensity_ensemble", "model.gnosis_dbt.int_esg_node_client_distribution", "model.gnosis_dbt.int_esg_node_geographic_distribution"], "model.gnosis_dbt.int_esg_node_population_chao1": ["model.gnosis_dbt.int_p2p_discv5_peers"], "model.gnosis_dbt.api_esg_energy_monthly": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_carbon_timeseries_bands": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_carbon_emissions_daily": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_energy_consumption_annualised_latest": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_estimated_nodes_daily": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_info_category_daily": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_cif_network_vs_countries_daily": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty", "model.gnosis_dbt.int_esg_carbon_intensity_ensemble"], "model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty": ["model.gnosis_dbt.int_esg_dynamic_power_consumption", "model.gnosis_dbt.int_esg_node_population_chao1"], "model.gnosis_dbt.api_esg_info_annual_daily": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.api_esg_carbon_emissions_annualised_latest": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.stg_consensus__validators": ["source.gnosis_dbt.consensus.validators"], "model.gnosis_dbt.stg_consensus__rewards": ["source.gnosis_dbt.consensus.rewards"], "model.gnosis_dbt.stg_consensus__execution_requests": ["source.gnosis_dbt.consensus.execution_requests"], "model.gnosis_dbt.stg_consensus__withdrawals": ["source.gnosis_dbt.consensus.withdrawals"], "model.gnosis_dbt.stg_consensus__specs": ["source.gnosis_dbt.consensus.specs"], "model.gnosis_dbt.stg_consensus__attestations": ["source.gnosis_dbt.consensus.attestations"], "model.gnosis_dbt.stg_consensus__blocks": ["source.gnosis_dbt.consensus.blocks"], "model.gnosis_dbt.stg_consensus__time_helpers": ["source.gnosis_dbt.consensus.time_helpers"], "model.gnosis_dbt.stg_consensus__deposits": ["source.gnosis_dbt.consensus.deposits"], "model.gnosis_dbt.stg_consensus__blob_commitments": ["source.gnosis_dbt.consensus.blob_commitments"], "model.gnosis_dbt.int_consensus_validators_balances_dist_daily": ["model.gnosis_dbt.stg_consensus__validators"], "model.gnosis_dbt.int_consensus_validators_apy_dist": ["model.gnosis_dbt.stg_consensus__deposits", "model.gnosis_dbt.stg_consensus__execution_requests", "model.gnosis_dbt.stg_consensus__validators", "model.gnosis_dbt.stg_consensus__withdrawals"], "model.gnosis_dbt.int_consensus_graffiti_daily": ["model.gnosis_dbt.stg_consensus__blocks"], "model.gnosis_dbt.int_consensus_validators_balances_daily": ["model.gnosis_dbt.stg_consensus__validators"], "model.gnosis_dbt.int_consensus_validators_apy_daily": ["model.gnosis_dbt.int_GBCDeposit_deposists_daily", "model.gnosis_dbt.stg_consensus__deposits", "model.gnosis_dbt.stg_consensus__execution_requests", "model.gnosis_dbt.stg_consensus__validators", "model.gnosis_dbt.stg_consensus__withdrawals"], "model.gnosis_dbt.int_consensus_attestations_daily": ["model.gnosis_dbt.stg_consensus__attestations"], "model.gnosis_dbt.int_consensus_credentials_daily": ["model.gnosis_dbt.stg_consensus__validators"], "model.gnosis_dbt.int_consensus_blocks_daily": ["model.gnosis_dbt.stg_consensus__blocks", "model.gnosis_dbt.stg_consensus__time_helpers"], "model.gnosis_dbt.int_consensus_blob_commitments_daily": ["model.gnosis_dbt.stg_consensus__blob_commitments"], "model.gnosis_dbt.int_consensus_validators_status_daily": ["model.gnosis_dbt.stg_consensus__validators"], "model.gnosis_dbt.int_consensus_entry_queue_daily": ["model.gnosis_dbt.stg_consensus__validators"], "model.gnosis_dbt.int_consensus_deposits_daily": ["model.gnosis_dbt.stg_consensus__deposits"], "model.gnosis_dbt.int_consensus_withdrawls_dist_daily": ["model.gnosis_dbt.stg_consensus__withdrawals"], "model.gnosis_dbt.api_consensus_graffiti_label_daily": ["model.gnosis_dbt.int_consensus_graffiti_daily"], "model.gnosis_dbt.api_consensus_info_apy_latest": ["model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_validators_active_daily": ["model.gnosis_dbt.int_consensus_validators_status_daily"], "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest": ["model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"], "model.gnosis_dbt.fct_consensus_forks": ["model.gnosis_dbt.stg_consensus__specs", "model.gnosis_dbt.stg_consensus__time_helpers"], "model.gnosis_dbt.api_consensus_forks": ["model.gnosis_dbt.fct_consensus_forks"], "model.gnosis_dbt.fct_consensus_graffiti_cloud": ["model.gnosis_dbt.int_consensus_graffiti_daily"], "model.gnosis_dbt.api_consensus_withdrawls_dist_daily": ["model.gnosis_dbt.int_consensus_withdrawls_dist_daily"], "model.gnosis_dbt.api_consensus_validators_apy_daily": ["model.gnosis_dbt.fct_consensus_validators_apy_daily"], "model.gnosis_dbt.api_consensus_entry_queue_daily": ["model.gnosis_dbt.int_consensus_entry_queue_daily"], "model.gnosis_dbt.api_consensus_validators_balances_dist_daily": ["model.gnosis_dbt.int_consensus_validators_balances_dist_daily"], "model.gnosis_dbt.api_consensus_credentials_daily": ["model.gnosis_dbt.int_consensus_credentials_daily"], "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily": ["model.gnosis_dbt.int_consensus_deposits_daily", "model.gnosis_dbt.int_consensus_withdrawls_dist_daily"], "model.gnosis_dbt.api_consensus_blocks_daily": ["model.gnosis_dbt.int_consensus_blocks_daily"], "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"], "model.gnosis_dbt.api_consensus_staked_daily": ["model.gnosis_dbt.int_consensus_validators_balances_daily"], "model.gnosis_dbt.fct_consensus_info_latest": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "model.gnosis_dbt.fct_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_balances_daily", "model.gnosis_dbt.int_consensus_validators_status_daily", "model.gnosis_dbt.int_p2p_discv4_clients_daily"], "model.gnosis_dbt.api_consensus_graffiti_cloud": ["model.gnosis_dbt.fct_consensus_graffiti_cloud"], "model.gnosis_dbt.api_consensus_blob_commitments_daily": ["model.gnosis_dbt.int_consensus_blob_commitments_daily"], "model.gnosis_dbt.api_consensus_validators_balances_daily": ["model.gnosis_dbt.int_consensus_validators_balances_daily"], "model.gnosis_dbt.fct_consensus_validators_apy_daily": ["model.gnosis_dbt.int_consensus_validators_apy_daily"], "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest": ["model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_validators_status_daily": ["model.gnosis_dbt.int_consensus_validators_status_daily"], "model.gnosis_dbt.api_consensus_credentials_latest": ["model.gnosis_dbt.int_consensus_credentials_daily"], "model.gnosis_dbt.api_consensus_attestations_daily": ["model.gnosis_dbt.int_consensus_attestations_daily"], "model.gnosis_dbt.api_consensus_info_active_ongoing_latest": ["model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_validators_apy_dist": ["model.gnosis_dbt.int_consensus_validators_apy_dist"], "model.gnosis_dbt.api_consensus_info_staked_latest": ["model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.int_execution_rwa_backedfi_prices": ["model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events"], "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily": ["model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily"], "model.gnosis_dbt.int_yields_sdai_rate_daily": ["model.gnosis_dbt.contracts_sdai_events"], "model.gnosis_dbt.fct_yields_sdai_apy_daily": ["model.gnosis_dbt.int_yields_sdai_rate_daily"], "model.gnosis_dbt.int_GBCDeposit_deposists_daily": ["model.gnosis_dbt.contracts_GBCDeposit_events"], "model.gnosis_dbt.stg_execution__blocks": ["source.gnosis_dbt.execution.blocks"], "model.gnosis_dbt.int_execution_blocks_clients_version_daily": ["model.gnosis_dbt.stg_execution__blocks"], "model.gnosis_dbt.int_execution_blocks_gas_usage_daily": ["model.gnosis_dbt.stg_execution__blocks"], "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_daily": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "model.gnosis_dbt.api_execution_blocks_clients_pct_daily": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "model.gnosis_dbt.fct_execution_blocks_clients_daily": ["model.gnosis_dbt.int_execution_blocks_clients_version_daily"], "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_monthly": ["model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly"], "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "model.gnosis_dbt.stg_execution__transactions": ["source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.int_execution_transactions_info_daily": ["model.gnosis_dbt.stg_crawlers_data__dune_prices", "model.gnosis_dbt.stg_execution__transactions"], "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent": ["model.gnosis_dbt.int_crawlers_data_labels", "model.gnosis_dbt.stg_execution__transactions"], "model.gnosis_dbt.int_execution_transactions_by_project_daily": ["model.gnosis_dbt.int_crawlers_data_labels", "model.gnosis_dbt.stg_execution__transactions"], "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.api_execution_transactions_gas_used_daily": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "model.gnosis_dbt.api_execution_transactions_active_accounts_total": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.api_execution_transactions_active_accounts_7d": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.fct_execution_transactions_by_project_snapshots": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_daily": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "model.gnosis_dbt.api_execution_transactions_by_sector_hourly": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_7d": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"], "model.gnosis_dbt.api_execution_transactions_total": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "model.gnosis_dbt.api_execution_transactions_cnt_total": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_total": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"], "model.gnosis_dbt.api_execution_transactions_7d": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.api_execution_transactions_cnt_daily": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_total": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_by_project_monthly_top5": ["model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5"], "model.gnosis_dbt.fct_execution_transactions_by_sector_daily": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.api_execution_transactions_fees_native_7d": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.api_execution_transactions_fees_native_total": ["model.gnosis_dbt.fct_execution_transactions_snapshots"], "model.gnosis_dbt.fct_execution_transactions_snapshots": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_7d": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_by_project_total": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_by_sector_daily": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_daily": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "model.gnosis_dbt.api_execution_transactions_by_project_7d": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_hourly": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "model.gnosis_dbt.api_execution_transactions_value_daily": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "model.gnosis_dbt.int_execution_circles_backing": ["model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events"], "model.gnosis_dbt.int_execution_circles_v1_avatars": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"], "model.gnosis_dbt.int_execution_circles_transitive_transfers": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"], "model.gnosis_dbt.int_execution_circles_v2_avatars": ["model.gnosis_dbt.contracts_circles_v2_Hub_events"], "model.gnosis_dbt.api_execution_circles_orgs_cnt_latest": ["model.gnosis_dbt.fct_execution_circles_avatars"], "model.gnosis_dbt.fct_execution_circles_avatars": ["model.gnosis_dbt.int_execution_circles_v2_avatars"], "model.gnosis_dbt.fct_execution_circles_backing": ["model.gnosis_dbt.int_execution_circles_backing"], "model.gnosis_dbt.api_execution_circles_avatars": ["model.gnosis_dbt.fct_execution_circles_avatars"], "model.gnosis_dbt.api_execution_circles_backers_cnt_latest": ["model.gnosis_dbt.fct_execution_circles_backing"], "model.gnosis_dbt.api_execution_circles_humans_cnt_latest": ["model.gnosis_dbt.fct_execution_circles_avatars"], "model.gnosis_dbt.api_execution_circles_groups_cnt_latest": ["model.gnosis_dbt.fct_execution_circles_avatars"], "model.gnosis_dbt.stg_execution__storage_diffs": ["source.gnosis_dbt.execution.storage_diffs"], "model.gnosis_dbt.int_execution_state_size_full_diff_daily": ["model.gnosis_dbt.stg_execution__storage_diffs"], "model.gnosis_dbt.api_execution_state_full_size_daily": ["model.gnosis_dbt.fct_execution_state_full_size_daily"], "model.gnosis_dbt.fct_execution_state_full_size_daily": ["model.gnosis_dbt.int_execution_state_size_full_diff_daily"], "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_OmenAgentResultMapping_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_wxdai_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_sdai_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_wxdai_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_ConditionalTokens_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_ConditionalTokens_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Realitio_v2_1_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Realitio_v2_1_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_GBCDeposit_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_GBCDeposit_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_AgentResultMapping_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_AgentResultMapping_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_circles_v2_Hub_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_circles_v1_Hub_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_Seer_MarketFactory_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.contracts_Seer_MarketFactory_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events": ["seed.gnosis_dbt.event_signatures", "source.gnosis_dbt.execution.logs"], "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls": ["seed.gnosis_dbt.function_signatures", "source.gnosis_dbt.execution.transactions"], "model.gnosis_dbt.stg_nebula_discv4__neighbors": ["source.gnosis_dbt.nebula_discv4.neighbors"], "model.gnosis_dbt.stg_nebula_discv4__visits": ["source.gnosis_dbt.nebula_discv4.visits"], "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids": ["source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids"], "model.gnosis_dbt.stg_nebula_discv5__neighbors": ["source.gnosis_dbt.nebula_discv5.neighbors"], "model.gnosis_dbt.stg_crawlers_data__ipinfo": ["source.gnosis_dbt.crawlers_data.ipinfo"], "model.gnosis_dbt.stg_nebula_discv5__visits": ["source.gnosis_dbt.nebula_discv5.visits"], "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids": ["source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids"], "model.gnosis_dbt.int_p2p_discv5_topology_latest": ["model.gnosis_dbt.int_p2p_discv5_peers", "model.gnosis_dbt.stg_crawlers_data__ipinfo", "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "model.gnosis_dbt.stg_nebula_discv5__neighbors"], "model.gnosis_dbt.int_p2p_discv4_visits_daily": ["model.gnosis_dbt.stg_nebula_discv4__visits"], "model.gnosis_dbt.int_p2p_discv5_visits_daily": ["model.gnosis_dbt.stg_nebula_discv5__visits"], "model.gnosis_dbt.int_p2p_discv4_peers": ["model.gnosis_dbt.stg_crawlers_data__ipinfo", "model.gnosis_dbt.stg_nebula_discv4__visits"], "model.gnosis_dbt.int_p2p_discv5_clients_daily": ["model.gnosis_dbt.int_p2p_discv5_peers"], "model.gnosis_dbt.int_p2p_discv4_clients_daily": ["model.gnosis_dbt.int_p2p_discv4_peers"], "model.gnosis_dbt.int_p2p_discv4_topology_latest": ["model.gnosis_dbt.int_p2p_discv4_peers", "model.gnosis_dbt.stg_crawlers_data__ipinfo", "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "model.gnosis_dbt.stg_nebula_discv4__neighbors"], "model.gnosis_dbt.int_p2p_discv5_forks_daily": ["model.gnosis_dbt.int_p2p_discv5_peers"], "model.gnosis_dbt.int_p2p_discv5_geo_daily": ["model.gnosis_dbt.int_p2p_discv5_peers", "source.gnosis_dbt.crawlers_data.ipinfo"], "model.gnosis_dbt.int_p2p_discv5_peers": ["model.gnosis_dbt.stg_crawlers_data__ipinfo", "model.gnosis_dbt.stg_nebula_discv5__visits"], "model.gnosis_dbt.api_p2p_discv5_clients_latest": ["model.gnosis_dbt.int_p2p_discv5_clients_daily"], "model.gnosis_dbt.api_p2p_discv5_next_fork_daily": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"], "model.gnosis_dbt.api_p2p_topology_latest": [], "model.gnosis_dbt.api_p2p_discv5_clients_daily": ["model.gnosis_dbt.int_p2p_discv5_clients_daily"], "model.gnosis_dbt.api_p2p_clients_latest": ["model.gnosis_dbt.int_p2p_discv4_clients_daily", "model.gnosis_dbt.int_p2p_discv5_clients_daily"], "model.gnosis_dbt.api_p2p_visits_latest": ["model.gnosis_dbt.int_p2p_discv4_visits_daily", "model.gnosis_dbt.int_p2p_discv5_visits_daily"], "model.gnosis_dbt.api_p2p_discv4_clients_latest": ["model.gnosis_dbt.int_p2p_discv4_clients_daily"], "model.gnosis_dbt.api_p2p_discv5_topology_latest": ["model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.fct_p2p_discv5_forks_daily": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"], "model.gnosis_dbt.fct_p2p_topology_latest": ["model.gnosis_dbt.int_p2p_discv4_topology_latest", "model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.api_p2p_discv5_current_fork_daily": ["model.gnosis_dbt.int_p2p_discv5_forks_daily"], "model.gnosis_dbt.api_p2p_discv4_clients_daily": ["model.gnosis_dbt.int_p2p_discv4_clients_daily"], "model.gnosis_dbt.stg_crawlers_data__dune_prices": ["source.gnosis_dbt.crawlers_data.dune_prices"], "model.gnosis_dbt.stg_crawlers_data__dune_labels": ["seed.gnosis_dbt.tokens_whitelist", "source.gnosis_dbt.crawlers_data.dune_labels"], "model.gnosis_dbt.int_crawlers_data_labels": ["model.gnosis_dbt.stg_crawlers_data__dune_labels"], "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d": ["source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d"], "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d": ["source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d"], "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d": ["source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d"], "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d": ["source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d"], "model.gnosis_dbt.api_probelab_clients_version_daily": ["model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d"], "model.gnosis_dbt.api_probelab_clients_daily": ["model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d"], "model.gnosis_dbt.api_probelab_clients_cloud_daily": ["model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d"], "model.gnosis_dbt.api_probelab_clients_country_daily": ["model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d"], "model.gnosis_dbt.api_probelab_clients_quic_daily": ["model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d"], "seed.gnosis_dbt.function_signatures": [], "seed.gnosis_dbt.tokens_whitelist": [], "seed.gnosis_dbt.event_signatures": [], "seed.gnosis_dbt.contracts_abi": [], "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce": [], "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba": [], "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862": [], "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6": [], "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826": [], "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192": [], "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a": [], "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d": [], "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8": [], "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612": [], "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3": [], "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f": [], "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602": [], "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529": [], "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426": [], "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f": [], "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb": [], "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15": [], "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce": [], "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1": [], "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da": [], "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673": [], "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a": [], "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178": [], "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51": [], "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355": [], "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0": [], "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b": [], "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956": [], "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13": [], "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121": [], "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82": [], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_date.1b2b9e203e": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.21cc0473f2": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.2a534bfddb": ["model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17": [], "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32": [], "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6": [], "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10": [], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily"], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_cnt.b8671865c8": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly.4d4ab2ab39": [], "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly.4327145e38": [], "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_date.b2df547512": [], "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_value.fc2d79fa3a": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772": [], "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426": [], "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56": [], "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49": [], "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac": [], "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1": [], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9": ["model.gnosis_dbt.int_execution_transactions_info_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_date.fe1b429be9": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_project.94b35ddc4b": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_sector.40d857cb69": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_tx_count.f7f9e187b1": ["model.gnosis_dbt.int_execution_transactions_by_project_daily"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_hour.5270417e9a": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_project.72a63a38ad": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_tx_count.1b15e22668": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_active_accounts.82b19fb74d": ["model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_month.89db02a301": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_project.5dd2512fcd": ["model.gnosis_dbt.int_execution_transactions_by_project_alltime_state"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date.52939ba037": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label.25162cce36": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value.f4b4dece42": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_date.e77654a051": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_label.7f2d083570": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_value.4aa505dc36": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_date.7d6d9bbca5": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_label.8ad1b1eb25": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_value.70d25812b1": ["model.gnosis_dbt.api_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_date.d5137ceba4": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_label.ccee33f0c2": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_value.e817ca373a": ["model.gnosis_dbt.api_execution_transactions_by_sector_hourly"], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_date.f29b9945e6": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_transaction_type.b0dc7eaceb": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_value.12fb2dc1d2": ["model.gnosis_dbt.api_execution_transactions_cnt_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date.32ac91a2c0": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label.c774ef9c4a": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value.618a58b73e": ["model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_date.9a0f9c0df3": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_label.f033fcb95a": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_value.339c013119": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_date.1f6b125a22": ["model.gnosis_dbt.api_execution_transactions_gas_used_daily"], "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_gas_used.8db0fee0ba": ["model.gnosis_dbt.api_execution_transactions_gas_used_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_date.cf19023a9f": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_sector.0d9bc9ca69": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_active_accounts.a97d812173": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_txs.571093b839": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_gas_used_sum.f2684b1b10": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_fee_native_sum.d48374bd5e": ["model.gnosis_dbt.fct_execution_transactions_by_sector_daily"], "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c": [], "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a": [], "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6": [], "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94": [], "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66": [], "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec": [], "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef": [], "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b": [], "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25": [], "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_visit_ended_at.ebb19916fd": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_peer_id.dc105cdb6a": [], "test.gnosis_dbt.unique_p2p_discv4_peers_info2_peer_id.1089251f32": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7": [], "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75": [], "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c": [], "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6": [], "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5": [], "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927": [], "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e": [], "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e": [], "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91": [], "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831": [], "test.gnosis_dbt.not_null_api_p2p_discv5_geo_latest_date.1514705801": [], "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_date.f297f01de6": [], "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_country.2e88c184f6": [], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_date.a7e4d781b8": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_symbol.4496b19dac": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_price.c31ece6228": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"], "test.gnosis_dbt.dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol.12e0dbaa70": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"], "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba": [], "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f": [], "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774": [], "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546": [], "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00": [], "source.gnosis_dbt.consensus.blocks": [], "source.gnosis_dbt.consensus.attestations": [], "source.gnosis_dbt.consensus.attester_slashings": [], "source.gnosis_dbt.consensus.blob_commitments": [], "source.gnosis_dbt.consensus.blob_sidecars": [], "source.gnosis_dbt.consensus.bls_changes": [], "source.gnosis_dbt.consensus.deposits": [], "source.gnosis_dbt.consensus.execution_payloads": [], "source.gnosis_dbt.consensus.execution_requests": [], "source.gnosis_dbt.consensus.genesis": [], "source.gnosis_dbt.consensus.raw_blocks": [], "source.gnosis_dbt.consensus.raw_genesis": [], "source.gnosis_dbt.consensus.raw_rewards": [], "source.gnosis_dbt.consensus.raw_specs": [], "source.gnosis_dbt.consensus.raw_validators": [], "source.gnosis_dbt.consensus.rewards": [], "source.gnosis_dbt.consensus.specs": [], "source.gnosis_dbt.consensus.sync_aggregates": [], "source.gnosis_dbt.consensus.time_helpers": [], "source.gnosis_dbt.consensus.transactions": [], "source.gnosis_dbt.consensus.transformer_progress": [], "source.gnosis_dbt.consensus.validators": [], "source.gnosis_dbt.consensus.voluntary_exits": [], "source.gnosis_dbt.consensus.withdrawals": [], "source.gnosis_dbt.execution.blocks": [], "source.gnosis_dbt.execution.transactions": [], "source.gnosis_dbt.execution.logs": [], "source.gnosis_dbt.execution.native_transfers": [], "source.gnosis_dbt.execution.contracts": [], "source.gnosis_dbt.execution.traces": [], "source.gnosis_dbt.execution.balance_diffs": [], "source.gnosis_dbt.execution.storage_diffs": [], "source.gnosis_dbt.execution.code_diffs": [], "source.gnosis_dbt.execution.nonce_diffs": [], "source.gnosis_dbt.execution.withdrawals": [], "source.gnosis_dbt.execution.indexing_state": [], "source.gnosis_dbt.execution.indexing_progress": [], "source.gnosis_dbt.execution.continuous_ranges": [], "source.gnosis_dbt.execution.indexing_summary": [], "source.gnosis_dbt.execution.migrations": [], "source.gnosis_dbt.nebula_discv5.crawls": [], "source.gnosis_dbt.nebula_discv5.visits": [], "source.gnosis_dbt.nebula_discv5.neighbors": [], "source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids": [], "source.gnosis_dbt.nebula_discv5.schema_migrations": [], "source.gnosis_dbt.nebula_discv4.crawls": [], "source.gnosis_dbt.nebula_discv4.visits": [], "source.gnosis_dbt.nebula_discv4.neighbors": [], "source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids": [], "source.gnosis_dbt.nebula_discv4.schema_migrations": [], "source.gnosis_dbt.crawlers_data.dune_labels": [], "source.gnosis_dbt.crawlers_data.dune_prices": [], "source.gnosis_dbt.crawlers_data.country_codes": [], "source.gnosis_dbt.crawlers_data.ember_electricity_data": [], "source.gnosis_dbt.crawlers_data.gpay_wallets": [], "source.gnosis_dbt.crawlers_data.ipinfo": [], "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_agent_types_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_agent_types_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_countries_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_discv5_stale_records": [], "source.gnosis_dbt.crawlers_data.probelab_is_cloud_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_is_cloud_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d": []}, "child_map": {"model.gnosis_dbt.stg_crawlers_data__country_codes": ["model.gnosis_dbt.int_esg_node_geographic_distribution"], "model.gnosis_dbt.stg_crawlers_data__ember_electricity_data": ["model.gnosis_dbt.int_esg_carbon_intensity_ensemble"], "model.gnosis_dbt.int_esg_node_client_distribution": ["model.gnosis_dbt.int_esg_dynamic_power_consumption"], "model.gnosis_dbt.int_esg_node_geographic_distribution": ["model.gnosis_dbt.int_esg_dynamic_power_consumption"], "model.gnosis_dbt.int_esg_carbon_intensity_ensemble": ["model.gnosis_dbt.api_esg_cif_network_vs_countries_daily", "model.gnosis_dbt.int_esg_dynamic_power_consumption"], "model.gnosis_dbt.int_esg_node_classification": ["model.gnosis_dbt.int_esg_node_client_distribution", "model.gnosis_dbt.int_esg_node_geographic_distribution"], "model.gnosis_dbt.int_esg_dynamic_power_consumption": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty"], "model.gnosis_dbt.int_esg_node_population_chao1": ["model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty", "model.gnosis_dbt.int_esg_node_classification"], "model.gnosis_dbt.api_esg_energy_monthly": [], "model.gnosis_dbt.api_esg_carbon_timeseries_bands": [], "model.gnosis_dbt.api_esg_carbon_emissions_daily": [], "model.gnosis_dbt.api_esg_energy_consumption_annualised_latest": [], "model.gnosis_dbt.api_esg_estimated_nodes_daily": [], "model.gnosis_dbt.api_esg_info_category_daily": [], "model.gnosis_dbt.api_esg_cif_network_vs_countries_daily": [], "model.gnosis_dbt.fct_esg_carbon_footprint_uncertainty": ["model.gnosis_dbt.api_esg_carbon_emissions_annualised_latest", "model.gnosis_dbt.api_esg_carbon_emissions_daily", "model.gnosis_dbt.api_esg_carbon_timeseries_bands", "model.gnosis_dbt.api_esg_cif_network_vs_countries_daily", "model.gnosis_dbt.api_esg_energy_consumption_annualised_latest", "model.gnosis_dbt.api_esg_energy_monthly", "model.gnosis_dbt.api_esg_estimated_nodes_daily", "model.gnosis_dbt.api_esg_info_annual_daily", "model.gnosis_dbt.api_esg_info_category_daily"], "model.gnosis_dbt.api_esg_info_annual_daily": [], "model.gnosis_dbt.api_esg_carbon_emissions_annualised_latest": [], "model.gnosis_dbt.stg_consensus__validators": ["model.gnosis_dbt.int_consensus_credentials_daily", "model.gnosis_dbt.int_consensus_entry_queue_daily", "model.gnosis_dbt.int_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_apy_dist", "model.gnosis_dbt.int_consensus_validators_balances_daily", "model.gnosis_dbt.int_consensus_validators_balances_dist_daily", "model.gnosis_dbt.int_consensus_validators_status_daily"], "model.gnosis_dbt.stg_consensus__rewards": [], "model.gnosis_dbt.stg_consensus__execution_requests": ["model.gnosis_dbt.int_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_apy_dist"], "model.gnosis_dbt.stg_consensus__withdrawals": ["model.gnosis_dbt.int_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_apy_dist", "model.gnosis_dbt.int_consensus_withdrawls_dist_daily"], "model.gnosis_dbt.stg_consensus__specs": ["model.gnosis_dbt.fct_consensus_forks"], "model.gnosis_dbt.stg_consensus__attestations": ["model.gnosis_dbt.int_consensus_attestations_daily"], "model.gnosis_dbt.stg_consensus__blocks": ["model.gnosis_dbt.int_consensus_blocks_daily", "model.gnosis_dbt.int_consensus_graffiti_daily"], "model.gnosis_dbt.stg_consensus__time_helpers": ["model.gnosis_dbt.fct_consensus_forks", "model.gnosis_dbt.int_consensus_blocks_daily"], "model.gnosis_dbt.stg_consensus__deposits": ["model.gnosis_dbt.int_consensus_deposits_daily", "model.gnosis_dbt.int_consensus_validators_apy_daily", "model.gnosis_dbt.int_consensus_validators_apy_dist"], "model.gnosis_dbt.stg_consensus__blob_commitments": ["model.gnosis_dbt.int_consensus_blob_commitments_daily"], "model.gnosis_dbt.int_consensus_validators_balances_dist_daily": ["model.gnosis_dbt.api_consensus_validators_balances_dist_daily"], "model.gnosis_dbt.int_consensus_validators_apy_dist": ["model.gnosis_dbt.api_consensus_validators_apy_dist"], "model.gnosis_dbt.int_consensus_graffiti_daily": ["model.gnosis_dbt.api_consensus_graffiti_label_daily", "model.gnosis_dbt.fct_consensus_graffiti_cloud"], "model.gnosis_dbt.int_consensus_validators_balances_daily": ["model.gnosis_dbt.api_consensus_staked_daily", "model.gnosis_dbt.api_consensus_validators_balances_daily", "model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.int_consensus_validators_apy_daily": ["model.gnosis_dbt.fct_consensus_validators_apy_daily"], "model.gnosis_dbt.int_consensus_attestations_daily": ["model.gnosis_dbt.api_consensus_attestations_daily"], "model.gnosis_dbt.int_consensus_credentials_daily": ["model.gnosis_dbt.api_consensus_credentials_daily", "model.gnosis_dbt.api_consensus_credentials_latest"], "model.gnosis_dbt.int_consensus_blocks_daily": ["model.gnosis_dbt.api_consensus_blocks_daily"], "model.gnosis_dbt.int_consensus_blob_commitments_daily": ["model.gnosis_dbt.api_consensus_blob_commitments_daily"], "model.gnosis_dbt.int_consensus_validators_status_daily": ["model.gnosis_dbt.api_consensus_validators_active_daily", "model.gnosis_dbt.api_consensus_validators_status_daily", "model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.int_consensus_entry_queue_daily": ["model.gnosis_dbt.api_consensus_entry_queue_daily"], "model.gnosis_dbt.int_consensus_deposits_daily": ["model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"], "model.gnosis_dbt.int_consensus_withdrawls_dist_daily": ["model.gnosis_dbt.api_consensus_withdrawls_dist_daily", "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily"], "model.gnosis_dbt.api_consensus_graffiti_label_daily": [], "model.gnosis_dbt.api_consensus_info_apy_latest": [], "model.gnosis_dbt.api_consensus_validators_active_daily": [], "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest": [], "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily": [], "model.gnosis_dbt.fct_consensus_forks": ["model.gnosis_dbt.api_consensus_forks"], "model.gnosis_dbt.api_consensus_forks": [], "model.gnosis_dbt.fct_consensus_graffiti_cloud": ["model.gnosis_dbt.api_consensus_graffiti_cloud"], "model.gnosis_dbt.api_consensus_withdrawls_dist_daily": [], "model.gnosis_dbt.api_consensus_validators_apy_daily": [], "model.gnosis_dbt.api_consensus_entry_queue_daily": [], "model.gnosis_dbt.api_consensus_validators_balances_dist_daily": [], "model.gnosis_dbt.api_consensus_credentials_daily": [], "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily": ["model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily", "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily", "model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_blocks_daily": [], "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily": [], "model.gnosis_dbt.api_consensus_staked_daily": [], "model.gnosis_dbt.fct_consensus_info_latest": ["model.gnosis_dbt.api_consensus_info_active_ongoing_latest", "model.gnosis_dbt.api_consensus_info_apy_latest", "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest", "model.gnosis_dbt.api_consensus_info_staked_latest", "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest"], "model.gnosis_dbt.api_consensus_graffiti_cloud": [], "model.gnosis_dbt.api_consensus_blob_commitments_daily": [], "model.gnosis_dbt.api_consensus_validators_balances_daily": [], "model.gnosis_dbt.fct_consensus_validators_apy_daily": ["model.gnosis_dbt.api_consensus_validators_apy_daily", "model.gnosis_dbt.fct_consensus_info_latest"], "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest": [], "model.gnosis_dbt.api_consensus_validators_status_daily": [], "model.gnosis_dbt.api_consensus_credentials_latest": [], "model.gnosis_dbt.api_consensus_attestations_daily": [], "model.gnosis_dbt.api_consensus_info_active_ongoing_latest": [], "model.gnosis_dbt.api_consensus_validators_apy_dist": [], "model.gnosis_dbt.api_consensus_info_staked_latest": [], "model.gnosis_dbt.int_execution_rwa_backedfi_prices": ["model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily"], "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily": ["model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily"], "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily": [], "model.gnosis_dbt.int_yields_sdai_rate_daily": ["model.gnosis_dbt.fct_yields_sdai_apy_daily"], "model.gnosis_dbt.fct_yields_sdai_apy_daily": [], "model.gnosis_dbt.int_GBCDeposit_deposists_daily": ["model.gnosis_dbt.int_consensus_validators_apy_daily"], "model.gnosis_dbt.stg_execution__blocks": ["model.gnosis_dbt.int_execution_blocks_clients_version_daily", "model.gnosis_dbt.int_execution_blocks_gas_usage_daily"], "model.gnosis_dbt.int_execution_blocks_clients_version_daily": ["model.gnosis_dbt.fct_execution_blocks_clients_daily"], "model.gnosis_dbt.int_execution_blocks_gas_usage_daily": ["model.gnosis_dbt.api_execution_blocks_gas_usage_pct_daily", "model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly", "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_date.1b2b9e203e", "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.2a534bfddb", "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.21cc0473f2"], "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_daily": [], "model.gnosis_dbt.fct_execution_blocks_gas_usage_monthly": ["model.gnosis_dbt.api_execution_blocks_gas_usage_pct_monthly"], "model.gnosis_dbt.api_execution_blocks_clients_pct_daily": [], "model.gnosis_dbt.fct_execution_blocks_clients_daily": ["model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "model.gnosis_dbt.api_execution_blocks_clients_pct_daily", "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995", "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_cnt.b8671865c8", "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6"], "model.gnosis_dbt.api_execution_blocks_gas_usage_pct_monthly": [], "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily": ["test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1", "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653", "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242"], "model.gnosis_dbt.stg_execution__transactions": ["model.gnosis_dbt.int_execution_transactions_by_project_daily", "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent", "model.gnosis_dbt.int_execution_transactions_info_daily"], "model.gnosis_dbt.int_execution_transactions_info_daily": ["model.gnosis_dbt.api_execution_transactions_cnt_daily", "model.gnosis_dbt.api_execution_transactions_cnt_total", "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "model.gnosis_dbt.api_execution_transactions_value_daily", "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2", "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9", "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24"], "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly", "model.gnosis_dbt.api_execution_transactions_by_sector_hourly", "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_hourly", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_active_accounts.82b19fb74d", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_hour.5270417e9a", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_project.72a63a38ad", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_tx_count.1b15e22668"], "model.gnosis_dbt.int_execution_transactions_by_project_daily": ["model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily", "model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5", "model.gnosis_dbt.fct_execution_transactions_by_project_snapshots", "model.gnosis_dbt.fct_execution_transactions_by_sector_daily", "model.gnosis_dbt.fct_execution_transactions_snapshots", "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_date.fe1b429be9", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_project.94b35ddc4b", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_sector.40d857cb69", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_tx_count.f7f9e187b1"], "model.gnosis_dbt.int_execution_transactions_by_project_alltime_state": ["model.gnosis_dbt.fct_execution_transactions_by_project_snapshots", "model.gnosis_dbt.fct_execution_transactions_snapshots", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_month.89db02a301", "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_project.5dd2512fcd"], "model.gnosis_dbt.api_execution_transactions_gas_used_daily": ["test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_date.1f6b125a22", "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_gas_used.8db0fee0ba"], "model.gnosis_dbt.api_execution_transactions_active_accounts_total": [], "model.gnosis_dbt.api_execution_transactions_active_accounts_7d": [], "model.gnosis_dbt.fct_execution_transactions_by_project_monthly_top5": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5", "model.gnosis_dbt.api_execution_transactions_by_project_monthly_top5", "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5"], "model.gnosis_dbt.fct_execution_transactions_by_project_snapshots": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_7d", "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_total", "model.gnosis_dbt.api_execution_transactions_by_project_7d", "model.gnosis_dbt.api_execution_transactions_by_project_total", "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_7d", "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_total"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_daily": [], "model.gnosis_dbt.api_execution_transactions_by_sector_hourly": ["test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_date.d5137ceba4", "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_label.ccee33f0c2", "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_value.e817ca373a"], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_7d": [], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_monthly_top5": ["test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date.52939ba037", "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label.25162cce36", "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value.f4b4dece42"], "model.gnosis_dbt.api_execution_transactions_total": [], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_hourly": ["test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_date.e77654a051", "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_label.7f2d083570", "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_value.4aa505dc36"], "model.gnosis_dbt.api_execution_transactions_cnt_total": [], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_total": [], "model.gnosis_dbt.api_execution_transactions_fees_native_by_project_monthly_top5": ["test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date.32ac91a2c0", "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label.c774ef9c4a", "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value.618a58b73e"], "model.gnosis_dbt.api_execution_transactions_7d": [], "model.gnosis_dbt.api_execution_transactions_cnt_daily": ["test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_date.f29b9945e6", "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_transaction_type.b0dc7eaceb", "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_value.12fb2dc1d2"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_total": [], "model.gnosis_dbt.api_execution_transactions_by_project_monthly_top5": [], "model.gnosis_dbt.fct_execution_transactions_by_sector_daily": ["model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_daily", "model.gnosis_dbt.api_execution_transactions_by_sector_daily", "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_daily", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_active_accounts.a97d812173", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_date.cf19023a9f", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_fee_native_sum.d48374bd5e", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_gas_used_sum.f2684b1b10", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_sector.0d9bc9ca69", "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_txs.571093b839"], "model.gnosis_dbt.api_execution_transactions_fees_native_7d": [], "model.gnosis_dbt.api_execution_transactions_fees_native_total": [], "model.gnosis_dbt.fct_execution_transactions_snapshots": ["model.gnosis_dbt.api_execution_transactions_7d", "model.gnosis_dbt.api_execution_transactions_active_accounts_7d", "model.gnosis_dbt.api_execution_transactions_active_accounts_total", "model.gnosis_dbt.api_execution_transactions_fees_native_7d", "model.gnosis_dbt.api_execution_transactions_fees_native_total", "model.gnosis_dbt.api_execution_transactions_total"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_project_7d": [], "model.gnosis_dbt.api_execution_transactions_by_project_total": [], "model.gnosis_dbt.api_execution_transactions_by_sector_daily": ["test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_date.7d6d9bbca5", "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_label.8ad1b1eb25", "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_value.70d25812b1"], "model.gnosis_dbt.api_execution_transactions_gas_share_by_project_daily": ["test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_date.9a0f9c0df3", "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_label.f033fcb95a", "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_value.339c013119"], "model.gnosis_dbt.api_execution_transactions_active_accounts_by_sector_daily": [], "model.gnosis_dbt.api_execution_transactions_by_project_7d": [], "model.gnosis_dbt.api_execution_transactions_fees_native_by_sector_hourly": [], "model.gnosis_dbt.api_execution_transactions_value_daily": [], "model.gnosis_dbt.int_execution_circles_backing": ["model.gnosis_dbt.fct_execution_circles_backing"], "model.gnosis_dbt.int_execution_circles_v1_avatars": [], "model.gnosis_dbt.int_execution_circles_transitive_transfers": [], "model.gnosis_dbt.int_execution_circles_v2_avatars": ["model.gnosis_dbt.fct_execution_circles_avatars"], "model.gnosis_dbt.api_execution_circles_orgs_cnt_latest": [], "model.gnosis_dbt.fct_execution_circles_avatars": ["model.gnosis_dbt.api_execution_circles_avatars", "model.gnosis_dbt.api_execution_circles_groups_cnt_latest", "model.gnosis_dbt.api_execution_circles_humans_cnt_latest", "model.gnosis_dbt.api_execution_circles_orgs_cnt_latest"], "model.gnosis_dbt.fct_execution_circles_backing": ["model.gnosis_dbt.api_execution_circles_backers_cnt_latest"], "model.gnosis_dbt.api_execution_circles_avatars": [], "model.gnosis_dbt.api_execution_circles_backers_cnt_latest": [], "model.gnosis_dbt.api_execution_circles_humans_cnt_latest": [], "model.gnosis_dbt.api_execution_circles_groups_cnt_latest": [], "model.gnosis_dbt.stg_execution__storage_diffs": ["model.gnosis_dbt.int_execution_state_size_full_diff_daily"], "model.gnosis_dbt.int_execution_state_size_full_diff_daily": ["model.gnosis_dbt.fct_execution_state_full_size_daily"], "model.gnosis_dbt.api_execution_state_full_size_daily": [], "model.gnosis_dbt.fct_execution_state_full_size_daily": ["model.gnosis_dbt.api_execution_state_full_size_daily"], "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls": [], "model.gnosis_dbt.contracts_OmenAgentResultMapping_events": [], "model.gnosis_dbt.contracts_wxdai_events": [], "model.gnosis_dbt.contracts_sdai_events": ["model.gnosis_dbt.int_yields_sdai_rate_daily"], "model.gnosis_dbt.contracts_wxdai_calls": [], "model.gnosis_dbt.contracts_ConditionalTokens_events": [], "model.gnosis_dbt.contracts_ConditionalTokens_calls": [], "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events": ["model.gnosis_dbt.int_execution_rwa_backedfi_prices"], "model.gnosis_dbt.contracts_Realitio_v2_1_events": [], "model.gnosis_dbt.contracts_Realitio_v2_1_calls": [], "model.gnosis_dbt.contracts_GBCDeposit_events": ["model.gnosis_dbt.int_GBCDeposit_deposists_daily"], "model.gnosis_dbt.contracts_GBCDeposit_calls": [], "model.gnosis_dbt.contracts_AgentResultMapping_calls": [], "model.gnosis_dbt.contracts_AgentResultMapping_events": [], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls": [], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls": [], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events": [], "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events": [], "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events": [], "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events": [], "model.gnosis_dbt.contracts_circles_v2_Hub_events": ["model.gnosis_dbt.int_execution_circles_transitive_transfers", "model.gnosis_dbt.int_execution_circles_v1_avatars", "model.gnosis_dbt.int_execution_circles_v2_avatars"], "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events": [], "model.gnosis_dbt.contracts_circles_v1_Hub_events": [], "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events": ["model.gnosis_dbt.int_execution_circles_backing"], "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events": [], "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls": [], "model.gnosis_dbt.contracts_Seer_MarketFactory_calls": [], "model.gnosis_dbt.contracts_Seer_MarketFactory_events": [], "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events": [], "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls": [], "model.gnosis_dbt.stg_nebula_discv4__neighbors": ["model.gnosis_dbt.int_p2p_discv4_topology_latest"], "model.gnosis_dbt.stg_nebula_discv4__visits": ["model.gnosis_dbt.int_p2p_discv4_peers", "model.gnosis_dbt.int_p2p_discv4_visits_daily"], "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids": ["model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.stg_nebula_discv5__neighbors": ["model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.stg_crawlers_data__ipinfo": ["model.gnosis_dbt.int_p2p_discv4_peers", "model.gnosis_dbt.int_p2p_discv4_topology_latest", "model.gnosis_dbt.int_p2p_discv5_peers", "model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.stg_nebula_discv5__visits": ["model.gnosis_dbt.int_p2p_discv5_peers", "model.gnosis_dbt.int_p2p_discv5_visits_daily"], "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids": ["model.gnosis_dbt.int_p2p_discv4_topology_latest"], "model.gnosis_dbt.int_p2p_discv5_topology_latest": ["model.gnosis_dbt.api_p2p_discv5_topology_latest", "model.gnosis_dbt.fct_p2p_topology_latest"], "model.gnosis_dbt.int_p2p_discv4_visits_daily": ["model.gnosis_dbt.api_p2p_visits_latest"], "model.gnosis_dbt.int_p2p_discv5_visits_daily": ["model.gnosis_dbt.api_p2p_visits_latest"], "model.gnosis_dbt.int_p2p_discv4_peers": ["model.gnosis_dbt.int_p2p_discv4_clients_daily", "model.gnosis_dbt.int_p2p_discv4_topology_latest"], "model.gnosis_dbt.int_p2p_discv5_clients_daily": ["model.gnosis_dbt.api_p2p_clients_latest", "model.gnosis_dbt.api_p2p_discv5_clients_daily", "model.gnosis_dbt.api_p2p_discv5_clients_latest", "model.gnosis_dbt.int_esg_node_client_distribution"], "model.gnosis_dbt.int_p2p_discv4_clients_daily": ["model.gnosis_dbt.api_p2p_clients_latest", "model.gnosis_dbt.api_p2p_discv4_clients_daily", "model.gnosis_dbt.api_p2p_discv4_clients_latest", "model.gnosis_dbt.fct_consensus_info_latest", "model.gnosis_dbt.int_esg_node_client_distribution"], "model.gnosis_dbt.int_p2p_discv4_topology_latest": ["model.gnosis_dbt.fct_p2p_topology_latest"], "model.gnosis_dbt.int_p2p_discv5_forks_daily": ["model.gnosis_dbt.api_p2p_discv5_current_fork_daily", "model.gnosis_dbt.api_p2p_discv5_next_fork_daily", "model.gnosis_dbt.fct_p2p_discv5_forks_daily"], "model.gnosis_dbt.int_p2p_discv5_geo_daily": [], "model.gnosis_dbt.int_p2p_discv5_peers": ["model.gnosis_dbt.int_esg_node_classification", "model.gnosis_dbt.int_esg_node_population_chao1", "model.gnosis_dbt.int_p2p_discv5_clients_daily", "model.gnosis_dbt.int_p2p_discv5_forks_daily", "model.gnosis_dbt.int_p2p_discv5_geo_daily", "model.gnosis_dbt.int_p2p_discv5_topology_latest"], "model.gnosis_dbt.api_p2p_discv5_clients_latest": [], "model.gnosis_dbt.api_p2p_discv5_next_fork_daily": [], "model.gnosis_dbt.api_p2p_topology_latest": [], "model.gnosis_dbt.api_p2p_discv5_clients_daily": [], "model.gnosis_dbt.api_p2p_clients_latest": [], "model.gnosis_dbt.api_p2p_visits_latest": [], "model.gnosis_dbt.api_p2p_discv4_clients_latest": [], "model.gnosis_dbt.api_p2p_discv5_topology_latest": [], "model.gnosis_dbt.fct_p2p_discv5_forks_daily": [], "model.gnosis_dbt.fct_p2p_topology_latest": [], "model.gnosis_dbt.api_p2p_discv5_current_fork_daily": [], "model.gnosis_dbt.api_p2p_discv4_clients_daily": [], "model.gnosis_dbt.stg_crawlers_data__dune_prices": ["model.gnosis_dbt.int_execution_transactions_info_daily", "test.gnosis_dbt.dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol.12e0dbaa70", "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_date.a7e4d781b8", "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_price.c31ece6228", "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_symbol.4496b19dac"], "model.gnosis_dbt.stg_crawlers_data__dune_labels": ["model.gnosis_dbt.int_crawlers_data_labels"], "model.gnosis_dbt.int_crawlers_data_labels": ["model.gnosis_dbt.int_execution_transactions_by_project_daily", "model.gnosis_dbt.int_execution_transactions_by_project_hourly_recent"], "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d": ["model.gnosis_dbt.api_probelab_clients_daily", "model.gnosis_dbt.api_probelab_clients_version_daily"], "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d": ["model.gnosis_dbt.api_probelab_clients_quic_daily"], "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d": ["model.gnosis_dbt.api_probelab_clients_cloud_daily"], "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d": ["model.gnosis_dbt.api_probelab_clients_country_daily"], "model.gnosis_dbt.api_probelab_clients_version_daily": [], "model.gnosis_dbt.api_probelab_clients_daily": [], "model.gnosis_dbt.api_probelab_clients_cloud_daily": [], "model.gnosis_dbt.api_probelab_clients_country_daily": [], "model.gnosis_dbt.api_probelab_clients_quic_daily": [], "seed.gnosis_dbt.function_signatures": ["model.gnosis_dbt.contracts_AgentResultMapping_calls", "model.gnosis_dbt.contracts_ConditionalTokens_calls", "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls", "model.gnosis_dbt.contracts_GBCDeposit_calls", "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls", "model.gnosis_dbt.contracts_Realitio_v2_1_calls", "model.gnosis_dbt.contracts_Seer_MarketFactory_calls", "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls", "model.gnosis_dbt.contracts_wxdai_calls"], "seed.gnosis_dbt.tokens_whitelist": ["model.gnosis_dbt.stg_crawlers_data__dune_labels"], "seed.gnosis_dbt.event_signatures": ["model.gnosis_dbt.contracts_AgentResultMapping_events", "model.gnosis_dbt.contracts_ConditionalTokens_events", "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events", "model.gnosis_dbt.contracts_GBCDeposit_events", "model.gnosis_dbt.contracts_OmenAgentResultMapping_events", "model.gnosis_dbt.contracts_Realitio_v2_1_events", "model.gnosis_dbt.contracts_Seer_MarketFactory_events", "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events", "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "model.gnosis_dbt.contracts_circles_v1_Hub_events", "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events", "model.gnosis_dbt.contracts_circles_v2_Hub_events", "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "model.gnosis_dbt.contracts_sdai_events", "model.gnosis_dbt.contracts_wxdai_events"], "seed.gnosis_dbt.contracts_abi": [], "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce": [], "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba": [], "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862": [], "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6": [], "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826": [], "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192": [], "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a": [], "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d": [], "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8": [], "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612": [], "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3": [], "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f": [], "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602": [], "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529": [], "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426": [], "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f": [], "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb": [], "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15": [], "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce": [], "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1": [], "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da": [], "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673": [], "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a": [], "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178": [], "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51": [], "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e": [], "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355": [], "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0": [], "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c": [], "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b": [], "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956": [], "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13": [], "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35": [], "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121": [], "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82": [], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_date.1b2b9e203e": [], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_used_sum.21cc0473f2": [], "test.gnosis_dbt.not_null_int_execution_blocks_gas_usage_daily_gas_limit_sum.2a534bfddb": [], "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17": [], "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32": [], "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6": [], "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10": [], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653": [], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1": [], "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242": [], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6": [], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995": [], "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_cnt.b8671865c8": [], "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_used_sum_monthly.4d4ab2ab39": [], "test.gnosis_dbt.not_null_fct_execution_blocks_gas_usage_pct_monthly_gas_limit_sum_monthly.4327145e38": [], "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_date.b2df547512": [], "test.gnosis_dbt.not_null_api_execution_blocks_gas_usage_monthly_value.fc2d79fa3a": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772": [], "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439": [], "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426": [], "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56": [], "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49": [], "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac": [], "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda": [], "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1": [], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2": [], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24": [], "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_date.fe1b429be9": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_project.94b35ddc4b": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_sector.40d857cb69": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_daily_tx_count.f7f9e187b1": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_hour.5270417e9a": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_project.72a63a38ad": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_tx_count.1b15e22668": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_hourly_recent_active_accounts.82b19fb74d": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_month.89db02a301": [], "test.gnosis_dbt.not_null_int_execution_transactions_by_project_alltime_state_project.5dd2512fcd": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_date.52939ba037": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_label.25162cce36": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_project_monthly_top5_value.f4b4dece42": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_date.e77654a051": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_label.7f2d083570": [], "test.gnosis_dbt.not_null_api_execution_transactions_active_accounts_by_sector_hourly_value.4aa505dc36": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_date.7d6d9bbca5": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_label.8ad1b1eb25": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_daily_value.70d25812b1": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_date.d5137ceba4": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_label.ccee33f0c2": [], "test.gnosis_dbt.not_null_api_execution_transactions_by_sector_hourly_value.e817ca373a": [], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_date.f29b9945e6": [], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_transaction_type.b0dc7eaceb": [], "test.gnosis_dbt.not_null_api_execution_transactions_cnt_daily_value.12fb2dc1d2": [], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_date.32ac91a2c0": [], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_label.c774ef9c4a": [], "test.gnosis_dbt.not_null_api_execution_transactions_fees_native_by_project_monthly_top5_value.618a58b73e": [], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_date.9a0f9c0df3": [], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_label.f033fcb95a": [], "test.gnosis_dbt.not_null_api_execution_transactions_gas_share_by_project_daily_value.339c013119": [], "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_date.1f6b125a22": [], "test.gnosis_dbt.not_null_api_execution_transactions_gas_used_daily_gas_used.8db0fee0ba": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_date.cf19023a9f": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_sector.0d9bc9ca69": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_active_accounts.a97d812173": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_txs.571093b839": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_gas_used_sum.f2684b1b10": [], "test.gnosis_dbt.not_null_fct_execution_transactions_by_sector_daily_fee_native_sum.d48374bd5e": [], "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c": [], "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a": [], "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6": [], "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94": [], "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66": [], "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec": [], "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef": [], "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b": [], "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25": [], "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_visit_ended_at.ebb19916fd": [], "test.gnosis_dbt.not_null_p2p_discv4_peers_info2_peer_id.dc105cdb6a": [], "test.gnosis_dbt.unique_p2p_discv4_peers_info2_peer_id.1089251f32": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7": [], "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd": [], "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75": [], "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22": [], "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c": [], "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c": [], "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6": [], "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5": [], "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927": [], "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e": [], "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e": [], "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91": [], "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df": [], "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831": [], "test.gnosis_dbt.not_null_api_p2p_discv5_geo_latest_date.1514705801": [], "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_date.f297f01de6": [], "test.gnosis_dbt.not_null_fct_p2p_discv5_geo_daily_country.2e88c184f6": [], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_date.a7e4d781b8": [], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_symbol.4496b19dac": [], "test.gnosis_dbt.not_null_stg_crawlers_data__dune_prices_price.c31ece6228": [], "test.gnosis_dbt.dbt_utils_unique_combination_of_columns_stg_crawlers_data__dune_prices_date__symbol.12e0dbaa70": [], "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba": [], "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8": [], "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f": [], "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774": [], "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546": [], "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f": [], "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00": [], "source.gnosis_dbt.consensus.blocks": ["model.gnosis_dbt.stg_consensus__blocks"], "source.gnosis_dbt.consensus.attestations": ["model.gnosis_dbt.stg_consensus__attestations"], "source.gnosis_dbt.consensus.attester_slashings": [], "source.gnosis_dbt.consensus.blob_commitments": ["model.gnosis_dbt.stg_consensus__blob_commitments"], "source.gnosis_dbt.consensus.blob_sidecars": [], "source.gnosis_dbt.consensus.bls_changes": [], "source.gnosis_dbt.consensus.deposits": ["model.gnosis_dbt.stg_consensus__deposits"], "source.gnosis_dbt.consensus.execution_payloads": [], "source.gnosis_dbt.consensus.execution_requests": ["model.gnosis_dbt.stg_consensus__execution_requests"], "source.gnosis_dbt.consensus.genesis": [], "source.gnosis_dbt.consensus.raw_blocks": [], "source.gnosis_dbt.consensus.raw_genesis": [], "source.gnosis_dbt.consensus.raw_rewards": [], "source.gnosis_dbt.consensus.raw_specs": [], "source.gnosis_dbt.consensus.raw_validators": [], "source.gnosis_dbt.consensus.rewards": ["model.gnosis_dbt.stg_consensus__rewards"], "source.gnosis_dbt.consensus.specs": ["model.gnosis_dbt.stg_consensus__specs"], "source.gnosis_dbt.consensus.sync_aggregates": [], "source.gnosis_dbt.consensus.time_helpers": ["model.gnosis_dbt.stg_consensus__time_helpers"], "source.gnosis_dbt.consensus.transactions": [], "source.gnosis_dbt.consensus.transformer_progress": [], "source.gnosis_dbt.consensus.validators": ["model.gnosis_dbt.stg_consensus__validators"], "source.gnosis_dbt.consensus.voluntary_exits": [], "source.gnosis_dbt.consensus.withdrawals": ["model.gnosis_dbt.stg_consensus__withdrawals"], "source.gnosis_dbt.execution.blocks": ["model.gnosis_dbt.stg_execution__blocks"], "source.gnosis_dbt.execution.transactions": ["model.gnosis_dbt.contracts_AgentResultMapping_calls", "model.gnosis_dbt.contracts_ConditionalTokens_calls", "model.gnosis_dbt.contracts_FPMMDeterministicFactory_calls", "model.gnosis_dbt.contracts_GBCDeposit_calls", "model.gnosis_dbt.contracts_OmenAgentResultMapping_calls", "model.gnosis_dbt.contracts_Realitio_v2_1_calls", "model.gnosis_dbt.contracts_Seer_MarketFactory_calls", "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_calls", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_calls", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_calls", "model.gnosis_dbt.contracts_wxdai_calls", "model.gnosis_dbt.stg_execution__transactions"], "source.gnosis_dbt.execution.logs": ["model.gnosis_dbt.contracts_AgentResultMapping_events", "model.gnosis_dbt.contracts_ConditionalTokens_events", "model.gnosis_dbt.contracts_FPMMDeterministicFactory_events", "model.gnosis_dbt.contracts_GBCDeposit_events", "model.gnosis_dbt.contracts_OmenAgentResultMapping_events", "model.gnosis_dbt.contracts_Realitio_v2_1_events", "model.gnosis_dbt.contracts_Seer_MarketFactory_events", "model.gnosis_dbt.contracts_Seer_Wrapped1155Factory_events", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraFactory_events", "model.gnosis_dbt.contracts_Swapr_v3_AlgebraPool_events", "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "model.gnosis_dbt.contracts_circles_v1_Hub_events", "model.gnosis_dbt.contracts_circles_v2_CirclesBackingFactory_events", "model.gnosis_dbt.contracts_circles_v2_Hub_events", "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "model.gnosis_dbt.contracts_sdai_events", "model.gnosis_dbt.contracts_wxdai_events"], "source.gnosis_dbt.execution.native_transfers": [], "source.gnosis_dbt.execution.contracts": [], "source.gnosis_dbt.execution.traces": [], "source.gnosis_dbt.execution.balance_diffs": [], "source.gnosis_dbt.execution.storage_diffs": ["model.gnosis_dbt.stg_execution__storage_diffs"], "source.gnosis_dbt.execution.code_diffs": [], "source.gnosis_dbt.execution.nonce_diffs": [], "source.gnosis_dbt.execution.withdrawals": [], "source.gnosis_dbt.execution.indexing_state": [], "source.gnosis_dbt.execution.indexing_progress": [], "source.gnosis_dbt.execution.continuous_ranges": [], "source.gnosis_dbt.execution.indexing_summary": [], "source.gnosis_dbt.execution.migrations": [], "source.gnosis_dbt.nebula_discv5.crawls": [], "source.gnosis_dbt.nebula_discv5.visits": ["model.gnosis_dbt.stg_nebula_discv5__visits"], "source.gnosis_dbt.nebula_discv5.neighbors": ["model.gnosis_dbt.stg_nebula_discv5__neighbors"], "source.gnosis_dbt.nebula_discv5.discovery_id_prefixes_x_peer_ids": ["model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids"], "source.gnosis_dbt.nebula_discv5.schema_migrations": [], "source.gnosis_dbt.nebula_discv4.crawls": [], "source.gnosis_dbt.nebula_discv4.visits": ["model.gnosis_dbt.stg_nebula_discv4__visits"], "source.gnosis_dbt.nebula_discv4.neighbors": ["model.gnosis_dbt.stg_nebula_discv4__neighbors"], "source.gnosis_dbt.nebula_discv4.discovery_id_prefixes_x_peer_ids": ["model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids"], "source.gnosis_dbt.nebula_discv4.schema_migrations": [], "source.gnosis_dbt.crawlers_data.dune_labels": ["model.gnosis_dbt.stg_crawlers_data__dune_labels"], "source.gnosis_dbt.crawlers_data.dune_prices": ["model.gnosis_dbt.stg_crawlers_data__dune_prices"], "source.gnosis_dbt.crawlers_data.country_codes": ["model.gnosis_dbt.stg_crawlers_data__country_codes"], "source.gnosis_dbt.crawlers_data.ember_electricity_data": ["model.gnosis_dbt.stg_crawlers_data__ember_electricity_data"], "source.gnosis_dbt.crawlers_data.gpay_wallets": [], "source.gnosis_dbt.crawlers_data.ipinfo": ["model.gnosis_dbt.int_p2p_discv5_geo_daily", "model.gnosis_dbt.stg_crawlers_data__ipinfo"], "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_avg_1d": ["model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d"], "source.gnosis_dbt.crawlers_data.probelab_agent_semvers_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_agent_types_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_agent_types_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_avg_1d": ["model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d"], "source.gnosis_dbt.crawlers_data.probelab_cloud_provider_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_countries_avg_1d": ["model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d"], "source.gnosis_dbt.crawlers_data.probelab_countries_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_discv5_stale_records": [], "source.gnosis_dbt.crawlers_data.probelab_is_cloud_avg_1d": [], "source.gnosis_dbt.crawlers_data.probelab_is_cloud_over_7d": [], "source.gnosis_dbt.crawlers_data.probelab_quic_support_over_7d": ["model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}