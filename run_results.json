{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-08-05T14:00:33.549086Z", "invocation_id": "7bed2e3d-889b-43b5-86cf-0a1ae805cd8f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.018621Z", "completed_at": "2025-08-05T14:00:31.082795Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.167040Z", "completed_at": "2025-08-05T14:00:31.167063Z"}], "thread_id": "Thread-1", "execution_time": 0.17876029014587402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.consensus_validators_balances_dist_daily", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 1\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `consensus`.`validators`\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`consensus_validators_balances_dist_daily`\n    )\n  \n\n    GROUP BY date\n)", "relation_name": "`dbt`.`consensus_validators_balances_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.044795Z", "completed_at": "2025-08-05T14:00:31.105387Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.218405Z", "completed_at": "2025-08-05T14:00:31.218426Z"}], "thread_id": "Thread-2", "execution_time": 0.22757291793823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.consensus_validators_status_daily", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `consensus`.`validators`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`consensus_validators_status_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.056279Z", "completed_at": "2025-08-05T14:00:31.122425Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.251581Z", "completed_at": "2025-08-05T14:00:31.251596Z"}], "thread_id": "Thread-3", "execution_time": 0.25873589515686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.076224Z", "completed_at": "2025-08-05T14:00:31.166415Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.330158Z", "completed_at": "2025-08-05T14:00:31.330176Z"}], "thread_id": "Thread-4", "execution_time": 0.33243417739868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.084100Z", "completed_at": "2025-08-05T14:00:31.188396Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.333973Z", "completed_at": "2025-08-05T14:00:31.333985Z"}], "thread_id": "Thread-5", "execution_time": 0.33436012268066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.092402Z", "completed_at": "2025-08-05T14:00:31.194297Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.336292Z", "completed_at": "2025-08-05T14:00:31.336302Z"}], "thread_id": "Thread-6", "execution_time": 0.33475160598754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.101249Z", "completed_at": "2025-08-05T14:00:31.222590Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.341985Z", "completed_at": "2025-08-05T14:00:31.341996Z"}], "thread_id": "Thread-7", "execution_time": 0.336214542388916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_abi", "compiled": true, "compiled_code": "\n\nSELECT \n    '' AS contract_address,          -- The contract address (proxy or regular)\n    '' AS implementation_address,    -- For proxy contracts, the implementation address; NULL for regular/implementation contracts\n    '' AS abi_json,                  -- The ABI JSON\n    '' AS contract_name,             -- Contract name from blockscout\n    '' AS source,                    -- ABI source (e.g., 'blockscout')\n    toDateTime('1970-01-01 00:00:00') AS updated_at  -- Last updated timestamp\nWHERE 0=1", "relation_name": "`dbt`.`contracts_abi`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.107354Z", "completed_at": "2025-08-05T14:00:31.232323Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.345339Z", "completed_at": "2025-08-05T14:00:31.345349Z"}], "thread_id": "Thread-8", "execution_time": 0.33765292167663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.115134Z", "completed_at": "2025-08-05T14:00:31.252589Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.349666Z", "completed_at": "2025-08-05T14:00:31.349677Z"}], "thread_id": "Thread-9", "execution_time": 0.3388702869415283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.123639Z", "completed_at": "2025-08-05T14:00:31.270968Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.352553Z", "completed_at": "2025-08-05T14:00:31.352562Z"}], "thread_id": "Thread-10", "execution_time": 0.33925318717956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.132819Z", "completed_at": "2025-08-05T14:00:31.274401Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.354421Z", "completed_at": "2025-08-05T14:00:31.354430Z"}], "thread_id": "Thread-11", "execution_time": 0.33844709396362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.141621Z", "completed_at": "2025-08-05T14:00:31.312284Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.361074Z", "completed_at": "2025-08-05T14:00:31.361083Z"}], "thread_id": "Thread-12", "execution_time": 0.3268122673034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.148695Z", "completed_at": "2025-08-05T14:00:31.323950Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.362033Z", "completed_at": "2025-08-05T14:00:31.362046Z"}], "thread_id": "Thread-13", "execution_time": 0.3258240222930908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.154521Z", "completed_at": "2025-08-05T14:00:31.324953Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.363540Z", "completed_at": "2025-08-05T14:00:31.363549Z"}], "thread_id": "Thread-14", "execution_time": 0.326582670211792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.160401Z", "completed_at": "2025-08-05T14:00:31.331191Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.365358Z", "completed_at": "2025-08-05T14:00:31.365368Z"}], "thread_id": "Thread-15", "execution_time": 0.3269996643066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.168090Z", "completed_at": "2025-08-05T14:00:31.333132Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.367955Z", "completed_at": "2025-08-05T14:00:31.367967Z"}], "thread_id": "Thread-16", "execution_time": 0.3288686275482178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.176147Z", "completed_at": "2025-08-05T14:00:31.334983Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.369680Z", "completed_at": "2025-08-05T14:00:31.369689Z"}], "thread_id": "Thread-17", "execution_time": 0.3291940689086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.182110Z", "completed_at": "2025-08-05T14:00:31.335651Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.370754Z", "completed_at": "2025-08-05T14:00:31.370763Z"}], "thread_id": "Thread-18", "execution_time": 0.329517126083374, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.189150Z", "completed_at": "2025-08-05T14:00:31.337482Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.372564Z", "completed_at": "2025-08-05T14:00:31.372573Z"}], "thread_id": "Thread-19", "execution_time": 0.3300149440765381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.207420Z", "completed_at": "2025-08-05T14:00:31.338693Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.373506Z", "completed_at": "2025-08-05T14:00:31.373517Z"}], "thread_id": "Thread-22", "execution_time": 0.3230752944946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.201743Z", "completed_at": "2025-08-05T14:00:31.339419Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.374436Z", "completed_at": "2025-08-05T14:00:31.374444Z"}], "thread_id": "Thread-21", "execution_time": 0.3307371139526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.195912Z", "completed_at": "2025-08-05T14:00:31.340924Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.376352Z", "completed_at": "2025-08-05T14:00:31.376360Z"}], "thread_id": "Thread-20", "execution_time": 0.33307456970214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_sdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_sdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.214980Z", "completed_at": "2025-08-05T14:00:31.342998Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.377922Z", "completed_at": "2025-08-05T14:00:31.377933Z"}], "thread_id": "Thread-23", "execution_time": 0.32671642303466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_consensus_power", "compiled": true, "compiled_code": "WITH consensus_power AS (\n    SELECT\n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Lighthouse', 'Lighthouse', 'Lighthouse', 'Teku', 'Teku', 'Teku', 'Lodestar', 'Lodestar', 'Lodestar', 'Nimbus', 'Nimbus', 'Nimbus', 'Prysm', 'Prysm', 'Prysm']) AS client,\n            arrayJoin([2.75, 3.14, 18.84, 3.71, 3.32, 27.46, 3.14, 3.89, 33.55, 1.67, 2.08, 17.11, 3.51, 2.87, 24.33]) AS mean\n    )\n)\n\nSELECT * FROM consensus_power", "relation_name": "`dbt`.`esg_consensus_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.219548Z", "completed_at": "2025-08-05T14:00:31.343653Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.379081Z", "completed_at": "2025-08-05T14:00:31.379089Z"}], "thread_id": "Thread-24", "execution_time": 0.32640695571899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_execution_power", "compiled": true, "compiled_code": "WITH execution_power AS (\n    SELECT \n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind']) AS client,\n            arrayJoin([18.6, 17.59, 44.62, 18.6, 17.59, 44.62]) AS mean\n            \n    )\n)\n\nSELECT * FROM execution_power", "relation_name": "`dbt`.`esg_execution_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.223277Z", "completed_at": "2025-08-05T14:00:31.344557Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.379974Z", "completed_at": "2025-08-05T14:00:31.379982Z"}], "thread_id": "Thread-25", "execution_time": 0.32655954360961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_hardware_config", "compiled": true, "compiled_code": "WITH hardware_config AS (\n    SELECT\n        type\n        ,cpu\n        ,cores_threads\n        ,architecture\n        ,ram\n        ,storage\n        ,gpu\n        ,psu\n        ,\"case\"\n        ,os\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin(['Intel i5-1135G7', 'Intel i5-10400', 'AMD 3970X']) AS cpu,\n            arrayJoin(['4/8', '6/12', '32/64']) AS cores_threads,\n            arrayJoin(['x86/x64', 'x86/x64', 'x86/x64']) AS architecture,\n            arrayJoin(['16 GB', '64 GB', '256 GB']) AS ram,\n            arrayJoin(['2 TB SSD', '2TB SSD', '2TB SSD']) AS storage,\n            arrayJoin(['Onboard', 'Onboard', 'AM 6970']) AS gpu,\n            arrayJoin(['65 Watt', '650 Watt', '1000 Watt']) AS psu,\n            arrayJoin(['Integrated', 'Custom', 'Custom']) AS \"case\",\n            arrayJoin(['Ubuntu 20.04', 'Ubuntu 21', 'Ubuntu 20.04']) AS os\n    )\n)\n\nSELECT * FROM hardware_config", "relation_name": "`dbt`.`esg_hardware_config`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.226437Z", "completed_at": "2025-08-05T14:00:31.346253Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.381631Z", "completed_at": "2025-08-05T14:00:31.381641Z"}], "thread_id": "Thread-26", "execution_time": 0.3269052505493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_idle_electric_power", "compiled": true, "compiled_code": "WITH idle_electric_power AS (\n    SELECT \n        type\n        ,mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([3.66, 25.04, 78.17]) AS mean\n    )\n)\n\nSELECT * FROM idle_electric_power", "relation_name": "`dbt`.`esg_idle_electric_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.229489Z", "completed_at": "2025-08-05T14:00:31.346995Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.382713Z", "completed_at": "2025-08-05T14:00:31.382721Z"}], "thread_id": "Thread-27", "execution_time": 0.3272716999053955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_node_distribution", "compiled": true, "compiled_code": "WITH node_distribution AS (\n    SELECT \n        type\n        ,distribution\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([0.25, 0.50, 0.25]) AS distribution\n    )\n)\n\nSELECT * FROM node_distribution", "relation_name": "`dbt`.`esg_node_distribution`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.233129Z", "completed_at": "2025-08-05T14:00:31.347889Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.383631Z", "completed_at": "2025-08-05T14:00:31.383639Z"}], "thread_id": "Thread-28", "execution_time": 0.3214097023010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_production", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nblocks_extra_data AS (\n    SELECT \n        block_timestamp\n        ,extra_data\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`execution_blocks_production`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM blocks_extra_data\nWHERE block_timestamp < today()", "relation_name": "`dbt`.`execution_blocks_production`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.240493Z", "completed_at": "2025-08-05T14:00:31.350956Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.385836Z", "completed_at": "2025-08-05T14:00:31.385845Z"}], "thread_id": "Thread-29", "execution_time": 0.32220005989074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_size_diff_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        address\n        ,toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0x0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `execution`.`storage_diffs`\n    WHERE\n        block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`execution_state_size_diff_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    *\nFROM state_size_diff", "relation_name": "`dbt`.`execution_state_size_diff_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.245891Z", "completed_at": "2025-08-05T14:00:31.351658Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.387038Z", "completed_at": "2025-08-05T14:00:31.387047Z"}], "thread_id": "Thread-30", "execution_time": 0.32265806198120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_txs_info_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(COALESCE(gas_used,0)) AS gas_used\n    ,CAST(AVG(COALESCE(gas_price,0)) AS Int32) AS gas_price_avg\n    ,CAST(median(COALESCE(gas_price,0)) AS Int32) AS gas_price_median\nFROM `execution`.`transactions`\nWHERE block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_txs_info_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`execution_txs_info_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.259369Z", "completed_at": "2025-08-05T14:00:31.353725Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.388701Z", "completed_at": "2025-08-05T14:00:31.388710Z"}], "thread_id": "Thread-32", "execution_time": 0.32216715812683105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_discv5_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\n  fork_digests AS (\n    SELECT \n      tupleElement(tup, 1) AS fork_digest,\n      tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n      SELECT arrayJoin([\n        ('0xbc9a6864','Phase0'),\n        ('0x56fdb5e0','Altair'),\n        ('0x824be431','Bellatrix'),\n        ('0x21a6f836','Capella'),\n        ('0x3ebfd484','Deneb'),\n        ('0x7d5aab40','Electra'),\n        ('0xf9ab5f85','Fulu')\n      ]) AS tup\n    )\n  ),\n\n  fork_version AS (\n    SELECT \n      tupleElement(tup, 1) AS fork_version,\n      tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n      SELECT arrayJoin([\n        ('0x00000064','Phase0'),\n        ('0x01000064','Altair'),\n        ('0x02000064','Bellatrix'),\n        ('0x03000064','Capella'),\n        ('0x04000064','Deneb'),\n        ('0x05000064','Electra'),\n        ('0x06000064','Fulu')\n      ]) AS tup\n    )\n  ),\n\n  peers AS (\n    SELECT \n      t1.visit_ended_at,\n      t1.peer_id,\n      toString(t1.peer_properties.fork_digest)        AS fork_digest,\n      t2.cl_fork_name                                 AS cl_fork_name,\n      coalesce(\n        t3.cl_fork_name,\n        toString(t1.peer_properties.next_fork_version)\n      )                                               AS cl_next_fork_name,\n      t1.agent_version,\n      t1.peer_properties,\n      t1.crawl_error,\n      t1.dial_errors\n    FROM `nebula`.`visits` AS t1\n    LEFT JOIN fork_digests t2\n      ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n    LEFT JOIN fork_version t3\n      ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n    WHERE\n      t1.visit_ended_at < today()\n      AND (\n        toString(t1.peer_properties.fork_digest) IN (\n          SELECT fork_digest FROM fork_digests\n        )\n        OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n      )\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_discv5_peers_info`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      fork_digest,\n      cl_fork_name,\n      cl_next_fork_name,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      agent_version,\n      splitByChar('/', agent_version)      AS slash_parts,\n      length(slash_parts)                  AS sp_len\n    FROM peers\n  ),\n\n  with_parts AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      fork_digest,\n      cl_fork_name,\n      cl_next_fork_name,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      agent_version,\n      slash_parts,\n      sp_len,\n      -- Extract platform and runtime\n      IF(\n        sp_len >= 4,\n        arrayElement(slash_parts, toInt64(sp_len) - 1),\n        arrayElement(slash_parts, sp_len)\n      )                                    AS platform,\n      IF(\n        sp_len >= 4,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                    AS runtime,\n      -- Head parts for client/variant/ver_blob\n      arraySlice(\n        slash_parts,\n        1,\n        IF(\n          sp_len >= 4, toInt64(sp_len) - 2,\n          toInt64(sp_len) - 1\n        )\n      )                                    AS head_parts\n    FROM parsed\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      fork_digest,\n      cl_fork_name,\n      cl_next_fork_name,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                       AS client,\n      length(head_parts)                  AS hp_len,\n      -- Variant logic\n      IF(\n        hp_len = 3,\n        head_parts[2],\n        ''\n      )                                    AS variant,\n      -- Raw version blob\n      head_parts[hp_len]                  AS ver_blob,\n      platform,\n      runtime,\n      -- Split + metadata\n      IF(\n        ver_blob LIKE '%+%',\n        arrayElement(splitByChar('+', ver_blob), 1),\n        ver_blob\n      )                                    AS pre_blob,\n      IF(\n        ver_blob LIKE '%+%',\n        arrayElement(splitByChar('+', ver_blob), 2),\n        ''\n      )                                    AS plus_build\n    FROM with_parts\n  )\n\nSELECT\n  visit_ended_at,\n  peer_id,\n  fork_digest,\n  cl_fork_name,\n  cl_next_fork_name,\n  peer_properties,\n  crawl_error,\n  dial_errors,\n  client,\n  variant,\n  -- Final version\n  IF(\n    plus_build != '',\n    arrayElement(splitByChar('-', pre_blob), 1),\n    splitByChar('-', ver_blob)[1]\n  )                                    AS version,\n  -- Channel\n  IF(\n    plus_build != '',\n    IF(\n      length(splitByChar('-', pre_blob)) >= 2,\n      arrayElement(splitByChar('-', pre_blob), 2),\n      ''\n    ),\n    IF(\n      length(splitByChar('-', ver_blob)) = 3,\n      arrayElement(splitByChar('-', ver_blob), 2),\n      ''\n    )\n  )                                    AS channel,\n  -- Build metadata\n  IF(\n    plus_build != '',\n    plus_build,\n    IF(\n      length(splitByChar('-', ver_blob)) > 1,\n      arrayElement(splitByChar('-', ver_blob), -1),\n      ''\n    )\n  )                                    AS build,\n  platform,\n  runtime\nFROM exploded", "relation_name": "`dbt`.`p2p_discv5_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.253258Z", "completed_at": "2025-08-05T14:00:31.355628Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.390494Z", "completed_at": "2025-08-05T14:00:31.390503Z"}], "thread_id": "Thread-31", "execution_time": 0.3252983093261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_discv4_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `nebula_discv4`.`visits` A\n  WHERE\n      visit_ended_at < today()\n      AND\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_discv4_peers_info`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  )\n\nSELECT\n  visit_ended_at,\n  peer_id,\n  agent_version,\n  peer_properties,\n  crawl_error,\n  dial_errors,\n  client,\n  variant,\n\n  -- version: drop +build, then drop any \u201c-channel\u201d suffix\n  IF(\n    plus_build != '',\n    arrayElement(splitByChar('-', pre_blob), 1),\n    splitByChar('-', ver_blob)[1]\n  )                                                       AS version,\n\n  -- channel: from pre_blob if +build present, else only when exactly three dash-segments\n  IF(\n    plus_build != '',\n    IF(\n      length(splitByChar('-', pre_blob)) >= 2,\n      arrayElement(splitByChar('-', pre_blob), 2),\n      ''\n    ),\n    IF(\n      length(splitByChar('-', ver_blob)) = 3,\n      arrayElement(splitByChar('-', ver_blob), 2),\n      ''\n    )\n  )                                                       AS channel,\n\n  -- build: +metadata if present, otherwise last dash-segment\n  IF(\n    plus_build != '',\n    plus_build,\n    IF(\n      length(splitByChar('-', ver_blob)) > 1,\n      arrayElement(splitByChar('-', ver_blob), -1),\n      ''\n    )\n  )                                                       AS build,\n\n  platform,\n  runtime\n\nFROM exploded", "relation_name": "`dbt`.`p2p_discv4_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.265716Z", "completed_at": "2025-08-05T14:00:31.356308Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.391529Z", "completed_at": "2025-08-05T14:00:31.391541Z"}], "thread_id": "Thread-33", "execution_time": 0.324265718460083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n    SELECT \n        tupleElement(tup, 1) AS fork_digest,\n        tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n        SELECT arrayJoin([\n            ('0xbc9a6864','Phase0'),\n            ('0x56fdb5e0','Altair'),\n            ('0x824be431','Bellatrix'),\n            ('0x21a6f836','Capella'),\n            ('0x3ebfd484','Deneb'),\n            ('0x7d5aab40','Electra'),\n            ('0xf9ab5f85','Fulu')\n        ]) AS tup\n    )\n),\n\nfork_version AS (\n    SELECT \n        tupleElement(tup, 1) AS fork_version,\n        tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n        SELECT arrayJoin([\n            ('0x00000064','Phase0'),\n            ('0x01000064','Altair'),\n            ('0x02000064','Bellatrix'),\n            ('0x03000064','Capella'),\n            ('0x04000064','Deneb'),\n            ('0x05000064','Electra'),\n            ('0x06000064','Fulu')\n        ]) AS tup\n    )\n)\n\n\nSELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.agent_version,\n    toString(t1.peer_properties.fork_digest)        AS fork_digest,\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name,\n                toString(t1.peer_properties.next_fork_version)) AS cl_next_fork_name,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\nFROM `nebula`.`visits` AS t1\nLEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\nLEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\nWHERE\n    t1.visit_ended_at < today()\n    AND\n    (\n        toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR\n        toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_peers_info`\n    )\n  \n", "relation_name": "`dbt`.`p2p_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.286802Z", "completed_at": "2025-08-05T14:00:31.357476Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.392441Z", "completed_at": "2025-08-05T14:00:31.392449Z"}], "thread_id": "Thread-36", "execution_time": 0.3223729133605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,any_value(toInt32(floor(__total))) AS value\n    FROM \n        `crawlers_data`.`probelab_agent_semvers_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_daily`\n    )\n  \n\n    GROUP BY\n        1, 2\n)\n\nSELECT\n    *\nFROM probelab_agent \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.275198Z", "completed_at": "2025-08-05T14:00:31.358066Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.393352Z", "completed_at": "2025-08-05T14:00:31.393360Z"}], "thread_id": "Thread-34", "execution_time": 0.3247568607330322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_cloud_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_cloud AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,cloud_provider AS cloud\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_cloud_provider_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_cloud_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_cloud \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_cloud_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.292498Z", "completed_at": "2025-08-05T14:00:31.359297Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.394244Z", "completed_at": "2025-08-05T14:00:31.394253Z"}], "thread_id": "Thread-37", "execution_time": 0.3234724998474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_quic_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_quic AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,quic_support AS quic\n        ,__count AS value\n    FROM \n        `crawlers_data`.`probelab_quic_support_over_7d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_quic_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_quic \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_quic_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.298105Z", "completed_at": "2025-08-05T14:00:31.359873Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.395137Z", "completed_at": "2025-08-05T14:00:31.395150Z"}], "thread_id": "Thread-38", "execution_time": 0.3233506679534912, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_version_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_version AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,agent_version_semver_str AS version\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_agent_semvers_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_version_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_version \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.281054Z", "completed_at": "2025-08-05T14:00:31.360454Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.396011Z", "completed_at": "2025-08-05T14:00:31.396035Z"}], "thread_id": "Thread-35", "execution_time": 0.32668471336364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_country_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_country AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,country\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_countries_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_country_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_country \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_country_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.303868Z", "completed_at": "2025-08-05T14:00:31.362909Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.398518Z", "completed_at": "2025-08-05T14:00:31.398527Z"}], "thread_id": "Thread-39", "execution_time": 0.32526540756225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.transfers_erc20_bluechips", "compiled": true, "compiled_code": "\n\n\nSELECT\n    block_number\n    ,block_timestamp\n    ,transaction_index\n    ,log_index\n    ,transaction_hash\n    ,address AS token_address\n    ,concat('0x',substring(topic1,25,40)) AS \"from\"\n    ,concat('0x',substring(topic2,25,40) ) AS \"to\"\n    ,toString(\n        reinterpretAsUInt256(\n            reverse(unhex(data))\n        )\n    ) AS \"value\"\nFROM `execution`.`logs`\nWHERE\n    topic0 = 'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND address = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    AND block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`transfers_erc20_bluechips`\n    )\n  \n", "relation_name": "`dbt`.`transfers_erc20_bluechips`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.313202Z", "completed_at": "2025-08-05T14:00:31.366586Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.401930Z", "completed_at": "2025-08-05T14:00:31.401939Z"}], "thread_id": "Thread-40", "execution_time": 0.32817721366882324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_contract_abis_abi_json.455012a6a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect abi_json\nfrom `dbt`.`contract_abis`\nwhere abi_json is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.434507Z", "completed_at": "2025-08-05T14:00:31.486788Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.563889Z", "completed_at": "2025-08-05T14:00:31.563906Z"}], "thread_id": "Thread-1", "execution_time": 0.19680500030517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_contract_abis_contract_address.b603d52605", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contract_abis`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.445295Z", "completed_at": "2025-08-05T14:00:31.496363Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.598136Z", "completed_at": "2025-08-05T14:00:31.598153Z"}], "thread_id": "Thread-2", "execution_time": 0.22263503074645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_contract_address.21e1331121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`event_signatures`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.456086Z", "completed_at": "2025-08-05T14:00:31.516955Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.638501Z", "completed_at": "2025-08-05T14:00:31.638517Z"}], "thread_id": "Thread-3", "execution_time": 0.2541165351867676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_event_name.8114fcab41", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`event_signatures`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.474352Z", "completed_at": "2025-08-05T14:00:31.555530Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.701006Z", "completed_at": "2025-08-05T14:00:31.701046Z"}], "thread_id": "Thread-4", "execution_time": 0.3007490634918213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_signature.f84f3d98c3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect signature\nfrom `dbt`.`event_signatures`\nwhere signature is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.481921Z", "completed_at": "2025-08-05T14:00:31.564864Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.704285Z", "completed_at": "2025-08-05T14:00:31.704298Z"}], "thread_id": "Thread-5", "execution_time": 0.2997307777404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_contract_address.b86e96ce0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`function_signatures`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.488753Z", "completed_at": "2025-08-05T14:00:31.582885Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.706299Z", "completed_at": "2025-08-05T14:00:31.706312Z"}], "thread_id": "Thread-6", "execution_time": 0.29927778244018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_function_name.18d9874c92", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect function_name\nfrom `dbt`.`function_signatures`\nwhere function_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.496960Z", "completed_at": "2025-08-05T14:00:31.604152Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.711203Z", "completed_at": "2025-08-05T14:00:31.711213Z"}], "thread_id": "Thread-7", "execution_time": 0.2994081974029541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_signature.e4fc7e2bd5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect signature\nfrom `dbt`.`function_signatures`\nwhere signature is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.503752Z", "completed_at": "2025-08-05T14:00:31.632067Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.715997Z", "completed_at": "2025-08-05T14:00:31.716007Z"}], "thread_id": "Thread-8", "execution_time": 0.30090928077697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_balances_dist_daily_date.baed9cb968", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`consensus_validators_balances_dist_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.511687Z", "completed_at": "2025-08-05T14:00:31.637849Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.718263Z", "completed_at": "2025-08-05T14:00:31.718272Z"}], "thread_id": "Thread-9", "execution_time": 0.29903459548950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_status_daily_date.b14f3879d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`consensus_validators_status_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.518271Z", "completed_at": "2025-08-05T14:00:31.651543Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.720810Z", "completed_at": "2025-08-05T14:00:31.720820Z"}], "thread_id": "Thread-10", "execution_time": 0.2992870807647705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_status_daily_status.f3af3b6c57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom `dbt`.`consensus_validators_status_daily`\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.523634Z", "completed_at": "2025-08-05T14:00:31.662165Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.723498Z", "completed_at": "2025-08-05T14:00:31.723509Z"}], "thread_id": "Thread-11", "execution_time": 0.3003733158111572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_number.1cc2a2f157", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.532458Z", "completed_at": "2025-08-05T14:00:31.693930Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.728925Z", "completed_at": "2025-08-05T14:00:31.728936Z"}], "thread_id": "Thread-12", "execution_time": 0.2993769645690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_timestamp.427c640d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.544755Z", "completed_at": "2025-08-05T14:00:31.694947Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.731133Z", "completed_at": "2025-08-05T14:00:31.731142Z"}], "thread_id": "Thread-14", "execution_time": 0.2994983196258545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_hash.f28d1a031d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.537697Z", "completed_at": "2025-08-05T14:00:31.695704Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.732085Z", "completed_at": "2025-08-05T14:00:31.732096Z"}], "thread_id": "Thread-13", "execution_time": 0.30182433128356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_contract_address.148f14d659", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.549906Z", "completed_at": "2025-08-05T14:00:31.702127Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.735000Z", "completed_at": "2025-08-05T14:00:31.735011Z"}], "thread_id": "Thread-15", "execution_time": 0.3019134998321533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_index.c9756ce89e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.556215Z", "completed_at": "2025-08-05T14:00:31.703664Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.736613Z", "completed_at": "2025-08-05T14:00:31.736621Z"}], "thread_id": "Thread-16", "execution_time": 0.2965097427368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_transaction_hash.c886f64cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.565535Z", "completed_at": "2025-08-05T14:00:31.705473Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.738278Z", "completed_at": "2025-08-05T14:00:31.738286Z"}], "thread_id": "Thread-17", "execution_time": 0.2968888282775879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_block_number.23f3105fa1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.576442Z", "completed_at": "2025-08-05T14:00:31.707299Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.739870Z", "completed_at": "2025-08-05T14:00:31.739878Z"}], "thread_id": "Thread-19", "execution_time": 0.2965707778930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_log_index.548a0d340c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.570953Z", "completed_at": "2025-08-05T14:00:31.708058Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.740866Z", "completed_at": "2025-08-05T14:00:31.740875Z"}], "thread_id": "Thread-18", "execution_time": 0.2988014221191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_deposit_timestamp.b721cec124", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere deposit_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.583553Z", "completed_at": "2025-08-05T14:00:31.708815Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.741823Z", "completed_at": "2025-08-05T14:00:31.741836Z"}], "thread_id": "Thread-22", "execution_time": 0.29793405532836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_transaction_hash.fdd9d805b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.588436Z", "completed_at": "2025-08-05T14:00:31.709536Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.742779Z", "completed_at": "2025-08-05T14:00:31.742791Z"}], "thread_id": "Thread-21", "execution_time": 0.2982513904571533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_events_transaction_hash.162d1b026f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.599360Z", "completed_at": "2025-08-05T14:00:31.712360Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.745147Z", "completed_at": "2025-08-05T14:00:31.745156Z"}], "thread_id": "Thread-23", "execution_time": 0.29354262351989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_number.821bbe2661", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.593324Z", "completed_at": "2025-08-05T14:00:31.712927Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.746054Z", "completed_at": "2025-08-05T14:00:31.746062Z"}], "thread_id": "Thread-20", "execution_time": 0.2958714962005615, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_address.956a512fec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.604847Z", "completed_at": "2025-08-05T14:00:31.713761Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.746953Z", "completed_at": "2025-08-05T14:00:31.746963Z"}], "thread_id": "Thread-24", "execution_time": 0.29471349716186523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_timestamp.d03f151257", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.611726Z", "completed_at": "2025-08-05T14:00:31.714516Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.747877Z", "completed_at": "2025-08-05T14:00:31.747885Z"}], "thread_id": "Thread-25", "execution_time": 0.29499268531799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_event_name.821449d8bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.616851Z", "completed_at": "2025-08-05T14:00:31.715098Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.748777Z", "completed_at": "2025-08-05T14:00:31.748785Z"}], "thread_id": "Thread-26", "execution_time": 0.29463863372802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_transaction_hash.e2fc28195f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.621953Z", "completed_at": "2025-08-05T14:00:31.716883Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.750430Z", "completed_at": "2025-08-05T14:00:31.750439Z"}], "thread_id": "Thread-27", "execution_time": 0.2956852912902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_number.772cd91469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.627150Z", "completed_at": "2025-08-05T14:00:31.717660Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.751346Z", "completed_at": "2025-08-05T14:00:31.751354Z"}], "thread_id": "Thread-28", "execution_time": 0.29596471786499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_timestamp.28ab9881a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.632949Z", "completed_at": "2025-08-05T14:00:31.719836Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.753962Z", "completed_at": "2025-08-05T14:00:31.753971Z"}], "thread_id": "Thread-29", "execution_time": 0.2899439334869385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_contract_address.5e413fb6b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.646399Z", "completed_at": "2025-08-05T14:00:31.722036Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.755875Z", "completed_at": "2025-08-05T14:00:31.755884Z"}], "thread_id": "Thread-32", "execution_time": 0.289919376373291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_transaction_hash.4b872e6755", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.639521Z", "completed_at": "2025-08-05T14:00:31.722688Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.756812Z", "completed_at": "2025-08-05T14:00:31.756823Z"}], "thread_id": "Thread-30", "execution_time": 0.2920832633972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_log_index.165bf735c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.652348Z", "completed_at": "2025-08-05T14:00:31.724419Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.758487Z", "completed_at": "2025-08-05T14:00:31.758498Z"}], "thread_id": "Thread-31", "execution_time": 0.2912774085998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_abi_contract_address.babd7f8846", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_abi`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.657354Z", "completed_at": "2025-08-05T14:00:31.725324Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.759415Z", "completed_at": "2025-08-05T14:00:31.759423Z"}], "thread_id": "Thread-33", "execution_time": 0.2915616035461426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_abi_updated_at.86925d1b72", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt`.`contracts_abi`\nwhere updated_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.667643Z", "completed_at": "2025-08-05T14:00:31.726615Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.760317Z", "completed_at": "2025-08-05T14:00:31.760329Z"}], "thread_id": "Thread-34", "execution_time": 0.2911515235900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_address.d9ca4947e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.672525Z", "completed_at": "2025-08-05T14:00:31.727202Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.761225Z", "completed_at": "2025-08-05T14:00:31.761233Z"}], "thread_id": "Thread-37", "execution_time": 0.2913672924041748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_number.3e4faff869", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.679271Z", "completed_at": "2025-08-05T14:00:31.728261Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.762094Z", "completed_at": "2025-08-05T14:00:31.762104Z"}], "thread_id": "Thread-38", "execution_time": 0.29158973693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_timestamp.9aee384fb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.662940Z", "completed_at": "2025-08-05T14:00:31.729802Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.763693Z", "completed_at": "2025-08-05T14:00:31.763701Z"}], "thread_id": "Thread-36", "execution_time": 0.2951807975769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_abi_contract_address.63d4e73e50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contract_address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_abi`\nwhere contract_address is not null\ngroup by contract_address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.689050Z", "completed_at": "2025-08-05T14:00:31.730541Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.764618Z", "completed_at": "2025-08-05T14:00:31.764626Z"}], "thread_id": "Thread-39", "execution_time": 0.2915990352630615, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c86a200558", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.683992Z", "completed_at": "2025-08-05T14:00:31.732933Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.766876Z", "completed_at": "2025-08-05T14:00:31.766887Z"}], "thread_id": "Thread-35", "execution_time": 0.29572272300720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_log_index.edcd08f3d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.696325Z", "completed_at": "2025-08-05T14:00:31.734310Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.768486Z", "completed_at": "2025-08-05T14:00:31.768494Z"}], "thread_id": "Thread-40", "execution_time": 0.288132905960083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_number.576f215a28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.797239Z", "completed_at": "2025-08-05T14:00:31.849492Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:31.924736Z", "completed_at": "2025-08-05T14:00:31.924752Z"}], "thread_id": "Thread-1", "execution_time": 0.1889810562133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_timestamp.f629afe28e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.809922Z", "completed_at": "2025-08-05T14:00:31.864456Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.032907Z", "completed_at": "2025-08-05T14:00:32.032923Z"}], "thread_id": "Thread-2", "execution_time": 0.2893390655517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_transaction_hash.28a9f27947", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.821988Z", "completed_at": "2025-08-05T14:00:31.880885Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.081242Z", "completed_at": "2025-08-05T14:00:32.081258Z"}], "thread_id": "Thread-3", "execution_time": 0.32846641540527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_address.bdf5296248", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.837550Z", "completed_at": "2025-08-05T14:00:31.914338Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.140615Z", "completed_at": "2025-08-05T14:00:32.140632Z"}], "thread_id": "Thread-4", "execution_time": 0.3729403018951416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_number.609ef43fc0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.844746Z", "completed_at": "2025-08-05T14:00:31.925849Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.143316Z", "completed_at": "2025-08-05T14:00:32.143327Z"}], "thread_id": "Thread-5", "execution_time": 0.3720378875732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_timestamp.d04237ee7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.850868Z", "completed_at": "2025-08-05T14:00:32.017617Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.145223Z", "completed_at": "2025-08-05T14:00:32.145232Z"}], "thread_id": "Thread-6", "execution_time": 0.3726048469543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.b6309f3c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.859697Z", "completed_at": "2025-08-05T14:00:32.033888Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.151310Z", "completed_at": "2025-08-05T14:00:32.151322Z"}], "thread_id": "Thread-7", "execution_time": 0.37454986572265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_number.a01484fb80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.868366Z", "completed_at": "2025-08-05T14:00:32.075445Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.156415Z", "completed_at": "2025-08-05T14:00:32.156427Z"}], "thread_id": "Thread-8", "execution_time": 0.3755531311035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_block_number.21e3d39fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.875190Z", "completed_at": "2025-08-05T14:00:32.082274Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.159635Z", "completed_at": "2025-08-05T14:00:32.159646Z"}], "thread_id": "Thread-9", "execution_time": 0.37677764892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_timestamp.d0c596dfea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.881508Z", "completed_at": "2025-08-05T14:00:32.092614Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.161497Z", "completed_at": "2025-08-05T14:00:32.161507Z"}], "thread_id": "Thread-10", "execution_time": 0.3766751289367676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.56bda730ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.887994Z", "completed_at": "2025-08-05T14:00:32.098293Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.163752Z", "completed_at": "2025-08-05T14:00:32.163761Z"}], "thread_id": "Thread-11", "execution_time": 0.3768494129180908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_address.165862a2aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.895833Z", "completed_at": "2025-08-05T14:00:32.128183Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.168932Z", "completed_at": "2025-08-05T14:00:32.168941Z"}], "thread_id": "Thread-12", "execution_time": 0.3779275417327881, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_number.38fb650a25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.903307Z", "completed_at": "2025-08-05T14:00:32.134766Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.170683Z", "completed_at": "2025-08-05T14:00:32.170692Z"}], "thread_id": "Thread-14", "execution_time": 0.3776383399963379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_timestamp.388a973e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.907941Z", "completed_at": "2025-08-05T14:00:32.135408Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.172748Z", "completed_at": "2025-08-05T14:00:32.172759Z"}], "thread_id": "Thread-13", "execution_time": 0.37901806831359863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_hash.dbd74bbec2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.919974Z", "completed_at": "2025-08-05T14:00:32.142615Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.175865Z", "completed_at": "2025-08-05T14:00:32.175877Z"}], "thread_id": "Thread-16", "execution_time": 0.37126874923706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_number.eefe564540", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.914946Z", "completed_at": "2025-08-05T14:00:32.144203Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.177449Z", "completed_at": "2025-08-05T14:00:32.177460Z"}], "thread_id": "Thread-15", "execution_time": 0.38099050521850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_index.3d160fb148", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.926493Z", "completed_at": "2025-08-05T14:00:32.146215Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.179072Z", "completed_at": "2025-08-05T14:00:32.179083Z"}], "thread_id": "Thread-17", "execution_time": 0.3731255531311035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_timestamp.5e95caaec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.018463Z", "completed_at": "2025-08-05T14:00:32.147370Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.179950Z", "completed_at": "2025-08-05T14:00:32.179958Z"}], "thread_id": "Thread-18", "execution_time": 0.37214159965515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.f26d7fac89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:31.932856Z", "completed_at": "2025-08-05T14:00:32.149500Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.181503Z", "completed_at": "2025-08-05T14:00:32.181511Z"}], "thread_id": "Thread-19", "execution_time": 0.3742828369140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_contract_address.1adbd503a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.023458Z", "completed_at": "2025-08-05T14:00:32.150069Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.182370Z", "completed_at": "2025-08-05T14:00:32.182379Z"}], "thread_id": "Thread-22", "execution_time": 0.3738718032836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_index.e1dcb67697", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.028308Z", "completed_at": "2025-08-05T14:00:32.150690Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.183264Z", "completed_at": "2025-08-05T14:00:32.183272Z"}], "thread_id": "Thread-21", "execution_time": 0.3740811347961426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.83b910f903", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.039042Z", "completed_at": "2025-08-05T14:00:32.152925Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.184764Z", "completed_at": "2025-08-05T14:00:32.184775Z"}], "thread_id": "Thread-20", "execution_time": 0.368253231048584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_number.1522d31da7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.049450Z", "completed_at": "2025-08-05T14:00:32.153625Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.185975Z", "completed_at": "2025-08-05T14:00:32.185983Z"}], "thread_id": "Thread-25", "execution_time": 0.36785292625427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.8917d56005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.034516Z", "completed_at": "2025-08-05T14:00:32.154356Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.186873Z", "completed_at": "2025-08-05T14:00:32.186884Z"}], "thread_id": "Thread-23", "execution_time": 0.37076330184936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_address.f089d36807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.044908Z", "completed_at": "2025-08-05T14:00:32.155103Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.187778Z", "completed_at": "2025-08-05T14:00:32.187786Z"}], "thread_id": "Thread-24", "execution_time": 0.3703010082244873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_timestamp.ea5eb46130", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.054212Z", "completed_at": "2025-08-05T14:00:32.155764Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.188669Z", "completed_at": "2025-08-05T14:00:32.188679Z"}], "thread_id": "Thread-26", "execution_time": 0.3699064254760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_index.19282f06e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.064383Z", "completed_at": "2025-08-05T14:00:32.157288Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.190293Z", "completed_at": "2025-08-05T14:00:32.190305Z"}], "thread_id": "Thread-28", "execution_time": 0.3696300983428955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_address.d3f53878e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.076670Z", "completed_at": "2025-08-05T14:00:32.158261Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.191207Z", "completed_at": "2025-08-05T14:00:32.191218Z"}], "thread_id": "Thread-29", "execution_time": 0.3640108108520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_number.680bebac6c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.059221Z", "completed_at": "2025-08-05T14:00:32.160584Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.193456Z", "completed_at": "2025-08-05T14:00:32.193465Z"}], "thread_id": "Thread-27", "execution_time": 0.3734288215637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.rwa_backedfi_prices", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "relation_name": "`dbt`.`rwa_backedfi_prices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.082989Z", "completed_at": "2025-08-05T14:00:32.162447Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.195144Z", "completed_at": "2025-08-05T14:00:32.195153Z"}], "thread_id": "Thread-32", "execution_time": 0.36661672592163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_timestamp.9775e2fb1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.087752Z", "completed_at": "2025-08-05T14:00:32.163010Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.196005Z", "completed_at": "2025-08-05T14:00:32.196013Z"}], "thread_id": "Thread-30", "execution_time": 0.3668034076690674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.88ba11e669", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.093448Z", "completed_at": "2025-08-05T14:00:32.164669Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.197600Z", "completed_at": "2025-08-05T14:00:32.197611Z"}], "thread_id": "Thread-31", "execution_time": 0.36714982986450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_index.68b3f1738e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.108614Z", "completed_at": "2025-08-05T14:00:32.166010Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.198504Z", "completed_at": "2025-08-05T14:00:32.198512Z"}], "thread_id": "Thread-37", "execution_time": 0.36611223220825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_chain_id.f74425b13a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.103380Z", "completed_at": "2025-08-05T14:00:32.166683Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.199380Z", "completed_at": "2025-08-05T14:00:32.199387Z"}], "thread_id": "Thread-34", "execution_time": 0.36763644218444824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_timestamp.bf7705d6a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.098869Z", "completed_at": "2025-08-05T14:00:32.167386Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.200237Z", "completed_at": "2025-08-05T14:00:32.200245Z"}], "thread_id": "Thread-33", "execution_time": 0.36911606788635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_number.274cf154dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.113916Z", "completed_at": "2025-08-05T14:00:32.168209Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.201090Z", "completed_at": "2025-08-05T14:00:32.201098Z"}], "thread_id": "Thread-38", "execution_time": 0.3680603504180908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_log_index.95ea7ac278", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.118483Z", "completed_at": "2025-08-05T14:00:32.169783Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.202595Z", "completed_at": "2025-08-05T14:00:32.202603Z"}], "thread_id": "Thread-36", "execution_time": 0.368304967880249, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_transaction_hash.8f3b8c3dcc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.128900Z", "completed_at": "2025-08-05T14:00:32.171569Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.204167Z", "completed_at": "2025-08-05T14:00:32.204176Z"}], "thread_id": "Thread-35", "execution_time": 0.36737561225891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_contract_address.bbcc2fc5da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.123127Z", "completed_at": "2025-08-05T14:00:32.172149Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.205030Z", "completed_at": "2025-08-05T14:00:32.205044Z"}], "thread_id": "Thread-39", "execution_time": 0.37009358406066895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_block_number.2e9b559c2a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.136048Z", "completed_at": "2025-08-05T14:00:32.174570Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.207236Z", "completed_at": "2025-08-05T14:00:32.207244Z"}], "thread_id": "Thread-40", "execution_time": 0.36484456062316895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_transaction_hash.fe02a9b64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.237267Z", "completed_at": "2025-08-05T14:00:32.282771Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.354716Z", "completed_at": "2025-08-05T14:00:32.354730Z"}], "thread_id": "Thread-1", "execution_time": 0.17963814735412598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_number.2a8e19f5e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.246882Z", "completed_at": "2025-08-05T14:00:32.295472Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.375559Z", "completed_at": "2025-08-05T14:00:32.375571Z"}], "thread_id": "Thread-2", "execution_time": 0.1948404312133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_timestamp.16109c20e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.259799Z", "completed_at": "2025-08-05T14:00:32.315737Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.424727Z", "completed_at": "2025-08-05T14:00:32.424745Z"}], "thread_id": "Thread-3", "execution_time": 0.23277616500854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_event_type.713ef9b907", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.275159Z", "completed_at": "2025-08-05T14:00:32.348354Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.488372Z", "completed_at": "2025-08-05T14:00:32.488387Z"}], "thread_id": "Thread-4", "execution_time": 0.28197455406188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_id.592e70b2ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.283391Z", "completed_at": "2025-08-05T14:00:32.360379Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.491697Z", "completed_at": "2025-08-05T14:00:32.491711Z"}], "thread_id": "Thread-5", "execution_time": 0.2824246883392334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_log_index.143d8c5c9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.288811Z", "completed_at": "2025-08-05T14:00:32.365710Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.493386Z", "completed_at": "2025-08-05T14:00:32.493395Z"}], "thread_id": "Thread-6", "execution_time": 0.28279781341552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_name.d019754eea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.297278Z", "completed_at": "2025-08-05T14:00:32.393610Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.497006Z", "completed_at": "2025-08-05T14:00:32.497034Z"}], "thread_id": "Thread-7", "execution_time": 0.28180503845214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_owner_address.16e6eb27df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect owner_address\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere owner_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.304817Z", "completed_at": "2025-08-05T14:00:32.419317Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.502917Z", "completed_at": "2025-08-05T14:00:32.502929Z"}], "thread_id": "Thread-8", "execution_time": 0.2837038040161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_registration_date.be77a3bc9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect registration_date\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere registration_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.311013Z", "completed_at": "2025-08-05T14:00:32.430294Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.507383Z", "completed_at": "2025-08-05T14:00:32.507393Z"}], "thread_id": "Thread-9", "execution_time": 0.2854800224304199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_transaction_hash.445891e408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.316958Z", "completed_at": "2025-08-05T14:00:32.440465Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.509272Z", "completed_at": "2025-08-05T14:00:32.509281Z"}], "thread_id": "Thread-10", "execution_time": 0.2857787609100342, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_NameRegistry_events_id.bf3e44847c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.324374Z", "completed_at": "2025-08-05T14:00:32.461240Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.513772Z", "completed_at": "2025-08-05T14:00:32.513782Z"}], "thread_id": "Thread-11", "execution_time": 0.28826427459716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_address.f24185b4c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_wxdai_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.331906Z", "completed_at": "2025-08-05T14:00:32.471471Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.516857Z", "completed_at": "2025-08-05T14:00:32.516869Z"}], "thread_id": "Thread-12", "execution_time": 0.286266565322876, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_number.1691d4f4da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.337284Z", "completed_at": "2025-08-05T14:00:32.477393Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.517787Z", "completed_at": "2025-08-05T14:00:32.517795Z"}], "thread_id": "Thread-14", "execution_time": 0.28545475006103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_timestamp.a0d94f1927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.343132Z", "completed_at": "2025-08-05T14:00:32.489499Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.521731Z", "completed_at": "2025-08-05T14:00:32.521740Z"}], "thread_id": "Thread-13", "execution_time": 0.2869739532470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_hash.e5bd1686bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.348967Z", "completed_at": "2025-08-05T14:00:32.490955Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.523313Z", "completed_at": "2025-08-05T14:00:32.523324Z"}], "thread_id": "Thread-16", "execution_time": 0.28045034408569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_index.0a7b491fa4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.355794Z", "completed_at": "2025-08-05T14:00:32.492645Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.524900Z", "completed_at": "2025-08-05T14:00:32.524911Z"}], "thread_id": "Thread-15", "execution_time": 0.2806985378265381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_number.ceeff5eb22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.361213Z", "completed_at": "2025-08-05T14:00:32.494232Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.526509Z", "completed_at": "2025-08-05T14:00:32.526517Z"}], "thread_id": "Thread-17", "execution_time": 0.28102564811706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_timestamp.98dea1810b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.366471Z", "completed_at": "2025-08-05T14:00:32.495727Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.528075Z", "completed_at": "2025-08-05T14:00:32.528087Z"}], "thread_id": "Thread-18", "execution_time": 0.28191566467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_from_address.6fed187726", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom `dbt`.`contracts_wxdai_calls`\nwhere from_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.380989Z", "completed_at": "2025-08-05T14:00:32.497918Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.529641Z", "completed_at": "2025-08-05T14:00:32.529652Z"}], "thread_id": "Thread-21", "execution_time": 0.2763822078704834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_calls_transaction_hash.f8705da391", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.376509Z", "completed_at": "2025-08-05T14:00:32.498798Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.530536Z", "completed_at": "2025-08-05T14:00:32.530545Z"}], "thread_id": "Thread-22", "execution_time": 0.27802324295043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_index.6090a9279b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.370934Z", "completed_at": "2025-08-05T14:00:32.499607Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.531410Z", "completed_at": "2025-08-05T14:00:32.531418Z"}], "thread_id": "Thread-19", "execution_time": 0.27956199645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_hash.5f3c74de8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.394241Z", "completed_at": "2025-08-05T14:00:32.500521Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.532283Z", "completed_at": "2025-08-05T14:00:32.532293Z"}], "thread_id": "Thread-25", "execution_time": 0.2770962715148926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_number.14a0066a94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_sdai_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.398746Z", "completed_at": "2025-08-05T14:00:32.501125Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.533165Z", "completed_at": "2025-08-05T14:00:32.533173Z"}], "thread_id": "Thread-23", "execution_time": 0.2773580551147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_timestamp.f61b316290", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_sdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.387212Z", "completed_at": "2025-08-05T14:00:32.501985Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.534002Z", "completed_at": "2025-08-05T14:00:32.534009Z"}], "thread_id": "Thread-20", "execution_time": 0.2794928550720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.yields_sdai_rate_daily", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "relation_name": "`dbt`.`yields_sdai_rate_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.408239Z", "completed_at": "2025-08-05T14:00:32.503853Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.535536Z", "completed_at": "2025-08-05T14:00:32.535546Z"}], "thread_id": "Thread-26", "execution_time": 0.2784461975097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`esg_consensus_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.403346Z", "completed_at": "2025-08-05T14:00:32.504685Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.536458Z", "completed_at": "2025-08-05T14:00:32.536466Z"}], "thread_id": "Thread-24", "execution_time": 0.2799990177154541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_transaction_hash.8bc24e2c1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.414742Z", "completed_at": "2025-08-05T14:00:32.505317Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.537336Z", "completed_at": "2025-08-05T14:00:32.537347Z"}], "thread_id": "Thread-28", "execution_time": 0.27902817726135254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_consensus_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.420072Z", "completed_at": "2025-08-05T14:00:32.505926Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.538217Z", "completed_at": "2025-08-05T14:00:32.538225Z"}], "thread_id": "Thread-29", "execution_time": 0.2792704105377197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_consensus_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.425766Z", "completed_at": "2025-08-05T14:00:32.508341Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.540376Z", "completed_at": "2025-08-05T14:00:32.540384Z"}], "thread_id": "Thread-27", "execution_time": 0.27524447441101074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`esg_execution_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.431196Z", "completed_at": "2025-08-05T14:00:32.510141Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.541877Z", "completed_at": "2025-08-05T14:00:32.541887Z"}], "thread_id": "Thread-32", "execution_time": 0.27545690536499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_execution_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.435764Z", "completed_at": "2025-08-05T14:00:32.511169Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.542795Z", "completed_at": "2025-08-05T14:00:32.542802Z"}], "thread_id": "Thread-30", "execution_time": 0.2757101058959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_execution_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.447571Z", "completed_at": "2025-08-05T14:00:32.511908Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.543654Z", "completed_at": "2025-08-05T14:00:32.543662Z"}], "thread_id": "Thread-37", "execution_time": 0.27469539642333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect case\nfrom `dbt`.`esg_hardware_config`\nwhere case is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.441392Z", "completed_at": "2025-08-05T14:00:32.512475Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.544800Z", "completed_at": "2025-08-05T14:00:32.544807Z"}], "thread_id": "Thread-31", "execution_time": 0.2764904499053955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect architecture\nfrom `dbt`.`esg_hardware_config`\nwhere architecture is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.452070Z", "completed_at": "2025-08-05T14:00:32.513078Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.545684Z", "completed_at": "2025-08-05T14:00:32.545695Z"}], "thread_id": "Thread-34", "execution_time": 0.2761268615722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cores_threads\nfrom `dbt`.`esg_hardware_config`\nwhere cores_threads is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.456650Z", "completed_at": "2025-08-05T14:00:32.515039Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.547305Z", "completed_at": "2025-08-05T14:00:32.547316Z"}], "thread_id": "Thread-33", "execution_time": 0.27710604667663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cpu\nfrom `dbt`.`esg_hardware_config`\nwhere cpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.462012Z", "completed_at": "2025-08-05T14:00:32.515662Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.548192Z", "completed_at": "2025-08-05T14:00:32.548200Z"}], "thread_id": "Thread-38", "execution_time": 0.2773923873901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gpu\nfrom `dbt`.`esg_hardware_config`\nwhere gpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.466775Z", "completed_at": "2025-08-05T14:00:32.516227Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.549067Z", "completed_at": "2025-08-05T14:00:32.549079Z"}], "thread_id": "Thread-36", "execution_time": 0.2770578861236572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect os\nfrom `dbt`.`esg_hardware_config`\nwhere os is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.479283Z", "completed_at": "2025-08-05T14:00:32.519802Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.551926Z", "completed_at": "2025-08-05T14:00:32.551935Z"}], "thread_id": "Thread-39", "execution_time": 0.27814579010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ram\nfrom `dbt`.`esg_hardware_config`\nwhere ram is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.472307Z", "completed_at": "2025-08-05T14:00:32.520563Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.552806Z", "completed_at": "2025-08-05T14:00:32.552814Z"}], "thread_id": "Thread-35", "execution_time": 0.2795987129211426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect psu\nfrom `dbt`.`esg_hardware_config`\nwhere psu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.483833Z", "completed_at": "2025-08-05T14:00:32.521127Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.553678Z", "completed_at": "2025-08-05T14:00:32.553690Z"}], "thread_id": "Thread-40", "execution_time": 0.2723524570465088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect storage\nfrom `dbt`.`esg_hardware_config`\nwhere storage is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.581764Z", "completed_at": "2025-08-05T14:00:32.626834Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.699795Z", "completed_at": "2025-08-05T14:00:32.699811Z"}], "thread_id": "Thread-1", "execution_time": 0.1773066520690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_hardware_config`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.590485Z", "completed_at": "2025-08-05T14:00:32.643211Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.716097Z", "completed_at": "2025-08-05T14:00:32.716109Z"}], "thread_id": "Thread-2", "execution_time": 0.18882417678833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`esg_hardware_config`\nwhere type is not null\ngroup by type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.603633Z", "completed_at": "2025-08-05T14:00:32.660923Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.768991Z", "completed_at": "2025-08-05T14:00:32.769012Z"}], "thread_id": "Thread-3", "execution_time": 0.23008513450622559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_idle_electric_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.618875Z", "completed_at": "2025-08-05T14:00:32.688776Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.821687Z", "completed_at": "2025-08-05T14:00:32.821703Z"}], "thread_id": "Thread-4", "execution_time": 0.2705080509185791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_idle_electric_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.627439Z", "completed_at": "2025-08-05T14:00:32.705540Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.834703Z", "completed_at": "2025-08-05T14:00:32.834716Z"}], "thread_id": "Thread-5", "execution_time": 0.2783083915710449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution\nfrom `dbt`.`esg_node_distribution`\nwhere distribution is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.632802Z", "completed_at": "2025-08-05T14:00:32.710822Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.836405Z", "completed_at": "2025-08-05T14:00:32.836414Z"}], "thread_id": "Thread-6", "execution_time": 0.2786586284637451, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_node_distribution`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.638856Z", "completed_at": "2025-08-05T14:00:32.723154Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.839065Z", "completed_at": "2025-08-05T14:00:32.839077Z"}], "thread_id": "Thread-7", "execution_time": 0.2786068916320801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`esg_node_distribution`\nwhere type is not null\ngroup by type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.647554Z", "completed_at": "2025-08-05T14:00:32.751480Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.843687Z", "completed_at": "2025-08-05T14:00:32.843696Z"}], "thread_id": "Thread-8", "execution_time": 0.27851438522338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_version_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nblocks_clients AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,\narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(extra_data), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(extra_data), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(extra_data)) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`execution_blocks_production`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    , multiIf(\n        lower(decoded_extra_data[1]) = 'choose' \n         OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n         OR lower(decoded_extra_data[1]) = 'sanae.io'\n         OR decoded_extra_data[1] = ''  , 'Unknown',\n        decoded_extra_data[1]\n    )   AS client\n    ,IF(length(decoded_extra_data)>1, \n        IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n        ''\n    ) AS version\n    ,SUM(cnt) AS value\nFROM blocks_clients\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`execution_blocks_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.656449Z", "completed_at": "2025-08-05T14:00:32.774462Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.849903Z", "completed_at": "2025-08-05T14:00:32.849915Z"}], "thread_id": "Thread-9", "execution_time": 0.28069639205932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`execution_blocks_production`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.662353Z", "completed_at": "2025-08-05T14:00:32.781351Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.851114Z", "completed_at": "2025-08-05T14:00:32.851125Z"}], "thread_id": "Thread-10", "execution_time": 0.28057217597961426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_address_current", "compiled": true, "compiled_code": "\n\nSELECT\n    address\n    ,SUM(bytes_diff) AS bytes\nFROM \n    `dbt`.`execution_state_size_diff_daily`\nGROUP BY 1", "relation_name": "`dbt`.`execution_state_address_current`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.668950Z", "completed_at": "2025-08-05T14:00:32.805067Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.855973Z", "completed_at": "2025-08-05T14:00:32.855981Z"}], "thread_id": "Thread-11", "execution_time": 0.2815134525299072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_size_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nstate_size_diff_daily AS (\n    SELECT \n        date\n        ,bytes_diff\n    FROM \n        `dbt`.`execution_state_size_diff_daily`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(date)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_state_size_daily`\n    )\n  \n\n),\n\n\nlast_partition_value AS (\n    SELECT \n        bytes\n    FROM \n        `dbt`.`execution_state_size_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`execution_state_size_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nfinal AS (\n    SELECT\n        date\n        ,SUM(bytes_diff) OVER (ORDER BY date ASC) \n        \n            + (SELECT bytes FROM last_partition_value)\n        \n        AS bytes\n    FROM state_size_diff_daily\n)\n\nSELECT * FROM final", "relation_name": "`dbt`.`execution_state_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.681594Z", "completed_at": "2025-08-05T14:00:32.816543Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.859137Z", "completed_at": "2025-08-05T14:00:32.859145Z"}], "thread_id": "Thread-14", "execution_time": 0.2813723087310791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.676774Z", "completed_at": "2025-08-05T14:00:32.822588Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.862092Z", "completed_at": "2025-08-05T14:00:32.862100Z"}], "thread_id": "Thread-12", "execution_time": 0.28494930267333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.690547Z", "completed_at": "2025-08-05T14:00:32.832508Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.863290Z", "completed_at": "2025-08-05T14:00:32.863301Z"}], "thread_id": "Thread-13", "execution_time": 0.28232240676879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere address is not null\ngroup by address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.695160Z", "completed_at": "2025-08-05T14:00:32.833999Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.866127Z", "completed_at": "2025-08-05T14:00:32.866137Z"}], "thread_id": "Thread-16", "execution_time": 0.2788877487182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_date.59c95191c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_txs_info_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.701084Z", "completed_at": "2025-08-05T14:00:32.835682Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.867693Z", "completed_at": "2025-08-05T14:00:32.867705Z"}], "thread_id": "Thread-15", "execution_time": 0.279205322265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_success.fc1cdd0ab3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`execution_txs_info_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.706385Z", "completed_at": "2025-08-05T14:00:32.837423Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.869267Z", "completed_at": "2025-08-05T14:00:32.869275Z"}], "thread_id": "Thread-17", "execution_time": 0.2795429229736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_transaction_type.402be83c8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`execution_txs_info_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.711567Z", "completed_at": "2025-08-05T14:00:32.839895Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.871492Z", "completed_at": "2025-08-05T14:00:32.871503Z"}], "thread_id": "Thread-18", "execution_time": 0.27642393112182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork_digest\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere fork_digest is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.717251Z", "completed_at": "2025-08-05T14:00:32.840803Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.872400Z", "completed_at": "2025-08-05T14:00:32.872409Z"}], "thread_id": "Thread-21", "execution_time": 0.27593255043029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.723709Z", "completed_at": "2025-08-05T14:00:32.841495Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.873287Z", "completed_at": "2025-08-05T14:00:32.873298Z"}], "thread_id": "Thread-22", "execution_time": 0.27615976333618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.728282Z", "completed_at": "2025-08-05T14:00:32.842103Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.874187Z", "completed_at": "2025-08-05T14:00:32.874195Z"}], "thread_id": "Thread-19", "execution_time": 0.2765488624572754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.732590Z", "completed_at": "2025-08-05T14:00:32.843041Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.875305Z", "completed_at": "2025-08-05T14:00:32.875314Z"}], "thread_id": "Thread-25", "execution_time": 0.27678608894348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.737148Z", "completed_at": "2025-08-05T14:00:32.844661Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.876798Z", "completed_at": "2025-08-05T14:00:32.876806Z"}], "thread_id": "Thread-23", "execution_time": 0.2776341438293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.741682Z", "completed_at": "2025-08-05T14:00:32.845433Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.877946Z", "completed_at": "2025-08-05T14:00:32.877957Z"}], "thread_id": "Thread-20", "execution_time": 0.27817726135253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.758497Z", "completed_at": "2025-08-05T14:00:32.846559Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.878841Z", "completed_at": "2025-08-05T14:00:32.878849Z"}], "thread_id": "Thread-28", "execution_time": 0.2765533924102783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2", "relation_name": "`dbt`.`p2p_peers_geo_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.753423Z", "completed_at": "2025-08-05T14:00:32.847224Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.879721Z", "completed_at": "2025-08-05T14:00:32.879729Z"}], "thread_id": "Thread-24", "execution_time": 0.2780578136444092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,IF(client='','Unknown',client) AS client\n    ,COUNT(*) AS value\nFROM peers\nGROUP BY 1, 2", "relation_name": "`dbt`.`p2p_peers_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.763537Z", "completed_at": "2025-08-05T14:00:32.847901Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.880605Z", "completed_at": "2025-08-05T14:00:32.880613Z"}], "thread_id": "Thread-29", "execution_time": 0.2776927947998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_hourly", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfHour(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_geo_hourly`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\n\nSELECT\n    date\n    ,splitByString(',',loc)[1] AS lat\n    ,splitByString(',',loc)[2] AS long\n    ,IF(country='','Unknown', country) AS country\n    ,cnt\nFROM (\n    SELECT\n        t1.date\n        ,t2.loc\n        ,t2.country\n        ,COUNT(*) AS cnt\n    FROM peers_ip t1\n    LEFT JOIN\n        `crawlers_data`.`ipinfo` t2\n        ON t1.ip = t2.ip\n    GROUP BY 1, 2, 3\n)", "relation_name": "`dbt`.`p2p_peers_geo_hourly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.746174Z", "completed_at": "2025-08-05T14:00:32.848469Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.881507Z", "completed_at": "2025-08-05T14:00:32.881515Z"}], "thread_id": "Thread-26", "execution_time": 0.2804543972015381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_cl_fork_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_cl_fork_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`p2p_peers_cl_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.769977Z", "completed_at": "2025-08-05T14:00:32.851967Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.884440Z", "completed_at": "2025-08-05T14:00:32.884449Z"}], "thread_id": "Thread-27", "execution_time": 0.27376461029052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_latest", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 \n        AND \n        crawl_error IS NULL \n        AND \n        date = least((SELECT MAX(toStartOfDay(visit_ended_at)) FROM `dbt`.`p2p_peers_info`),today())\n    GROUP BY 1, 2\n)\n\nSELECT\n    splitByString(',',loc)[1] AS lat\n    ,splitByString(',',loc)[2] AS long\n    ,IF(country='','Unknown', country) AS country\n    ,cnt\nFROM (\n    SELECT\n        t2.loc\n        ,t2.country\n        ,COUNT(*) AS cnt\n    FROM peers_ip t1\n    LEFT JOIN\n        `crawlers_data`.`ipinfo` t2\n        ON t1.ip = t2.ip\n    GROUP BY 1, 2\n)", "relation_name": "`dbt`.`p2p_peers_geo_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.775204Z", "completed_at": "2025-08-05T14:00:32.853114Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.885444Z", "completed_at": "2025-08-05T14:00:32.885453Z"}], "thread_id": "Thread-32", "execution_time": 0.27350878715515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `nebula`.`discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `nebula`.`neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN crawlers_data.ipinfo AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN crawlers_data.ipinfo AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`p2p_peers_geo_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.781942Z", "completed_at": "2025-08-05T14:00:32.853672Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.886348Z", "completed_at": "2025-08-05T14:00:32.886358Z"}], "thread_id": "Thread-30", "execution_time": 0.2737743854522705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.786440Z", "completed_at": "2025-08-05T14:00:32.854479Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.887235Z", "completed_at": "2025-08-05T14:00:32.887243Z"}], "thread_id": "Thread-37", "execution_time": 0.27402472496032715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.791044Z", "completed_at": "2025-08-05T14:00:32.855291Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.888091Z", "completed_at": "2025-08-05T14:00:32.888102Z"}], "thread_id": "Thread-31", "execution_time": 0.27428436279296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.795609Z", "completed_at": "2025-08-05T14:00:32.856910Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.889682Z", "completed_at": "2025-08-05T14:00:32.889690Z"}], "thread_id": "Thread-34", "execution_time": 0.27524256706237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.800319Z", "completed_at": "2025-08-05T14:00:32.857855Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.890671Z", "completed_at": "2025-08-05T14:00:32.890679Z"}], "thread_id": "Thread-33", "execution_time": 0.2749931812286377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.811689Z", "completed_at": "2025-08-05T14:00:32.858533Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.891581Z", "completed_at": "2025-08-05T14:00:32.891591Z"}], "thread_id": "Thread-36", "execution_time": 0.27460169792175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_cloud_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.817280Z", "completed_at": "2025-08-05T14:00:32.860872Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.893778Z", "completed_at": "2025-08-05T14:00:32.893786Z"}], "thread_id": "Thread-39", "execution_time": 0.2703549861907959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_quic_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.805816Z", "completed_at": "2025-08-05T14:00:32.861515Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.894675Z", "completed_at": "2025-08-05T14:00:32.894683Z"}], "thread_id": "Thread-38", "execution_time": 0.2783219814300537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cloud\nfrom `dbt`.`probelab_peers_clients_cloud_daily`\nwhere cloud is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.827654Z", "completed_at": "2025-08-05T14:00:32.864344Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.897069Z", "completed_at": "2025-08-05T14:00:32.897077Z"}], "thread_id": "Thread-40", "execution_time": 0.2723042964935303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.823224Z", "completed_at": "2025-08-05T14:00:32.865523Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:32.898540Z", "completed_at": "2025-08-05T14:00:32.898548Z"}], "thread_id": "Thread-35", "execution_time": 0.2743990421295166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.925354Z", "completed_at": "2025-08-05T14:00:32.971310Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.040642Z", "completed_at": "2025-08-05T14:00:33.040656Z"}], "thread_id": "Thread-1", "execution_time": 0.17587876319885254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect version\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere version is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.936469Z", "completed_at": "2025-08-05T14:00:32.988881Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.057096Z", "completed_at": "2025-08-05T14:00:33.057107Z"}], "thread_id": "Thread-2", "execution_time": 0.18706655502319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.949667Z", "completed_at": "2025-08-05T14:00:33.009903Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.188811Z", "completed_at": "2025-08-05T14:00:33.188828Z"}], "thread_id": "Thread-3", "execution_time": 0.3065602779388428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.962293Z", "completed_at": "2025-08-05T14:00:33.026846Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.234980Z", "completed_at": "2025-08-05T14:00:33.234996Z"}], "thread_id": "Thread-4", "execution_time": 0.34198427200317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.972520Z", "completed_at": "2025-08-05T14:00:33.055647Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.254751Z", "completed_at": "2025-08-05T14:00:33.254762Z"}], "thread_id": "Thread-5", "execution_time": 0.3547489643096924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.977827Z", "completed_at": "2025-08-05T14:00:33.056246Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.255741Z", "completed_at": "2025-08-05T14:00:33.255750Z"}], "thread_id": "Thread-6", "execution_time": 0.3543965816497803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.984462Z", "completed_at": "2025-08-05T14:00:33.063288Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.258087Z", "completed_at": "2025-08-05T14:00:33.258099Z"}], "thread_id": "Thread-7", "execution_time": 0.3548445701599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere from is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:32.992658Z", "completed_at": "2025-08-05T14:00:33.163099Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.262324Z", "completed_at": "2025-08-05T14:00:33.262334Z"}], "thread_id": "Thread-8", "execution_time": 0.3549690246582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.005393Z", "completed_at": "2025-08-05T14:00:33.187583Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.268388Z", "completed_at": "2025-08-05T14:00:33.268398Z"}], "thread_id": "Thread-10", "execution_time": 0.35463809967041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere token_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.000856Z", "completed_at": "2025-08-05T14:00:33.188195Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.269309Z", "completed_at": "2025-08-05T14:00:33.269320Z"}], "thread_id": "Thread-9", "execution_time": 0.35617661476135254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect to\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere to is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.013689Z", "completed_at": "2025-08-05T14:00:33.218261Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.274308Z", "completed_at": "2025-08-05T14:00:33.274317Z"}], "thread_id": "Thread-11", "execution_time": 0.3562290668487549, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.020101Z", "completed_at": "2025-08-05T14:00:33.234208Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.277922Z", "completed_at": "2025-08-05T14:00:33.277932Z"}], "thread_id": "Thread-14", "execution_time": 0.3572273254394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.028077Z", "completed_at": "2025-08-05T14:00:33.251138Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.281977Z", "completed_at": "2025-08-05T14:00:33.281986Z"}], "thread_id": "Thread-12", "execution_time": 0.35871362686157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.032398Z", "completed_at": "2025-08-05T14:00:33.252427Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.284751Z", "completed_at": "2025-08-05T14:00:33.284759Z"}], "thread_id": "Thread-13", "execution_time": 0.3608243465423584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.rwa_backedfi_prices_1d", "compiled": true, "compiled_code": "\n\n\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nORDER BY bticker, date", "relation_name": "`dbt`.`rwa_backedfi_prices_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.041590Z", "completed_at": "2025-08-05T14:00:33.253465Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.285648Z", "completed_at": "2025-08-05T14:00:33.285660Z"}], "thread_id": "Thread-16", "execution_time": 0.3525211811065674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`rwa_backedfi_prices`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.046247Z", "completed_at": "2025-08-05T14:00:33.254080Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.286543Z", "completed_at": "2025-08-05T14:00:33.286552Z"}], "thread_id": "Thread-15", "execution_time": 0.3520979881286621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`rwa_backedfi_prices`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.051037Z", "completed_at": "2025-08-05T14:00:33.256587Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.288762Z", "completed_at": "2025-08-05T14:00:33.288774Z"}], "thread_id": "Thread-17", "execution_time": 0.35306739807128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`rwa_backedfi_prices`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.058071Z", "completed_at": "2025-08-05T14:00:33.259380Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.290435Z", "completed_at": "2025-08-05T14:00:33.290443Z"}], "thread_id": "Thread-18", "execution_time": 0.3484811782836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.yields_sdai_apy_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "relation_name": "`dbt`.`yields_sdai_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.063963Z", "completed_at": "2025-08-05T14:00:33.260308Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.291324Z", "completed_at": "2025-08-05T14:00:33.291335Z"}], "thread_id": "Thread-21", "execution_time": 0.3486824035644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`yields_sdai_rate_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.072208Z", "completed_at": "2025-08-05T14:00:33.260863Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.292210Z", "completed_at": "2025-08-05T14:00:33.292219Z"}], "thread_id": "Thread-19", "execution_time": 0.34826064109802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_pct_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(value) AS value\n    FROM `dbt`.`execution_blocks_clients_version_daily`\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,ROUND(value/(SUM(value) OVER (PARTITION BY date)),4) AS pct\nFROM \n    clients_blocks", "relation_name": "`dbt`.`execution_blocks_clients_pct_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.068424Z", "completed_at": "2025-08-05T14:00:33.261436Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.293072Z", "completed_at": "2025-08-05T14:00:33.293080Z"}], "thread_id": "Thread-22", "execution_time": 0.3497743606567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,client\n    ,SUM(value) AS value\nFROM `dbt`.`execution_blocks_clients_version_daily`\nGROUP BY 1, 2", "relation_name": "`dbt`.`execution_blocks_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.075748Z", "completed_at": "2025-08-05T14:00:33.263301Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.294056Z", "completed_at": "2025-08-05T14:00:33.294065Z"}], "thread_id": "Thread-25", "execution_time": 0.34949183464050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.080518Z", "completed_at": "2025-08-05T14:00:33.264115Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.294898Z", "completed_at": "2025-08-05T14:00:33.294905Z"}], "thread_id": "Thread-23", "execution_time": 0.3491041660308838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.086397Z", "completed_at": "2025-08-05T14:00:33.264973Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.295783Z", "completed_at": "2025-08-05T14:00:33.295793Z"}], "thread_id": "Thread-20", "execution_time": 0.34935593605041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.168493Z", "completed_at": "2025-08-05T14:00:33.265763Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.296645Z", "completed_at": "2025-08-05T14:00:33.296653Z"}], "thread_id": "Thread-28", "execution_time": 0.34955739974975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`execution_state_address_current`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.173267Z", "completed_at": "2025-08-05T14:00:33.266385Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.297501Z", "completed_at": "2025-08-05T14:00:33.297512Z"}], "thread_id": "Thread-24", "execution_time": 0.34981298446655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`execution_state_address_current`\nwhere address is not null\ngroup by address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.182377Z", "completed_at": "2025-08-05T14:00:33.267264Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.298402Z", "completed_at": "2025-08-05T14:00:33.298410Z"}], "thread_id": "Thread-26", "execution_time": 0.3494246006011963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_country_power_consumption", "compiled": true, "compiled_code": "\n\n\nWITH\n\nconsensus_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`esg_consensus_power`\n),\n\nexecution_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`esg_execution_power`\n),\n\nidle_electric_power AS (\n    SELECT\n        type\n        ,mean\n    FROM\n        `dbt`.`esg_idle_electric_power`\n),\n\nnode_distribution AS (\n    SELECT\n        type\n        ,distribution\n    FROM\n        `dbt`.`esg_node_distribution`\n),\n\nnode_config_power AS (\n    SELECT\n        t1.type\n        ,t1.client AS consensus_client\n        ,t2.client AS execution_client\n        ,t1.mean + t2.mean + t3.mean AS mean\n    FROM\n        consensus_power t1\n    INNER JOIN\n        execution_power t2\n        ON \n        t2.type = t1.type\n    INNER JOIN\n        idle_electric_power t3\n        ON \n        t3.type = t1.type\n\n),\n\nbest_guess_per_client AS (\n    SELECT\n        t1.consensus_client\n        ,t1.execution_client\n        ,AVG(t1.mean * t2.distribution) AS mean\n    FROM\n        node_config_power t1\n    INNER JOIN\n        node_distribution t2\n        ON \n        t2.type = t1.type\n    GROUP BY\n        t1.consensus_client\n        ,t1.execution_client\n),\n\nconfiguration_distribution AS (\n    SELECT \n        execution_client\n        ,consensus_client\n        ,frac\n    FROM (\n        SELECT\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind', 'Nethermind']) AS execution_client,\n            arrayJoin(['Lighthouse', 'Teku', 'Lodestar', 'Nimbus', 'Lighthouse', 'Teku', 'Lodestar', 'Nimbus']) AS consensus_client,\n            arrayJoin([0.340, 0.114, 0.044, 0.002, 0.340, 0.114, 0.044, 0.002]) AS frac\n    )\n),\n\npower_best_guess AS (\n    SELECT \n        SUM(t1.mean * t2.frac) AS mean\n    FROM \n        best_guess_per_client t1\n    INNER JOIN\n        configuration_distribution t2\n        ON\n        t2.execution_client = t1.execution_client\n        AND\n        t2.consensus_client = t1.consensus_client\n)\n\n\nSELECT\n    t1.date\n    ,t1.country\n    ,t1.cnt * t2.mean AS power\nFROM\n    `dbt`.`p2p_peers_geo_daily` t1\nCROSS JOIN \n    power_best_guess t2", "relation_name": "`dbt`.`esg_country_power_consumption`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.177730Z", "completed_at": "2025-08-05T14:00:33.267810Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.299273Z", "completed_at": "2025-08-05T14:00:33.299280Z"}], "thread_id": "Thread-29", "execution_time": 0.3509225845336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_state_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.189770Z", "completed_at": "2025-08-05T14:00:33.271492Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.301046Z", "completed_at": "2025-08-05T14:00:33.301059Z"}], "thread_id": "Thread-27", "execution_time": 0.34517431259155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.195417Z", "completed_at": "2025-08-05T14:00:33.272150Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.301949Z", "completed_at": "2025-08-05T14:00:33.301962Z"}], "thread_id": "Thread-32", "execution_time": 0.34540843963623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.199929Z", "completed_at": "2025-08-05T14:00:33.272849Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.302835Z", "completed_at": "2025-08-05T14:00:33.302846Z"}], "thread_id": "Thread-30", "execution_time": 0.3456149101257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.204585Z", "completed_at": "2025-08-05T14:00:33.273520Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.303701Z", "completed_at": "2025-08-05T14:00:33.303709Z"}], "thread_id": "Thread-37", "execution_time": 0.3458564281463623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.208934Z", "completed_at": "2025-08-05T14:00:33.275215Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.304691Z", "completed_at": "2025-08-05T14:00:33.304702Z"}], "thread_id": "Thread-31", "execution_time": 0.3462259769439697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.213711Z", "completed_at": "2025-08-05T14:00:33.275820Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.305584Z", "completed_at": "2025-08-05T14:00:33.305592Z"}], "thread_id": "Thread-34", "execution_time": 0.34589314460754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.218985Z", "completed_at": "2025-08-05T14:00:33.276601Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.306446Z", "completed_at": "2025-08-05T14:00:33.306454Z"}], "thread_id": "Thread-33", "execution_time": 0.34612417221069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.225138Z", "completed_at": "2025-08-05T14:00:33.279583Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.308127Z", "completed_at": "2025-08-05T14:00:33.308136Z"}], "thread_id": "Thread-36", "execution_time": 0.3471839427947998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.235932Z", "completed_at": "2025-08-05T14:00:33.280610Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.308960Z", "completed_at": "2025-08-05T14:00:33.308969Z"}], "thread_id": "Thread-38", "execution_time": 0.34107136726379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.229737Z", "completed_at": "2025-08-05T14:00:33.281181Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.309824Z", "completed_at": "2025-08-05T14:00:33.309834Z"}], "thread_id": "Thread-39", "execution_time": 0.3426663875579834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.240682Z", "completed_at": "2025-08-05T14:00:33.282851Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.310844Z", "completed_at": "2025-08-05T14:00:33.310857Z"}], "thread_id": "Thread-40", "execution_time": 0.3411111831665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_cl_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.245366Z", "completed_at": "2025-08-05T14:00:33.284173Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.312354Z", "completed_at": "2025-08-05T14:00:33.312365Z"}], "thread_id": "Thread-35", "execution_time": 0.34182095527648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.327730Z", "completed_at": "2025-08-05T14:00:33.362357Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.378827Z", "completed_at": "2025-08-05T14:00:33.378842Z"}], "thread_id": "Thread-1", "execution_time": 0.0954897403717041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.336979Z", "completed_at": "2025-08-05T14:00:33.371887Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.399697Z", "completed_at": "2025-08-05T14:00:33.399711Z"}], "thread_id": "Thread-2", "execution_time": 0.11018705368041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.345610Z", "completed_at": "2025-08-05T14:00:33.376159Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.429896Z", "completed_at": "2025-08-05T14:00:33.429914Z"}], "thread_id": "Thread-3", "execution_time": 0.12969183921813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.357711Z", "completed_at": "2025-08-05T14:00:33.379861Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.445613Z", "completed_at": "2025-08-05T14:00:33.445627Z"}], "thread_id": "Thread-5", "execution_time": 0.1319582462310791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.352906Z", "completed_at": "2025-08-05T14:00:33.380451Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.446560Z", "completed_at": "2025-08-05T14:00:33.446572Z"}], "thread_id": "Thread-4", "execution_time": 0.13917255401611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.364956Z", "completed_at": "2025-08-05T14:00:33.400700Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.450196Z", "completed_at": "2025-08-05T14:00:33.450204Z"}], "thread_id": "Thread-6", "execution_time": 0.13413023948669434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_ip\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere peer_ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.385692Z", "completed_at": "2025-08-05T14:00:33.448038Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.459425Z", "completed_at": "2025-08-05T14:00:33.459437Z"}], "thread_id": "Thread-8", "execution_time": 0.12453293800354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.390322Z", "completed_at": "2025-08-05T14:00:33.448720Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.460353Z", "completed_at": "2025-08-05T14:00:33.460362Z"}], "thread_id": "Thread-10", "execution_time": 0.12471985816955566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.381069Z", "completed_at": "2025-08-05T14:00:33.449507Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.461227Z", "completed_at": "2025-08-05T14:00:33.461235Z"}], "thread_id": "Thread-7", "execution_time": 0.1269702911376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.395039Z", "completed_at": "2025-08-05T14:00:33.451500Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.462195Z", "completed_at": "2025-08-05T14:00:33.462203Z"}], "thread_id": "Thread-21", "execution_time": 0.1205589771270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`yields_sdai_apy_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.407345Z", "completed_at": "2025-08-05T14:00:33.452383Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.463110Z", "completed_at": "2025-08-05T14:00:33.463118Z"}], "thread_id": "Thread-12", "execution_time": 0.12008953094482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_pct_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.401338Z", "completed_at": "2025-08-05T14:00:33.452933Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.463966Z", "completed_at": "2025-08-05T14:00:33.463974Z"}], "thread_id": "Thread-11", "execution_time": 0.12160658836364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`yields_sdai_apy_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.411825Z", "completed_at": "2025-08-05T14:00:33.453538Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.464819Z", "completed_at": "2025-08-05T14:00:33.464827Z"}], "thread_id": "Thread-22", "execution_time": 0.1211860179901123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_pct_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.416331Z", "completed_at": "2025-08-05T14:00:33.454834Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.465714Z", "completed_at": "2025-08-05T14:00:33.465722Z"}], "thread_id": "Thread-24", "execution_time": 0.12145209312438965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.421075Z", "completed_at": "2025-08-05T14:00:33.455471Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.466598Z", "completed_at": "2025-08-05T14:00:33.466608Z"}], "thread_id": "Thread-16", "execution_time": 0.12172365188598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.430913Z", "completed_at": "2025-08-05T14:00:33.456357Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.467498Z", "completed_at": "2025-08-05T14:00:33.467507Z"}], "thread_id": "Thread-27", "execution_time": 0.11660289764404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_power_consumption_top10", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        t1.date\n        ,IF(t1.country='' OR t1.country='Unknown', 'Unknown', t2.name) AS country\n        ,t1.power\n        ,ROW_NUMBER() OVER (PARTITION BY t1.date ORDER BY t1.power DESC) AS rank\n    FROM\n        `dbt`.`esg_country_power_consumption` t1\n    LEFT JOIN\n        `crawlers_data`.`country_codes` t2\n        ON\n        t2.\"alpha-2\" = t1.country\n)\n\nSELECT\n    date\n    ,IF(rank>10, 'Other', country) AS country\n    ,SUM(power) AS power\nFROM\n    gnosis_power_consumption\nGROUP BY \n    1, 2", "relation_name": "`dbt`.`esg_power_consumption_top10`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.425504Z", "completed_at": "2025-08-05T14:00:33.457360Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.468393Z", "completed_at": "2025-08-05T14:00:33.468401Z"}], "thread_id": "Thread-9", "execution_time": 0.11824178695678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_carbon_emissions", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        date\n        ,country\n        ,power\n    FROM\n        `dbt`.`esg_country_power_consumption`\n),\n\nember_data AS (\n    SELECT\n        \"Date\" AS month_date\n        ,\"Value\" AS value\n        ,lagInFrame(\"Value\") OVER (PARTITION BY \"ISO 3 code\" ORDER BY \"Date\" ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS lag_value\n        ,\"ISO 3 code\" AS country\n    FROM\n        `crawlers_data`.`ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n\n)\n\nSELECT\n    t1.date\n    ,SUM(t1.power * 24)/POWER(10,6) AS energy -- MWh\n    ,SUM(\n        t1.power/POWER(10,3)  -- power in kW\n        * 24 -- hours in day\n        * COALESCE(t3.value,t3.lag_value) -- CIF in gCO2/kWh\n        )/POWER(10,6) AS co2_emissions -- in tCO2e\n    ,AVG(COALESCE(t3.value,t3.lag_value)) AS mean_cif\nFROM\n    gnosis_power_consumption t1\nLEFT JOIN\n    `crawlers_data`.`country_codes` t2\n    ON\n    t2.\"alpha-2\" = t1.country\nINNER JOIN\n    ember_data t3\n    ON\n    t3.country = t2.\"alpha-3\"\n    AND\n    t3.month_date = toStartOfMonth(t1.date)\nGROUP BY \n    1", "relation_name": "`dbt`.`esg_carbon_emissions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.436325Z", "completed_at": "2025-08-05T14:00:33.458140Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.469285Z", "completed_at": "2025-08-05T14:00:33.469293Z"}], "thread_id": "Thread-17", "execution_time": 0.11774468421936035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_country_power_consumption`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.440841Z", "completed_at": "2025-08-05T14:00:33.458684Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.470159Z", "completed_at": "2025-08-05T14:00:33.470167Z"}], "thread_id": "Thread-32", "execution_time": 0.11797714233398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_country_power_consumption`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.489637Z", "completed_at": "2025-08-05T14:00:33.516098Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.518765Z", "completed_at": "2025-08-05T14:00:33.518779Z"}], "thread_id": "Thread-17", "execution_time": 0.04154157638549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_power_consumption_top10`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.484094Z", "completed_at": "2025-08-05T14:00:33.516834Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.521414Z", "completed_at": "2025-08-05T14:00:33.521426Z"}], "thread_id": "Thread-14", "execution_time": 0.04488182067871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_power_consumption_top10`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.506224Z", "completed_at": "2025-08-05T14:00:33.518146Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.522313Z", "completed_at": "2025-08-05T14:00:33.522320Z"}], "thread_id": "Thread-32", "execution_time": 0.04310488700866699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_carbon_emissions`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.499676Z", "completed_at": "2025-08-05T14:00:33.519688Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.523343Z", "completed_at": "2025-08-05T14:00:33.523351Z"}], "thread_id": "Thread-13", "execution_time": 0.044783592224121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rank\nfrom `dbt`.`esg_power_consumption_top10`\nwhere rank is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.494740Z", "completed_at": "2025-08-05T14:00:33.520258Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.524212Z", "completed_at": "2025-08-05T14:00:33.524224Z"}], "thread_id": "Thread-19", "execution_time": 0.046334028244018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect power\nfrom `dbt`.`esg_power_consumption_top10`\nwhere power is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T14:00:33.510904Z", "completed_at": "2025-08-05T14:00:33.520816Z"}, {"name": "execute", "started_at": "2025-08-05T14:00:33.525119Z", "completed_at": "2025-08-05T14:00:33.525127Z"}], "thread_id": "Thread-25", "execution_time": 0.045281171798706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_carbon_emissions`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 5.400161266326904, "args": {"static": false, "log_format": "default", "skip_nodes_if_on_run_start_fails": false, "introspect": true, "printer_width": 80, "require_batched_execution_for_custom_microbatch_strategy": false, "profiles_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "send_anonymous_usage_stats": true, "compile": true, "partial_parse_file_diff": true, "cache_selected_only": false, "vars": {}, "log_level": "info", "partial_parse": true, "version_check": true, "strict_mode": false, "state_modified_compare_more_unrendered_values": false, "use_colors": true, "select": [], "which": "generate", "state_modified_compare_vars": false, "log_format_file": "debug", "require_nested_cumulative_type_params": false, "write_json": true, "exclude": [], "quiet": false, "populate_cache": true, "defer": false, "indirect_selection": "eager", "show_resource_report": false, "use_colors_file": true, "static_parser": true, "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": false, "empty_catalog": false, "require_explicit_package_overrides_for_builtin_materializations": true, "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false, "log_file_max_bytes": 10485760, "print": true, "favor_state": false, "invocation_command": "dbt docs generate", "log_path": "/home/runner/work/dbt-cerebro/dbt-cerebro/logs", "project_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "macro_debugging": false, "log_level_file": "debug"}}