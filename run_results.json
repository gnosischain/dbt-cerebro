{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-08-22T20:29:22.789056Z", "invocation_id": "26691ead-f5da-4e53-8f80-645f5fa1ed33", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.303320Z", "completed_at": "2025-08-22T20:29:19.348809Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.486228Z", "completed_at": "2025-08-22T20:29:19.486252Z"}], "thread_id": "Thread-1", "execution_time": 0.2106945514678955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_topology_latest", "compiled": true, "compiled_code": "SELECT\n    protocol,\n    date,\n    peer_discovery_id_prefix,\n    peer_client,\n    peer_city,\n    peer_country,\n    peer_org,\n    peer_lat,\n    peer_lon,\n    neighbor_discovery_id_prefix,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    neighbor_lat,\n    neighbor_lon,\n    cnt\nFROM dbt.fct_p2p_topology_latest\nWHERE peer_lat != '' AND neighbor_lat != ''\nORDER BY protocol DESC", "relation_name": "`dbt`.`api_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.321237Z", "completed_at": "2025-08-22T20:29:19.364633Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.511706Z", "completed_at": "2025-08-22T20:29:19.511721Z"}], "thread_id": "Thread-2", "execution_time": 0.23369860649108887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__attestations", "compiled": true, "compiled_code": "SELECT\n   slot,\n    attestation_index,\n    aggregation_bits,\n    signature,\n    attestation_slot,\n    committee_index,\n    beacon_block_root,\n    source_epoch,\n    source_root,\n    target_epoch,\n    target_root,\n    slot_timestamp\nFROM \n    `consensus`.`attestations` FINAL", "relation_name": "`dbt`.`stg_consensus__attestations`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.330950Z", "completed_at": "2025-08-22T20:29:19.372640Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.537414Z", "completed_at": "2025-08-22T20:29:19.537431Z"}], "thread_id": "Thread-3", "execution_time": 0.25751781463623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__blob_commitments", "compiled": true, "compiled_code": "SELECT\n   slot,\n    commitment_index,\n    commitment,\n    slot_timestamp\nFROM \n    `consensus`.`blob_commitments` FINAL", "relation_name": "`dbt`.`stg_consensus__blob_commitments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.344614Z", "completed_at": "2025-08-22T20:29:19.485369Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.560522Z", "completed_at": "2025-08-22T20:29:19.560540Z"}], "thread_id": "Thread-4", "execution_time": 0.2757387161254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__blocks", "compiled": true, "compiled_code": "SELECT\n   slot,\n    proposer_index,\n    parent_root,\n    state_root,\n    signature,\n    version,\n    randao_reveal,\n    graffiti,\n    eth1_deposit_root,\n    eth1_deposit_count,\n    eth1_block_hash,\n    sync_aggregate_participation,\n    withdrawals_count,\n    blob_kzg_commitments_count,\n    execution_requests_count,\n    slot_timestamp\nFROM \n    `consensus`.`blocks` FINAL", "relation_name": "`dbt`.`stg_consensus__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.350026Z", "completed_at": "2025-08-22T20:29:19.494049Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.563916Z", "completed_at": "2025-08-22T20:29:19.563927Z"}], "thread_id": "Thread-5", "execution_time": 0.27715373039245605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__deposits", "compiled": true, "compiled_code": "SELECT\n   slot,\n    deposit_index,\n    pubkey,\n    withdrawal_credentials,\n    amount,\n    signature,\n    proof,\n    slot_timestamp\nFROM \n    `consensus`.`deposits` FINAL", "relation_name": "`dbt`.`stg_consensus__deposits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.354817Z", "completed_at": "2025-08-22T20:29:19.502737Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.565926Z", "completed_at": "2025-08-22T20:29:19.565938Z"}], "thread_id": "Thread-6", "execution_time": 0.2772395610809326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__execution_requests", "compiled": true, "compiled_code": "SELECT\n    slot,\n    payload,\n    deposits_count,\n    withdrawals_count,\n    consolidations_count,\n    slot_timestamp\nFROM \n    `consensus`.`execution_requests` FINAL", "relation_name": "`dbt`.`stg_consensus__execution_requests`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.360996Z", "completed_at": "2025-08-22T20:29:19.516306Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.570204Z", "completed_at": "2025-08-22T20:29:19.570216Z"}], "thread_id": "Thread-7", "execution_time": 0.2776961326599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__rewards", "compiled": true, "compiled_code": "SELECT\n    slot\n    proposer_index,\n    total,\n    attestations,\n    sync_aggregate,\n    proposer_slashings,\n    attester_slashings,\n    slot_timestamp\nFROM \n    `consensus`.`rewards` FINAL", "relation_name": "`dbt`.`stg_consensus__rewards`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.366568Z", "completed_at": "2025-08-22T20:29:19.524202Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.572927Z", "completed_at": "2025-08-22T20:29:19.572936Z"}], "thread_id": "Thread-8", "execution_time": 0.27848219871520996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__specs", "compiled": true, "compiled_code": "SELECT\n    parameter_name,\n    parameter_value,\nFROM \n    `consensus`.`specs` FINAL", "relation_name": "`dbt`.`stg_consensus__specs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.373261Z", "completed_at": "2025-08-22T20:29:19.542247Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.579129Z", "completed_at": "2025-08-22T20:29:19.579138Z"}], "thread_id": "Thread-9", "execution_time": 0.280991792678833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__time_helpers", "compiled": true, "compiled_code": "SELECT\n    genesis_time_unix,\n    seconds_per_slot,\n    slots_per_epoch\nFROM \n    `consensus`.`time_helpers` FINAL", "relation_name": "`dbt`.`stg_consensus__time_helpers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.378260Z", "completed_at": "2025-08-22T20:29:19.546946Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.580779Z", "completed_at": "2025-08-22T20:29:19.580787Z"}], "thread_id": "Thread-10", "execution_time": 0.2813265323638916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__validators", "compiled": true, "compiled_code": "SELECT\n    slot,\n    validator_index,\n    balance,\n    status,\n    pubkey,\n    withdrawal_credentials,\n    effective_balance,\n    slashed,\n    activation_eligibility_epoch,\n    activation_epoch,\n    exit_epoch,\n    withdrawable_epoch,\n    slot_timestamp\nFROM \n    `consensus`.`validators` FINAL", "relation_name": "`dbt`.`stg_consensus__validators`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.547705Z", "completed_at": "2025-08-22T20:29:19.549738Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.581697Z", "completed_at": "2025-08-22T20:29:19.581706Z"}], "thread_id": "Thread-31", "execution_time": 0.24195599555969238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.contracts_abi", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.550546Z", "completed_at": "2025-08-22T20:29:19.552666Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.583126Z", "completed_at": "2025-08-22T20:29:19.583138Z"}], "thread_id": "Thread-32", "execution_time": 0.2420964241027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.event_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.382959Z", "completed_at": "2025-08-22T20:29:19.553336Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.584009Z", "completed_at": "2025-08-22T20:29:19.584017Z"}], "thread_id": "Thread-11", "execution_time": 0.28266310691833496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__withdrawals", "compiled": true, "compiled_code": "SELECT\n    slot,\n    block_number,\n    block_hash,\n    withdrawal_index,\n    validator_index,\n    address,\n    amount,\n    slot_timestamp\nFROM \n    `consensus`.`withdrawals` FINAL", "relation_name": "`dbt`.`stg_consensus__withdrawals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.553898Z", "completed_at": "2025-08-22T20:29:19.557456Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.584871Z", "completed_at": "2025-08-22T20:29:19.584879Z"}], "thread_id": "Thread-33", "execution_time": 0.24313044548034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.function_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.387499Z", "completed_at": "2025-08-22T20:29:19.558861Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.585766Z", "completed_at": "2025-08-22T20:29:19.585774Z"}], "thread_id": "Thread-12", "execution_time": 0.2733008861541748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__ipinfo", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    ip,\n    hostname,\n    city,\n    region,\n    country,\n    loc,\n    org,\n    postal,\n    timezone,\n    asn,\n    company,\n    carrier,\n    is_bogon,\n    is_mobile,\n    multiIf(\n      lowerUTF8(org) ILIKE '%amazon web services%' OR lowerUTF8(org) ILIKE '%amazon data services%' OR lowerUTF8(org) ILIKE '%aws%' OR lowerUTF8(org) ILIKE '%amazon.com%', 'AWS',\n      (lowerUTF8(org) ILIKE '%google cloud%' OR lowerUTF8(org) ILIKE '%google llc%' OR lowerUTF8(org) ILIKE '%gcp%' OR lowerUTF8(org) ILIKE '%google%') AND lowerUTF8(org) NOT ILIKE '%fiber%', 'Google',\n      lowerUTF8(org) ILIKE '%microsoft azure%' OR lowerUTF8(org) ILIKE '%azure%' OR lowerUTF8(org) ILIKE '%microsoft corporation%' OR lowerUTF8(org) ILIKE '%msft%', 'Azure',\n      lowerUTF8(org) ILIKE '%oracle cloud%' OR lowerUTF8(org) ILIKE '%oracle america%' OR lowerUTF8(org) ILIKE '%oci%', 'Oracle Cloud',\n      lowerUTF8(org) ILIKE '%alibaba cloud%' OR lowerUTF8(org) ILIKE '%aliyun%' OR lowerUTF8(org) ILIKE '%alibaba%', 'Alibaba Cloud',\n\n      lowerUTF8(org) ILIKE '%cloudflare%', 'Cloudflare',\n      (lowerUTF8(org) ILIKE '%akamai%' AND lowerUTF8(org) NOT ILIKE '%linode%'), 'Akamai',\n      lowerUTF8(org) ILIKE '%fastly%', 'Fastly',\n\n      lowerUTF8(org) ILIKE '%digitalocean%' OR lowerUTF8(org) ILIKE '%digital ocean%', 'DigitalOcean',\n      lowerUTF8(org) ILIKE '%ovh%', 'OVHcloud',\n      lowerUTF8(org) ILIKE '%hetzner%', 'Hetzner',\n      lowerUTF8(org) ILIKE '%scaleway%' OR lowerUTF8(org) ILIKE '%online s.a.s%' OR lowerUTF8(org) ILIKE '%iliad%', 'Scaleway',\n      lowerUTF8(org) ILIKE '%linode%', 'Linode',\n      lowerUTF8(org) ILIKE '%vultr%' OR lowerUTF8(org) ILIKE '%choopa%', 'Vultr',\n      lowerUTF8(org) ILIKE '%equinix metal%' OR lowerUTF8(org) ILIKE '%packet host%' OR lowerUTF8(org) ILIKE '%packet, inc%', 'Equinix Metal',\n      lowerUTF8(org) ILIKE '%fly.io%' OR lowerUTF8(org) ILIKE '%fly io%', 'Fly.io',\n      lowerUTF8(org) ILIKE '%netlify%', 'Netlify',\n      lowerUTF8(org) ILIKE '%vercel%' OR lowerUTF8(org) ILIKE '%zeit%', 'Vercel',\n      lowerUTF8(org) ILIKE '%heroku%', 'Heroku',\n      lowerUTF8(org) ILIKE '%render.com%' OR lowerUTF8(org) ILIKE '% render %', 'Render',\n\n      -- Carrier / transit networks (keep as its own bucket; change to 'Public ISP (Home/Office)' if you prefer)\n      lowerUTF8(org) ILIKE '%cogent%' OR lowerUTF8(org) ILIKE '%lumen%' OR lowerUTF8(org) ILIKE '%level 3%' OR lowerUTF8(org) ILIKE '%centurylink%' OR\n      lowerUTF8(org) ILIKE '%telia carrier%' OR lowerUTF8(org) ILIKE '%arelion%' OR lowerUTF8(org) ILIKE '%gtt%' OR lowerUTF8(org) ILIKE '%hurricane electric%' OR\n      lowerUTF8(org) ILIKE '%he.net%' OR lowerUTF8(org) ILIKE '%ntt communications%' OR lowerUTF8(org) ILIKE '%tata communications%' OR lowerUTF8(org) ILIKE '%zayo%' OR\n      lowerUTF8(org) ILIKE '%kddi%' OR lowerUTF8(org) ILIKE '%sparkle%' OR lowerUTF8(org) ILIKE '%backbone%' OR lowerUTF8(org) ILIKE '%chinanet-backbone%', 'Carrier/Transit',\n\n      -- Education / government \u2192 treat like public access\n      lowerUTF8(org) ILIKE '%university%' OR lowerUTF8(org) ILIKE '%college%' OR lowerUTF8(org) ILIKE '%school%' OR lowerUTF8(org) ILIKE '%ministry%' OR lowerUTF8(org) ILIKE '%government%', 'Public ISP (Home/Office)',\n\n      -- Generic hosting/CDN hints\n      lowerUTF8(org) ILIKE '%datacenter%' OR lowerUTF8(org) ILIKE '%data center%' OR lowerUTF8(org) ILIKE '%colo%' OR lowerUTF8(org) ILIKE '%hosting%' OR lowerUTF8(org) ILIKE '%vps%' OR lowerUTF8(org) ILIKE '%server%' OR lowerUTF8(org) ILIKE '%incapsula%' OR lowerUTF8(org) ILIKE '%imperva%', 'Hosting/CDN (Other)',\n\n      -- Fallback for residential & office ISPs\n      lowerUTF8(org) ILIKE '%telecom%' OR lowerUTF8(org) ILIKE '%telekom%' OR lowerUTF8(org) ILIKE '%telecommunications%' OR lowerUTF8(org) ILIKE '%communications%' OR lowerUTF8(org) ILIKE '%wireless%' OR\n      lowerUTF8(org) ILIKE '%cable%' OR lowerUTF8(org) ILIKE '%broadband%' OR lowerUTF8(org) ILIKE '%internet%' OR lowerUTF8(org) ILIKE '%fibre%' OR lowerUTF8(org) ILIKE '%fiber%' OR lowerUTF8(org) ILIKE '%mobile%', 'Public ISP (Home/Office)',\n      lowerUTF8(org) = '', 'Unknown',\n      'Public ISP (Home/Office)'\n  ) AS generic_provider\n  FROM `crawlers_data`.`ipinfo` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_crawlers_data__ipinfo`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.394937Z", "completed_at": "2025-08-22T20:29:19.559831Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.586634Z", "completed_at": "2025-08-22T20:29:19.586641Z"}], "thread_id": "Thread-14", "execution_time": 0.2724752426147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    cloud_provider,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_cloud_provider_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.398696Z", "completed_at": "2025-08-22T20:29:19.561742Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.587689Z", "completed_at": "2025-08-22T20:29:19.587698Z"}], "thread_id": "Thread-15", "execution_time": 0.2720487117767334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    country_name,\n    country,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_countries_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_countries_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.391454Z", "completed_at": "2025-08-22T20:29:19.562404Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.589263Z", "completed_at": "2025-08-22T20:29:19.589272Z"}], "thread_id": "Thread-13", "execution_time": 0.2758829593658447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    agent_version_semver,\n    agent_version_semver_str,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_agent_semvers_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.487280Z", "completed_at": "2025-08-22T20:29:19.563252Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.590192Z", "completed_at": "2025-08-22T20:29:19.590200Z"}], "thread_id": "Thread-16", "execution_time": 0.27381420135498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    crawl_created_at,\n    quic_support,\n    __count,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_quic_support_over_7d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.491342Z", "completed_at": "2025-08-22T20:29:19.564852Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.591924Z", "completed_at": "2025-08-22T20:29:19.591934Z"}], "thread_id": "Thread-17", "execution_time": 0.27424073219299316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_consensus_power", "compiled": true, "compiled_code": "WITH consensus_power AS (\n    SELECT\n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Lighthouse', 'Lighthouse', 'Lighthouse', 'Teku', 'Teku', 'Teku', 'Lodestar', 'Lodestar', 'Lodestar', 'Nimbus', 'Nimbus', 'Nimbus', 'Prysm', 'Prysm', 'Prysm']) AS client,\n            arrayJoin([2.75, 3.14, 18.84, 3.71, 3.32, 27.46, 3.14, 3.89, 33.55, 1.67, 2.08, 17.11, 3.51, 2.87, 24.33]) AS mean\n    )\n)\n\nSELECT * FROM consensus_power", "relation_name": "`dbt`.`stg_esg_consensus_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.494709Z", "completed_at": "2025-08-22T20:29:19.566797Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.592992Z", "completed_at": "2025-08-22T20:29:19.593003Z"}], "thread_id": "Thread-18", "execution_time": 0.2745697498321533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_execution_power", "compiled": true, "compiled_code": "WITH execution_power AS (\n    SELECT \n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind']) AS client,\n            arrayJoin([18.6, 17.59, 44.62, 18.6, 17.59, 44.62]) AS mean\n            \n    )\n)\n\nSELECT * FROM execution_power", "relation_name": "`dbt`.`stg_esg_execution_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.500267Z", "completed_at": "2025-08-22T20:29:19.567556Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.593886Z", "completed_at": "2025-08-22T20:29:19.593895Z"}], "thread_id": "Thread-20", "execution_time": 0.27347612380981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_idle_electric_power", "compiled": true, "compiled_code": "WITH idle_electric_power AS (\n    SELECT \n        type\n        ,mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([3.66, 25.04, 78.17]) AS mean\n    )\n)\n\nSELECT * FROM idle_electric_power", "relation_name": "`dbt`.`stg_esg_idle_electric_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.497528Z", "completed_at": "2025-08-22T20:29:19.568101Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.594759Z", "completed_at": "2025-08-22T20:29:19.594770Z"}], "thread_id": "Thread-19", "execution_time": 0.2750577926635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_hardware_config", "compiled": true, "compiled_code": "WITH hardware_config AS (\n    SELECT\n        type\n        ,cpu\n        ,cores_threads\n        ,architecture\n        ,ram\n        ,storage\n        ,gpu\n        ,psu\n        ,\"case\"\n        ,os\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin(['Intel i5-1135G7', 'Intel i5-10400', 'AMD 3970X']) AS cpu,\n            arrayJoin(['4/8', '6/12', '32/64']) AS cores_threads,\n            arrayJoin(['x86/x64', 'x86/x64', 'x86/x64']) AS architecture,\n            arrayJoin(['16 GB', '64 GB', '256 GB']) AS ram,\n            arrayJoin(['2 TB SSD', '2TB SSD', '2TB SSD']) AS storage,\n            arrayJoin(['Onboard', 'Onboard', 'AM 6970']) AS gpu,\n            arrayJoin(['65 Watt', '650 Watt', '1000 Watt']) AS psu,\n            arrayJoin(['Integrated', 'Custom', 'Custom']) AS \"case\",\n            arrayJoin(['Ubuntu 20.04', 'Ubuntu 21', 'Ubuntu 20.04']) AS os\n    )\n)\n\nSELECT * FROM hardware_config", "relation_name": "`dbt`.`stg_esg_hardware_config`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.503399Z", "completed_at": "2025-08-22T20:29:19.569459Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.595690Z", "completed_at": "2025-08-22T20:29:19.595699Z"}], "thread_id": "Thread-21", "execution_time": 0.2705211639404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_node_distribution", "compiled": true, "compiled_code": "WITH node_distribution AS (\n    SELECT \n        type\n        ,distribution\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([0.25, 0.50, 0.25]) AS distribution\n    )\n)\n\nSELECT * FROM node_distribution", "relation_name": "`dbt`.`stg_esg_node_distribution`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.507145Z", "completed_at": "2025-08-22T20:29:19.571955Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.597480Z", "completed_at": "2025-08-22T20:29:19.597489Z"}], "thread_id": "Thread-22", "execution_time": 0.2715721130371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__blocks", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT \n        block_number,\n        block_hash,\n        parent_hash,\n        uncles_hash,\n        author,\n        state_root,\n        transactions_root,\n        receipts_root,\n        gas_used,\n        gas_limit,\n        extra_data,\n        size,\n        mix_hash,\n        nonce,\n        base_fee_per_gas,\n        withdrawals_root,\n        block_timestamp\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n)\n\nSELECT\n    block_number,\n    block_hash,\n    parent_hash,\n    uncles_hash,\n    CONCAT('0x',author) AS author,\n    state_root,\n    transactions_root,\n    receipts_root,\n    gas_used,\n    gas_limit,\n    extra_data,\n    \narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(coalesce(extra_data, '')), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(coalesce(extra_data, '')), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(coalesce(extra_data, ''))) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data,\n    size,\n    mix_hash,\n    nonce,\n    base_fee_per_gas,\n    withdrawals_root,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.520903Z", "completed_at": "2025-08-22T20:29:19.573893Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.598476Z", "completed_at": "2025-08-22T20:29:19.598484Z"}], "thread_id": "Thread-25", "execution_time": 0.2691514492034912, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula_discv4`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.512800Z", "completed_at": "2025-08-22T20:29:19.574643Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.599400Z", "completed_at": "2025-08-22T20:29:19.599408Z"}], "thread_id": "Thread-23", "execution_time": 0.2721531391143799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__storage_diffs", "compiled": true, "compiled_code": "WITH\n\n\nsource AS (\n    SELECT \n        block_number,\n        transaction_index,\n        CONCAT('0x', transaction_hash) AS transaction_hash,\n        CONCAT('0x', address) AS address,\n        slot,\n        from_value,\n        to_value,\n        block_timestamp\n    FROM \n        `execution`.`storage_diffs`\n)\n\nSELECT\n    *\nFROM source", "relation_name": "`dbt`.`stg_execution__storage_diffs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.517066Z", "completed_at": "2025-08-22T20:29:19.575956Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.600295Z", "completed_at": "2025-08-22T20:29:19.600303Z"}], "thread_id": "Thread-24", "execution_time": 0.27234530448913574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__transactions", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT\n        block_number,\n        transaction_index,\n        transaction_hash,\n        nonce,\n        from_address,\n        to_address,\n        value_string,\n        input,\n        gas_limit,\n        gas_used,\n        gas_price,\n        transaction_type,\n        max_priority_fee_per_gas,\n        max_fee_per_gas,\n        success,\n        n_input_bytes,\n        n_input_zero_bytes,\n        n_input_nonzero_bytes,\n        n_rlp_bytes,\n        r,\n        s,\n        v,\n        block_hash,\n        block_timestamp\n    FROM `execution`.`transactions` FINAL\n)\n\nSELECT\n    block_number,\n    transaction_index,\n    transaction_hash,\n    nonce,\n    CONCAT('0x',from_address) AS from_address,\n    IF(to_address IS NULL, NULL, CONCAT('0x',to_address)) AS to_address,\n    CAST(value_string AS UInt256) AS value,\n    input,\n    gas_limit,\n    gas_used,\n    gas_price,\n    transaction_type,\n    max_priority_fee_per_gas,\n    max_fee_per_gas,\n    success,\n    n_input_bytes,\n    n_input_zero_bytes,\n    n_input_nonzero_bytes,\n    n_rlp_bytes,\n    r,\n    s,\n    v,\n    block_hash,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__transactions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.524942Z", "completed_at": "2025-08-22T20:29:19.576601Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.601132Z", "completed_at": "2025-08-22T20:29:19.601143Z"}], "thread_id": "Thread-26", "execution_time": 0.2711164951324463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula_discv4`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.528494Z", "completed_at": "2025-08-22T20:29:19.577191Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.602010Z", "completed_at": "2025-08-22T20:29:19.602018Z"}], "thread_id": "Thread-27", "execution_time": 0.26653575897216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula_discv4`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.534059Z", "completed_at": "2025-08-22T20:29:19.578433Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.603630Z", "completed_at": "2025-08-22T20:29:19.603643Z"}], "thread_id": "Thread-28", "execution_time": 0.2672848701477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.538635Z", "completed_at": "2025-08-22T20:29:19.580182Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.604777Z", "completed_at": "2025-08-22T20:29:19.604788Z"}], "thread_id": "Thread-29", "execution_time": 0.26702094078063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.542868Z", "completed_at": "2025-08-22T20:29:19.582532Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.607380Z", "completed_at": "2025-08-22T20:29:19.607388Z"}], "thread_id": "Thread-30", "execution_time": 0.2683534622192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.655299Z", "completed_at": "2025-08-22T20:29:19.704700Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.877477Z", "completed_at": "2025-08-22T20:29:19.877493Z"}], "thread_id": "Thread-35", "execution_time": 0.28089261054992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_attestations_daily", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,slot - attestation_slot AS inclusion_delay\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__attestations`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_attestations_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_attestations_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.667211Z", "completed_at": "2025-08-22T20:29:19.707855Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.905683Z", "completed_at": "2025-08-22T20:29:19.905698Z"}], "thread_id": "Thread-37", "execution_time": 0.302919864654541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_blob_commitments_daily", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__blob_commitments`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blob_commitments_daily`\n    )\n  \n\nGROUP BY 1", "relation_name": "`dbt`.`int_consensus_blob_commitments_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.681310Z", "completed_at": "2025-08-22T20:29:19.785873Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.924845Z", "completed_at": "2025-08-22T20:29:19.924860Z"}], "thread_id": "Thread-39", "execution_time": 0.30930423736572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_graffiti_daily", "compiled": true, "compiled_code": "\n\nWITH\n    -- Canonical lists\n    ['nethermind','erigon','geth','besu','reth'] AS el_keys,\n    ['Nethermind','Erigon','Geth','Besu','Reth'] AS el_names,\n    ['lighthouse','teku','prysm','lodestar','nimbus'] AS cl_keys,\n    ['Lighthouse','Teku','Prysm','Lodestar','Nimbus'] AS cl_names,\n\n    -- Platform/hosting brands \n    ['dappnode','avado','allnodes','twinstake','stakewise','gateway','kleros',\n     'filoozom','kpk-validators','hopr','digitalconsultantsllc',\n     'synthex'] AS brand_keys,\n    ['DappNode','Avado','Allnodes','Twinstake','StakeWise','gateway.fm','kleros.io',\n     'filoozom.eth','kpk-validators','HOPR','DigitalConsultantsLLC.xyz',\n     'Synthex'] AS brand_names,\n\n\nfinal AS (\n    SELECT\n        date\n        ,graffiti\n        ,cnt\n        -- Lowercased text to search in\n        ,lowerUTF8(graffiti) AS g\n\n        -- Detect any brand first (highest precedence)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, brand_keys) AS brands_found\n        ,if(length(brands_found) > 0,\n            arrayElement(brand_names, indexOf(brand_keys, brands_found[1])),\n            null) AS brand_label\n\n        -- Detect EL/CL clients (order-insensitive, separator-agnostic)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, el_keys) AS el_found\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, cl_keys) AS cl_found\n\n        -- Pick the first match per side by priority order above\n        ,if(length(el_found) > 0,\n            arrayElement(el_names, indexOf(el_keys, el_found[1])),\n            null) AS el_label\n\n        ,if(length(cl_found) > 0,\n            arrayElement(cl_names, indexOf(cl_keys, cl_found[1])),\n            null) AS cl_label\n\n        -- Final label priority:\n        -- 1) Brand/platform if any\n        -- 2) EL+CL combo if both found\n        -- 3) Single client if only one side found\n        -- 4) Other\n        ,coalesce(\n            brand_label,\n            if(el_label IS NOT NULL AND cl_label IS NOT NULL, concat(el_label, '+', cl_label), null),\n            el_label,\n            cl_label,\n            if(graffiti = 'None', graffiti, null),\n            'Other'\n        ) AS label\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date\n            ,IF(graffiti='0x0000000000000000000000000000000000000000000000000000000000000000', \n                'None', \n                unhex(right(graffiti,-2))\n            ) AS graffiti\n            ,COUNT(*) AS cnt\n        FROM `dbt`.`stg_consensus__blocks`\n        WHERE\n            slot_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_graffiti_daily`\n    )\n  \n\n        GROUP BY 1, 2\n    )\n)\n\nSELECT\n    date\n    ,graffiti\n    ,label\n    ,cnt\nFROM final", "relation_name": "`dbt`.`int_consensus_graffiti_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.690319Z", "completed_at": "2025-08-22T20:29:19.819851Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.931647Z", "completed_at": "2025-08-22T20:29:19.931658Z"}], "thread_id": "Thread-34", "execution_time": 0.3110651969909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_deposits_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(amount/POWER(10,9)) AS total_amount\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__deposits`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_deposits_daily`\n    )\n  \n\nGROUP BY 1", "relation_name": "`dbt`.`int_consensus_deposits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.709029Z", "completed_at": "2025-08-22T20:29:19.912457Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.946368Z", "completed_at": "2025-08-22T20:29:19.946378Z"}], "thread_id": "Thread-2", "execution_time": 0.3108081817626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_forks", "compiled": true, "compiled_code": "WITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nfork_version AS (\n    SELECT\n        IF(fork_name='GENESIS', 'PHASE0', fork_name) AS fork_name\n        ,parameter_value\n    FROM (\n        SELECT\n            arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n            ,parameter_value\n        FROM `dbt`.`stg_consensus__specs`\n        WHERE parameter_name LIKE '%_FORK_VERSION'\n    )\n),\n\nfork_epoch AS (\n    SELECT\n        arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n        ,parameter_value\n    FROM `dbt`.`stg_consensus__specs`\n    WHERE parameter_name LIKE '%_FORK_EPOCH'\n\n    UNION ALL \n\n    SELECT 'PHASE0' AS fork_name, '0' AS parameter_value \n)\n\nSELECT \n  t1.cl_fork_name AS fork_name\n  ,t2.parameter_value AS fork_version \n  ,t1.fork_digest AS fork_digest\n  ,t3.parameter_value AS fork_epoch \n  ,IF(CAST(t3.parameter_value AS Int) = -1, NULL,\n    addSeconds(\n          toDateTime(t4.genesis_time_unix, 'UTC'),\n          CAST(t3.parameter_value AS Int) * (t4.seconds_per_slot * t4.slots_per_epoch )\n      )\n   ) AS fork_time\nFROM \n  fork_digests t1\nINNER JOIN\n  fork_version t2\n  ON LOWER(t2.fork_name) = LOWER(t1.cl_fork_name)\nINNER JOIN\n  fork_epoch t3\n  ON LOWER(t3.fork_name) = LOWER(t1.cl_fork_name)\nCROSS JOIN `dbt`.`stg_consensus__time_helpers` t4", "relation_name": "`dbt`.`fct_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.713791Z", "completed_at": "2025-08-22T20:29:19.916487Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.948590Z", "completed_at": "2025-08-22T20:29:19.948602Z"}], "thread_id": "Thread-36", "execution_time": 0.3122682571411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_blocks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ntime_helpers AS (\n    SELECT\n        genesis_time_unix,\n        seconds_per_slot\n    FROM \n        `dbt`.`stg_consensus__time_helpers`\n)\n\nSELECT\n    date\n    ,cnt AS blocks_produced\n    ,CASE\n        WHEN toStartOfDay(toDateTime(genesis_time_unix)) = date \n            THEN CAST((86400 - toUnixTimestamp(toDateTime(genesis_time_unix)) % 86400) / seconds_per_slot - cnt AS UInt64)\n        ELSE CAST(86400 / seconds_per_slot - cnt AS UInt64)\n    END AS blocks_missed\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_consensus__blocks`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blocks_daily`\n    )\n  \n\n    GROUP BY 1\n) t1\nCROSS JOIN time_helpers t2", "relation_name": "`dbt`.`int_consensus_blocks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.719593Z", "completed_at": "2025-08-22T20:29:19.917383Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.949538Z", "completed_at": "2025-08-22T20:29:19.949549Z"}], "thread_id": "Thread-38", "execution_time": 0.3116462230682373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_credentials_daily", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,leftUTF8(withdrawal_credentials, 4) AS credentials_type\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\n\n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_credentials_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.724359Z", "completed_at": "2025-08-22T20:29:19.918236Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.950986Z", "completed_at": "2025-08-22T20:29:19.950998Z"}], "thread_id": "Thread-32", "execution_time": 0.3123362064361572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_entry_queue_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nqueue_activation AS (\n    SELECT\n        validator_index\n        ,date\n        ,epoch_eligibility\n        ,epoch_activation\n        ,(epoch_activation - epoch_eligibility) * 16 * 5 /(60 * 60 * 24) AS activation_days\n    FROM (\n        SELECT \n            validator_index\n            ,toStartOfDay(argMin(slot_timestamp,slot)) AS date\n            ,argMin(activation_eligibility_epoch,slot) AS epoch_eligibility\n            ,argMin(activation_epoch,slot) AS epoch_activation\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE \n            activation_epoch < 18446744073709551615\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_entry_queue_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT\n    date\n    ,validator_count\n    ,q_activation[1] AS q05\n    ,q_activation[2] AS q10\n    ,q_activation[3] AS q25\n    ,q_activation[4] AS q50\n    ,q_activation[5] AS q75\n    ,q_activation[6] AS q90\n    ,q_activation[7] AS q95\n    ,mean\nFROM (\n    SELECT\n        date,\n        count() AS validator_count\n        ,quantilesTDigest(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(activation_days) AS q_activation\n        ,avg(activation_days) AS  mean\n    FROM queue_activation\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.729516Z", "completed_at": "2025-08-22T20:29:19.919115Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.951876Z", "completed_at": "2025-08-22T20:29:19.951888Z"}], "thread_id": "Thread-4", "execution_time": 0.31256890296936035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(balance/POWER(10,9)) AS balance\n    ,SUM(effective_balance/POWER(10,9)) AS effective_balance\nFROM `dbt`.`stg_consensus__validators`\nWHERE \n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_daily`\n    )\n  \n\nGROUP BY date", "relation_name": "`dbt`.`int_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.742490Z", "completed_at": "2025-08-22T20:29:19.920035Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.952764Z", "completed_at": "2025-08-22T20:29:19.952771Z"}], "thread_id": "Thread-40", "execution_time": 0.3121912479400635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_status_daily", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_validators_status_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.735433Z", "completed_at": "2025-08-22T20:29:19.920650Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.953650Z", "completed_at": "2025-08-22T20:29:19.953659Z"}], "thread_id": "Thread-11", "execution_time": 0.3137321472167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_dist_daily", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_dist_daily`\n    )\n  \n\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_validators_balances_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.747571Z", "completed_at": "2025-08-22T20:29:19.922002Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.954557Z", "completed_at": "2025-08-22T20:29:19.954565Z"}], "thread_id": "Thread-14", "execution_time": 0.3132619857788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i ->\n        if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n        range(greatest(length(param_types),1)*16)\n      ) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'), ''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  (\n                    arrayElement(\n                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                      j+1\n                    )\n                  ,\n                    replaceRegexpOne(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '\\\\[\\\\]$',\n                      ''\n                    )\n                  ,\n                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2\n                  ,\n                    substring(\n                      args_raw_hex,\n                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                      64\n                    )\n                  ,\n                    if(\n                      endsWith(\n                        arrayElement(\n                          arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                   ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                          j+1\n                        ),\n                        '[]'\n                      ),\n                      toJSONString(\n                        multiIf(\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'string',\n\n                            arrayMap(k ->\n                              replaceRegexpAll(\n                                reinterpretAsString(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2,\n                                        64\n                                      )\n                                    )))) * 2)\n                                    + 64\n                                    + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2),\n                                        64\n                                      )\n                                    )))) * 2\n                                    + k*64,\n                                    toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2) + 64 + k*64,\n                                        64\n                                      )\n                                    )))) * 2\n                                  )\n                                )),\n                                '\\0',''\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'bytes',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2),\n                                      64\n                                    )\n                                  )))) * 2)\n                                  + 64\n                                  + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2),\n                                      64\n                                    )\n                                  )))) * 2\n                                  + k*64,\n                                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2) + 64 + k*64,\n                                      64\n                                    )\n                                  )))) * 2\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'address',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2)) + 64 + k*64,\n                                    64\n                                  ),\n                                  25, 40\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'bytes32',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                      64\n                                    )\n                                  )))) * 2)) + 64 + k*64,\n                                  64\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'uint'\n                          ) OR startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'int'\n                          ) OR startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'bytes'\n                          ),\n\n                            arrayMap(k ->\n                              multiIf(\n                                startsWith(\n                                  replaceRegexpOne(\n                                    arrayElement(\n                                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                      j+1\n                                    ),\n                                    '\\\\[\\\\]$',\n                                    ''\n                                  ),\n                                  'uint'\n                                ) OR startsWith(\n                                  replaceRegexpOne(\n                                    arrayElement(\n                                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                      j+1\n                                    ),\n                                    '\\\\[\\\\]$',\n                                    ''\n                                  ),\n                                  'int'\n                                ),\n                                  toString(\n                                    reinterpretAsUInt256(\n                                      reverse(\n                                        unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(\n                                                args_raw_hex,\n                                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                                64\n                                              )\n                                            )))) * 2)) + 64 + k*64,\n                                            64\n                                          )\n                                        )\n                                      )\n                                    )\n                                  ),\n                                  concat(\n                                    '0x',\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2)) + 64 + k*64,\n                                      64\n                                    )\n                                  )\n                                ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          []\n                        )\n                      ),\n\n                      if(\n                        (arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) = 'string') OR\n                        (arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) = 'bytes') OR\n                        (startsWith(arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ), 'bytes') AND arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) != 'bytes32'),\n\n                        if(\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'string',\n                          replaceRegexpAll(\n                            reinterpretAsString(unhex(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                    64\n                                  )\n                                )))) * 2)) + 64,\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                )))) * 2\n                              )\n                            )),\n                            '\\0',''\n                          ),\n                          concat(\n                            '0x',\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                  64\n                                )\n                              )))) * 2)) + 64,\n                              toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                      64\n                                    )\n                                  )))) * 2),\n                                  64\n                                )\n                              )))) * 2\n                            )\n                          )\n                        ),\n\n                        multiIf(\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'bytes32',\n                            concat('0x', substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                              64\n                            )),\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'address',\n                            concat('0x', substring(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                64\n                              ),\n                              25, 40\n                            )),\n                          startsWith(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            'uint'\n                          ) OR startsWith(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            'int'\n                          ),\n                            toString(\n                              reinterpretAsUInt256(\n                                reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                    64\n                                  )\n                                ))\n                              )\n                            ),\n                          concat('0x', substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ))\n                        )\n                      )\n                    )\n                  ,\n                    range(\n                      length(\n                        ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())\n                      )\n                    )\n                  )\n                )\n              ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                multiIf(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                                  )\n                                )))) * 2\n                              + 64\n                              + k*64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64, 64\n                              )\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'bytes',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                            + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                                )\n                              )))) * 2\n                            + 64\n                            + k*64,\n                          toUInt64(reinterpretAsUInt256(reverse(unhex(\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64, 64\n                            )\n                          )))) * 2\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'bytes32',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                          64\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  startsWith(base_types[i+1],'uint') OR startsWith(base_types[i+1],'int') OR startsWith(base_types[i+1],'bytes'),\n                    arrayMap(k ->\n                      multiIf(\n                        startsWith(base_types[i+1],'uint') OR startsWith(base_types[i+1],'int'),\n                          toString(reinterpretAsUInt256(reverse(unhex(\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                              64\n                            )\n                          )))),\n                        concat('0x',\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          )\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  []\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string') OR (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  multiIf(\n                    param_types[i+1] = 'bytes32',\n                      concat('0x', arrayElement(head_words,i+1)),\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                    startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n                      toString(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))),\n                    concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        multiIf(\n          i < n_params AND (param_types[i+1] = 'tuple' OR endsWith(param_types[i+1],'[]')) AND raw_values_str[i+1] IS NOT NULL,\n            raw_values_str[i+1],\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          i < n_params AND (param_types[i+1] = 'bytes' OR (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32')) AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n          raw_values_str[i+1]\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.757927Z", "completed_at": "2025-08-22T20:29:19.922630Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.955437Z", "completed_at": "2025-08-22T20:29:19.955448Z"}], "thread_id": "Thread-6", "execution_time": 0.3129148483276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n\n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-10-04'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.752775Z", "completed_at": "2025-08-22T20:29:19.923253Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.956338Z", "completed_at": "2025-08-22T20:29:19.956347Z"}], "thread_id": "Thread-1", "execution_time": 0.31444406509399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.763243Z", "completed_at": "2025-08-22T20:29:19.923967Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.957210Z", "completed_at": "2025-08-22T20:29:19.957219Z"}], "thread_id": "Thread-15", "execution_time": 0.3140425682067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n\n    \n      AND toStartOfMonth(block_timestamp) >= toStartOfMonth(toDateTime('2023-10-04'))\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.775074Z", "completed_at": "2025-08-22T20:29:19.925842Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.958897Z", "completed_at": "2025-08-22T20:29:19.958907Z"}], "thread_id": "Thread-8", "execution_time": 0.31392717361450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.769660Z", "completed_at": "2025-08-22T20:29:19.926517Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.959836Z", "completed_at": "2025-08-22T20:29:19.959848Z"}], "thread_id": "Thread-7", "execution_time": 0.3160679340362549, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.786499Z", "completed_at": "2025-08-22T20:29:19.927681Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.960759Z", "completed_at": "2025-08-22T20:29:19.960767Z"}], "thread_id": "Thread-9", "execution_time": 0.31450390815734863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.791591Z", "completed_at": "2025-08-22T20:29:19.928812Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.961683Z", "completed_at": "2025-08-22T20:29:19.961692Z"}], "thread_id": "Thread-16", "execution_time": 0.3146858215332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.797269Z", "completed_at": "2025-08-22T20:29:19.929421Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.962621Z", "completed_at": "2025-08-22T20:29:19.962632Z"}], "thread_id": "Thread-10", "execution_time": 0.31498026847839355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.804107Z", "completed_at": "2025-08-22T20:29:19.930227Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.963531Z", "completed_at": "2025-08-22T20:29:19.963539Z"}], "thread_id": "Thread-31", "execution_time": 0.3152463436126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.780586Z", "completed_at": "2025-08-22T20:29:19.930817Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.964449Z", "completed_at": "2025-08-22T20:29:19.964457Z"}], "thread_id": "Thread-13", "execution_time": 0.31882452964782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.809341Z", "completed_at": "2025-08-22T20:29:19.932618Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.966066Z", "completed_at": "2025-08-22T20:29:19.966075Z"}], "thread_id": "Thread-3", "execution_time": 0.316570520401001, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.814545Z", "completed_at": "2025-08-22T20:29:19.933192Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.966957Z", "completed_at": "2025-08-22T20:29:19.966965Z"}], "thread_id": "Thread-33", "execution_time": 0.316786527633667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.825756Z", "completed_at": "2025-08-22T20:29:19.934745Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.967853Z", "completed_at": "2025-08-22T20:29:19.967862Z"}], "thread_id": "Thread-17", "execution_time": 0.31643056869506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.820512Z", "completed_at": "2025-08-22T20:29:19.935380Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.968742Z", "completed_at": "2025-08-22T20:29:19.968750Z"}], "thread_id": "Thread-12", "execution_time": 0.31827330589294434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.831208Z", "completed_at": "2025-08-22T20:29:19.935998Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.969944Z", "completed_at": "2025-08-22T20:29:19.969952Z"}], "thread_id": "Thread-5", "execution_time": 0.31790876388549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.842703Z", "completed_at": "2025-08-22T20:29:19.936761Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.970820Z", "completed_at": "2025-08-22T20:29:19.970828Z"}], "thread_id": "Thread-20", "execution_time": 0.31751084327697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n      AND length(replaceAll(coalesce(input,''),'0x','')) >= 8\n  ),\n\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arraySort(x -> toInt32OrZero(JSONExtractRaw(x,'position')),\n              ifNull(JSONExtractArrayRaw(input_params), emptyArrayString())) AS params_raw,\n    arrayMap(x -> JSONExtractString(x,'name'), params_raw) AS names,\n    arrayMap(x -> JSONExtractString(x,'type'), params_raw) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n\n      a.function_name,\n      substring(replaceAll(t.input,'0x',''),1,8) AS call_selector,\n      substring(replaceAll(t.input,'0x',''),9)   AS args_raw_hex,\n\n      a.names      AS param_names,\n      a.types      AS param_types,\n      a.params_raw AS param_objs,\n      length(a.types) AS n_params,\n\n      arrayMap(i ->\n        if(i*64 < length(args_raw_hex), substring(args_raw_hex, 1 + i*64, 64), NULL),\n        range(greatest(length(param_types),1)*16)\n      ) AS head_words,\n\n      arrayMap(i -> replaceRegexpOne(param_types[i+1], '\\\\[\\\\]$', ''), range(length(param_types))) AS base_types,\n\n      arrayMap(i ->\n        if(i >= n_params, NULL,\n\n          if(param_types[i+1] = 'tuple',\n            toJSONString(\n              mapFromArrays(\n                arrayMap(c -> coalesce(JSONExtractString(c,'name'), ''),\n                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                arrayMap(j ->\n                  (\n                    arrayElement(\n                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                      j+1\n                    )\n                  ,\n                    replaceRegexpOne(\n                      arrayElement(\n                        arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                 ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                        j+1\n                      ),\n                      '\\\\[\\\\]$',\n                      ''\n                    )\n                  ,\n                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2\n                  ,\n                    substring(\n                      args_raw_hex,\n                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                      64\n                    )\n                  ,\n                    if(\n                      endsWith(\n                        arrayElement(\n                          arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                   ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                          j+1\n                        ),\n                        '[]'\n                      ),\n                      toJSONString(\n                        multiIf(\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'string',\n\n                            arrayMap(k ->\n                              replaceRegexpAll(\n                                reinterpretAsString(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2,\n                                        64\n                                      )\n                                    )))) * 2)\n                                    + 64\n                                    + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2),\n                                        64\n                                      )\n                                    )))) * 2\n                                    + k*64,\n                                    toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                            64\n                                          )\n                                        )))) * 2) + 64 + k*64,\n                                        64\n                                      )\n                                    )))) * 2\n                                  )\n                                )),\n                                '\\0',''\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'bytes',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2),\n                                      64\n                                    )\n                                  )))) * 2)\n                                  + 64\n                                  + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2),\n                                      64\n                                    )\n                                  )))) * 2\n                                  + k*64,\n                                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2) + 64 + k*64,\n                                      64\n                                    )\n                                  )))) * 2\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'address',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2)) + 64 + k*64,\n                                    64\n                                  ),\n                                  25, 40\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          replaceRegexpOne(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            '\\\\[\\\\]$',\n                            ''\n                          ) = 'bytes32',\n\n                            arrayMap(k ->\n                              concat(\n                                '0x',\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                      64\n                                    )\n                                  )))) * 2)) + 64 + k*64,\n                                  64\n                                )\n                              ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'uint'\n                          ) OR startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'int'\n                          ) OR startsWith(\n                            replaceRegexpOne(\n                              arrayElement(\n                                arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                         ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                j+1\n                              ),\n                              '\\\\[\\\\]$',\n                              ''\n                            ),\n                            'bytes'\n                          ),\n\n                            arrayMap(k ->\n                              multiIf(\n                                startsWith(\n                                  replaceRegexpOne(\n                                    arrayElement(\n                                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                      j+1\n                                    ),\n                                    '\\\\[\\\\]$',\n                                    ''\n                                  ),\n                                  'uint'\n                                ) OR startsWith(\n                                  replaceRegexpOne(\n                                    arrayElement(\n                                      arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                               ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                                      j+1\n                                    ),\n                                    '\\\\[\\\\]$',\n                                    ''\n                                  ),\n                                  'int'\n                                ),\n                                  toString(\n                                    reinterpretAsUInt256(\n                                      reverse(\n                                        unhex(\n                                          substring(\n                                            args_raw_hex,\n                                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                              substring(\n                                                args_raw_hex,\n                                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                                64\n                                              )\n                                            )))) * 2)) + 64 + k*64,\n                                            64\n                                          )\n                                        )\n                                      )\n                                    )\n                                  ),\n                                  concat(\n                                    '0x',\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                        substring(\n                                          args_raw_hex,\n                                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                          64\n                                        )\n                                      )))) * 2)) + 64 + k*64,\n                                      64\n                                    )\n                                  )\n                                ),\n                              range(\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                ))))\n                              )\n                            ),\n\n                          []\n                        )\n                      ),\n\n                      if(\n                        (arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) = 'string') OR\n                        (arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) = 'bytes') OR\n                        (startsWith(arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ), 'bytes') AND arrayElement(\n                           arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                    ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                           j+1\n                         ) != 'bytes32'),\n\n                        if(\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'string',\n                          replaceRegexpAll(\n                            reinterpretAsString(unhex(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                    64\n                                  )\n                                )))) * 2)) + 64,\n                                toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                      substring(\n                                        args_raw_hex,\n                                        (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                        64\n                                      )\n                                    )))) * 2),\n                                    64\n                                  )\n                                )))) * 2\n                              )\n                            )),\n                            '\\0',''\n                          ),\n                          concat(\n                            '0x',\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                  64\n                                )\n                              )))) * 2)) + 64,\n                              toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                    substring(\n                                      args_raw_hex,\n                                      (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                      64\n                                    )\n                                  )))) * 2),\n                                  64\n                                )\n                              )))) * 2\n                            )\n                          )\n                        ),\n\n                        multiIf(\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'bytes32',\n                            concat('0x', substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                              64\n                            )),\n                          arrayElement(\n                            arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                     ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                            j+1\n                          ) = 'address',\n                            concat('0x', substring(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                64\n                              ),\n                              25, 40\n                            )),\n                          startsWith(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            'uint'\n                          ) OR startsWith(\n                            arrayElement(\n                              arrayMap(c -> coalesce(JSONExtractString(c,'type'), ''),\n                                       ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())),\n                              j+1\n                            ),\n                            'int'\n                          ),\n                            toString(\n                              reinterpretAsUInt256(\n                                reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                                    64\n                                  )\n                                ))\n                              )\n                            ),\n                          concat('0x', substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + j*64,\n                            64\n                          ))\n                        )\n                      )\n                    )\n                  ,\n                    range(\n                      length(\n                        ifNull(JSONExtractArrayRaw(arrayElement(param_objs,i+1),'components'), emptyArrayString())\n                      )\n                    )\n                  )\n                )\n              ),\n            if(endsWith(param_types[i+1],'[]'),\n              toJSONString(\n                multiIf(\n                  base_types[i+1] = 'string',\n                    arrayMap(k ->\n                      replaceRegexpAll(\n                        reinterpretAsString(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                              + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                  substring(\n                                    args_raw_hex,\n                                    (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                                  )\n                                )))) * 2\n                              + 64\n                              + k*64,\n                            toUInt64(reinterpretAsUInt256(reverse(unhex(\n                              substring(\n                                args_raw_hex,\n                                (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64, 64\n                              )\n                            )))) * 2\n                          )\n                        )),\n                        '\\0',''\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'bytes',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2)\n                            + toUInt64(reinterpretAsUInt256(reverse(unhex(\n                                substring(\n                                  args_raw_hex,\n                                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                                )\n                              )))) * 2\n                            + 64\n                            + k*64,\n                          toUInt64(reinterpretAsUInt256(reverse(unhex(\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64, 64\n                            )\n                          )))) * 2\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'address',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          ),\n                          25, 40\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  base_types[i+1] = 'bytes32',\n                    arrayMap(k ->\n                      concat('0x',\n                        substring(\n                          args_raw_hex,\n                          (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                          64\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  startsWith(base_types[i+1],'uint') OR startsWith(base_types[i+1],'int') OR startsWith(base_types[i+1],'bytes'),\n                    arrayMap(k ->\n                      multiIf(\n                        startsWith(base_types[i+1],'uint') OR startsWith(base_types[i+1],'int'),\n                          toString(reinterpretAsUInt256(reverse(unhex(\n                            substring(\n                              args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                              64\n                            )\n                          )))),\n                        concat('0x',\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64 + k*64,\n                            64\n                          )\n                        )\n                      ),\n                      range(\n                        toUInt64(reinterpretAsUInt256(reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64\n                          )\n                        ))))\n                      )\n                    ),\n                  []\n                )\n              ),\n              if(\n                (param_types[i+1] = 'bytes') OR (param_types[i+1] = 'string') OR (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n                substring(\n                  args_raw_hex,\n                  (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2) + 64,\n                  toUInt64(reinterpretAsUInt256(reverse(unhex(\n                    substring(args_raw_hex,\n                              (1 + toUInt64(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))) * 2), 64)\n                  )))) * 2\n                ),\n                if(arrayElement(head_words,i+1) IS NULL, NULL,\n                  multiIf(\n                    param_types[i+1] = 'bytes32',\n                      concat('0x', arrayElement(head_words,i+1)),\n                    param_types[i+1] = 'address',\n                      concat('0x', substring(arrayElement(head_words,i+1), 25, 40)),\n                    startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n                      toString(reinterpretAsUInt256(reverse(unhex(arrayElement(head_words,i+1))))),\n                    concat('0x', arrayElement(head_words,i+1))\n                  )\n                )\n              )\n            )\n          )\n        ),\n        range(n_params)\n      ) AS raw_values_str,\n\n      arrayMap(i ->\n        multiIf(\n          i < n_params AND (param_types[i+1] = 'tuple' OR endsWith(param_types[i+1],'[]')) AND raw_values_str[i+1] IS NOT NULL,\n            raw_values_str[i+1],\n          i < n_params AND param_types[i+1] = 'string' AND raw_values_str[i+1] IS NOT NULL,\n            replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[i+1])),'\\0',''),\n          i < n_params AND (param_types[i+1] = 'bytes' OR (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32')) AND raw_values_str[i+1] IS NOT NULL,\n            concat('0x', raw_values_str[i+1]),\n          raw_values_str[i+1]\n        ),\n        range(n_params)\n      ) AS param_values_str,\n\n      \n        mapFromArrays(param_names, param_values_str) AS decoded_input\n      \n\n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.837719Z", "completed_at": "2025-08-22T20:29:19.937411Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.971714Z", "completed_at": "2025-08-22T20:29:19.971722Z"}], "thread_id": "Thread-18", "execution_time": 0.3190431594848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_sdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_sdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.852611Z", "completed_at": "2025-08-22T20:29:19.938755Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.972589Z", "completed_at": "2025-08-22T20:29:19.972597Z"}], "thread_id": "Thread-21", "execution_time": 0.3180356025695801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ndeposists AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__deposits`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ndeposists_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(deposit, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'deposits') AS deposit\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n\nwithdrawals AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date \n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nwithdrawals_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'withdrawals') AS withdrawals\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nvalidators AS (\n    SELECT\n        date,\n        balance,\n        lagInFrame(balance, 1, balance) OVER (\n            ORDER BY date\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n        ) AS prev_balance,\n        balance - prev_balance AS balance_diff\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date,\n            SUM(balance) AS balance\n        FROM `dbt`.`stg_consensus__validators`\n        \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT \n    t1.date AS date\n    ,t1.balance AS balance\n    ,t1.balance_diff AS balance_diff_original\n    ,COALESCE(t2.amount,0)  AS deposited_amount\n    ,COALESCE(t3.amount,0)  AS withdrawaled_amount\n    ,t1.balance_diff - COALESCE(t2.amount,0) - COALESCE(t4.amount,0) + COALESCE(t3.amount,0) + COALESCE(t5.amount,0) AS eff_balance_diff\n    ,eff_balance_diff/t1.prev_balance AS rate\n    ,ROUND((POWER((1+rate),365) - 1) * 100,2) AS apy\nFROM validators t1\nLEFT JOIN \n    deposists t2\n    ON t2.date = t1.date\nLEFT JOIN \n    withdrawals t3\n    ON t3.date = t1.date\nLEFT JOIN \n    deposists_requests t4\n    ON t4.date = t1.date\nLEFT JOIN \n    withdrawals_requests t5\n    ON t5.date = t1.date", "relation_name": "`dbt`.`int_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.861957Z", "completed_at": "2025-08-22T20:29:19.939348Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.973462Z", "completed_at": "2025-08-22T20:29:19.973470Z"}], "thread_id": "Thread-22", "execution_time": 0.3104381561279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_dist", "compiled": true, "compiled_code": "\n\nWITH\n\n/* 1) Daily per-validator balance snapshot (already 1 row/day) */\ndaily_validator_balances AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        pubkey,\n        validator_index,\n        balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        balance > 0\n        AND\n        toStartOfDay(slot_timestamp) >= DATE '2023-01-01'\n        AND\n        toStartOfDay(slot_timestamp) < DATE '2023-02-01'\n),\n\n/* 2) True previous-day balance per validator using a window function */\nvalidator_with_prev AS (\n    SELECT\n        date,\n        pubkey,\n        validator_index,\n        balance,\n        -- default value = current balance on first day\n        lagInFrame(balance, 1, balance) OVER (\n            PARTITION BY pubkey, validator_index\n            ORDER BY date\n        ) AS prev_balance\n    FROM daily_validator_balances\n),\n\n/* 3) Get date range to filter other tables - materialize this first */\ndate_range AS (\n    SELECT \n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM validator_with_prev\n),\n\n/* 4) Per-day deposits - direct pubkey and amount columns */\ndeposits AS (\n    SELECT\n        toStartOfDay(d.slot_timestamp) AS dep_date,\n        d.pubkey AS dep_pubkey,\n        sum(d.amount) AS dep_amount\n    FROM `dbt`.`stg_consensus__deposits` d\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(d.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(d.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(d.slot_timestamp), d.pubkey\n),\n\n/* 5) Deposit requests - use JSON extraction with explicit date range */\ndeposit_requests AS (\n    SELECT\n        toStartOfDay(dr_table.slot_timestamp) AS dr_date,\n        toString(JSONExtractString(deposit, 'pubkey')) AS dr_pubkey,\n        sum(toUInt64(JSONExtractString(deposit, 'amount'))) AS dep_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` dr_table\n    ARRAY JOIN JSONExtractArrayRaw(dr_table.payload, 'deposits') AS deposit\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(dr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(dr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(dr_table.slot_timestamp), toString(JSONExtractString(deposit, 'pubkey'))\n),\n\n/* 6) Withdrawals - uses validator_index, not pubkey */\nwithdrawals AS (\n    SELECT\n        toStartOfDay(w.slot_timestamp) AS w_date,\n        w.validator_index AS w_validator_index,\n        sum(w.amount) AS wdr_amount\n    FROM `dbt`.`stg_consensus__withdrawals` w\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(w.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(w.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(w.slot_timestamp), w.validator_index\n),\n\n/* 7) Withdrawal requests - use JSON extraction with explicit date range */\nwithdrawal_requests AS (\n    SELECT\n        toStartOfDay(wr_table.slot_timestamp) AS wr_date,\n        toString(JSONExtractString(withdrawals, 'validator_pubkey')) AS wr_pubkey,\n        sum(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS wdr_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` wr_table\n    ARRAY JOIN JSONExtractArrayRaw(wr_table.payload, 'withdrawals') AS withdrawals\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(wr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(wr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(wr_table.slot_timestamp), toString(JSONExtractString(withdrawals, 'validator_pubkey'))\n),\n\n/* 8) Per-validator daily net change excluding external flows */\nvalidator_rates AS (\n    SELECT\n        v.date,\n        v.pubkey,\n        v.validator_index,\n        v.prev_balance,\n        v.balance,\n        (v.balance - v.prev_balance) AS raw_diff,\n\n        coalesce(d.dep_amount, 0) AS deposits_amt,\n        coalesce(dr.dep_req_amount, 0) AS deposit_req_amt,\n        coalesce(w.wdr_amount, 0) AS withdrawals_amt,\n        coalesce(wr.wdr_req_amount, 0) AS withdrawal_req_amt,\n\n        /* Adjust for external flows (requests set to 0 unless you want them) */\n        (\n            (v.balance - v.prev_balance)\n            - coalesce(d.dep_amount, 0)   -- deposits increase balance -> subtract to isolate rewards\n            + coalesce(w.wdr_amount, 0)   -- withdrawals decrease balance -> add back\n            - coalesce(dr.dep_req_amount, 0)\n            + coalesce(wr.wdr_req_amount, 0)\n        ) AS adjusted_diff,\n\n        /* Daily rate per validator; guard against division by zero. */\n        CASE \n            WHEN v.prev_balance > 0 \n            THEN toFloat64(adjusted_diff) / toFloat64(v.prev_balance)\n            ELSE toFloat64(0)\n        END AS rate\n    FROM validator_with_prev v\n    LEFT JOIN deposits d ON d.dep_date = v.date AND d.dep_pubkey = v.pubkey\n    LEFT JOIN deposit_requests dr ON dr.dr_date = v.date AND dr.dr_pubkey = v.pubkey\n    LEFT JOIN withdrawals w ON w.w_date = v.date AND w.w_validator_index = v.validator_index\n    LEFT JOIN withdrawal_requests wr ON wr.wr_date = v.date AND wr.wr_pubkey = v.pubkey\n    WHERE v.prev_balance > 0  -- Only consider validators with positive previous balance\n        AND v.date > DATE '2023-01-01'\n)\n\n\nSELECT\n    date,\n    ROUND(q_apy[1],2) AS q05,\n    ROUND(q_apy[2],2) AS q10,\n    ROUND(q_apy[3],2) AS q25,\n    ROUND(q_apy[4],2) AS q50,\n    ROUND(q_apy[5],2) AS q75,\n    ROUND(q_apy[6],2) AS q90,\n    ROUND(q_apy[7],2) AS q95 \nFROM (\n    SELECT\n        toStartOfMonth(date) AS date\n        ,quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )((power(1 + rate, 365) - 1) * 100) AS q_apy\n    FROM validator_rates\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_validators_apy_dist`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.847686Z", "completed_at": "2025-08-22T20:29:19.940742Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.974978Z", "completed_at": "2025-08-22T20:29:19.974986Z"}], "thread_id": "Thread-19", "execution_time": 0.32105445861816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n\n    \n\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata (zip flags/types/positions, then filter non-indexed)\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)          AS ni_types,\n    arrayMap(x -> x.3, ni_meta)          AS ni_positions,\n\n    -- head words (32-byte) from start of the data head area\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(greatest(length(ni_types), 1) * 16)  -- generous upper bound\n    )                                    AS data_words,\n\n    -- base type for arrays (strip [])\n    arrayMap(j -> replaceRegexpOne(ni_types[j+1], '\\\\[\\\\]$', ''), range(length(ni_types))) AS ni_base_types,\n\n    /* ===================== DECODING ====================== */\n    -- For each non-indexed param j return a STRING:\n    --  - Arrays -> toJSONString(Array(String))\n    --  - Dynamic scalars -> String (hex or utf8)\n    --  - Static scalars -> String\n    arrayMap(j ->\n      if(\n        /* -------- ARRAY TYPES -------- */\n        endsWith(ni_types[j+1],'[]'),\n\n        /* Build JSON string of the fully decoded array */\n        toJSONString(\n          arrayMap(\n            k ->\n              multiIf(\n                ni_base_types[j+1] = 'address',\n                  concat(\n                    '0x',\n                    substring(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64 + 64 + (k + 1) * 64\n                      ),\n                      (64 + k*64) + 25, 40\n                    )\n                  ),\n\n                ni_base_types[j+1] = 'bytes32',\n                  concat(\n                    '0x',\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                      64\n                    )\n                  ),\n\n                startsWith(ni_base_types[j+1], 'uint') OR startsWith(ni_base_types[j+1], 'int'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(\n                        unhex(\n                          substring(\n                            data_hex,\n                            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                            64\n                          )\n                        )\n                      )\n                    )\n                  ),\n\n                /* Fallback: full 32-byte hex */\n                concat(\n                  '0x',\n                  substring(\n                    data_hex,\n                    1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64 + k*64,\n                    64\n                  )\n                )\n              ),\n            /* range(N) where N is array length at base */\n            range(\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(\n                    unhex(\n                      substring(\n                        data_hex,\n                        1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                        64\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        ),\n\n        /* -------- DYNAMIC SCALARS (string/bytes/bytesN\u226032) -------- */\n        if(\n          ni_types[j+1] = 'bytes'\n          OR ni_types[j+1] = 'string'\n          OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n          /* payload = hex of exactly len bytes; strings converted later */\n          substring(\n            data_hex,\n            1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2 + 64,\n            toUInt32(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    substring(\n                      data_hex,\n                      1 + toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) * 2,\n                      64\n                    )\n                  )\n                )\n              )\n            ) * 2\n          ),\n\n          /* -------- STATIC SCALARS -------- */\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat('0x', substring(data_words[j+1], 25, 40)),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_values_str,\n\n    -- Human-friendly normalization to STRING:\n    -- - Arrays already JSON strings: pass through\n    -- - Strings: hex \u2192 utf8 (remove NULs)\n    -- - Bytes/bytesN: ensure 0x prefix\n    arrayMap(j ->\n      multiIf(\n        endsWith(ni_types[j+1],'[]') AND raw_values_str[j+1] IS NOT NULL,\n          raw_values_str[j+1],\n\n        ni_types[j+1] = 'string' AND raw_values_str[j+1] IS NOT NULL,\n          replaceRegexpAll(reinterpretAsString(unhex(raw_values_str[j+1])),'\\0',''),\n\n        ((ni_types[j+1] = 'bytes') OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_values_str[j+1] IS NOT NULL,\n          concat('0x', raw_values_str[j+1]),\n\n        /* else */\n        raw_values_str[j+1]\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- positions of indexed params (0-based positions into the param list)\n    arrayMap(x -> x.3,\n      arrayFilter((f,t,i) -> f, arrayZip(a.flags, a.types, range(n_params)))\n    ) AS indexed_positions,\n\n    -- stitch back into full order (correct topic index using 1-based indexOf)\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        /* k1 is 1-based; 0 means not found */\n        multiIf(\n          indexOf(indexed_positions, i) = 0,\n            NULL,\n          param_types[i+1] = 'address',\n            concat(\n              '0x',\n              substring(\n                replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n                25, 40\n              )\n            ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n            toString(\n              reinterpretAsUInt256(\n                reverse(\n                  unhex(\n                    replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x','')\n                  )\n                )\n              )\n            ),\n          /* default: bytes32/topic hash as 0x + 64 hex chars */\n          concat(\n            '0x',\n            substring(\n              replaceAll(arrayElement(raw_topics, indexOf(indexed_positions, i)), '0x',''),\n              1, 64\n            )\n          )\n        ),\n        /* non-indexed: pick correct decoded value */\n        decoded_ni_values[indexOf(ni_positions, i)]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map (all values are full strings; arrays are JSON strings)\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.868800Z", "completed_at": "2025-08-22T20:29:19.941485Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.975866Z", "completed_at": "2025-08-22T20:29:19.975875Z"}], "thread_id": "Thread-25", "execution_time": 0.31206846237182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,total_amount\n    ,cnt\n    ,q_amount[1] AS min\n    ,q_amount[2] AS q05\n    ,q_amount[3] AS q10\n    ,q_amount[4] AS q25\n    ,q_amount[5] AS q50\n    ,q_amount[6] AS q75\n    ,q_amount[7] AS q90\n    ,q_amount[8] AS q95\n    ,q_amount[9] AS max\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount/POWER(10,9)) AS total_amount\n        ,COUNT(*) AS cnt\n        ,quantilesTDigest(\n            0.0, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 1\n        )(amount/POWER(10,9)) AS q_amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_withdrawls_dist_daily`\n    )\n  \n\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.873821Z", "completed_at": "2025-08-22T20:29:19.942375Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.976767Z", "completed_at": "2025-08-22T20:29:19.976775Z"}], "thread_id": "Thread-23", "execution_time": 0.31229186058044434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_cloud_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,cloud_provider AS cloud\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d` \nORDER BY date ASC, client ASC, cloud ASC", "relation_name": "`dbt`.`api_probelab_clients_cloud_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.891978Z", "completed_at": "2025-08-22T20:29:19.943319Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.977683Z", "completed_at": "2025-08-22T20:29:19.977694Z"}], "thread_id": "Thread-26", "execution_time": 0.3119485378265381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_country_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,country\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_countries_avg_1d` \nORDER BY date ASC, client ASC, country ASC", "relation_name": "`dbt`.`api_probelab_clients_country_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.878473Z", "completed_at": "2025-08-22T20:29:19.944041Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.978580Z", "completed_at": "2025-08-22T20:29:19.978589Z"}], "thread_id": "Thread-24", "execution_time": 0.31346917152404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_cloud_provider_avg_1d_agent_version_type.d598a54924", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.895538Z", "completed_at": "2025-08-22T20:29:19.945298Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.980134Z", "completed_at": "2025-08-22T20:29:19.980143Z"}], "thread_id": "Thread-27", "execution_time": 0.31366944313049316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_agent_version_type.6608c14a96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.900353Z", "completed_at": "2025-08-22T20:29:19.947314Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.981773Z", "completed_at": "2025-08-22T20:29:19.981783Z"}], "thread_id": "Thread-28", "execution_time": 0.3097655773162842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_max_crawl_created_at.b401aa1bdb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect max_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere max_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.907464Z", "completed_at": "2025-08-22T20:29:19.947864Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.982813Z", "completed_at": "2025-08-22T20:29:19.982825Z"}], "thread_id": "Thread-29", "execution_time": 0.3101315498352051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_min_crawl_created_at.69cddc52ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect min_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere min_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:19.913116Z", "completed_at": "2025-08-22T20:29:19.950374Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:19.985214Z", "completed_at": "2025-08-22T20:29:19.985223Z"}], "thread_id": "Thread-30", "execution_time": 0.31058239936828613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,any_value(toInt32(floor(__total))) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nGROUP BY 1, 2\nORDER BY date ASC, client ASC", "relation_name": "`dbt`.`api_probelab_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.034468Z", "completed_at": "2025-08-22T20:29:20.079039Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.228097Z", "completed_at": "2025-08-22T20:29:20.228114Z"}], "thread_id": "Thread-35", "execution_time": 0.2539191246032715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_quic_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,quic_support AS quic\n    ,__count AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d` \nORDER BY date ASC, client ASC, quic ASC", "relation_name": "`dbt`.`api_probelab_clients_quic_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.042827Z", "completed_at": "2025-08-22T20:29:20.086961Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.248977Z", "completed_at": "2025-08-22T20:29:20.248992Z"}], "thread_id": "Thread-37", "execution_time": 0.26963210105895996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_version_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,agent_version_semver_str AS version\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nORDER BY date ASC, client ASC, version ASC", "relation_name": "`dbt`.`api_probelab_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.057472Z", "completed_at": "2025-08-22T20:29:20.144050Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.272359Z", "completed_at": "2025-08-22T20:29:20.272373Z"}], "thread_id": "Thread-39", "execution_time": 0.2797880172729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_agent_semvers_avg_1d_agent_version_type.8f8c6f1415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.067032Z", "completed_at": "2025-08-22T20:29:20.183091Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.277993Z", "completed_at": "2025-08-22T20:29:20.278002Z"}], "thread_id": "Thread-34", "execution_time": 0.27824878692626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_quic_support_over_7d_agent_version_type.1bc4663118", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.082336Z", "completed_at": "2025-08-22T20:29:20.259286Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.294141Z", "completed_at": "2025-08-22T20:29:20.294175Z"}], "thread_id": "Thread-2", "execution_time": 0.2806391716003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_client.0999b44ed1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_consensus_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.093852Z", "completed_at": "2025-08-22T20:29:20.264983Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.295341Z", "completed_at": "2025-08-22T20:29:20.295353Z"}], "thread_id": "Thread-38", "execution_time": 0.27898097038269043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_type.66b187714d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_consensus_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.089005Z", "completed_at": "2025-08-22T20:29:20.265656Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.296803Z", "completed_at": "2025-08-22T20:29:20.296815Z"}], "thread_id": "Thread-36", "execution_time": 0.2811133861541748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_mean.511213d432", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_consensus_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.100332Z", "completed_at": "2025-08-22T20:29:20.266592Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.298312Z", "completed_at": "2025-08-22T20:29:20.298321Z"}], "thread_id": "Thread-32", "execution_time": 0.28054094314575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_client.a5debabb79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_execution_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.104907Z", "completed_at": "2025-08-22T20:29:20.267169Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.299191Z", "completed_at": "2025-08-22T20:29:20.299200Z"}], "thread_id": "Thread-4", "execution_time": 0.2807583808898926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_mean.03ac96d562", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_execution_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.109749Z", "completed_at": "2025-08-22T20:29:20.267925Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.300065Z", "completed_at": "2025-08-22T20:29:20.300074Z"}], "thread_id": "Thread-40", "execution_time": 0.28099536895751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_type.d7bef196db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_execution_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.114261Z", "completed_at": "2025-08-22T20:29:20.268801Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.300942Z", "completed_at": "2025-08-22T20:29:20.300953Z"}], "thread_id": "Thread-11", "execution_time": 0.2812342643737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_architecture.9a73cdb068", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect architecture\nfrom `dbt`.`stg_esg_hardware_config`\nwhere architecture is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.119041Z", "completed_at": "2025-08-22T20:29:20.269392Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.301849Z", "completed_at": "2025-08-22T20:29:20.301857Z"}], "thread_id": "Thread-14", "execution_time": 0.2814922332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_case.1190c367ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect case\nfrom `dbt`.`stg_esg_hardware_config`\nwhere case is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.123844Z", "completed_at": "2025-08-22T20:29:20.270235Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.302734Z", "completed_at": "2025-08-22T20:29:20.302742Z"}], "thread_id": "Thread-6", "execution_time": 0.281780481338501, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cores_threads.682ba505df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cores_threads\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cores_threads is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.134679Z", "completed_at": "2025-08-22T20:29:20.271027Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.303613Z", "completed_at": "2025-08-22T20:29:20.303621Z"}], "thread_id": "Thread-15", "execution_time": 0.2813913822174072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_gpu.79e4a7071f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere gpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.130007Z", "completed_at": "2025-08-22T20:29:20.271598Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.304481Z", "completed_at": "2025-08-22T20:29:20.304491Z"}], "thread_id": "Thread-1", "execution_time": 0.2829113006591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cpu.c2a5af552f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.139453Z", "completed_at": "2025-08-22T20:29:20.273247Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.306015Z", "completed_at": "2025-08-22T20:29:20.306026Z"}], "thread_id": "Thread-8", "execution_time": 0.28258514404296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_os.7f4f45f229", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect os\nfrom `dbt`.`stg_esg_hardware_config`\nwhere os is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.149334Z", "completed_at": "2025-08-22T20:29:20.274116Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.306941Z", "completed_at": "2025-08-22T20:29:20.306949Z"}], "thread_id": "Thread-9", "execution_time": 0.28223371505737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_ram.a731e6fcf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ram\nfrom `dbt`.`stg_esg_hardware_config`\nwhere ram is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.144823Z", "completed_at": "2025-08-22T20:29:20.275002Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.307829Z", "completed_at": "2025-08-22T20:29:20.307841Z"}], "thread_id": "Thread-7", "execution_time": 0.2838108539581299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_psu.c8e144fff7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect psu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere psu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.159679Z", "completed_at": "2025-08-22T20:29:20.275682Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.308737Z", "completed_at": "2025-08-22T20:29:20.308745Z"}], "thread_id": "Thread-10", "execution_time": 0.28273749351501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_type.337ee769a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_hardware_config`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.155259Z", "completed_at": "2025-08-22T20:29:20.276436Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.309601Z", "completed_at": "2025-08-22T20:29:20.309610Z"}], "thread_id": "Thread-16", "execution_time": 0.28423547744750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_storage.0f9455ffe3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect storage\nfrom `dbt`.`stg_esg_hardware_config`\nwhere storage is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.164242Z", "completed_at": "2025-08-22T20:29:20.277281Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.310488Z", "completed_at": "2025-08-22T20:29:20.310499Z"}], "thread_id": "Thread-31", "execution_time": 0.28380537033081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_mean.8b31b45659", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.173429Z", "completed_at": "2025-08-22T20:29:20.279056Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.311991Z", "completed_at": "2025-08-22T20:29:20.311998Z"}], "thread_id": "Thread-3", "execution_time": 0.2834784984588623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_distribution.f73f1fe384", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution\nfrom `dbt`.`stg_esg_node_distribution`\nwhere distribution is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.168673Z", "completed_at": "2025-08-22T20:29:20.279656Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.312902Z", "completed_at": "2025-08-22T20:29:20.312911Z"}], "thread_id": "Thread-13", "execution_time": 0.28559374809265137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_type.839b39309c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.178002Z", "completed_at": "2025-08-22T20:29:20.280314Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.313782Z", "completed_at": "2025-08-22T20:29:20.313790Z"}], "thread_id": "Thread-33", "execution_time": 0.28464460372924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_type.2b12460db8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_node_distribution`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.184619Z", "completed_at": "2025-08-22T20:29:20.281660Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.314664Z", "completed_at": "2025-08-22T20:29:20.314672Z"}], "thread_id": "Thread-17", "execution_time": 0.28490495681762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_blocks_clients_version_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nclients_version AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,multiIf(\n             lower(decoded_extra_data[1]) = 'choose' \n            OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n            OR lower(decoded_extra_data[1]) = 'sanae.io'\n            OR decoded_extra_data[1] = ''  , \n            'Unknown',\n            decoded_extra_data[1]\n        )   AS client\n        ,IF(length(decoded_extra_data)>1, \n            IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n            ''\n        ) AS version\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_execution__blocks`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2, 3\n)\n\nSELECT\n    *\nFROM clients_version", "relation_name": "`dbt`.`int_execution_blocks_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.194284Z", "completed_at": "2025-08-22T20:29:20.282456Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.315535Z", "completed_at": "2025-08-22T20:29:20.315543Z"}], "thread_id": "Thread-5", "execution_time": 0.2863326072692871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_hash.3968ee550e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_hash\nfrom `dbt`.`stg_execution__blocks`\nwhere block_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.199000Z", "completed_at": "2025-08-22T20:29:20.283289Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.318275Z", "completed_at": "2025-08-22T20:29:20.318289Z"}], "thread_id": "Thread-20", "execution_time": 0.28664159774780273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_number.b945854619", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__blocks`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.189695Z", "completed_at": "2025-08-22T20:29:20.283871Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.319359Z", "completed_at": "2025-08-22T20:29:20.319369Z"}], "thread_id": "Thread-12", "execution_time": 0.2889413833618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_base_fee_per_gas.db4869ba64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect base_fee_per_gas\nfrom `dbt`.`stg_execution__blocks`\nwhere base_fee_per_gas is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.203523Z", "completed_at": "2025-08-22T20:29:20.284815Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.320250Z", "completed_at": "2025-08-22T20:29:20.320259Z"}], "thread_id": "Thread-18", "execution_time": 0.2877483367919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_timestamp.d1b2bdbc42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__blocks`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.208140Z", "completed_at": "2025-08-22T20:29:20.285395Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.321088Z", "completed_at": "2025-08-22T20:29:20.321097Z"}], "thread_id": "Thread-21", "execution_time": 0.28798747062683105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_chain_id.b8edd9122d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__blocks`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.214504Z", "completed_at": "2025-08-22T20:29:20.286130Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.321947Z", "completed_at": "2025-08-22T20:29:20.321956Z"}], "thread_id": "Thread-22", "execution_time": 0.2882225513458252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_limit.78300c6714", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_limit\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_limit is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.219025Z", "completed_at": "2025-08-22T20:29:20.286808Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.322826Z", "completed_at": "2025-08-22T20:29:20.322833Z"}], "thread_id": "Thread-19", "execution_time": 0.28436875343322754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_used.94117d62bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_used is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.223490Z", "completed_at": "2025-08-22T20:29:20.288576Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.324362Z", "completed_at": "2025-08-22T20:29:20.324371Z"}], "thread_id": "Thread-25", "execution_time": 0.2851564884185791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_size.b4ddb09dda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect size\nfrom `dbt`.`stg_execution__blocks`\nwhere size is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.229114Z", "completed_at": "2025-08-22T20:29:20.289457Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.325213Z", "completed_at": "2025-08-22T20:29:20.325220Z"}], "thread_id": "Thread-23", "execution_time": 0.28534841537475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_state_size_full_diff_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `dbt`.`stg_execution__storage_diffs`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_state_size_full_diff_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT\n    *\nFROM state_size_diff", "relation_name": "`dbt`.`int_execution_state_size_full_diff_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.239590Z", "completed_at": "2025-08-22T20:29:20.290344Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.326039Z", "completed_at": "2025-08-22T20:29:20.326047Z"}], "thread_id": "Thread-24", "execution_time": 0.2848343849182129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_number.740300dea1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.233883Z", "completed_at": "2025-08-22T20:29:20.291739Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.327549Z", "completed_at": "2025-08-22T20:29:20.327557Z"}], "thread_id": "Thread-26", "execution_time": 0.28700971603393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_address.fe7457493c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.244012Z", "completed_at": "2025-08-22T20:29:20.292847Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.328413Z", "completed_at": "2025-08-22T20:29:20.328421Z"}], "thread_id": "Thread-27", "execution_time": 0.2804226875305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_timestamp.79a9bfbd42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.249988Z", "completed_at": "2025-08-22T20:29:20.293428Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.329267Z", "completed_at": "2025-08-22T20:29:20.329279Z"}], "thread_id": "Thread-28", "execution_time": 0.27988219261169434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_chain_id.413c6bb6df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.254684Z", "completed_at": "2025-08-22T20:29:20.296181Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.331494Z", "completed_at": "2025-08-22T20:29:20.331503Z"}], "thread_id": "Thread-29", "execution_time": 0.28145790100097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_slot.30b6f83693", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect slot\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere slot is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.260318Z", "completed_at": "2025-08-22T20:29:20.297735Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.332997Z", "completed_at": "2025-08-22T20:29:20.333006Z"}], "thread_id": "Thread-30", "execution_time": 0.2810952663421631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_hash.355bce9dc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.377605Z", "completed_at": "2025-08-22T20:29:20.423813Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.579612Z", "completed_at": "2025-08-22T20:29:20.579630Z"}], "thread_id": "Thread-35", "execution_time": 0.2560763359069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_index.c3d3eabba2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.384871Z", "completed_at": "2025-08-22T20:29:20.425776Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.589587Z", "completed_at": "2025-08-22T20:29:20.589605Z"}], "thread_id": "Thread-37", "execution_time": 0.26280760765075684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__storage_diffs_transaction_hash.ead3d5cd43", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.402077Z", "completed_at": "2025-08-22T20:29:20.508829Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.620815Z", "completed_at": "2025-08-22T20:29:20.620834Z"}], "thread_id": "Thread-39", "execution_time": 0.2817826271057129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_transactions_info_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(value/POWER(10,18)) AS xdai_value -- xDai units\n    ,AVG(value/POWER(10,18)) AS xdai_value_avg -- xDai units\n    ,median(value/POWER(10,18)) AS xdai_value_median -- xDai units\n    ,SUM(COALESCE(gas_used/POWER(10,9),0)) AS gas_used -- Gas units in Gwei\n    ,CAST(AVG(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_avg -- Gas units in Gwei\n    ,CAST(median(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_median -- Gas units in Gwei\nFROM `dbt`.`stg_execution__transactions`\nWHERE\n    block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_info_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_execution_transactions_info_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.411193Z", "completed_at": "2025-08-22T20:29:20.525820Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.624957Z", "completed_at": "2025-08-22T20:29:20.624967Z"}], "thread_id": "Thread-34", "execution_time": 0.2811625003814697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_block_number.86826795d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__transactions`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.427610Z", "completed_at": "2025-08-22T20:29:20.604338Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.639653Z", "completed_at": "2025-08-22T20:29:20.639663Z"}], "thread_id": "Thread-2", "execution_time": 0.2824094295501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_from_address.66ef809303", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom `dbt`.`stg_execution__transactions`\nwhere from_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.434522Z", "completed_at": "2025-08-22T20:29:20.610306Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.640709Z", "completed_at": "2025-08-22T20:29:20.640719Z"}], "thread_id": "Thread-38", "execution_time": 0.28281664848327637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_hash.92b0650777", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.439896Z", "completed_at": "2025-08-22T20:29:20.611007Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.642775Z", "completed_at": "2025-08-22T20:29:20.642787Z"}], "thread_id": "Thread-36", "execution_time": 0.28357648849487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_index.f0d9adb918", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.445115Z", "completed_at": "2025-08-22T20:29:20.612654Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.643796Z", "completed_at": "2025-08-22T20:29:20.643805Z"}], "thread_id": "Thread-32", "execution_time": 0.28325891494750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__transactions_transaction_hash.173e989c74", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.460557Z", "completed_at": "2025-08-22T20:29:20.613896Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.644741Z", "completed_at": "2025-08-22T20:29:20.644750Z"}], "thread_id": "Thread-11", "execution_time": 0.28232240676879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv4__visits_visit_started_at.de065da8ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv4__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.449508Z", "completed_at": "2025-08-22T20:29:20.614498Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.646235Z", "completed_at": "2025-08-22T20:29:20.646247Z"}], "thread_id": "Thread-4", "execution_time": 0.28507137298583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `dbt`.`stg_nebula_discv4__visits` A\n  WHERE\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv4_peers`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  ),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    --replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    arrayElement(splitByChar('/', ifNull(connect_maddr, '')), 3) AS ip,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(\n      plus_build != '',\n      arrayElement(splitByChar('-', pre_blob), 1),\n      splitByChar('-', ver_blob)[1]\n    )                                                       AS version,\n    IF(\n      plus_build != '',\n      IF(\n        length(splitByChar('-', pre_blob)) >= 2,\n        arrayElement(splitByChar('-', pre_blob), 2),\n        ''\n      ),\n      IF(\n        length(splitByChar('-', ver_blob)) = 3,\n        arrayElement(splitByChar('-', ver_blob), 2),\n        ''\n      )\n    )                                                       AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(\n        length(splitByChar('-', ver_blob)) > 1,\n        arrayElement(splitByChar('-', ver_blob), -1),\n        ''\n      )\n    )                                                       AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  t1.platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv4_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.467586Z", "completed_at": "2025-08-22T20:29:20.615199Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.647109Z", "completed_at": "2025-08-22T20:29:20.647117Z"}], "thread_id": "Thread-14", "execution_time": 0.28410816192626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.connect_maddr,\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM `dbt`.`stg_nebula_discv5__visits` AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv5_peers`\n    )\n  \n\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    fork_digest,\n    cl_fork_name,\n    cl_next_fork_name,\n    next_fork_version,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n    IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n    )                                                                          AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.fork_digest,\n  t1.cl_fork_name,\n  t1.cl_next_fork_name,\n  t1.next_fork_version,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  CASE\n      WHEN t1.platform = '' THEN 'Unknown'\n      WHEN t1.platform = 'aarch64-linux' THEN 'linux-aarch_64'\n      WHEN t1.platform = 'x86_64-linux' THEN 'linux-x86_64'\n      WHEN t1.platform = 'x86_64-windows' THEN 'windows-x86_64'\n      ELSE t1.platform\n  END AS platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv5_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.474713Z", "completed_at": "2025-08-22T20:29:20.616212Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.648004Z", "completed_at": "2025-08-22T20:29:20.648013Z"}], "thread_id": "Thread-6", "execution_time": 0.2843799591064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv5__visits`\n    WHERE\n      toStartOfDay(visit_ended_at) < today()\n      AND\n      (\n        toString(peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR toString(peer_properties.next_fork_version) LIKE '%064'\n      )\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv5_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.481197Z", "completed_at": "2025-08-22T20:29:20.616965Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.648906Z", "completed_at": "2025-08-22T20:29:20.648918Z"}], "thread_id": "Thread-15", "execution_time": 0.28467392921447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_crawl_id.9cb9b578fa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect crawl_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere crawl_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.455595Z", "completed_at": "2025-08-22T20:29:20.617557Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.649793Z", "completed_at": "2025-08-22T20:29:20.649801Z"}], "thread_id": "Thread-40", "execution_time": 0.28800344467163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv4__visits`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        toString(peer_properties.network_id) = '100'\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv4_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.486737Z", "completed_at": "2025-08-22T20:29:20.618457Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.650661Z", "completed_at": "2025-08-22T20:29:20.650673Z"}], "thread_id": "Thread-1", "execution_time": 0.2858409881591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_peer_id.216f34e1f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.491416Z", "completed_at": "2025-08-22T20:29:20.619403Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.651553Z", "completed_at": "2025-08-22T20:29:20.651562Z"}], "thread_id": "Thread-8", "execution_time": 0.285442590713501, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_visit_started_at.7bc42b8695", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.496826Z", "completed_at": "2025-08-22T20:29:20.620060Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.652465Z", "completed_at": "2025-08-22T20:29:20.652477Z"}], "thread_id": "Thread-9", "execution_time": 0.2859766483306885, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_attestations_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,inclusion_delay\n    ,cnt\nFROM `dbt`.`int_consensus_attestations_daily`\nORDER BY date, inclusion_delay", "relation_name": "`dbt`.`api_consensus_attestations_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.502089Z", "completed_at": "2025-08-22T20:29:20.621843Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.654454Z", "completed_at": "2025-08-22T20:29:20.654463Z"}], "thread_id": "Thread-7", "execution_time": 0.28708338737487793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_blob_commitments_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,cnt AS value\nFROM `dbt`.`int_consensus_blob_commitments_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_blob_commitments_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.505549Z", "completed_at": "2025-08-22T20:29:20.622609Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.655541Z", "completed_at": "2025-08-22T20:29:20.655550Z"}], "thread_id": "Thread-10", "execution_time": 0.28755712509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_graffiti_label_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,SUM(cnt) AS value\nFROM `dbt`.`int_consensus_graffiti_daily`\nGROUP BY date, label\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_graffiti_label_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.509649Z", "completed_at": "2025-08-22T20:29:20.623239Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.656456Z", "completed_at": "2025-08-22T20:29:20.656464Z"}], "thread_id": "Thread-16", "execution_time": 0.2878413200378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_graffiti_cloud", "compiled": true, "compiled_code": "\n\n\nWITH base AS (\n  SELECT\n      graffiti,\n      sumIf(cnt, date >= today() - 7)  AS v_7d,\n      sumIf(cnt, date >= today() - 30) AS v_30d,\n      sumIf(cnt, date >= today() - 90) AS v_90d,\n      sum(cnt)                         AS v_all\n  FROM `dbt`.`int_consensus_graffiti_daily`\n  WHERE graffiti != 'None'\n  GROUP BY graffiti\n)\nSELECT\n  label,\n  graffiti,\n  value\nFROM base\nARRAY JOIN\n  ['7D','30D','90D','All'] AS label,\n  [v_7d, v_30d, v_90d, v_all] AS value\nORDER BY label, value DESC\nLIMIT 50 BY label", "relation_name": "`dbt`.`fct_consensus_graffiti_cloud`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.513244Z", "completed_at": "2025-08-22T20:29:20.624285Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.657313Z", "completed_at": "2025-08-22T20:29:20.657321Z"}], "thread_id": "Thread-31", "execution_time": 0.2880682945251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_forks", "compiled": true, "compiled_code": "SELECT\n  fork_name\n  ,fork_version \n  ,fork_digest\n  ,fork_epoch \nFROM `dbt`.`fct_consensus_forks`\nORDER BY fork_version ASC", "relation_name": "`dbt`.`api_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.516739Z", "completed_at": "2025-08-22T20:29:20.625796Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.658842Z", "completed_at": "2025-08-22T20:29:20.658853Z"}], "thread_id": "Thread-3", "execution_time": 0.2884204387664795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_blocks_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT date, 'produced' AS label, blocks_produced AS value FROM `dbt`.`int_consensus_blocks_daily`\n    UNION ALL \n    SELECT date, 'missed' AS label, blocks_missed AS value FROM `dbt`.`int_consensus_blocks_daily`\n)\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_blocks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.520452Z", "completed_at": "2025-08-22T20:29:20.626390Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.659749Z", "completed_at": "2025-08-22T20:29:20.659757Z"}], "thread_id": "Thread-13", "execution_time": 0.2887270450592041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,credentials_type\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)) * 100,2) AS pct \nFROM `dbt`.`int_consensus_credentials_daily`\nORDER BY date, credentials_type", "relation_name": "`dbt`.`api_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.531641Z", "completed_at": "2025-08-22T20:29:20.627508Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.660625Z", "completed_at": "2025-08-22T20:29:20.660633Z"}], "thread_id": "Thread-17", "execution_time": 0.28835201263427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_entry_queue_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,validator_count\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\n    ,mean\nFROM `dbt`.`int_consensus_entry_queue_daily`\nORDER BY date ASC", "relation_name": "`dbt`.`api_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.536467Z", "completed_at": "2025-08-22T20:29:20.628070Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.661501Z", "completed_at": "2025-08-22T20:29:20.661509Z"}], "thread_id": "Thread-5", "execution_time": 0.2886343002319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_staked_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,effective_balance AS value\nFROM `dbt`.`int_consensus_validators_balances_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_staked_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.526478Z", "completed_at": "2025-08-22T20:29:20.628678Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.662366Z", "completed_at": "2025-08-22T20:29:20.662375Z"}], "thread_id": "Thread-33", "execution_time": 0.2907271385192871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_latest", "compiled": true, "compiled_code": "SELECT \n    credentials_type\n    ,cnt\nFROM `dbt`.`int_consensus_credentials_daily`\nWHERE date = (SELECT MAX(date) FROM `dbt`.`int_consensus_credentials_daily`)", "relation_name": "`dbt`.`api_consensus_credentials_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.540272Z", "completed_at": "2025-08-22T20:29:20.629638Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.663223Z", "completed_at": "2025-08-22T20:29:20.663232Z"}], "thread_id": "Thread-20", "execution_time": 0.2897305488586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_balances_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT\n        date\n        ,'balance' AS label\n        ,balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n\n    UNION ALL \n\n    SELECT\n        date\n        ,'eff. balance' AS label\n        ,effective_balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n)\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.544077Z", "completed_at": "2025-08-22T20:29:20.630639Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.664093Z", "completed_at": "2025-08-22T20:29:20.664104Z"}], "thread_id": "Thread-12", "execution_time": 0.2900106906890869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_cnt.d87cfc9f31", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.554990Z", "completed_at": "2025-08-22T20:29:20.631382Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.664969Z", "completed_at": "2025-08-22T20:29:20.664978Z"}], "thread_id": "Thread-21", "execution_time": 0.28955578804016113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_status.6ce758daa0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.550593Z", "completed_at": "2025-08-22T20:29:20.631936Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.665904Z", "completed_at": "2025-08-22T20:29:20.665916Z"}], "thread_id": "Thread-18", "execution_time": 0.2911686897277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_date.8a3bdc4a88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.559692Z", "completed_at": "2025-08-22T20:29:20.632598Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.666842Z", "completed_at": "2025-08-22T20:29:20.666854Z"}], "thread_id": "Thread-22", "execution_time": 0.29056572914123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_balances_dist_daily_date.20565492ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_balances_dist_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.568713Z", "completed_at": "2025-08-22T20:29:20.633431Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.667754Z", "completed_at": "2025-08-22T20:29:20.667766Z"}], "thread_id": "Thread-25", "execution_time": 0.28507542610168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_deposit_id.e5de3f71da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.573385Z", "completed_at": "2025-08-22T20:29:20.634934Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.669326Z", "completed_at": "2025-08-22T20:29:20.669337Z"}], "thread_id": "Thread-23", "execution_time": 0.28583288192749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_hash.f28d1a031d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.564123Z", "completed_at": "2025-08-22T20:29:20.635699Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.670227Z", "completed_at": "2025-08-22T20:29:20.670238Z"}], "thread_id": "Thread-19", "execution_time": 0.29335451126098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_timestamp.427c640d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.585027Z", "completed_at": "2025-08-22T20:29:20.637286Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.671727Z", "completed_at": "2025-08-22T20:29:20.671739Z"}], "thread_id": "Thread-26", "execution_time": 0.27979183197021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_transaction_hash.c886f64cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.580617Z", "completed_at": "2025-08-22T20:29:20.637844Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.672644Z", "completed_at": "2025-08-22T20:29:20.672656Z"}], "thread_id": "Thread-24", "execution_time": 0.2884957790374756, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_deposit_id.e60e7a7d4f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deposit_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is not null\ngroup by deposit_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.594948Z", "completed_at": "2025-08-22T20:29:20.638931Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.673534Z", "completed_at": "2025-08-22T20:29:20.673542Z"}], "thread_id": "Thread-28", "execution_time": 0.28026533126831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_contract_address.e8714ee1a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.599897Z", "completed_at": "2025-08-22T20:29:20.641595Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.675808Z", "completed_at": "2025-08-22T20:29:20.675818Z"}], "thread_id": "Thread-29", "execution_time": 0.2806851863861084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_depositor_address.f3e976d68d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect depositor_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere depositor_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.590597Z", "completed_at": "2025-08-22T20:29:20.642181Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.676708Z", "completed_at": "2025-08-22T20:29:20.676719Z"}], "thread_id": "Thread-27", "execution_time": 0.28410840034484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_block_timestamp.b2f425af6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.605223Z", "completed_at": "2025-08-22T20:29:20.645614Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.679647Z", "completed_at": "2025-08-22T20:29:20.679656Z"}], "thread_id": "Thread-30", "execution_time": 0.283306360244751, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_event_timestamp.42906a28e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.724861Z", "completed_at": "2025-08-22T20:29:20.772247Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:20.997500Z", "completed_at": "2025-08-22T20:29:20.997518Z"}], "thread_id": "Thread-35", "execution_time": 0.32901787757873535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_log_index.548a0d340c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.731864Z", "completed_at": "2025-08-22T20:29:20.774785Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.011856Z", "completed_at": "2025-08-22T20:29:21.011870Z"}], "thread_id": "Thread-37", "execution_time": 0.3409156799316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_transaction_hash.fdd9d805b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.748840Z", "completed_at": "2025-08-22T20:29:20.943273Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.046326Z", "completed_at": "2025-08-22T20:29:21.046339Z"}], "thread_id": "Thread-39", "execution_time": 0.35985851287841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_timestamp.d03f151257", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.757079Z", "completed_at": "2025-08-22T20:29:20.948416Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.047944Z", "completed_at": "2025-08-22T20:29:21.047955Z"}], "thread_id": "Thread-34", "execution_time": 0.35809779167175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_event_name.821449d8bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.775989Z", "completed_at": "2025-08-22T20:29:21.017699Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.061033Z", "completed_at": "2025-08-22T20:29:21.061045Z"}], "thread_id": "Thread-2", "execution_time": 0.3583102226257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_log_index.5c1c243977", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.861061Z", "completed_at": "2025-08-22T20:29:21.018334Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.062592Z", "completed_at": "2025-08-22T20:29:21.062601Z"}], "thread_id": "Thread-38", "execution_time": 0.3591611385345459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_pool_address.129b9b2f1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pool_address\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere pool_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.867094Z", "completed_at": "2025-08-22T20:29:21.030219Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.063718Z", "completed_at": "2025-08-22T20:29:21.063726Z"}], "thread_id": "Thread-36", "execution_time": 0.35826945304870605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_transaction_hash.e2fc28195f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.871820Z", "completed_at": "2025-08-22T20:29:21.030796Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.065289Z", "completed_at": "2025-08-22T20:29:21.065300Z"}], "thread_id": "Thread-32", "execution_time": 0.3592038154602051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_events_transaction_hash.162d1b026f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.876286Z", "completed_at": "2025-08-22T20:29:21.031465Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.066730Z", "completed_at": "2025-08-22T20:29:21.066738Z"}], "thread_id": "Thread-11", "execution_time": 0.3599984645843506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolConfigurator_events_transaction_hash.2fcedf0475", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.881604Z", "completed_at": "2025-08-22T20:29:21.037127Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.067734Z", "completed_at": "2025-08-22T20:29:21.067742Z"}], "thread_id": "Thread-4", "execution_time": 0.3597266674041748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_number.772cd91469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.887005Z", "completed_at": "2025-08-22T20:29:21.037898Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.068679Z", "completed_at": "2025-08-22T20:29:21.068687Z"}], "thread_id": "Thread-14", "execution_time": 0.35999393463134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_timestamp.28ab9881a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.891490Z", "completed_at": "2025-08-22T20:29:21.038812Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.070118Z", "completed_at": "2025-08-22T20:29:21.070125Z"}], "thread_id": "Thread-6", "execution_time": 0.36081433296203613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_contract_address.5e413fb6b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.900613Z", "completed_at": "2025-08-22T20:29:21.039461Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.070985Z", "completed_at": "2025-08-22T20:29:21.070996Z"}], "thread_id": "Thread-40", "execution_time": 0.3604164123535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_type.fb2b12ee58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.896065Z", "completed_at": "2025-08-22T20:29:21.040185Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.071862Z", "completed_at": "2025-08-22T20:29:21.071870Z"}], "thread_id": "Thread-15", "execution_time": 0.3619356155395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_id.bacaecb2df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.904981Z", "completed_at": "2025-08-22T20:29:21.041014Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.072734Z", "completed_at": "2025-08-22T20:29:21.072745Z"}], "thread_id": "Thread-1", "execution_time": 0.3615236282348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_log_index.165bf735c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.909393Z", "completed_at": "2025-08-22T20:29:21.041734Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.073634Z", "completed_at": "2025-08-22T20:29:21.073643Z"}], "thread_id": "Thread-8", "execution_time": 0.361797571182251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_transaction_hash.4b872e6755", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.919653Z", "completed_at": "2025-08-22T20:29:21.042788Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.074522Z", "completed_at": "2025-08-22T20:29:21.074530Z"}], "thread_id": "Thread-7", "execution_time": 0.3607301712036133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_timestamp.f629afe28e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.928653Z", "completed_at": "2025-08-22T20:29:21.043769Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.075371Z", "completed_at": "2025-08-22T20:29:21.075379Z"}], "thread_id": "Thread-16", "execution_time": 0.3601717948913574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_log_index.8e8bf1d633", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.924038Z", "completed_at": "2025-08-22T20:29:21.044366Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.076214Z", "completed_at": "2025-08-22T20:29:21.076224Z"}], "thread_id": "Thread-10", "execution_time": 0.3616776466369629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_contract_address.7aa8aa1478", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.933230Z", "completed_at": "2025-08-22T20:29:21.045062Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.077043Z", "completed_at": "2025-08-22T20:29:21.077054Z"}], "thread_id": "Thread-31", "execution_time": 0.36124229431152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_transaction_hash.28a9f27947", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.915031Z", "completed_at": "2025-08-22T20:29:21.045692Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.077894Z", "completed_at": "2025-08-22T20:29:21.077901Z"}], "thread_id": "Thread-9", "execution_time": 0.3654055595397949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolInstance_events_event_id.5bd3309b6d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.939018Z", "completed_at": "2025-08-22T20:29:21.047222Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.079445Z", "completed_at": "2025-08-22T20:29:21.079453Z"}], "thread_id": "Thread-3", "execution_time": 0.3623499870300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bC3M_Oracle_events_transaction_hash.fed5e1c563", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.944005Z", "completed_at": "2025-08-22T20:29:21.049374Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.080967Z", "completed_at": "2025-08-22T20:29:21.080979Z"}], "thread_id": "Thread-13", "execution_time": 0.36324357986450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_number.3e4faff869", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.949088Z", "completed_at": "2025-08-22T20:29:21.050085Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.081880Z", "completed_at": "2025-08-22T20:29:21.081888Z"}], "thread_id": "Thread-17", "execution_time": 0.3628880977630615, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_timestamp.9aee384fb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.953516Z", "completed_at": "2025-08-22T20:29:21.050750Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.082750Z", "completed_at": "2025-08-22T20:29:21.082758Z"}], "thread_id": "Thread-5", "execution_time": 0.3631007671356201, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_contract_address.b6be4491b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.958457Z", "completed_at": "2025-08-22T20:29:21.051511Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.083632Z", "completed_at": "2025-08-22T20:29:21.083642Z"}], "thread_id": "Thread-33", "execution_time": 0.3633415699005127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_name.655be1dbf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.963339Z", "completed_at": "2025-08-22T20:29:21.052296Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.084505Z", "completed_at": "2025-08-22T20:29:21.084513Z"}], "thread_id": "Thread-20", "execution_time": 0.3635985851287842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_timestamp.65b0a361c3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.969227Z", "completed_at": "2025-08-22T20:29:21.053350Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.085391Z", "completed_at": "2025-08-22T20:29:21.085402Z"}], "thread_id": "Thread-12", "execution_time": 0.36383605003356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_log_index.edcd08f3d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.978259Z", "completed_at": "2025-08-22T20:29:21.053990Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.086277Z", "completed_at": "2025-08-22T20:29:21.086286Z"}], "thread_id": "Thread-18", "execution_time": 0.36345863342285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c69c10d4f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.973666Z", "completed_at": "2025-08-22T20:29:21.054666Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.087128Z", "completed_at": "2025-08-22T20:29:21.087139Z"}], "thread_id": "Thread-21", "execution_time": 0.364940881729126, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c86a200558", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.982682Z", "completed_at": "2025-08-22T20:29:21.055361Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.087997Z", "completed_at": "2025-08-22T20:29:21.088005Z"}], "thread_id": "Thread-22", "execution_time": 0.3645040988922119, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_number.a01484fb80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.987036Z", "completed_at": "2025-08-22T20:29:21.056910Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.089548Z", "completed_at": "2025-08-22T20:29:21.089556Z"}], "thread_id": "Thread-25", "execution_time": 0.3654193878173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_timestamp.9680585ac6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.992775Z", "completed_at": "2025-08-22T20:29:21.057501Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.090437Z", "completed_at": "2025-08-22T20:29:21.090448Z"}], "thread_id": "Thread-23", "execution_time": 0.3599731922149658, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_contract_address.9d8dacefb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:20.998525Z", "completed_at": "2025-08-22T20:29:21.058341Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.091312Z", "completed_at": "2025-08-22T20:29:21.091320Z"}], "thread_id": "Thread-19", "execution_time": 0.36017465591430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_event_name.d56a70b6b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.002837Z", "completed_at": "2025-08-22T20:29:21.059047Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.092132Z", "completed_at": "2025-08-22T20:29:21.092139Z"}], "thread_id": "Thread-26", "execution_time": 0.3555331230163574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_log_index.06d6f07e27", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.007218Z", "completed_at": "2025-08-22T20:29:21.060282Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.093632Z", "completed_at": "2025-08-22T20:29:21.093640Z"}], "thread_id": "Thread-24", "execution_time": 0.35631680488586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.02a05d1854", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.012962Z", "completed_at": "2025-08-22T20:29:21.061994Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.095425Z", "completed_at": "2025-08-22T20:29:21.095433Z"}], "thread_id": "Thread-28", "execution_time": 0.3574516773223877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.342e67119b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.018968Z", "completed_at": "2025-08-22T20:29:21.064657Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.097653Z", "completed_at": "2025-08-22T20:29:21.097665Z"}], "thread_id": "Thread-29", "execution_time": 0.3576819896697998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_block_timestamp.ee2f623fb4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.024649Z", "completed_at": "2025-08-22T20:29:21.066127Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.099198Z", "completed_at": "2025-08-22T20:29:21.099206Z"}], "thread_id": "Thread-27", "execution_time": 0.35855817794799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_contract_address.9a75ada408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.032021Z", "completed_at": "2025-08-22T20:29:21.069547Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.102110Z", "completed_at": "2025-08-22T20:29:21.102118Z"}], "thread_id": "Thread-30", "execution_time": 0.3588447570800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_log_index.99505e6cc4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.143074Z", "completed_at": "2025-08-22T20:29:21.187528Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.343488Z", "completed_at": "2025-08-22T20:29:21.343508Z"}], "thread_id": "Thread-35", "execution_time": 0.25479650497436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_timestamp.d0c596dfea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.151218Z", "completed_at": "2025-08-22T20:29:21.194728Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.359880Z", "completed_at": "2025-08-22T20:29:21.359896Z"}], "thread_id": "Thread-37", "execution_time": 0.2670114040374756, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.56bda730ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.169215Z", "completed_at": "2025-08-22T20:29:21.281800Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.392312Z", "completed_at": "2025-08-22T20:29:21.392331Z"}], "thread_id": "Thread-39", "execution_time": 0.2829124927520752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.2128bbb118", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.175746Z", "completed_at": "2025-08-22T20:29:21.297551Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.394111Z", "completed_at": "2025-08-22T20:29:21.394120Z"}], "thread_id": "Thread-34", "execution_time": 0.28342580795288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_timestamp.388a973e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.190088Z", "completed_at": "2025-08-22T20:29:21.365475Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.408297Z", "completed_at": "2025-08-22T20:29:21.408308Z"}], "thread_id": "Thread-2", "execution_time": 0.28630709648132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_contract_address.925725dc94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.196039Z", "completed_at": "2025-08-22T20:29:21.371414Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.409488Z", "completed_at": "2025-08-22T20:29:21.409497Z"}], "thread_id": "Thread-38", "execution_time": 0.2861618995666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_log_index.43eca84613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.200455Z", "completed_at": "2025-08-22T20:29:21.372282Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.410956Z", "completed_at": "2025-08-22T20:29:21.410964Z"}], "thread_id": "Thread-36", "execution_time": 0.28696298599243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_hash.dbd74bbec2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.205897Z", "completed_at": "2025-08-22T20:29:21.372961Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.412450Z", "completed_at": "2025-08-22T20:29:21.412461Z"}], "thread_id": "Thread-32", "execution_time": 0.28713297843933105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_timestamp.5e95caaec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.217214Z", "completed_at": "2025-08-22T20:29:21.378551Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.413462Z", "completed_at": "2025-08-22T20:29:21.413470Z"}], "thread_id": "Thread-4", "execution_time": 0.2861802577972412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_log_index.4d86fa50f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.212487Z", "completed_at": "2025-08-22T20:29:21.383881Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.414539Z", "completed_at": "2025-08-22T20:29:21.414548Z"}], "thread_id": "Thread-11", "execution_time": 0.2879188060760498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_contract_address.1adbd503a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.221949Z", "completed_at": "2025-08-22T20:29:21.384546Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.416019Z", "completed_at": "2025-08-22T20:29:21.416027Z"}], "thread_id": "Thread-14", "execution_time": 0.2881147861480713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.f26d7fac89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.227471Z", "completed_at": "2025-08-22T20:29:21.385652Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.417548Z", "completed_at": "2025-08-22T20:29:21.417557Z"}], "thread_id": "Thread-6", "execution_time": 0.28833699226379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bIB01_Oracle_events_transaction_hash.d090f3f6f3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.232000Z", "completed_at": "2025-08-22T20:29:21.386449Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.418443Z", "completed_at": "2025-08-22T20:29:21.418452Z"}], "thread_id": "Thread-40", "execution_time": 0.28861021995544434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_timestamp.d04237ee7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.242995Z", "completed_at": "2025-08-22T20:29:21.387293Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.419323Z", "completed_at": "2025-08-22T20:29:21.419332Z"}], "thread_id": "Thread-1", "execution_time": 0.28820300102233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_log_index.e78654368d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.236736Z", "completed_at": "2025-08-22T20:29:21.387881Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.420198Z", "completed_at": "2025-08-22T20:29:21.420207Z"}], "thread_id": "Thread-15", "execution_time": 0.28972506523132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_contract_address.894b7116b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.247421Z", "completed_at": "2025-08-22T20:29:21.388441Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.421036Z", "completed_at": "2025-08-22T20:29:21.421044Z"}], "thread_id": "Thread-8", "execution_time": 0.28928518295288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.b6309f3c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.252089Z", "completed_at": "2025-08-22T20:29:21.389398Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.421944Z", "completed_at": "2025-08-22T20:29:21.421953Z"}], "thread_id": "Thread-7", "execution_time": 0.28955602645874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.f8c471d6f8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.256653Z", "completed_at": "2025-08-22T20:29:21.390201Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.422813Z", "completed_at": "2025-08-22T20:29:21.422822Z"}], "thread_id": "Thread-16", "execution_time": 0.28983449935913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_timestamp.ea5eb46130", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.261281Z", "completed_at": "2025-08-22T20:29:21.390855Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.423709Z", "completed_at": "2025-08-22T20:29:21.423720Z"}], "thread_id": "Thread-10", "execution_time": 0.2901031970977783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_contract_address.3d9bb54174", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.266603Z", "completed_at": "2025-08-22T20:29:21.391436Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.424583Z", "completed_at": "2025-08-22T20:29:21.424591Z"}], "thread_id": "Thread-31", "execution_time": 0.2903330326080322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_log_index.7bbf5e90e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.271970Z", "completed_at": "2025-08-22T20:29:21.393334Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.426172Z", "completed_at": "2025-08-22T20:29:21.426186Z"}], "thread_id": "Thread-9", "execution_time": 0.2913084030151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.8917d56005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.277148Z", "completed_at": "2025-08-22T20:29:21.395020Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.427738Z", "completed_at": "2025-08-22T20:29:21.427747Z"}], "thread_id": "Thread-3", "execution_time": 0.2916421890258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.0bc4e9f337", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.287750Z", "completed_at": "2025-08-22T20:29:21.395853Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.428621Z", "completed_at": "2025-08-22T20:29:21.428629Z"}], "thread_id": "Thread-17", "execution_time": 0.290698766708374, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_timestamp.9775e2fb1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.299281Z", "completed_at": "2025-08-22T20:29:21.396732Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.429499Z", "completed_at": "2025-08-22T20:29:21.429508Z"}], "thread_id": "Thread-5", "execution_time": 0.29096078872680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_contract_address.6fdea4126c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.282570Z", "completed_at": "2025-08-22T20:29:21.397386Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.430392Z", "completed_at": "2025-08-22T20:29:21.430404Z"}], "thread_id": "Thread-13", "execution_time": 0.2930793762207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_rwa_backedfi_prices", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "relation_name": "`dbt`.`int_execution_rwa_backedfi_prices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.305626Z", "completed_at": "2025-08-22T20:29:21.398035Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.431277Z", "completed_at": "2025-08-22T20:29:21.431286Z"}], "thread_id": "Thread-33", "execution_time": 0.2920980453491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_log_index.44098cb871", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.309997Z", "completed_at": "2025-08-22T20:29:21.399020Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.432115Z", "completed_at": "2025-08-22T20:29:21.432127Z"}], "thread_id": "Thread-20", "execution_time": 0.29235291481018066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_timestamp.af620f849b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.314412Z", "completed_at": "2025-08-22T20:29:21.399787Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.433016Z", "completed_at": "2025-08-22T20:29:21.433025Z"}], "thread_id": "Thread-12", "execution_time": 0.2926018238067627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.88ba11e669", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.334214Z", "completed_at": "2025-08-22T20:29:21.401047Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.433939Z", "completed_at": "2025-08-22T20:29:21.433948Z"}], "thread_id": "Thread-25", "execution_time": 0.2853686809539795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_log_index.95ea7ac278", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.319466Z", "completed_at": "2025-08-22T20:29:21.402660Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.435506Z", "completed_at": "2025-08-22T20:29:21.435514Z"}], "thread_id": "Thread-18", "execution_time": 0.2944605350494385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.b4c568d90c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.323842Z", "completed_at": "2025-08-22T20:29:21.403275Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.436370Z", "completed_at": "2025-08-22T20:29:21.436379Z"}], "thread_id": "Thread-21", "execution_time": 0.2946591377258301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_timestamp.bf7705d6a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.338873Z", "completed_at": "2025-08-22T20:29:21.403846Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.437221Z", "completed_at": "2025-08-22T20:29:21.437233Z"}], "thread_id": "Thread-23", "execution_time": 0.2879817485809326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_block_timestamp.4dc290223b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.329615Z", "completed_at": "2025-08-22T20:29:21.404543Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.438066Z", "completed_at": "2025-08-22T20:29:21.438074Z"}], "thread_id": "Thread-22", "execution_time": 0.2959868907928467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_contract_address.b1c59a2277", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.349082Z", "completed_at": "2025-08-22T20:29:21.405559Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.439201Z", "completed_at": "2025-08-22T20:29:21.439212Z"}], "thread_id": "Thread-26", "execution_time": 0.28871941566467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_log_index.37ce7f1498", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.344642Z", "completed_at": "2025-08-22T20:29:21.406202Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.440091Z", "completed_at": "2025-08-22T20:29:21.440100Z"}], "thread_id": "Thread-19", "execution_time": 0.29025983810424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_contract_address.bbcc2fc5da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.353737Z", "completed_at": "2025-08-22T20:29:21.407566Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.441632Z", "completed_at": "2025-08-22T20:29:21.441640Z"}], "thread_id": "Thread-24", "execution_time": 0.2857348918914795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_transaction_hash.fe02a9b64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.360912Z", "completed_at": "2025-08-22T20:29:21.410331Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.443814Z", "completed_at": "2025-08-22T20:29:21.443823Z"}], "thread_id": "Thread-28", "execution_time": 0.28664517402648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_Hub_events_transaction_hash.1c932724e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.366537Z", "completed_at": "2025-08-22T20:29:21.411846Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.445396Z", "completed_at": "2025-08-22T20:29:21.445405Z"}], "thread_id": "Thread-29", "execution_time": 0.28644251823425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_timestamp.16109c20e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.373557Z", "completed_at": "2025-08-22T20:29:21.415413Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.448335Z", "completed_at": "2025-08-22T20:29:21.448347Z"}], "thread_id": "Thread-27", "execution_time": 0.288118839263916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_log_index.143d8c5c9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.379213Z", "completed_at": "2025-08-22T20:29:21.416926Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.449862Z", "completed_at": "2025-08-22T20:29:21.449874Z"}], "thread_id": "Thread-30", "execution_time": 0.2872500419616699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_transaction_hash.445891e408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.490700Z", "completed_at": "2025-08-22T20:29:21.537811Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.680146Z", "completed_at": "2025-08-22T20:29:21.680190Z"}], "thread_id": "Thread-35", "execution_time": 0.24550890922546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_NameRegistry_events_transaction_hash.b2db57971e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.502335Z", "completed_at": "2025-08-22T20:29:21.559846Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.714604Z", "completed_at": "2025-08-22T20:29:21.714620Z"}], "thread_id": "Thread-37", "execution_time": 0.2737894058227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_yields_sdai_rate_daily", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`int_yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`int_yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "relation_name": "`dbt`.`int_yields_sdai_rate_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.526938Z", "completed_at": "2025-08-22T20:29:21.630706Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.735422Z", "completed_at": "2025-08-22T20:29:21.735433Z"}], "thread_id": "Thread-34", "execution_time": 0.27715325355529785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_contract_address.55e37a25d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_sdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.521678Z", "completed_at": "2025-08-22T20:29:21.631521Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.736913Z", "completed_at": "2025-08-22T20:29:21.736923Z"}], "thread_id": "Thread-39", "execution_time": 0.28009724617004395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_timestamp.f61b316290", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_sdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.541620Z", "completed_at": "2025-08-22T20:29:21.704782Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.748851Z", "completed_at": "2025-08-22T20:29:21.748862Z"}], "thread_id": "Thread-2", "execution_time": 0.2782590389251709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_log_index.70e75cfc4a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_sdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.546841Z", "completed_at": "2025-08-22T20:29:21.705527Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.749868Z", "completed_at": "2025-08-22T20:29:21.749877Z"}], "thread_id": "Thread-38", "execution_time": 0.27851152420043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_transaction_hash.8bc24e2c1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.554543Z", "completed_at": "2025-08-22T20:29:21.714002Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.753018Z", "completed_at": "2025-08-22T20:29:21.753027Z"}], "thread_id": "Thread-36", "execution_time": 0.2803330421447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_number.ceeff5eb22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.560513Z", "completed_at": "2025-08-22T20:29:21.716001Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.755182Z", "completed_at": "2025-08-22T20:29:21.755192Z"}], "thread_id": "Thread-32", "execution_time": 0.2811744213104248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_timestamp.98dea1810b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.565284Z", "completed_at": "2025-08-22T20:29:21.716697Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.756265Z", "completed_at": "2025-08-22T20:29:21.756274Z"}], "thread_id": "Thread-4", "execution_time": 0.2816188335418701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_incremental_column.dda2c25ff4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect incremental_column\nfrom `dbt`.`contracts_wxdai_calls`\nwhere incremental_column is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.569827Z", "completed_at": "2025-08-22T20:29:21.721697Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.757377Z", "completed_at": "2025-08-22T20:29:21.757386Z"}], "thread_id": "Thread-11", "execution_time": 0.2820448875427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_hash.5f3c74de8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.575052Z", "completed_at": "2025-08-22T20:29:21.727260Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.758488Z", "completed_at": "2025-08-22T20:29:21.758497Z"}], "thread_id": "Thread-14", "execution_time": 0.281874418258667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_sdai_events_transaction_hash.50bdbdb4f5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.585830Z", "completed_at": "2025-08-22T20:29:21.728460Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.759485Z", "completed_at": "2025-08-22T20:29:21.759494Z"}], "thread_id": "Thread-40", "execution_time": 0.28084635734558105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,balance\n    ,rate\n    ,avg(rate) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rate_7dma\n    ,apy\n    ,ROUND((POWER((1+rate_7dma),365) - 1) * 100,2) AS apy_7dma\nFROM `dbt`.`int_consensus_validators_apy_daily`\nWHERE date > DATE '2021-12-08'", "relation_name": "`dbt`.`fct_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.592686Z", "completed_at": "2025-08-22T20:29:21.729542Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.760962Z", "completed_at": "2025-08-22T20:29:21.760970Z"}], "thread_id": "Thread-15", "execution_time": 0.28104686737060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,'withdrawls' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\n\nUNION ALL\n\nSELECT\n    date\n    ,'deposits' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_deposits_daily`", "relation_name": "`dbt`.`fct_consensus_deposits_withdrawls_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.596404Z", "completed_at": "2025-08-22T20:29:21.730085Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.762485Z", "completed_at": "2025-08-22T20:29:21.762494Z"}], "thread_id": "Thread-8", "execution_time": 0.28194165229797363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_timestamp.a0d94f1927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.589313Z", "completed_at": "2025-08-22T20:29:21.730689Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.763371Z", "completed_at": "2025-08-22T20:29:21.763380Z"}], "thread_id": "Thread-1", "execution_time": 0.2840712070465088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.581376Z", "completed_at": "2025-08-22T20:29:21.731520Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.764221Z", "completed_at": "2025-08-22T20:29:21.764232Z"}], "thread_id": "Thread-6", "execution_time": 0.2862372398376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_calls_transaction_hash.f8705da391", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.601263Z", "completed_at": "2025-08-22T20:29:21.732361Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.765062Z", "completed_at": "2025-08-22T20:29:21.765070Z"}], "thread_id": "Thread-7", "execution_time": 0.2838723659515381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_contract_address.6d72ec6909", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_wxdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.607430Z", "completed_at": "2025-08-22T20:29:21.733267Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.765919Z", "completed_at": "2025-08-22T20:29:21.765927Z"}], "thread_id": "Thread-16", "execution_time": 0.2841038703918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_log_index.f7c64f3a59", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_wxdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.616306Z", "completed_at": "2025-08-22T20:29:21.733831Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.766799Z", "completed_at": "2025-08-22T20:29:21.766808Z"}], "thread_id": "Thread-31", "execution_time": 0.2836925983428955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_events_transaction_hash.cf34c446fb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.611905Z", "completed_at": "2025-08-22T20:29:21.734529Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.767670Z", "completed_at": "2025-08-22T20:29:21.767678Z"}], "thread_id": "Thread-10", "execution_time": 0.28519439697265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_hash.e5bd1686bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.626142Z", "completed_at": "2025-08-22T20:29:21.736306Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.769297Z", "completed_at": "2025-08-22T20:29:21.769306Z"}], "thread_id": "Thread-3", "execution_time": 0.2837369441986084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_cloud.c41159661e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cloud\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere cloud is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.621077Z", "completed_at": "2025-08-22T20:29:21.737862Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.770857Z", "completed_at": "2025-08-22T20:29:21.770866Z"}], "thread_id": "Thread-9", "execution_time": 0.28651905059814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_client.09f15c0dd6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.632224Z", "completed_at": "2025-08-22T20:29:21.739000Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.771757Z", "completed_at": "2025-08-22T20:29:21.771768Z"}], "thread_id": "Thread-17", "execution_time": 0.2855403423309326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_date.85645cfc12", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.637422Z", "completed_at": "2025-08-22T20:29:21.739583Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.772663Z", "completed_at": "2025-08-22T20:29:21.772672Z"}], "thread_id": "Thread-5", "execution_time": 0.285830020904541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_value.6e304629e2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.643124Z", "completed_at": "2025-08-22T20:29:21.740762Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.773836Z", "completed_at": "2025-08-22T20:29:21.773845Z"}], "thread_id": "Thread-13", "execution_time": 0.2863452434539795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_date.17a4b4d6fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.648704Z", "completed_at": "2025-08-22T20:29:21.741346Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.774727Z", "completed_at": "2025-08-22T20:29:21.774735Z"}], "thread_id": "Thread-33", "execution_time": 0.28659915924072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_value.18da2344fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.653571Z", "completed_at": "2025-08-22T20:29:21.741884Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.775596Z", "completed_at": "2025-08-22T20:29:21.775604Z"}], "thread_id": "Thread-20", "execution_time": 0.2868680953979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_client.6c0ca0f06e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.658625Z", "completed_at": "2025-08-22T20:29:21.742901Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.776487Z", "completed_at": "2025-08-22T20:29:21.776498Z"}], "thread_id": "Thread-12", "execution_time": 0.2871265411376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_date.1689fe7ae8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.665536Z", "completed_at": "2025-08-22T20:29:21.743473Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.777370Z", "completed_at": "2025-08-22T20:29:21.777381Z"}], "thread_id": "Thread-25", "execution_time": 0.28742027282714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_client.e644725624", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.670528Z", "completed_at": "2025-08-22T20:29:21.744833Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.778875Z", "completed_at": "2025-08-22T20:29:21.778886Z"}], "thread_id": "Thread-18", "execution_time": 0.2829573154449463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_date.469721c547", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.675259Z", "completed_at": "2025-08-22T20:29:21.745646Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.779788Z", "completed_at": "2025-08-22T20:29:21.779801Z"}], "thread_id": "Thread-21", "execution_time": 0.28102922439575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_quic.4ea4e6aa99", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quic\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere quic is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.685772Z", "completed_at": "2025-08-22T20:29:21.746868Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.780709Z", "completed_at": "2025-08-22T20:29:21.780721Z"}], "thread_id": "Thread-22", "execution_time": 0.280498743057251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_date.3153592556", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.690266Z", "completed_at": "2025-08-22T20:29:21.747464Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.781607Z", "completed_at": "2025-08-22T20:29:21.781615Z"}], "thread_id": "Thread-26", "execution_time": 0.28077244758605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_value.428f56d13e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.681309Z", "completed_at": "2025-08-22T20:29:21.748050Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.782499Z", "completed_at": "2025-08-22T20:29:21.782508Z"}], "thread_id": "Thread-23", "execution_time": 0.2829444408416748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_value.752046c959", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.700072Z", "completed_at": "2025-08-22T20:29:21.750907Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.784766Z", "completed_at": "2025-08-22T20:29:21.784775Z"}], "thread_id": "Thread-24", "execution_time": 0.2757911682128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_client.6852a73a05", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.696521Z", "completed_at": "2025-08-22T20:29:21.751488Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.785648Z", "completed_at": "2025-08-22T20:29:21.785659Z"}], "thread_id": "Thread-19", "execution_time": 0.2841038703918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(cnt) AS cnt\n    FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    WHERE date < today()\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)),4) AS pct\nFROM \n    clients_blocks", "relation_name": "`dbt`.`fct_execution_blocks_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.706096Z", "completed_at": "2025-08-22T20:29:21.752379Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.786543Z", "completed_at": "2025-08-22T20:29:21.786551Z"}], "thread_id": "Thread-28", "execution_time": 0.2757244110107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_date.dd5f7f1301", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.710687Z", "completed_at": "2025-08-22T20:29:21.753918Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.788104Z", "completed_at": "2025-08-22T20:29:21.788113Z"}], "thread_id": "Thread-29", "execution_time": 0.27609753608703613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,SUM(bytes_diff) OVER (ORDER BY date ASC) AS bytes\nFROM `dbt`.`int_execution_state_size_full_diff_daily`\nWHERE date < today()", "relation_name": "`dbt`.`fct_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.717364Z", "completed_at": "2025-08-22T20:29:21.760336Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.793244Z", "completed_at": "2025-08-22T20:29:21.793254Z"}], "thread_id": "Thread-27", "execution_time": 0.2788066864013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_state_size_full_diff_daily_date.d17c9483d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_state_size_full_diff_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.722397Z", "completed_at": "2025-08-22T20:29:21.761906Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.794844Z", "completed_at": "2025-08-22T20:29:21.794854Z"}], "thread_id": "Thread-30", "execution_time": 0.2791726589202881, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,n_txs AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.831635Z", "completed_at": "2025-08-22T20:29:21.877393Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:21.994855Z", "completed_at": "2025-08-22T20:29:21.994872Z"}], "thread_id": "Thread-35", "execution_time": 0.2167654037475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_total", "compiled": true, "compiled_code": "SELECT\n    transaction_type\n    ,SUM(n_txs) AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nGROUP BY transaction_type\nORDER BY transaction_type", "relation_name": "`dbt`.`api_execution_transactions_cnt_total`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.840397Z", "completed_at": "2025-08-22T20:29:21.886489Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.117246Z", "completed_at": "2025-08-22T20:29:22.117264Z"}], "thread_id": "Thread-37", "execution_time": 0.32836389541625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,gas_used\n    ,gas_price_avg\n    ,gas_price_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_gas_used_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.853045Z", "completed_at": "2025-08-22T20:29:21.959392Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.133062Z", "completed_at": "2025-08-22T20:29:22.133078Z"}], "thread_id": "Thread-34", "execution_time": 0.332597017288208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_value_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,xdai_value \n    ,xdai_value_avg \n    ,xdai_value_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_value_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.857060Z", "completed_at": "2025-08-22T20:29:21.970303Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.135561Z", "completed_at": "2025-08-22T20:29:22.135571Z"}], "thread_id": "Thread-39", "execution_time": 0.3337075710296631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.866906Z", "completed_at": "2025-08-22T20:29:21.996042Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.142068Z", "completed_at": "2025-08-22T20:29:22.142080Z"}], "thread_id": "Thread-2", "execution_time": 0.33290791511535645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.872972Z", "completed_at": "2025-08-22T20:29:21.996659Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.143570Z", "completed_at": "2025-08-22T20:29:22.143579Z"}], "thread_id": "Thread-38", "execution_time": 0.33374691009521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.878139Z", "completed_at": "2025-08-22T20:29:22.000588Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.144561Z", "completed_at": "2025-08-22T20:29:22.144571Z"}], "thread_id": "Thread-36", "execution_time": 0.33347415924072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.887091Z", "completed_at": "2025-08-22T20:29:22.123398Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.149335Z", "completed_at": "2025-08-22T20:29:22.149348Z"}], "thread_id": "Thread-32", "execution_time": 0.3337230682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        ip,\n        any(client) AS client\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv4__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv4_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.897577Z", "completed_at": "2025-08-22T20:29:22.124666Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.150222Z", "completed_at": "2025-08-22T20:29:22.150230Z"}], "thread_id": "Thread-11", "execution_time": 0.33275890350341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_visit_ended_at.892f1eee6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.892938Z", "completed_at": "2025-08-22T20:29:22.125521Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.151165Z", "completed_at": "2025-08-22T20:29:22.151174Z"}], "thread_id": "Thread-4", "execution_time": 0.3343479633331299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_peer_id.85213b218b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.907858Z", "completed_at": "2025-08-22T20:29:22.126081Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.152579Z", "completed_at": "2025-08-22T20:29:22.152591Z"}], "thread_id": "Thread-40", "execution_time": 0.3338744640350342, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.903458Z", "completed_at": "2025-08-22T20:29:22.126777Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.153506Z", "completed_at": "2025-08-22T20:29:22.153518Z"}], "thread_id": "Thread-14", "execution_time": 0.3354039192199707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv4_peers_peer_id.6c2e84dcf5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.912884Z", "completed_at": "2025-08-22T20:29:22.127590Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.154424Z", "completed_at": "2025-08-22T20:29:22.154433Z"}], "thread_id": "Thread-15", "execution_time": 0.3349423408508301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_forks_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.917812Z", "completed_at": "2025-08-22T20:29:22.128303Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.155314Z", "completed_at": "2025-08-22T20:29:22.155322Z"}], "thread_id": "Thread-8", "execution_time": 0.33502912521362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_geo_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[1]) AS lat\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[2]) AS long\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2, 3, 4", "relation_name": "`dbt`.`int_p2p_discv5_geo_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.923297Z", "completed_at": "2025-08-22T20:29:22.129084Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.156206Z", "completed_at": "2025-08-22T20:29:22.156215Z"}], "thread_id": "Thread-1", "execution_time": 0.3353004455566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv5__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.928458Z", "completed_at": "2025-08-22T20:29:22.130030Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.157062Z", "completed_at": "2025-08-22T20:29:22.157074Z"}], "thread_id": "Thread-6", "execution_time": 0.3355412483215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_peer_id.e1f35aa77b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.934117Z", "completed_at": "2025-08-22T20:29:22.130682Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.157931Z", "completed_at": "2025-08-22T20:29:22.157939Z"}], "thread_id": "Thread-7", "execution_time": 0.33572959899902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_visit_ended_at.c6572c36d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.939373Z", "completed_at": "2025-08-22T20:29:22.131761Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.158790Z", "completed_at": "2025-08-22T20:29:22.158801Z"}], "thread_id": "Thread-16", "execution_time": 0.33596014976501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_peers_peer_id.90f643e9aa", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.943741Z", "completed_at": "2025-08-22T20:29:22.132413Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.159694Z", "completed_at": "2025-08-22T20:29:22.159702Z"}], "thread_id": "Thread-31", "execution_time": 0.33622288703918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_visits_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`), 7)\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`)\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`), 7)\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`)\n)\n\nSELECT\n    t2.total_visits AS discv4_total_visits,\n    t2.pct_successful AS discv4_pct_successful,\n    t2.crawls AS discv4_crawls,\n    ROUND((COALESCE(t2.crawls / NULLIF(t1.crawls, 0), 0) - 1) * 100, 1) AS change_discv4_crawls_pct,\n    t4.total_visits AS discv5_total_visits,\n    t4.pct_successful AS discv5_pct_successful,\n    t4.crawls AS discv5_crawls,\n    ROUND((COALESCE(t4.crawls / NULLIF(t2.crawls, 0), 0) - 1) * 100, 1) AS change_discv5_crawls_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_visits_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.952505Z", "completed_at": "2025-08-22T20:29:22.134027Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.160707Z", "completed_at": "2025-08-22T20:29:22.160715Z"}], "thread_id": "Thread-3", "execution_time": 0.3354001045227051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nORDER BY bticker, date", "relation_name": "`dbt`.`fct_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.948971Z", "completed_at": "2025-08-22T20:29:22.134629Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.161575Z", "completed_at": "2025-08-22T20:29:22.161587Z"}], "thread_id": "Thread-10", "execution_time": 0.33749914169311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_graffiti_cloud", "compiled": true, "compiled_code": "SELECT\n    label\n    ,graffiti\n    ,value\nFROM `dbt`.`fct_consensus_graffiti_cloud`\nORDER BY label DESC, value DESC", "relation_name": "`dbt`.`api_consensus_graffiti_cloud`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.965979Z", "completed_at": "2025-08-22T20:29:22.136531Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.162598Z", "completed_at": "2025-08-22T20:29:22.162606Z"}], "thread_id": "Thread-17", "execution_time": 0.3354301452636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_date.10510ec5d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.960060Z", "completed_at": "2025-08-22T20:29:22.137441Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.163464Z", "completed_at": "2025-08-22T20:29:22.163473Z"}], "thread_id": "Thread-9", "execution_time": 0.3369324207305908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_bticker.ccc46c2963", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.975308Z", "completed_at": "2025-08-22T20:29:22.138397Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.164337Z", "completed_at": "2025-08-22T20:29:22.164345Z"}], "thread_id": "Thread-13", "execution_time": 0.335906982421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_yields_sdai_apy_daily", "compiled": true, "compiled_code": "WITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`int_yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "relation_name": "`dbt`.`fct_yields_sdai_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.970978Z", "completed_at": "2025-08-22T20:29:22.139169Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.165207Z", "completed_at": "2025-08-22T20:29:22.165219Z"}], "thread_id": "Thread-5", "execution_time": 0.337435245513916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_execution_rwa_backedfi_prices_bticker.43f0b20be3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.978669Z", "completed_at": "2025-08-22T20:29:22.139897Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.166067Z", "completed_at": "2025-08-22T20:29:22.166075Z"}], "thread_id": "Thread-33", "execution_time": 0.3370506763458252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_yields_sdai_rate_daily_date.df9fcc0c06", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_yields_sdai_rate_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.982975Z", "completed_at": "2025-08-22T20:29:22.140545Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.166919Z", "completed_at": "2025-08-22T20:29:22.166927Z"}], "thread_id": "Thread-20", "execution_time": 0.3372650146484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,label\n    ,apy\nFROM (\n    SELECT date, 'Daily' AS label, apy AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n    UNION ALL \n    SELECT date, '7DMA' AS label, apy_7dma AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n)\nWHERE date < DATE '2024-12-01'\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.986804Z", "completed_at": "2025-08-22T20:29:22.141284Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.168109Z", "completed_at": "2025-08-22T20:29:22.168120Z"}], "thread_id": "Thread-12", "execution_time": 0.33783578872680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,cnt AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.991378Z", "completed_at": "2025-08-22T20:29:22.142944Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.169128Z", "completed_at": "2025-08-22T20:29:22.169137Z"}], "thread_id": "Thread-25", "execution_time": 0.3382570743560791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,total_amount AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_volume_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:21.997314Z", "completed_at": "2025-08-22T20:29:22.145380Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.170475Z", "completed_at": "2025-08-22T20:29:22.170486Z"}], "thread_id": "Thread-18", "execution_time": 0.33284902572631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,cnt AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.001300Z", "completed_at": "2025-08-22T20:29:22.146223Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.171974Z", "completed_at": "2025-08-22T20:29:22.171986Z"}], "thread_id": "Thread-29", "execution_time": 0.33370161056518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_pct_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,pct AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_pct_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.009172Z", "completed_at": "2025-08-22T20:29:22.147198Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.173996Z", "completed_at": "2025-08-22T20:29:22.174005Z"}], "thread_id": "Thread-22", "execution_time": 0.3343486785888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.014876Z", "completed_at": "2025-08-22T20:29:22.147938Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.174880Z", "completed_at": "2025-08-22T20:29:22.174891Z"}], "thread_id": "Thread-23", "execution_time": 0.3309445381164551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,bytes/POWER(10,9) AS value\nFROM `dbt`.`fct_execution_state_full_size_daily`", "relation_name": "`dbt`.`api_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.004646Z", "completed_at": "2025-08-22T20:29:22.148663Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.175783Z", "completed_at": "2025-08-22T20:29:22.175792Z"}], "thread_id": "Thread-21", "execution_time": 0.336794376373291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.118425Z", "completed_at": "2025-08-22T20:29:22.151973Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.177006Z", "completed_at": "2025-08-22T20:29:22.177014Z"}], "thread_id": "Thread-24", "execution_time": 0.331737756729126, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_state_full_size_daily_date.d76bb8ce85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.249476Z", "completed_at": "2025-08-22T20:29:22.416869Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.467822Z", "completed_at": "2025-08-22T20:29:22.467839Z"}], "thread_id": "Thread-28", "execution_time": 0.26886940002441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.254888Z", "completed_at": "2025-08-22T20:29:22.422273Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.470768Z", "completed_at": "2025-08-22T20:29:22.470778Z"}], "thread_id": "Thread-26", "execution_time": 0.2696661949157715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv4_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.258522Z", "completed_at": "2025-08-22T20:29:22.433748Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.472636Z", "completed_at": "2025-08-22T20:29:22.472647Z"}], "thread_id": "Thread-19", "execution_time": 0.27083659172058105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_info_latest", "compiled": true, "compiled_code": "WITH\n\ndeposits_withdrawls_latest AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_deposits_withdrawls_daily`)\n),\n\ndeposits_withdrawls_7d AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n),\n\napy_latest AS (\n    SELECT\n        apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`)\n),\n\napy_7d AS (\n    SELECT\n       apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`), 7)\n),\n\nstatus_latest AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`)\n),\n\nstatus_7d AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`), 7)\n),\n\n\n\ninfo_latest AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_latest),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_latest\n),\n\ninfo_7d AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_7d),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_7d\n)\n\nSELECT\n    t1.label\n    ,t1.value AS value\n    ,IF(t1.value=0 AND t2.value=0, 0, ROUND((COALESCE(t2.value / NULLIF(t1.value, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM info_latest t1\nINNER JOIN info_7d t2\nON t2.label = t1.label", "relation_name": "`dbt`.`fct_consensus_info_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.268287Z", "completed_at": "2025-08-22T20:29:22.443940Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.475105Z", "completed_at": "2025-08-22T20:29:22.475116Z"}], "thread_id": "Thread-14", "execution_time": 0.2703220844268799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_clients_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n)\n\nSELECT\n    t2.discv4_count AS discv4_count,\n    ROUND((COALESCE(t2.discv4_count / NULLIF(t1.discv4_count, 0), 0) - 1) * 100, 1) AS change_discv4_pct,\n    t4.discv5_count AS discv5_count,\n    ROUND((COALESCE(t4.discv5_count / NULLIF(t3.discv5_count, 0), 0) - 1) * 100, 1) AS change_discv5_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.277829Z", "completed_at": "2025-08-22T20:29:22.444758Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.476628Z", "completed_at": "2025-08-22T20:29:22.476636Z"}], "thread_id": "Thread-15", "execution_time": 0.269913911819458, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv5_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.274109Z", "completed_at": "2025-08-22T20:29:22.445346Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.477575Z", "completed_at": "2025-08-22T20:29:22.477584Z"}], "thread_id": "Thread-30", "execution_time": 0.2714977264404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.281509Z", "completed_at": "2025-08-22T20:29:22.446441Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.479011Z", "completed_at": "2025-08-22T20:29:22.479019Z"}], "thread_id": "Thread-35", "execution_time": 0.27164578437805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_date.5fbdde7245", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.290860Z", "completed_at": "2025-08-22T20:29:22.447252Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.479905Z", "completed_at": "2025-08-22T20:29:22.479916Z"}], "thread_id": "Thread-37", "execution_time": 0.27128028869628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_metric.71ca66ed76", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.286241Z", "completed_at": "2025-08-22T20:29:22.447895Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.480795Z", "completed_at": "2025-08-22T20:29:22.480804Z"}], "thread_id": "Thread-8", "execution_time": 0.27280306816101074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_label.f7bfe8acf8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.297287Z", "completed_at": "2025-08-22T20:29:22.449002Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.481703Z", "completed_at": "2025-08-22T20:29:22.481712Z"}], "thread_id": "Thread-1", "execution_time": 0.27216053009033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_value.c619ab212e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.301925Z", "completed_at": "2025-08-22T20:29:22.449593Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.482609Z", "completed_at": "2025-08-22T20:29:22.482620Z"}], "thread_id": "Thread-34", "execution_time": 0.2724180221557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_current_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Current Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_current_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.305237Z", "completed_at": "2025-08-22T20:29:22.450298Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.483501Z", "completed_at": "2025-08-22T20:29:22.483509Z"}], "thread_id": "Thread-6", "execution_time": 0.2726783752441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_next_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Next Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_next_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.308440Z", "completed_at": "2025-08-22T20:29:22.450850Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.484382Z", "completed_at": "2025-08-22T20:29:22.484390Z"}], "thread_id": "Thread-39", "execution_time": 0.27292847633361816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`", "relation_name": "`dbt`.`fct_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.316277Z", "completed_at": "2025-08-22T20:29:22.452622Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.485275Z", "completed_at": "2025-08-22T20:29:22.485287Z"}], "thread_id": "Thread-7", "execution_time": 0.2725820541381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_date.8e990ae415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.311823Z", "completed_at": "2025-08-22T20:29:22.453631Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.486130Z", "completed_at": "2025-08-22T20:29:22.486139Z"}], "thread_id": "Thread-2", "execution_time": 0.2740614414215088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_cnt.f1ea59a2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.322059Z", "completed_at": "2025-08-22T20:29:22.454262Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.487018Z", "completed_at": "2025-08-22T20:29:22.487026Z"}], "thread_id": "Thread-38", "execution_time": 0.27368855476379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_fork.5ed0691025", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.330891Z", "completed_at": "2025-08-22T20:29:22.455097Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.487909Z", "completed_at": "2025-08-22T20:29:22.487920Z"}], "thread_id": "Thread-36", "execution_time": 0.2732882499694824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    peer_ip,\n    peer_discovery_id_prefix,\n    peer_cl_fork_name,\n    peer_cl_next_fork_name,\n    peer_client,\n    peer_hostname,\n    peer_city,\n    peer_country,\n    peer_org,\n    splitByChar(',', peer_loc)[1] AS peer_lat,\n    splitByChar(',', peer_loc)[2] AS peer_lon,\n    neighbor_ip,\n    neighbor_discovery_id_prefix,\n    neighbor_cl_fork_name,\n    neighbor_cl_next_fork_name,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n    splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n    cnt\nFROM  `dbt`.`int_p2p_discv5_topology_latest`", "relation_name": "`dbt`.`api_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.334719Z", "completed_at": "2025-08-22T20:29:22.456135Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.488810Z", "completed_at": "2025-08-22T20:29:22.488822Z"}], "thread_id": "Thread-27", "execution_time": 0.2735617160797119, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\ndiscv4_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv4_topology_latest`\n),\n\ndiscv5_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv5_topology_latest`\n)\n\nSELECT 'DiscV4' AS protocol, * FROM discv4_topology\nUNION ALL\nSELECT 'DiscV5' AS protocol, * FROM discv5_topology", "relation_name": "`dbt`.`fct_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.326505Z", "completed_at": "2025-08-22T20:29:22.456734Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.489679Z", "completed_at": "2025-08-22T20:29:22.489688Z"}], "thread_id": "Thread-16", "execution_time": 0.27571749687194824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_label.2c896187e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.354185Z", "completed_at": "2025-08-22T20:29:22.457907Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.490554Z", "completed_at": "2025-08-22T20:29:22.490563Z"}], "thread_id": "Thread-11", "execution_time": 0.27284789085388184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_peer_id.70954d55c9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.338818Z", "completed_at": "2025-08-22T20:29:22.458596Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.491468Z", "completed_at": "2025-08-22T20:29:22.491481Z"}], "thread_id": "Thread-31", "execution_time": 0.2756235599517822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_esg_country_power_consumption", "compiled": true, "compiled_code": "\n\n\nWITH\n\nconsensus_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_consensus_power`\n),\n\nexecution_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_execution_power`\n),\n\nidle_electric_power AS (\n    SELECT\n        type\n        ,mean\n    FROM\n        `dbt`.`stg_esg_idle_electric_power`\n),\n\nnode_distribution AS (\n    SELECT\n        type\n        ,distribution\n    FROM\n        `dbt`.`stg_esg_node_distribution`\n),\n\nnode_config_power AS (\n    SELECT\n        t1.type\n        ,t1.client AS consensus_client\n        ,t2.client AS execution_client\n        ,t1.mean + t2.mean + t3.mean AS mean\n    FROM\n        consensus_power t1\n    INNER JOIN\n        execution_power t2\n        ON \n        t2.type = t1.type\n    INNER JOIN\n        idle_electric_power t3\n        ON \n        t3.type = t1.type\n\n),\n\nbest_guess_per_client AS (\n    SELECT\n        t1.consensus_client\n        ,t1.execution_client\n        ,AVG(t1.mean * t2.distribution) AS mean\n    FROM\n        node_config_power t1\n    INNER JOIN\n        node_distribution t2\n        ON \n        t2.type = t1.type\n    GROUP BY\n        t1.consensus_client\n        ,t1.execution_client\n),\n\nconfiguration_distribution AS (\n    SELECT \n        execution_client\n        ,consensus_client\n        ,frac\n    FROM (\n        SELECT\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind', 'Nethermind']) AS execution_client,\n            arrayJoin(['Lighthouse', 'Teku', 'Lodestar', 'Nimbus', 'Lighthouse', 'Teku', 'Lodestar', 'Nimbus']) AS consensus_client,\n            arrayJoin([0.340, 0.114, 0.044, 0.002, 0.340, 0.114, 0.044, 0.002]) AS frac\n    )\n),\n\npower_best_guess AS (\n    SELECT \n        SUM(t1.mean * t2.frac) AS mean\n    FROM \n        best_guess_per_client t1\n    INNER JOIN\n        configuration_distribution t2\n        ON\n        t2.execution_client = t1.execution_client\n        AND\n        t2.consensus_client = t1.consensus_client\n)\n\n\nSELECT\n    t1.date\n    ,t1.country\n    ,t1.cnt * t2.mean AS power\nFROM\n    `dbt`.`int_p2p_discv5_geo_daily` t1\nCROSS JOIN \n    power_best_guess t2", "relation_name": "`dbt`.`int_esg_country_power_consumption`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.349607Z", "completed_at": "2025-08-22T20:29:22.459173Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.492354Z", "completed_at": "2025-08-22T20:29:22.492362Z"}], "thread_id": "Thread-3", "execution_time": 0.2752382755279541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_ip.18de621d28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ip\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.345126Z", "completed_at": "2025-08-22T20:29:22.459794Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.493213Z", "completed_at": "2025-08-22T20:29:22.493221Z"}], "thread_id": "Thread-32", "execution_time": 0.276716947555542, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_date.de8e044688", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.358824Z", "completed_at": "2025-08-22T20:29:22.460661Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.494071Z", "completed_at": "2025-08-22T20:29:22.494080Z"}], "thread_id": "Thread-10", "execution_time": 0.2757375240325928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_cnt.ad27ee043e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.363423Z", "completed_at": "2025-08-22T20:29:22.461533Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.494966Z", "completed_at": "2025-08-22T20:29:22.494975Z"}], "thread_id": "Thread-4", "execution_time": 0.2759993076324463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_date.6994a84654", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.368449Z", "completed_at": "2025-08-22T20:29:22.462352Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.495837Z", "completed_at": "2025-08-22T20:29:22.495849Z"}], "thread_id": "Thread-17", "execution_time": 0.27625584602355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_discovery_id_prefix.43e20b120a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.374852Z", "completed_at": "2025-08-22T20:29:22.462953Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.496767Z", "completed_at": "2025-08-22T20:29:22.496776Z"}], "thread_id": "Thread-40", "execution_time": 0.27652740478515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_ip.05c8d6b346", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_ip\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.379253Z", "completed_at": "2025-08-22T20:29:22.463550Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.497658Z", "completed_at": "2025-08-22T20:29:22.497669Z"}], "thread_id": "Thread-9", "execution_time": 0.27680444717407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_geo_daily_peer_id.51e0b67531", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.383822Z", "completed_at": "2025-08-22T20:29:22.464579Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.498520Z", "completed_at": "2025-08-22T20:29:22.498528Z"}], "thread_id": "Thread-13", "execution_time": 0.2770211696624756, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "SELECT\n  bticker,\n  date,\n  price         \nFROM `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nORDER BY\n  bticker,\n  date", "relation_name": "`dbt`.`api_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.387126Z", "completed_at": "2025-08-22T20:29:22.465362Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.499381Z", "completed_at": "2025-08-22T20:29:22.499390Z"}], "thread_id": "Thread-5", "execution_time": 0.27727222442626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_bticker.0e7519a2a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.391653Z", "completed_at": "2025-08-22T20:29:22.465924Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.500256Z", "completed_at": "2025-08-22T20:29:22.500264Z"}], "thread_id": "Thread-33", "execution_time": 0.27744150161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_date.99116a3e90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.396313Z", "completed_at": "2025-08-22T20:29:22.466682Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.501084Z", "completed_at": "2025-08-22T20:29:22.501093Z"}], "thread_id": "Thread-20", "execution_time": 0.2776756286621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_price.ff49bc8a9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.407634Z", "completed_at": "2025-08-22T20:29:22.468791Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.502149Z", "completed_at": "2025-08-22T20:29:22.502179Z"}], "thread_id": "Thread-25", "execution_time": 0.27752685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_label.e8b1838f2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.412412Z", "completed_at": "2025-08-22T20:29:22.469383Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.503036Z", "completed_at": "2025-08-22T20:29:22.503045Z"}], "thread_id": "Thread-29", "execution_time": 0.27714967727661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.402756Z", "completed_at": "2025-08-22T20:29:22.470209Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.504005Z", "completed_at": "2025-08-22T20:29:22.504018Z"}], "thread_id": "Thread-12", "execution_time": 0.2799794673919678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_date.b2bdc5f65c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.417593Z", "completed_at": "2025-08-22T20:29:22.471667Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.505066Z", "completed_at": "2025-08-22T20:29:22.505075Z"}], "thread_id": "Thread-18", "execution_time": 0.2785317897796631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.422942Z", "completed_at": "2025-08-22T20:29:22.473588Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.506188Z", "completed_at": "2025-08-22T20:29:22.506197Z"}], "thread_id": "Thread-22", "execution_time": 0.27776312828063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.429041Z", "completed_at": "2025-08-22T20:29:22.474340Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.507253Z", "completed_at": "2025-08-22T20:29:22.507262Z"}], "thread_id": "Thread-23", "execution_time": 0.2782299518585205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_client.04116a3527", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.434369Z", "completed_at": "2025-08-22T20:29:22.475988Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.510143Z", "completed_at": "2025-08-22T20:29:22.510171Z"}], "thread_id": "Thread-21", "execution_time": 0.2804837226867676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_date.49d7e9d160", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.438952Z", "completed_at": "2025-08-22T20:29:22.478430Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.511927Z", "completed_at": "2025-08-22T20:29:22.511936Z"}], "thread_id": "Thread-24", "execution_time": 0.28101181983947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_state_full_size_daily_date.453c8c3223", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.563607Z", "completed_at": "2025-08-22T20:29:22.676526Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.693769Z", "completed_at": "2025-08-22T20:29:22.693785Z"}], "thread_id": "Thread-14", "execution_time": 0.1637096405029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_apy_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'APY7D'", "relation_name": "`dbt`.`api_consensus_info_apy_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.559191Z", "completed_at": "2025-08-22T20:29:22.677219Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.694994Z", "completed_at": "2025-08-22T20:29:22.695004Z"}], "thread_id": "Thread-28", "execution_time": 0.16561031341552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_active_ongoing_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'active_ongoing'", "relation_name": "`dbt`.`api_consensus_info_active_ongoing_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.572272Z", "completed_at": "2025-08-22T20:29:22.678109Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.697614Z", "completed_at": "2025-08-22T20:29:22.697622Z"}], "thread_id": "Thread-19", "execution_time": 0.1660630702972412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'withdrawls_cnt'", "relation_name": "`dbt`.`api_consensus_info_withdrawls_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.567054Z", "completed_at": "2025-08-22T20:29:22.678857Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.698520Z", "completed_at": "2025-08-22T20:29:22.698528Z"}], "thread_id": "Thread-26", "execution_time": 0.1677412986755371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'deposits_cnt'", "relation_name": "`dbt`.`api_consensus_info_deposits_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.575680Z", "completed_at": "2025-08-22T20:29:22.679919Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.699410Z", "completed_at": "2025-08-22T20:29:22.699418Z"}], "thread_id": "Thread-15", "execution_time": 0.16707515716552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_date.1187b1bb2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.585050Z", "completed_at": "2025-08-22T20:29:22.680616Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.700318Z", "completed_at": "2025-08-22T20:29:22.700329Z"}], "thread_id": "Thread-30", "execution_time": 0.16669797897338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_metric.7417fc683c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.594976Z", "completed_at": "2025-08-22T20:29:22.681365Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.701189Z", "completed_at": "2025-08-22T20:29:22.701198Z"}], "thread_id": "Thread-38", "execution_time": 0.166304349899292, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_fork.285fc1bfce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.580520Z", "completed_at": "2025-08-22T20:29:22.682127Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.702030Z", "completed_at": "2025-08-22T20:29:22.702039Z"}], "thread_id": "Thread-35", "execution_time": 0.16906356811523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_label.dc6cbbebc0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.600361Z", "completed_at": "2025-08-22T20:29:22.683282Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.702924Z", "completed_at": "2025-08-22T20:29:22.702932Z"}], "thread_id": "Thread-8", "execution_time": 0.1673872470855713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_date.617d796abf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.589619Z", "completed_at": "2025-08-22T20:29:22.684209Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.703810Z", "completed_at": "2025-08-22T20:29:22.703819Z"}], "thread_id": "Thread-37", "execution_time": 0.16955065727233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_date.81d71f6217", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.605012Z", "completed_at": "2025-08-22T20:29:22.684965Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.704723Z", "completed_at": "2025-08-22T20:29:22.704734Z"}], "thread_id": "Thread-36", "execution_time": 0.1685466766357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_fork.6488c6272b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.614357Z", "completed_at": "2025-08-22T20:29:22.685980Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.705606Z", "completed_at": "2025-08-22T20:29:22.705615Z"}], "thread_id": "Thread-6", "execution_time": 0.16841959953308105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_date.eb16694787", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.609539Z", "completed_at": "2025-08-22T20:29:22.686623Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.706731Z", "completed_at": "2025-08-22T20:29:22.706740Z"}], "thread_id": "Thread-1", "execution_time": 0.16995739936828613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_p2p_discv5_forks_daily_date.71a6724bfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.619085Z", "completed_at": "2025-08-22T20:29:22.687197Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.707772Z", "completed_at": "2025-08-22T20:29:22.707781Z"}], "thread_id": "Thread-11", "execution_time": 0.16975665092468262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_neighbor_discovery_id_prefix.fcd761a7f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect neighbor_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere neighbor_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.626355Z", "completed_at": "2025-08-22T20:29:22.687744Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.708704Z", "completed_at": "2025-08-22T20:29:22.708713Z"}], "thread_id": "Thread-39", "execution_time": 0.17002630233764648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_peer_discovery_id_prefix.0d3232d2af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.631947Z", "completed_at": "2025-08-22T20:29:22.688830Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.709591Z", "completed_at": "2025-08-22T20:29:22.709600Z"}], "thread_id": "Thread-32", "execution_time": 0.17026257514953613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_carbon_emissions", "compiled": true, "compiled_code": "WITH\n\ngnosis_power_consumption AS (\n    SELECT\n        date\n        ,country\n        ,power\n    FROM\n        `dbt`.`int_esg_country_power_consumption`\n),\n\nember_data AS (\n    SELECT\n        \"Date\" AS month_date\n        ,\"Value\" AS value\n        ,lagInFrame(\"Value\") OVER (PARTITION BY \"ISO 3 code\" ORDER BY \"Date\" ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS lag_value\n        ,\"ISO 3 code\" AS country\n    FROM\n        `crawlers_data`.`ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n\n)\n\nSELECT\n    t1.date\n    ,SUM(t1.power * 24)/POWER(10,6) AS energy -- MWh\n    ,SUM(\n        t1.power/POWER(10,3)  -- power in kW\n        * 24 -- hours in day\n        * COALESCE(t3.value,t3.lag_value) -- CIF in gCO2/kWh\n        )/POWER(10,6) AS co2_emissions -- in tCO2e\n    ,AVG(COALESCE(t3.value,t3.lag_value)) AS mean_cif\nFROM\n    gnosis_power_consumption t1\nLEFT JOIN\n    `crawlers_data`.`country_codes` t2\n    ON\n    t2.\"alpha-2\" = t1.country\nINNER JOIN\n    ember_data t3\n    ON\n    t3.country = t2.\"alpha-3\"\n    AND\n    t3.month_date = toStartOfMonth(t1.date)\nGROUP BY \n    1", "relation_name": "`dbt`.`fct_esg_carbon_emissions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.640665Z", "completed_at": "2025-08-22T20:29:22.689629Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.710487Z", "completed_at": "2025-08-22T20:29:22.710495Z"}], "thread_id": "Thread-27", "execution_time": 0.1699206829071045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_client.4a35be3114", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.636483Z", "completed_at": "2025-08-22T20:29:22.690478Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.711364Z", "completed_at": "2025-08-22T20:29:22.711373Z"}], "thread_id": "Thread-2", "execution_time": 0.17142796516418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_power_consumption_top10", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        t1.date\n        ,IF(t1.country='' OR t1.country='Unknown', 'Unknown', t2.name) AS country\n        ,t1.power\n        ,ROW_NUMBER() OVER (PARTITION BY t1.date ORDER BY t1.power DESC) AS rank\n    FROM\n        `dbt`.`int_esg_country_power_consumption` t1\n    LEFT JOIN\n        `crawlers_data`.`country_codes` t2\n        ON\n        t2.\"alpha-2\" = t1.country\n)\n\nSELECT\n    date\n    ,IF(rank>10, 'Other', country) AS country\n    ,SUM(power) AS power\nFROM\n    gnosis_power_consumption\nGROUP BY \n    1, 2", "relation_name": "`dbt`.`fct_esg_power_consumption_top10`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.645370Z", "completed_at": "2025-08-22T20:29:22.691057Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.712274Z", "completed_at": "2025-08-22T20:29:22.712283Z"}], "thread_id": "Thread-10", "execution_time": 0.17110419273376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_country.5f0b1d361e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.652009Z", "completed_at": "2025-08-22T20:29:22.692102Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.713123Z", "completed_at": "2025-08-22T20:29:22.713131Z"}], "thread_id": "Thread-34", "execution_time": 0.17136478424072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_date.f5adc6ed90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.656776Z", "completed_at": "2025-08-22T20:29:22.693063Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.713982Z", "completed_at": "2025-08-22T20:29:22.713991Z"}], "thread_id": "Thread-4", "execution_time": 0.17157769203186035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_type.979aeea8a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.661370Z", "completed_at": "2025-08-22T20:29:22.695837Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.715201Z", "completed_at": "2025-08-22T20:29:22.715210Z"}], "thread_id": "Thread-31", "execution_time": 0.17220163345336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_bticker.4eb35e749f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.666070Z", "completed_at": "2025-08-22T20:29:22.696432Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.716053Z", "completed_at": "2025-08-22T20:29:22.716062Z"}], "thread_id": "Thread-5", "execution_time": 0.17246580123901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_date.1d033684e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.670958Z", "completed_at": "2025-08-22T20:29:22.697011Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.716946Z", "completed_at": "2025-08-22T20:29:22.716955Z"}], "thread_id": "Thread-7", "execution_time": 0.17269515991210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_api_execution_rwa_backedfi_prices_daily_bticker.accf7541b4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.747262Z", "completed_at": "2025-08-22T20:29:22.757756Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.760437Z", "completed_at": "2025-08-22T20:29:22.760453Z"}], "thread_id": "Thread-4", "execution_time": 0.0347440242767334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_power.ab3e0cdb9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect power\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere power is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.730248Z", "completed_at": "2025-08-22T20:29:22.758417Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.762034Z", "completed_at": "2025-08-22T20:29:22.762042Z"}], "thread_id": "Thread-16", "execution_time": 0.0383453369140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_carbon_emissions_date.cc8d5b1e7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_carbon_emissions`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.735415Z", "completed_at": "2025-08-22T20:29:22.759224Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.762960Z", "completed_at": "2025-08-22T20:29:22.762970Z"}], "thread_id": "Thread-40", "execution_time": 0.03853344917297363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_country.5bd56a4d58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.742537Z", "completed_at": "2025-08-22T20:29:22.759797Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.763864Z", "completed_at": "2025-08-22T20:29:22.763875Z"}], "thread_id": "Thread-9", "execution_time": 0.03876543045043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_date.6115e7db55", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-22T20:29:22.751917Z", "completed_at": "2025-08-22T20:29:22.761404Z"}, {"name": "execute", "started_at": "2025-08-22T20:29:22.764928Z", "completed_at": "2025-08-22T20:29:22.764940Z"}], "thread_id": "Thread-13", "execution_time": 0.038512468338012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_rank.de32808782", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rank\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere rank is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 8.18299388885498, "args": {"empty_catalog": false, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "strict_mode": false, "project_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "log_level": "info", "defer": false, "log_path": "/home/runner/work/dbt-cerebro/dbt-cerebro/logs", "profiles_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "print": true, "state_modified_compare_more_unrendered_values": false, "require_nested_cumulative_type_params": false, "printer_width": 80, "log_file_max_bytes": 10485760, "quiet": false, "log_format": "default", "favor_state": false, "require_resource_names_without_spaces": false, "require_yaml_configuration_for_mf_time_spines": false, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors": true, "static": false, "version_check": true, "which": "generate", "write_json": true, "source_freshness_run_project_hooks": false, "compile": true, "log_level_file": "debug", "state_modified_compare_vars": false, "indirect_selection": "eager", "static_parser": true, "cache_selected_only": false, "use_colors_file": true, "invocation_command": "dbt docs generate", "populate_cache": true, "send_anonymous_usage_stats": true, "macro_debugging": false, "exclude": [], "select": [], "partial_parse_file_diff": true, "skip_nodes_if_on_run_start_fails": false, "show_resource_report": false, "partial_parse": true}}