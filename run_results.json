{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-08-18T19:19:40.045668Z", "invocation_id": "80f82955-cde1-4326-8e5f-16bef6cb59a0", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.581410Z", "completed_at": "2025-08-18T19:19:36.621311Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.724370Z", "completed_at": "2025-08-18T19:19:36.724393Z"}], "thread_id": "Thread-1", "execution_time": 0.15875530242919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_topology_latest", "compiled": true, "compiled_code": "SELECT\n    protocol,\n    date,\n    peer_discovery_id_prefix,\n    peer_client,\n    peer_city,\n    peer_country,\n    peer_org,\n    peer_lat,\n    peer_lon,\n    neighbor_discovery_id_prefix,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    neighbor_lat,\n    neighbor_lon,\n    cnt\nFROM dbt.fct_p2p_topology_latest\nWHERE peer_lat != '' AND neighbor_lat != ''\nORDER BY protocol DESC", "relation_name": "`dbt`.`api_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.603696Z", "completed_at": "2025-08-18T19:19:36.642642Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.760724Z", "completed_at": "2025-08-18T19:19:36.760739Z"}], "thread_id": "Thread-2", "execution_time": 0.19307971000671387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_transfers_erc20", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT\n        block_number\n        ,block_timestamp\n        ,transaction_index\n        ,log_index\n        ,transaction_hash\n        ,concat('0x', address) AS token_address\n        ,concat('0x', substring(topic1,25,40)) AS \"from\"\n        ,concat('0x', substring(topic2,25,40) ) AS \"to\"\n        ,toString(\n            reinterpretAsUInt256(\n                reverse(unhex(data))\n            )\n        ) AS \"value\"\n    FROM `execution`.`logs`\n    WHERE\n        topic0 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n        \n  \n\n\n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`int_transfers_erc20`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.621907Z", "completed_at": "2025-08-18T19:19:36.730465Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.802136Z", "completed_at": "2025-08-18T19:19:36.802148Z"}], "thread_id": "Thread-3", "execution_time": 0.23083019256591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__blocks", "compiled": true, "compiled_code": "SELECT\n   slot,\n    proposer_index,\n    parent_root,\n    state_root,\n    signature,\n    version,\n    randao_reveal,\n    graffiti,\n    eth1_deposit_root,\n    eth1_deposit_count,\n    eth1_block_hash,\n    sync_aggregate_participation,\n    withdrawals_count,\n    blob_kzg_commitments_count,\n    execution_requests_count,\n    slot_timestamp\nFROM \n    `consensus`.`blocks` FINAL", "relation_name": "`dbt`.`stg_consensus__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.630167Z", "completed_at": "2025-08-18T19:19:36.737760Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.820377Z", "completed_at": "2025-08-18T19:19:36.820386Z"}], "thread_id": "Thread-4", "execution_time": 0.24716544151306152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__deposits", "compiled": true, "compiled_code": "SELECT\n   slot,\n    deposit_index,\n    pubkey,\n    withdrawal_credentials,\n    amount,\n    signature,\n    proof,\n    slot_timestamp\nFROM \n    `consensus`.`deposits` FINAL", "relation_name": "`dbt`.`stg_consensus__deposits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.637878Z", "completed_at": "2025-08-18T19:19:36.757469Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.823657Z", "completed_at": "2025-08-18T19:19:36.823665Z"}], "thread_id": "Thread-5", "execution_time": 0.24674487113952637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__execution_requests", "compiled": true, "compiled_code": "SELECT\n    slot,\n    payload,\n    deposits_count,\n    withdrawals_count,\n    consolidations_count,\n    slot_timestamp\nFROM \n    `consensus`.`execution_requests` FINAL", "relation_name": "`dbt`.`stg_consensus__execution_requests`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.643850Z", "completed_at": "2025-08-18T19:19:36.767005Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.828059Z", "completed_at": "2025-08-18T19:19:36.828068Z"}], "thread_id": "Thread-6", "execution_time": 0.24861669540405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__rewards", "compiled": true, "compiled_code": "SELECT\n    slot\n    proposer_index,\n    total,\n    attestations,\n    sync_aggregate,\n    proposer_slashings,\n    attester_slashings,\n    slot_timestamp\nFROM \n    `consensus`.`rewards` FINAL", "relation_name": "`dbt`.`stg_consensus__rewards`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.649184Z", "completed_at": "2025-08-18T19:19:36.777813Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.834927Z", "completed_at": "2025-08-18T19:19:36.834934Z"}], "thread_id": "Thread-7", "execution_time": 0.24399352073669434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__specs", "compiled": true, "compiled_code": "SELECT\n    parameter_name,\n    parameter_value,\nFROM \n    `consensus`.`specs` FINAL", "relation_name": "`dbt`.`stg_consensus__specs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.654513Z", "completed_at": "2025-08-18T19:19:36.797930Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.839421Z", "completed_at": "2025-08-18T19:19:36.839429Z"}], "thread_id": "Thread-8", "execution_time": 0.24595975875854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__time_helpers", "compiled": true, "compiled_code": "SELECT\n    genesis_time_unix,\n    seconds_per_slot,\n    slots_per_epoch\nFROM \n    `consensus`.`time_helpers` FINAL", "relation_name": "`dbt`.`stg_consensus__time_helpers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.726894Z", "completed_at": "2025-08-18T19:19:36.803064Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.841785Z", "completed_at": "2025-08-18T19:19:36.841793Z"}], "thread_id": "Thread-9", "execution_time": 0.24471259117126465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__validators", "compiled": true, "compiled_code": "SELECT\n    slot,\n    validator_index,\n    balance,\n    status,\n    pubkey,\n    withdrawal_credentials,\n    effective_balance,\n    slashed,\n    activation_eligibility_epoch,\n    activation_epoch,\n    exit_epoch,\n    withdrawable_epoch,\n    slot_timestamp\nFROM \n    `consensus`.`validators` FINAL", "relation_name": "`dbt`.`stg_consensus__validators`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.731800Z", "completed_at": "2025-08-18T19:19:36.810848Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.844128Z", "completed_at": "2025-08-18T19:19:36.844137Z"}], "thread_id": "Thread-10", "execution_time": 0.24566650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__withdrawals", "compiled": true, "compiled_code": "SELECT\n    slot,\n    block_number,\n    block_hash,\n    withdrawal_index,\n    validator_index,\n    address,\n    amount,\n    slot_timestamp\nFROM \n    `consensus`.`withdrawals` FINAL", "relation_name": "`dbt`.`stg_consensus__withdrawals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.811534Z", "completed_at": "2025-08-18T19:19:36.813505Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.845132Z", "completed_at": "2025-08-18T19:19:36.845143Z"}], "thread_id": "Thread-30", "execution_time": 0.2157433032989502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.contracts_abi", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.814110Z", "completed_at": "2025-08-18T19:19:36.816006Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.846623Z", "completed_at": "2025-08-18T19:19:36.846630Z"}], "thread_id": "Thread-31", "execution_time": 0.21305513381958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.event_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.816641Z", "completed_at": "2025-08-18T19:19:36.819765Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.848071Z", "completed_at": "2025-08-18T19:19:36.848082Z"}], "thread_id": "Thread-32", "execution_time": 0.21378421783447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.function_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.742335Z", "completed_at": "2025-08-18T19:19:36.821966Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.849136Z", "completed_at": "2025-08-18T19:19:36.849144Z"}], "thread_id": "Thread-12", "execution_time": 0.2462773323059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    agent_version_semver,\n    agent_version_semver_str,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_agent_semvers_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.749212Z", "completed_at": "2025-08-18T19:19:36.822961Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.850726Z", "completed_at": "2025-08-18T19:19:36.850738Z"}], "thread_id": "Thread-14", "execution_time": 0.24097633361816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    country_name,\n    country,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_countries_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_countries_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.738369Z", "completed_at": "2025-08-18T19:19:36.824535Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.851791Z", "completed_at": "2025-08-18T19:19:36.851802Z"}], "thread_id": "Thread-11", "execution_time": 0.24968981742858887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__ipinfo", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    ip,\n    hostname,\n    city,\n    region,\n    country,\n    loc,\n    org,\n    postal,\n    timezone,\n    asn,\n    company,\n    carrier,\n    is_bogon,\n    is_mobile,\n    multiIf(\n      lowerUTF8(org) ILIKE '%amazon web services%' OR lowerUTF8(org) ILIKE '%amazon data services%' OR lowerUTF8(org) ILIKE '%aws%' OR lowerUTF8(org) ILIKE '%amazon.com%', 'AWS',\n      (lowerUTF8(org) ILIKE '%google cloud%' OR lowerUTF8(org) ILIKE '%google llc%' OR lowerUTF8(org) ILIKE '%gcp%' OR lowerUTF8(org) ILIKE '%google%') AND lowerUTF8(org) NOT ILIKE '%fiber%', 'Google',\n      lowerUTF8(org) ILIKE '%microsoft azure%' OR lowerUTF8(org) ILIKE '%azure%' OR lowerUTF8(org) ILIKE '%microsoft corporation%' OR lowerUTF8(org) ILIKE '%msft%', 'Azure',\n      lowerUTF8(org) ILIKE '%oracle cloud%' OR lowerUTF8(org) ILIKE '%oracle america%' OR lowerUTF8(org) ILIKE '%oci%', 'Oracle Cloud',\n      lowerUTF8(org) ILIKE '%alibaba cloud%' OR lowerUTF8(org) ILIKE '%aliyun%' OR lowerUTF8(org) ILIKE '%alibaba%', 'Alibaba Cloud',\n\n      lowerUTF8(org) ILIKE '%cloudflare%', 'Cloudflare',\n      (lowerUTF8(org) ILIKE '%akamai%' AND lowerUTF8(org) NOT ILIKE '%linode%'), 'Akamai',\n      lowerUTF8(org) ILIKE '%fastly%', 'Fastly',\n\n      lowerUTF8(org) ILIKE '%digitalocean%' OR lowerUTF8(org) ILIKE '%digital ocean%', 'DigitalOcean',\n      lowerUTF8(org) ILIKE '%ovh%', 'OVHcloud',\n      lowerUTF8(org) ILIKE '%hetzner%', 'Hetzner',\n      lowerUTF8(org) ILIKE '%scaleway%' OR lowerUTF8(org) ILIKE '%online s.a.s%' OR lowerUTF8(org) ILIKE '%iliad%', 'Scaleway',\n      lowerUTF8(org) ILIKE '%linode%', 'Linode',\n      lowerUTF8(org) ILIKE '%vultr%' OR lowerUTF8(org) ILIKE '%choopa%', 'Vultr',\n      lowerUTF8(org) ILIKE '%equinix metal%' OR lowerUTF8(org) ILIKE '%packet host%' OR lowerUTF8(org) ILIKE '%packet, inc%', 'Equinix Metal',\n      lowerUTF8(org) ILIKE '%fly.io%' OR lowerUTF8(org) ILIKE '%fly io%', 'Fly.io',\n      lowerUTF8(org) ILIKE '%netlify%', 'Netlify',\n      lowerUTF8(org) ILIKE '%vercel%' OR lowerUTF8(org) ILIKE '%zeit%', 'Vercel',\n      lowerUTF8(org) ILIKE '%heroku%', 'Heroku',\n      lowerUTF8(org) ILIKE '%render.com%' OR lowerUTF8(org) ILIKE '% render %', 'Render',\n\n      -- Carrier / transit networks (keep as its own bucket; change to 'Public ISP (Home/Office)' if you prefer)\n      lowerUTF8(org) ILIKE '%cogent%' OR lowerUTF8(org) ILIKE '%lumen%' OR lowerUTF8(org) ILIKE '%level 3%' OR lowerUTF8(org) ILIKE '%centurylink%' OR\n      lowerUTF8(org) ILIKE '%telia carrier%' OR lowerUTF8(org) ILIKE '%arelion%' OR lowerUTF8(org) ILIKE '%gtt%' OR lowerUTF8(org) ILIKE '%hurricane electric%' OR\n      lowerUTF8(org) ILIKE '%he.net%' OR lowerUTF8(org) ILIKE '%ntt communications%' OR lowerUTF8(org) ILIKE '%tata communications%' OR lowerUTF8(org) ILIKE '%zayo%' OR\n      lowerUTF8(org) ILIKE '%kddi%' OR lowerUTF8(org) ILIKE '%sparkle%' OR lowerUTF8(org) ILIKE '%backbone%' OR lowerUTF8(org) ILIKE '%chinanet-backbone%', 'Carrier/Transit',\n\n      -- Education / government \u2192 treat like public access\n      lowerUTF8(org) ILIKE '%university%' OR lowerUTF8(org) ILIKE '%college%' OR lowerUTF8(org) ILIKE '%school%' OR lowerUTF8(org) ILIKE '%ministry%' OR lowerUTF8(org) ILIKE '%government%', 'Public ISP (Home/Office)',\n\n      -- Generic hosting/CDN hints\n      lowerUTF8(org) ILIKE '%datacenter%' OR lowerUTF8(org) ILIKE '%data center%' OR lowerUTF8(org) ILIKE '%colo%' OR lowerUTF8(org) ILIKE '%hosting%' OR lowerUTF8(org) ILIKE '%vps%' OR lowerUTF8(org) ILIKE '%server%' OR lowerUTF8(org) ILIKE '%incapsula%' OR lowerUTF8(org) ILIKE '%imperva%', 'Hosting/CDN (Other)',\n\n      -- Fallback for residential & office ISPs\n      lowerUTF8(org) ILIKE '%telecom%' OR lowerUTF8(org) ILIKE '%telekom%' OR lowerUTF8(org) ILIKE '%telecommunications%' OR lowerUTF8(org) ILIKE '%communications%' OR lowerUTF8(org) ILIKE '%wireless%' OR\n      lowerUTF8(org) ILIKE '%cable%' OR lowerUTF8(org) ILIKE '%broadband%' OR lowerUTF8(org) ILIKE '%internet%' OR lowerUTF8(org) ILIKE '%fibre%' OR lowerUTF8(org) ILIKE '%fiber%' OR lowerUTF8(org) ILIKE '%mobile%', 'Public ISP (Home/Office)',\n      lowerUTF8(org) = '', 'Unknown',\n      'Public ISP (Home/Office)'\n  ) AS generic_provider\n  FROM `crawlers_data`.`ipinfo` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_crawlers_data__ipinfo`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.745747Z", "completed_at": "2025-08-18T19:19:36.825176Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.852698Z", "completed_at": "2025-08-18T19:19:36.852705Z"}], "thread_id": "Thread-13", "execution_time": 0.24392271041870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    cloud_provider,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_cloud_provider_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.754099Z", "completed_at": "2025-08-18T19:19:36.826002Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.853598Z", "completed_at": "2025-08-18T19:19:36.853608Z"}], "thread_id": "Thread-15", "execution_time": 0.2425215244293213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    crawl_created_at,\n    quic_support,\n    __count,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_quic_support_over_7d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.761748Z", "completed_at": "2025-08-18T19:19:36.827375Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.854666Z", "completed_at": "2025-08-18T19:19:36.854674Z"}], "thread_id": "Thread-17", "execution_time": 0.24211454391479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_execution_power", "compiled": true, "compiled_code": "WITH execution_power AS (\n    SELECT \n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind']) AS client,\n            arrayJoin([18.6, 17.59, 44.62, 18.6, 17.59, 44.62]) AS mean\n            \n    )\n)\n\nSELECT * FROM execution_power", "relation_name": "`dbt`.`stg_esg_execution_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.764447Z", "completed_at": "2025-08-18T19:19:36.830303Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.857169Z", "completed_at": "2025-08-18T19:19:36.857176Z"}], "thread_id": "Thread-18", "execution_time": 0.243391752243042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_hardware_config", "compiled": true, "compiled_code": "WITH hardware_config AS (\n    SELECT\n        type\n        ,cpu\n        ,cores_threads\n        ,architecture\n        ,ram\n        ,storage\n        ,gpu\n        ,psu\n        ,\"case\"\n        ,os\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin(['Intel i5-1135G7', 'Intel i5-10400', 'AMD 3970X']) AS cpu,\n            arrayJoin(['4/8', '6/12', '32/64']) AS cores_threads,\n            arrayJoin(['x86/x64', 'x86/x64', 'x86/x64']) AS architecture,\n            arrayJoin(['16 GB', '64 GB', '256 GB']) AS ram,\n            arrayJoin(['2 TB SSD', '2TB SSD', '2TB SSD']) AS storage,\n            arrayJoin(['Onboard', 'Onboard', 'AM 6970']) AS gpu,\n            arrayJoin(['65 Watt', '650 Watt', '1000 Watt']) AS psu,\n            arrayJoin(['Integrated', 'Custom', 'Custom']) AS \"case\",\n            arrayJoin(['Ubuntu 20.04', 'Ubuntu 21', 'Ubuntu 20.04']) AS os\n    )\n)\n\nSELECT * FROM hardware_config", "relation_name": "`dbt`.`stg_esg_hardware_config`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.758168Z", "completed_at": "2025-08-18T19:19:36.832887Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.860175Z", "completed_at": "2025-08-18T19:19:36.860182Z"}], "thread_id": "Thread-16", "execution_time": 0.24837112426757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_consensus_power", "compiled": true, "compiled_code": "WITH consensus_power AS (\n    SELECT\n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Lighthouse', 'Lighthouse', 'Lighthouse', 'Teku', 'Teku', 'Teku', 'Lodestar', 'Lodestar', 'Lodestar', 'Nimbus', 'Nimbus', 'Nimbus', 'Prysm', 'Prysm', 'Prysm']) AS client,\n            arrayJoin([2.75, 3.14, 18.84, 3.71, 3.32, 27.46, 3.14, 3.89, 33.55, 1.67, 2.08, 17.11, 3.51, 2.87, 24.33]) AS mean\n    )\n)\n\nSELECT * FROM consensus_power", "relation_name": "`dbt`.`stg_esg_consensus_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.770226Z", "completed_at": "2025-08-18T19:19:36.833643Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.861049Z", "completed_at": "2025-08-18T19:19:36.861056Z"}], "thread_id": "Thread-20", "execution_time": 0.2455275058746338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_node_distribution", "compiled": true, "compiled_code": "WITH node_distribution AS (\n    SELECT \n        type\n        ,distribution\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([0.25, 0.50, 0.25]) AS distribution\n    )\n)\n\nSELECT * FROM node_distribution", "relation_name": "`dbt`.`stg_esg_node_distribution`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.767720Z", "completed_at": "2025-08-18T19:19:36.834181Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.861930Z", "completed_at": "2025-08-18T19:19:36.861938Z"}], "thread_id": "Thread-19", "execution_time": 0.24741005897521973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_idle_electric_power", "compiled": true, "compiled_code": "WITH idle_electric_power AS (\n    SELECT \n        type\n        ,mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([3.66, 25.04, 78.17]) AS mean\n    )\n)\n\nSELECT * FROM idle_electric_power", "relation_name": "`dbt`.`stg_esg_idle_electric_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.781937Z", "completed_at": "2025-08-18T19:19:36.836431Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.862944Z", "completed_at": "2025-08-18T19:19:36.862951Z"}], "thread_id": "Thread-23", "execution_time": 0.24453520774841309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__transactions", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT\n        block_number,\n        transaction_index,\n        transaction_hash,\n        nonce,\n        from_address,\n        to_address,\n        value_string,\n        input,\n        gas_limit,\n        gas_used,\n        gas_price,\n        transaction_type,\n        max_priority_fee_per_gas,\n        max_fee_per_gas,\n        success,\n        n_input_bytes,\n        n_input_zero_bytes,\n        n_input_nonzero_bytes,\n        n_rlp_bytes,\n        r,\n        s,\n        v,\n        block_hash,\n        block_timestamp\n    FROM `execution`.`transactions`\n)\n\nSELECT\n    block_number,\n    transaction_index,\n    transaction_hash,\n    nonce,\n    CONCAT('0x',from_address) AS from_address,\n    IF(to_address IS NULL, NULL, CONCAT('0x',to_address)) AS to_address,\n    CAST(value_string AS UInt256) AS value,\n    input,\n    gas_limit,\n    gas_used,\n    gas_price,\n    transaction_type,\n    max_priority_fee_per_gas,\n    max_fee_per_gas,\n    success,\n    n_input_bytes,\n    n_input_zero_bytes,\n    n_input_nonzero_bytes,\n    n_rlp_bytes,\n    r,\n    s,\n    v,\n    block_hash,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__transactions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.778459Z", "completed_at": "2025-08-18T19:19:36.837399Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.863861Z", "completed_at": "2025-08-18T19:19:36.863871Z"}], "thread_id": "Thread-22", "execution_time": 0.24620676040649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__storage_diffs", "compiled": true, "compiled_code": "WITH\n\n\nsource AS (\n    SELECT \n        block_number,\n        transaction_index,\n        CONCAT('0x', transaction_hash) AS transaction_hash,\n        CONCAT('0x', address) AS address,\n        slot,\n        from_value,\n        to_value,\n        block_timestamp\n    FROM \n        `execution`.`storage_diffs`\n)\n\nSELECT\n    *\nFROM source", "relation_name": "`dbt`.`stg_execution__storage_diffs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.785880Z", "completed_at": "2025-08-18T19:19:36.837964Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.864778Z", "completed_at": "2025-08-18T19:19:36.864786Z"}], "thread_id": "Thread-24", "execution_time": 0.24501299858093262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula_discv4`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.773994Z", "completed_at": "2025-08-18T19:19:36.838598Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.865670Z", "completed_at": "2025-08-18T19:19:36.865678Z"}], "thread_id": "Thread-21", "execution_time": 0.24878382682800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__blocks", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT \n        block_number,\n        block_hash,\n        parent_hash,\n        uncles_hash,\n        author,\n        state_root,\n        transactions_root,\n        receipts_root,\n        gas_used,\n        gas_limit,\n        extra_data,\n        size,\n        mix_hash,\n        nonce,\n        base_fee_per_gas,\n        withdrawals_root,\n        block_timestamp\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n)\n\nSELECT\n    block_number,\n    block_hash,\n    parent_hash,\n    uncles_hash,\n    CONCAT('0x',author) AS author,\n    state_root,\n    transactions_root,\n    receipts_root,\n    gas_used,\n    gas_limit,\n    extra_data,\n    \narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(coalesce(extra_data, '')), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(coalesce(extra_data, '')), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(coalesce(extra_data, ''))) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data,\n    size,\n    mix_hash,\n    nonce,\n    base_fee_per_gas,\n    withdrawals_root,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.789357Z", "completed_at": "2025-08-18T19:19:36.840264Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.866828Z", "completed_at": "2025-08-18T19:19:36.866836Z"}], "thread_id": "Thread-25", "execution_time": 0.24631738662719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula_discv4`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.793111Z", "completed_at": "2025-08-18T19:19:36.840798Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.868347Z", "completed_at": "2025-08-18T19:19:36.868354Z"}], "thread_id": "Thread-26", "execution_time": 0.2430429458618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula_discv4`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.798686Z", "completed_at": "2025-08-18T19:19:36.843296Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.871439Z", "completed_at": "2025-08-18T19:19:36.871447Z"}], "thread_id": "Thread-27", "execution_time": 0.24536657333374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.807055Z", "completed_at": "2025-08-18T19:19:36.845983Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.875467Z", "completed_at": "2025-08-18T19:19:36.875476Z"}], "thread_id": "Thread-29", "execution_time": 0.24677824974060059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.803674Z", "completed_at": "2025-08-18T19:19:36.847533Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:36.878312Z", "completed_at": "2025-08-18T19:19:36.878320Z"}], "thread_id": "Thread-28", "execution_time": 0.2508828639984131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.915719Z", "completed_at": "2025-08-18T19:19:36.986691Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.117737Z", "completed_at": "2025-08-18T19:19:37.117756Z"}], "thread_id": "Thread-34", "execution_time": 0.26219868659973145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_transfers_erc20_bluechips", "compiled": true, "compiled_code": "\n\n\nSELECT\n    block_number\n    ,block_timestamp\n    ,transaction_index\n    ,log_index\n    ,transaction_hash\n    ,token_address\n    ,\"from\"\n    ,\"to\"\n    ,\"value\"\nFROM `dbt`.`int_transfers_erc20`\nWHERE\n    token_address = '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`int_transfers_erc20_bluechips`\n    )\n  \n", "relation_name": "`dbt`.`int_transfers_erc20_bluechips`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.920877Z", "completed_at": "2025-08-18T19:19:36.987309Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.118911Z", "completed_at": "2025-08-18T19:19:37.118920Z"}], "thread_id": "Thread-35", "execution_time": 0.262542724609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`int_transfers_erc20`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.944551Z", "completed_at": "2025-08-18T19:19:36.988390Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.119831Z", "completed_at": "2025-08-18T19:19:37.119842Z"}], "thread_id": "Thread-37", "execution_time": 0.261152982711792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`int_transfers_erc20`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.938716Z", "completed_at": "2025-08-18T19:19:36.988947Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.120737Z", "completed_at": "2025-08-18T19:19:37.120745Z"}], "thread_id": "Thread-36", "execution_time": 0.26276183128356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`int_transfers_erc20`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.949072Z", "completed_at": "2025-08-18T19:19:36.989559Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.121632Z", "completed_at": "2025-08-18T19:19:37.121641Z"}], "thread_id": "Thread-38", "execution_time": 0.26222777366638184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_transfers_erc20`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.963031Z", "completed_at": "2025-08-18T19:19:37.013085Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.175819Z", "completed_at": "2025-08-18T19:19:37.175831Z"}], "thread_id": "Thread-40", "execution_time": 0.3059699535369873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_graffiti_daily", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,graffiti\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__blocks`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_graffiti_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_graffiti_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.977775Z", "completed_at": "2025-08-18T19:19:37.090325Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.195101Z", "completed_at": "2025-08-18T19:19:37.195110Z"}], "thread_id": "Thread-1", "execution_time": 0.3128812313079834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_deposits_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(amount/POWER(10,9)) AS total_amount\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__deposits`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_deposits_daily`\n    )\n  \n\nGROUP BY 1", "relation_name": "`dbt`.`int_consensus_deposits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.994940Z", "completed_at": "2025-08-18T19:19:37.170727Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.210877Z", "completed_at": "2025-08-18T19:19:37.210888Z"}], "thread_id": "Thread-39", "execution_time": 0.3130314350128174, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_forks", "compiled": true, "compiled_code": "WITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nfork_version AS (\n    SELECT\n        IF(fork_name='GENESIS', 'PHASE0', fork_name) AS fork_name\n        ,parameter_value\n    FROM (\n        SELECT\n            arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n            ,parameter_value\n        FROM `dbt`.`stg_consensus__specs`\n        WHERE parameter_name LIKE '%_FORK_VERSION'\n    )\n),\n\nfork_epoch AS (\n    SELECT\n        arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n        ,parameter_value\n    FROM `dbt`.`stg_consensus__specs`\n    WHERE parameter_name LIKE '%_FORK_EPOCH'\n\n    UNION ALL \n\n    SELECT 'PHASE0' AS fork_name, '0' AS parameter_value \n)\n\nSELECT \n  t1.cl_fork_name AS fork_name\n  ,t2.parameter_value AS fork_version \n  ,t1.fork_digest AS fork_digest\n  ,t3.parameter_value AS fork_epoch \n  ,IF(CAST(t3.parameter_value AS Int) = -1, NULL,\n    addSeconds(\n          toDateTime(t4.genesis_time_unix, 'UTC'),\n          CAST(t3.parameter_value AS Int) * (t4.seconds_per_slot * t4.slots_per_epoch )\n      )\n   ) AS fork_time\nFROM \n  fork_digests t1\nINNER JOIN\n  fork_version t2\n  ON LOWER(t2.fork_name) = LOWER(t1.cl_fork_name)\nINNER JOIN\n  fork_epoch t3\n  ON LOWER(t3.fork_name) = LOWER(t1.cl_fork_name)\nCROSS JOIN `dbt`.`stg_consensus__time_helpers` t4", "relation_name": "`dbt`.`fct_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:36.999811Z", "completed_at": "2025-08-18T19:19:37.171325Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.212865Z", "completed_at": "2025-08-18T19:19:37.212874Z"}], "thread_id": "Thread-3", "execution_time": 0.3134636878967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_blocks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ntime_helpers AS (\n    SELECT\n        genesis_time_unix,\n        seconds_per_slot\n    FROM \n        `dbt`.`stg_consensus__time_helpers`\n)\n\nSELECT\n    date\n    ,cnt AS blocks_produced\n    ,CASE\n        WHEN toStartOfDay(toDateTime(genesis_time_unix)) = date \n            THEN (86400 - toUnixTimestamp(toDateTime(genesis_time_unix)) % 86400) / seconds_per_slot - cnt\n        ELSE 86400 / seconds_per_slot - cnt \n    END AS blocks_missed\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_consensus__blocks`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blocks_daily`\n    )\n  \n\n    GROUP BY 1\n) t1\nCROSS JOIN time_helpers t2", "relation_name": "`dbt`.`int_consensus_blocks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.006240Z", "completed_at": "2025-08-18T19:19:37.175197Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.214266Z", "completed_at": "2025-08-18T19:19:37.214275Z"}], "thread_id": "Thread-4", "execution_time": 0.3133971691131592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_credentials_daily", "compiled": true, "compiled_code": "\n\n\n\n\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,leftUTF8(withdrawal_credentials, 4) AS credentials_type\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_consensus__validators`\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_credentials_daily`\n    )\n  \n\n    GROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.019681Z", "completed_at": "2025-08-18T19:19:37.177235Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.217035Z", "completed_at": "2025-08-18T19:19:37.217045Z"}], "thread_id": "Thread-5", "execution_time": 0.3140451908111572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_proposers_apy_daily", "compiled": true, "compiled_code": "\n\n-- Step 1: Get daily rewards (this should be small since only proposers)\nWITH daily_rewards AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date,\n        SUM(total) AS total_rewards,\n        COUNT(DISTINCT proposer_index) AS unique_proposers,\n        -- Collect all proposer indices for this date\n        groupArray(DISTINCT proposer_index) AS proposer_indices\n    FROM `dbt`.`stg_consensus__rewards`\n    WHERE total > 0\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_proposers_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n-- Step 2: Get balances only for proposers on their respective dates\n-- Use arrayJoin to expand the proposer arrays\nproposer_balances AS (\n    SELECT \n        dr.date,\n        dr.total_rewards,\n        dr.unique_proposers,\n        SUM(v.balance) AS total_proposer_balance\n    FROM daily_rewards dr\n    ARRAY JOIN dr.proposer_indices AS proposer_idx\n    LEFT JOIN (\n        SELECT \n            toStartOfDay(slot_timestamp) AS date,\n            validator_index,\n            balance\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE balance > 0\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_proposers_apy_daily`\n    )\n  \n\n    ) v ON v.date = dr.date AND v.validator_index = proposer_idx\n    GROUP BY 1, 2, 3\n)\n\n-- Step 3: Calculate final metrics\nSELECT \n    date,\n    total_rewards AS amount,\n    total_proposer_balance AS balance,\n    unique_proposers,\n    CASE \n        WHEN total_proposer_balance > total_rewards AND total_rewards > 0\n        THEN total_rewards / (total_proposer_balance - total_rewards)\n        ELSE 0 \n    END AS rate,\n    CASE \n        WHEN total_proposer_balance > total_rewards AND total_rewards > 0\n        THEN floor(POWER((1 + total_rewards / (total_proposer_balance - total_rewards)), 365) - 1, 4) * 100\n        ELSE 0 \n    END AS apy\nFROM proposer_balances", "relation_name": "`dbt`.`int_consensus_proposers_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.026515Z", "completed_at": "2025-08-18T19:19:37.177975Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.218131Z", "completed_at": "2025-08-18T19:19:37.218141Z"}], "thread_id": "Thread-10", "execution_time": 0.3144965171813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(balance/POWER(10,9)) AS balance\n    ,SUM(effective_balance/POWER(10,9)) AS effective_balance\nFROM `dbt`.`stg_consensus__validators`\nWHERE \n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_daily`\n    )\n  \n\nGROUP BY date", "relation_name": "`dbt`.`int_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.013771Z", "completed_at": "2025-08-18T19:19:37.178773Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.219397Z", "completed_at": "2025-08-18T19:19:37.219406Z"}], "thread_id": "Thread-2", "execution_time": 0.31707072257995605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_entry_queue_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nqueue_activation AS (\n    SELECT\n        validator_index\n        ,date\n        ,epoch_eligibility\n        ,epoch_activation\n        ,(epoch_activation - epoch_eligibility) * 16 * 5 /(60 * 60 * 24) AS activation_days\n    FROM (\n        SELECT \n            validator_index\n            ,toStartOfDay(argMin(slot_timestamp,slot)) AS date\n            ,argMin(activation_eligibility_epoch,slot) AS epoch_eligibility\n            ,argMin(activation_epoch,slot) AS epoch_activation\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE \n            activation_epoch < 18446744073709551615\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_entry_queue_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT\n    date\n    ,validator_count\n    ,q_activation[1] AS q05\n    ,q_activation[2] AS q10\n    ,q_activation[3] AS q25\n    ,q_activation[4] AS q50\n    ,q_activation[5] AS q75\n    ,q_activation[6] AS q90\n    ,q_activation[7] AS q95\n    ,mean\nFROM (\n    SELECT\n        date,\n        count() AS validator_count\n        ,quantilesTDigest(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(activation_days) AS q_activation\n        ,avg(activation_days) AS  mean\n    FROM queue_activation\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.031634Z", "completed_at": "2025-08-18T19:19:37.182856Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.220750Z", "completed_at": "2025-08-18T19:19:37.220759Z"}], "thread_id": "Thread-6", "execution_time": 0.31644296646118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_dist_daily", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_validators_balances_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.036528Z", "completed_at": "2025-08-18T19:19:37.183482Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.222076Z", "completed_at": "2025-08-18T19:19:37.222086Z"}], "thread_id": "Thread-30", "execution_time": 0.31717514991760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_status_daily", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_validators_status_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.053048Z", "completed_at": "2025-08-18T19:19:37.184393Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.223918Z", "completed_at": "2025-08-18T19:19:37.223927Z"}], "thread_id": "Thread-33", "execution_time": 0.3168468475341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_dist", "compiled": true, "compiled_code": "\n\nWITH\n\n/* 1) Daily per-validator balance snapshot (already 1 row/day) */\ndaily_validator_balances AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        pubkey,\n        validator_index,\n        balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        balance > 0\n        AND\n        toStartOfDay(slot_timestamp) >= DATE '2023-01-01'\n        AND\n        toStartOfDay(slot_timestamp) < DATE '2023-02-01'\n),\n\n/* 2) True previous-day balance per validator using a window function */\nvalidator_with_prev AS (\n    SELECT\n        date,\n        pubkey,\n        validator_index,\n        balance,\n        -- default value = current balance on first day\n        lagInFrame(balance, 1, balance) OVER (\n            PARTITION BY pubkey, validator_index\n            ORDER BY date\n        ) AS prev_balance\n    FROM daily_validator_balances\n),\n\n/* 3) Get date range to filter other tables - materialize this first */\ndate_range AS (\n    SELECT \n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM validator_with_prev\n),\n\n/* 4) Per-day deposits - direct pubkey and amount columns */\ndeposits AS (\n    SELECT\n        toStartOfDay(d.slot_timestamp) AS dep_date,\n        d.pubkey AS dep_pubkey,\n        sum(d.amount) AS dep_amount\n    FROM `dbt`.`stg_consensus__deposits` d\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(d.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(d.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(d.slot_timestamp), d.pubkey\n),\n\n/* 5) Deposit requests - use JSON extraction with explicit date range */\ndeposit_requests AS (\n    SELECT\n        toStartOfDay(dr_table.slot_timestamp) AS dr_date,\n        toString(JSONExtractString(deposit, 'pubkey')) AS dr_pubkey,\n        sum(toUInt64(JSONExtractString(deposit, 'amount'))) AS dep_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` dr_table\n    ARRAY JOIN JSONExtractArrayRaw(dr_table.payload, 'deposits') AS deposit\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(dr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(dr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(dr_table.slot_timestamp), toString(JSONExtractString(deposit, 'pubkey'))\n),\n\n/* 6) Withdrawals - uses validator_index, not pubkey */\nwithdrawals AS (\n    SELECT\n        toStartOfDay(w.slot_timestamp) AS w_date,\n        w.validator_index AS w_validator_index,\n        sum(w.amount) AS wdr_amount\n    FROM `dbt`.`stg_consensus__withdrawals` w\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(w.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(w.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(w.slot_timestamp), w.validator_index\n),\n\n/* 7) Withdrawal requests - use JSON extraction with explicit date range */\nwithdrawal_requests AS (\n    SELECT\n        toStartOfDay(wr_table.slot_timestamp) AS wr_date,\n        toString(JSONExtractString(withdrawals, 'validator_pubkey')) AS wr_pubkey,\n        sum(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS wdr_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` wr_table\n    ARRAY JOIN JSONExtractArrayRaw(wr_table.payload, 'withdrawals') AS withdrawals\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(wr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(wr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(wr_table.slot_timestamp), toString(JSONExtractString(withdrawals, 'validator_pubkey'))\n),\n\n/* 8) Per-validator daily net change excluding external flows */\nvalidator_rates AS (\n    SELECT\n        v.date,\n        v.pubkey,\n        v.validator_index,\n        v.prev_balance,\n        v.balance,\n        (v.balance - v.prev_balance) AS raw_diff,\n\n        coalesce(d.dep_amount, 0) AS deposits_amt,\n        coalesce(dr.dep_req_amount, 0) AS deposit_req_amt,\n        coalesce(w.wdr_amount, 0) AS withdrawals_amt,\n        coalesce(wr.wdr_req_amount, 0) AS withdrawal_req_amt,\n\n        /* Adjust for external flows (requests set to 0 unless you want them) */\n        (\n            (v.balance - v.prev_balance)\n            - coalesce(d.dep_amount, 0)   -- deposits increase balance -> subtract to isolate rewards\n            + coalesce(w.wdr_amount, 0)   -- withdrawals decrease balance -> add back\n            - coalesce(dr.dep_req_amount, 0)\n            + coalesce(wr.wdr_req_amount, 0)\n        ) AS adjusted_diff,\n\n        /* Daily rate per validator; guard against division by zero. */\n        CASE \n            WHEN v.prev_balance > 0 \n            THEN toFloat64(adjusted_diff) / toFloat64(v.prev_balance)\n            ELSE toFloat64(0)\n        END AS rate\n    FROM validator_with_prev v\n    LEFT JOIN deposits d ON d.dep_date = v.date AND d.dep_pubkey = v.pubkey\n    LEFT JOIN deposit_requests dr ON dr.dr_date = v.date AND dr.dr_pubkey = v.pubkey\n    LEFT JOIN withdrawals w ON w.w_date = v.date AND w.w_validator_index = v.validator_index\n    LEFT JOIN withdrawal_requests wr ON wr.wr_date = v.date AND wr.wr_pubkey = v.pubkey\n    WHERE v.prev_balance > 0  -- Only consider validators with positive previous balance\n        AND v.date > DATE '2023-01-01'\n)\n\n\nSELECT\n    date,\n    ROUND(q_apy[1],2) AS q05,\n    ROUND(q_apy[2],2) AS q10,\n    ROUND(q_apy[3],2) AS q25,\n    ROUND(q_apy[4],2) AS q50,\n    ROUND(q_apy[5],2) AS q75,\n    ROUND(q_apy[6],2) AS q90,\n    ROUND(q_apy[7],2) AS q95 \nFROM (\n    SELECT\n        toStartOfMonth(date) AS date\n        ,quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )((power(1 + rate, 365) - 1) * 100) AS q_apy\n    FROM validator_rates\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_validators_apy_dist`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.043454Z", "completed_at": "2025-08-18T19:19:37.184944Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.225158Z", "completed_at": "2025-08-18T19:19:37.225167Z"}], "thread_id": "Thread-8", "execution_time": 0.318866491317749, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ndeposists AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__deposits`\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ndeposists_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(deposit, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'deposits') AS deposit\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n\nwithdrawals AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date \n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nwithdrawals_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'withdrawals') AS withdrawals\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nvalidators AS (\n    SELECT\n        date,\n        balance,\n        lagInFrame(balance, 1, balance) OVER (\n            ORDER BY date\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n        ) AS prev_balance,\n        balance - prev_balance AS balance_diff\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date,\n            SUM(balance) AS balance\n        FROM `dbt`.`stg_consensus__validators`\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT \n    t1.date AS date\n    ,t1.balance AS balance\n    ,t1.balance_diff AS balance_diff_original\n    ,COALESCE(t2.amount,0)  AS deposited_amount\n    ,COALESCE(t3.amount,0)  AS withdrawaled_amount\n    ,t1.balance_diff - COALESCE(t2.amount,0) - COALESCE(t4.amount,0) + COALESCE(t3.amount,0) + COALESCE(t5.amount,0) AS eff_balance_diff\n    ,eff_balance_diff/t1.prev_balance AS rate\n    ,ROUND((POWER((1+rate),365) - 1) * 100,2) AS apy\nFROM validators t1\nLEFT JOIN \n    deposists t2\n    ON t2.date = t1.date\nLEFT JOIN \n    withdrawals t3\n    ON t3.date = t1.date\nLEFT JOIN \n    deposists_requests t4\n    ON t4.date = t1.date\nLEFT JOIN \n    withdrawals_requests t5\n    ON t5.date = t1.date", "relation_name": "`dbt`.`int_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.058585Z", "completed_at": "2025-08-18T19:19:37.190435Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.226507Z", "completed_at": "2025-08-18T19:19:37.226516Z"}], "thread_id": "Thread-9", "execution_time": 0.3186681270599365, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,total_amount\n    ,cnt\n    ,q_amount[1] AS min\n    ,q_amount[2] AS q05\n    ,q_amount[3] AS q10\n    ,q_amount[4] AS q25\n    ,q_amount[5] AS q50\n    ,q_amount[6] AS q75\n    ,q_amount[7] AS q90\n    ,q_amount[8] AS q95\n    ,q_amount[9] AS max\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount/POWER(10,9)) AS total_amount\n        ,COUNT(*) AS cnt\n        ,quantilesTDigest(\n            0.0, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 1\n        )(amount/POWER(10,9)) AS q_amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_withdrawls_dist_daily`\n    )\n  \n\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.064017Z", "completed_at": "2025-08-18T19:19:37.191648Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.227762Z", "completed_at": "2025-08-18T19:19:37.227770Z"}], "thread_id": "Thread-31", "execution_time": 0.318591833114624, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.075115Z", "completed_at": "2025-08-18T19:19:37.192379Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.229822Z", "completed_at": "2025-08-18T19:19:37.229830Z"}], "thread_id": "Thread-7", "execution_time": 0.31932711601257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.068957Z", "completed_at": "2025-08-18T19:19:37.193118Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.231030Z", "completed_at": "2025-08-18T19:19:37.231039Z"}], "thread_id": "Thread-32", "execution_time": 0.3212268352508545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.080053Z", "completed_at": "2025-08-18T19:19:37.193909Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.232285Z", "completed_at": "2025-08-18T19:19:37.232294Z"}], "thread_id": "Thread-12", "execution_time": 0.3211970329284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.085218Z", "completed_at": "2025-08-18T19:19:37.194506Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.233224Z", "completed_at": "2025-08-18T19:19:37.233233Z"}], "thread_id": "Thread-14", "execution_time": 0.32090115547180176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.096228Z", "completed_at": "2025-08-18T19:19:37.196542Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.235019Z", "completed_at": "2025-08-18T19:19:37.235028Z"}], "thread_id": "Thread-13", "execution_time": 0.3214101791381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.091055Z", "completed_at": "2025-08-18T19:19:37.197112Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.236241Z", "completed_at": "2025-08-18T19:19:37.236264Z"}], "thread_id": "Thread-11", "execution_time": 0.323300838470459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.101368Z", "completed_at": "2025-08-18T19:19:37.197867Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.237628Z", "completed_at": "2025-08-18T19:19:37.237637Z"}], "thread_id": "Thread-15", "execution_time": 0.323392391204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.107644Z", "completed_at": "2025-08-18T19:19:37.198598Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.238885Z", "completed_at": "2025-08-18T19:19:37.238895Z"}], "thread_id": "Thread-17", "execution_time": 0.3239166736602783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.112786Z", "completed_at": "2025-08-18T19:19:37.200863Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.241141Z", "completed_at": "2025-08-18T19:19:37.241150Z"}], "thread_id": "Thread-18", "execution_time": 0.3031919002532959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.127538Z", "completed_at": "2025-08-18T19:19:37.204043Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.243992Z", "completed_at": "2025-08-18T19:19:37.244003Z"}], "thread_id": "Thread-20", "execution_time": 0.28742218017578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.122519Z", "completed_at": "2025-08-18T19:19:37.204879Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.244901Z", "completed_at": "2025-08-18T19:19:37.244909Z"}], "thread_id": "Thread-16", "execution_time": 0.28899264335632324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.132861Z", "completed_at": "2025-08-18T19:19:37.205704Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.245792Z", "completed_at": "2025-08-18T19:19:37.245802Z"}], "thread_id": "Thread-19", "execution_time": 0.28856682777404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.138006Z", "completed_at": "2025-08-18T19:19:37.206476Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.246715Z", "completed_at": "2025-08-18T19:19:37.246726Z"}], "thread_id": "Thread-23", "execution_time": 0.2888600826263428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.144062Z", "completed_at": "2025-08-18T19:19:37.207500Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.247632Z", "completed_at": "2025-08-18T19:19:37.247640Z"}], "thread_id": "Thread-22", "execution_time": 0.2891223430633545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.149073Z", "completed_at": "2025-08-18T19:19:37.208174Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.248526Z", "completed_at": "2025-08-18T19:19:37.248534Z"}], "thread_id": "Thread-24", "execution_time": 0.28940320014953613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_sdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_sdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.154165Z", "completed_at": "2025-08-18T19:19:37.209257Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.249401Z", "completed_at": "2025-08-18T19:19:37.249409Z"}], "thread_id": "Thread-21", "execution_time": 0.28965020179748535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.164314Z", "completed_at": "2025-08-18T19:19:37.210073Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.250282Z", "completed_at": "2025-08-18T19:19:37.250289Z"}], "thread_id": "Thread-26", "execution_time": 0.288590669631958, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.159156Z", "completed_at": "2025-08-18T19:19:37.212085Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.251931Z", "completed_at": "2025-08-18T19:19:37.251940Z"}], "thread_id": "Thread-25", "execution_time": 0.29156017303466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.171940Z", "completed_at": "2025-08-18T19:19:37.215511Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.254167Z", "completed_at": "2025-08-18T19:19:37.254174Z"}], "thread_id": "Thread-27", "execution_time": 0.2856588363647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,any_value(toInt32(floor(__total))) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nGROUP BY 1, 2\nORDER BY date ASC, client ASC", "relation_name": "`dbt`.`api_probelab_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.179598Z", "completed_at": "2025-08-18T19:19:37.223035Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.259592Z", "completed_at": "2025-08-18T19:19:37.259601Z"}], "thread_id": "Thread-29", "execution_time": 0.287355899810791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_version_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,agent_version_semver_str AS version\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nORDER BY date ASC, client ASC, version ASC", "relation_name": "`dbt`.`api_probelab_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.185681Z", "completed_at": "2025-08-18T19:19:37.228962Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.263760Z", "completed_at": "2025-08-18T19:19:37.263769Z"}], "thread_id": "Thread-28", "execution_time": 0.28911399841308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_agent_semvers_avg_1d_agent_version_type.8f8c6f1415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.305975Z", "completed_at": "2025-08-18T19:19:37.355021Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.466585Z", "completed_at": "2025-08-18T19:19:37.466601Z"}], "thread_id": "Thread-35", "execution_time": 0.22620749473571777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_agent_version_type.6608c14a96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.301323Z", "completed_at": "2025-08-18T19:19:37.355983Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.467534Z", "completed_at": "2025-08-18T19:19:37.467542Z"}], "thread_id": "Thread-34", "execution_time": 0.22781157493591309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_country_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,country\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_countries_avg_1d` \nORDER BY date ASC, client ASC, country ASC", "relation_name": "`dbt`.`api_probelab_clients_country_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.316461Z", "completed_at": "2025-08-18T19:19:37.356789Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.468461Z", "completed_at": "2025-08-18T19:19:37.468469Z"}], "thread_id": "Thread-36", "execution_time": 0.2258450984954834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_min_crawl_created_at.69cddc52ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect min_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere min_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.311632Z", "completed_at": "2025-08-18T19:19:37.357504Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.469339Z", "completed_at": "2025-08-18T19:19:37.469347Z"}], "thread_id": "Thread-37", "execution_time": 0.22740817070007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_max_crawl_created_at.b401aa1bdb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect max_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere max_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.321149Z", "completed_at": "2025-08-18T19:19:37.358050Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.470216Z", "completed_at": "2025-08-18T19:19:37.470224Z"}], "thread_id": "Thread-38", "execution_time": 0.2269747257232666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_cloud_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,cloud_provider AS cloud\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d` \nORDER BY date ASC, client ASC, cloud ASC", "relation_name": "`dbt`.`api_probelab_clients_cloud_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.332941Z", "completed_at": "2025-08-18T19:19:37.382891Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.522544Z", "completed_at": "2025-08-18T19:19:37.522553Z"}], "thread_id": "Thread-40", "execution_time": 0.2674229145050049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_cloud_provider_avg_1d_agent_version_type.d598a54924", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.347173Z", "completed_at": "2025-08-18T19:19:37.452407Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.544860Z", "completed_at": "2025-08-18T19:19:37.544869Z"}], "thread_id": "Thread-1", "execution_time": 0.2757387161254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_quic_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,quic_support AS quic\n    ,__count AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d` \nORDER BY date ASC, client ASC, quic ASC", "relation_name": "`dbt`.`api_probelab_clients_quic_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.363257Z", "completed_at": "2025-08-18T19:19:37.516285Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.559476Z", "completed_at": "2025-08-18T19:19:37.559486Z"}], "thread_id": "Thread-39", "execution_time": 0.27570223808288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_quic_support_over_7d_agent_version_type.1bc4663118", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.373140Z", "completed_at": "2025-08-18T19:19:37.521780Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.560600Z", "completed_at": "2025-08-18T19:19:37.560608Z"}], "thread_id": "Thread-4", "execution_time": 0.27428269386291504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_mean.03ac96d562", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_execution_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.368650Z", "completed_at": "2025-08-18T19:19:37.523401Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.563381Z", "completed_at": "2025-08-18T19:19:37.563389Z"}], "thread_id": "Thread-3", "execution_time": 0.27785229682922363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_client.a5debabb79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_execution_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.378431Z", "completed_at": "2025-08-18T19:19:37.524394Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.564260Z", "completed_at": "2025-08-18T19:19:37.564271Z"}], "thread_id": "Thread-5", "execution_time": 0.27587103843688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_type.d7bef196db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_execution_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.383465Z", "completed_at": "2025-08-18T19:19:37.525195Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.565134Z", "completed_at": "2025-08-18T19:19:37.565145Z"}], "thread_id": "Thread-10", "execution_time": 0.276134729385376, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_architecture.9a73cdb068", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect architecture\nfrom `dbt`.`stg_esg_hardware_config`\nwhere architecture is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.393607Z", "completed_at": "2025-08-18T19:19:37.526084Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.566009Z", "completed_at": "2025-08-18T19:19:37.566017Z"}], "thread_id": "Thread-6", "execution_time": 0.2757301330566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cores_threads.682ba505df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cores_threads\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cores_threads is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.389103Z", "completed_at": "2025-08-18T19:19:37.526652Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.566875Z", "completed_at": "2025-08-18T19:19:37.566882Z"}], "thread_id": "Thread-2", "execution_time": 0.2772197723388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_case.1190c367ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect case\nfrom `dbt`.`stg_esg_hardware_config`\nwhere case is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.398207Z", "completed_at": "2025-08-18T19:19:37.531747Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.567883Z", "completed_at": "2025-08-18T19:19:37.567891Z"}], "thread_id": "Thread-30", "execution_time": 0.2770047187805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cpu.c2a5af552f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.403454Z", "completed_at": "2025-08-18T19:19:37.532957Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.568823Z", "completed_at": "2025-08-18T19:19:37.568832Z"}], "thread_id": "Thread-33", "execution_time": 0.27654075622558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_gpu.79e4a7071f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere gpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.412527Z", "completed_at": "2025-08-18T19:19:37.538928Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.570265Z", "completed_at": "2025-08-18T19:19:37.570273Z"}], "thread_id": "Thread-9", "execution_time": 0.27671384811401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_psu.c8e144fff7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect psu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere psu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.407901Z", "completed_at": "2025-08-18T19:19:37.539637Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.571122Z", "completed_at": "2025-08-18T19:19:37.571132Z"}], "thread_id": "Thread-8", "execution_time": 0.27820897102355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_os.7f4f45f229", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect os\nfrom `dbt`.`stg_esg_hardware_config`\nwhere os is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.417759Z", "completed_at": "2025-08-18T19:19:37.540704Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.572122Z", "completed_at": "2025-08-18T19:19:37.572133Z"}], "thread_id": "Thread-31", "execution_time": 0.277942419052124, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_ram.a731e6fcf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ram\nfrom `dbt`.`stg_esg_hardware_config`\nwhere ram is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.432786Z", "completed_at": "2025-08-18T19:19:37.542154Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.573612Z", "completed_at": "2025-08-18T19:19:37.573620Z"}], "thread_id": "Thread-12", "execution_time": 0.2769348621368408, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_client.0999b44ed1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_consensus_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.423726Z", "completed_at": "2025-08-18T19:19:37.542738Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.574489Z", "completed_at": "2025-08-18T19:19:37.574496Z"}], "thread_id": "Thread-7", "execution_time": 0.2790398597717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_storage.0f9455ffe3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect storage\nfrom `dbt`.`stg_esg_hardware_config`\nwhere storage is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.428159Z", "completed_at": "2025-08-18T19:19:37.543377Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.575369Z", "completed_at": "2025-08-18T19:19:37.575377Z"}], "thread_id": "Thread-32", "execution_time": 0.27931952476501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_type.337ee769a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_hardware_config`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.437384Z", "completed_at": "2025-08-18T19:19:37.544083Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.576210Z", "completed_at": "2025-08-18T19:19:37.576221Z"}], "thread_id": "Thread-14", "execution_time": 0.27892065048217773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_mean.511213d432", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_consensus_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.447840Z", "completed_at": "2025-08-18T19:19:37.545735Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.577714Z", "completed_at": "2025-08-18T19:19:37.577722Z"}], "thread_id": "Thread-11", "execution_time": 0.2784557342529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_mean.8b31b45659", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.441995Z", "completed_at": "2025-08-18T19:19:37.546312Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.578811Z", "completed_at": "2025-08-18T19:19:37.578822Z"}], "thread_id": "Thread-13", "execution_time": 0.2802584171295166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_type.66b187714d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_consensus_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.457556Z", "completed_at": "2025-08-18T19:19:37.547973Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.580350Z", "completed_at": "2025-08-18T19:19:37.580360Z"}], "thread_id": "Thread-17", "execution_time": 0.27986907958984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_distribution.f73f1fe384", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution\nfrom `dbt`.`stg_esg_node_distribution`\nwhere distribution is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.452988Z", "completed_at": "2025-08-18T19:19:37.548622Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.581196Z", "completed_at": "2025-08-18T19:19:37.581207Z"}], "thread_id": "Thread-15", "execution_time": 0.2813713550567627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_type.839b39309c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.462103Z", "completed_at": "2025-08-18T19:19:37.549911Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.582736Z", "completed_at": "2025-08-18T19:19:37.582744Z"}], "thread_id": "Thread-18", "execution_time": 0.2718806266784668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_type.2b12460db8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_node_distribution`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.477443Z", "completed_at": "2025-08-18T19:19:37.553861Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.585684Z", "completed_at": "2025-08-18T19:19:37.585692Z"}], "thread_id": "Thread-16", "execution_time": 0.26036763191223145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_transactions_info_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(value/POWER(10,18)) AS xdai_value -- xDai units\n    ,AVG(value/POWER(10,18)) AS xdai_value_avg -- xDai units\n    ,median(value/POWER(10,18)) AS xdai_value_median -- xDai units\n    ,SUM(COALESCE(gas_used/POWER(10,9),0)) AS gas_used -- Gas units in Gwei\n    ,CAST(AVG(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_avg -- Gas units in Gwei\n    ,CAST(median(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_median -- Gas units in Gwei\nFROM `dbt`.`stg_execution__transactions`\n\n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_info_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_execution_transactions_info_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.471084Z", "completed_at": "2025-08-18T19:19:37.554483Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.586561Z", "completed_at": "2025-08-18T19:19:37.586569Z"}], "thread_id": "Thread-20", "execution_time": 0.26190686225891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_transactions_gas_used_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(value/POWER(10,18)) AS xdai_value\n    ,AVG(value/POWER(10,18)) AS xdai_value_avg\n    ,median(value/POWER(10,18)) AS xdai_value_median\n    ,SUM(COALESCE(gas_used,0)) AS gas_used\n    ,CAST(AVG(COALESCE(gas_price,0)) AS Int32) AS gas_price_avg\n    ,CAST(median(COALESCE(gas_price,0)) AS Int32) AS gas_price_median\nFROM `dbt`.`stg_execution__transactions`\nWHERE block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`fct_execution_transactions_gas_used_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`fct_execution_transactions_gas_used_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.487106Z", "completed_at": "2025-08-18T19:19:37.555043Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.587443Z", "completed_at": "2025-08-18T19:19:37.587450Z"}], "thread_id": "Thread-23", "execution_time": 0.26084136962890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_from_address.66ef809303", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom `dbt`.`stg_execution__transactions`\nwhere from_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.482397Z", "completed_at": "2025-08-18T19:19:37.555743Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.588300Z", "completed_at": "2025-08-18T19:19:37.588308Z"}], "thread_id": "Thread-19", "execution_time": 0.26236915588378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_block_number.86826795d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__transactions`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.491598Z", "completed_at": "2025-08-18T19:19:37.556714Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.589149Z", "completed_at": "2025-08-18T19:19:37.589160Z"}], "thread_id": "Thread-22", "execution_time": 0.2619452476501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_hash.92b0650777", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.496310Z", "completed_at": "2025-08-18T19:19:37.557474Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.590028Z", "completed_at": "2025-08-18T19:19:37.590035Z"}], "thread_id": "Thread-24", "execution_time": 0.2621877193450928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_index.f0d9adb918", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.500976Z", "completed_at": "2025-08-18T19:19:37.558274Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.590896Z", "completed_at": "2025-08-18T19:19:37.590905Z"}], "thread_id": "Thread-21", "execution_time": 0.2624204158782959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__transactions_transaction_hash.173e989c74", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.506140Z", "completed_at": "2025-08-18T19:19:37.558877Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.591797Z", "completed_at": "2025-08-18T19:19:37.591804Z"}], "thread_id": "Thread-26", "execution_time": 0.2627236843109131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_state_size_full_diff_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `dbt`.`stg_execution__storage_diffs`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_state_size_full_diff_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT\n    *\nFROM state_size_diff", "relation_name": "`dbt`.`int_execution_state_size_full_diff_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.511654Z", "completed_at": "2025-08-18T19:19:37.561500Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.594003Z", "completed_at": "2025-08-18T19:19:37.594013Z"}], "thread_id": "Thread-25", "execution_time": 0.2637145519256592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_address.fe7457493c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.517127Z", "completed_at": "2025-08-18T19:19:37.562074Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.594957Z", "completed_at": "2025-08-18T19:19:37.594967Z"}], "thread_id": "Thread-27", "execution_time": 0.2628672122955322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_number.740300dea1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.527310Z", "completed_at": "2025-08-18T19:19:37.569655Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.601083Z", "completed_at": "2025-08-18T19:19:37.601091Z"}], "thread_id": "Thread-29", "execution_time": 0.2598757743835449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_timestamp.79a9bfbd42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.533645Z", "completed_at": "2025-08-18T19:19:37.573010Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.603993Z", "completed_at": "2025-08-18T19:19:37.604000Z"}], "thread_id": "Thread-28", "execution_time": 0.2598538398742676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_chain_id.413c6bb6df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.635183Z", "completed_at": "2025-08-18T19:19:37.689971Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.797292Z", "completed_at": "2025-08-18T19:19:37.797306Z"}], "thread_id": "Thread-35", "execution_time": 0.2177259922027588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_slot.30b6f83693", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect slot\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere slot is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.641363Z", "completed_at": "2025-08-18T19:19:37.691311Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.803906Z", "completed_at": "2025-08-18T19:19:37.803916Z"}], "thread_id": "Thread-34", "execution_time": 0.22192740440368652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_hash.355bce9dc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.646714Z", "completed_at": "2025-08-18T19:19:37.692718Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.879910Z", "completed_at": "2025-08-18T19:19:37.879922Z"}], "thread_id": "Thread-36", "execution_time": 0.2964344024658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_index.c3d3eabba2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.651139Z", "completed_at": "2025-08-18T19:19:37.693436Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.880883Z", "completed_at": "2025-08-18T19:19:37.880892Z"}], "thread_id": "Thread-37", "execution_time": 0.2967870235443115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__storage_diffs_transaction_hash.ead3d5cd43", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.655684Z", "completed_at": "2025-08-18T19:19:37.695884Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.892030Z", "completed_at": "2025-08-18T19:19:37.892040Z"}], "thread_id": "Thread-38", "execution_time": 0.30709338188171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_blocks_clients_version_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nclients_version AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,multiIf(\n             lower(decoded_extra_data[1]) = 'choose' \n            OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n            OR lower(decoded_extra_data[1]) = 'sanae.io'\n            OR decoded_extra_data[1] = ''  , \n            'Unknown',\n            decoded_extra_data[1]\n        )   AS client\n        ,IF(length(decoded_extra_data)>1, \n            IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n            ''\n        ) AS version\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_execution__blocks`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2, 3\n)\n\nSELECT\n    *\nFROM clients_version", "relation_name": "`dbt`.`int_execution_blocks_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.669124Z", "completed_at": "2025-08-18T19:19:37.734552Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.927149Z", "completed_at": "2025-08-18T19:19:37.927162Z"}], "thread_id": "Thread-40", "execution_time": 0.3314321041107178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_base_fee_per_gas.db4869ba64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect base_fee_per_gas\nfrom `dbt`.`stg_execution__blocks`\nwhere base_fee_per_gas is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.683393Z", "completed_at": "2025-08-18T19:19:37.792229Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.945601Z", "completed_at": "2025-08-18T19:19:37.945611Z"}], "thread_id": "Thread-1", "execution_time": 0.3381466865539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_hash.3968ee550e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_hash\nfrom `dbt`.`stg_execution__blocks`\nwhere block_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.703798Z", "completed_at": "2025-08-18T19:19:37.918096Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.958103Z", "completed_at": "2025-08-18T19:19:37.958113Z"}], "thread_id": "Thread-4", "execution_time": 0.3373301029205322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_timestamp.d1b2bdbc42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__blocks`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.699392Z", "completed_at": "2025-08-18T19:19:37.923309Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.959750Z", "completed_at": "2025-08-18T19:19:37.959761Z"}], "thread_id": "Thread-39", "execution_time": 0.3395884037017822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_number.b945854619", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__blocks`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.719604Z", "completed_at": "2025-08-18T19:19:37.924829Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.961305Z", "completed_at": "2025-08-18T19:19:37.961313Z"}], "thread_id": "Thread-10", "execution_time": 0.3367195129394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_used.94117d62bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_used is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.709856Z", "completed_at": "2025-08-18T19:19:37.925437Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.962204Z", "completed_at": "2025-08-18T19:19:37.962213Z"}], "thread_id": "Thread-3", "execution_time": 0.33890843391418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_chain_id.b8edd9122d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__blocks`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.714401Z", "completed_at": "2025-08-18T19:19:37.925994Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.963642Z", "completed_at": "2025-08-18T19:19:37.963649Z"}], "thread_id": "Thread-5", "execution_time": 0.33971142768859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_limit.78300c6714", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_limit\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_limit is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.725080Z", "completed_at": "2025-08-18T19:19:37.926580Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.964505Z", "completed_at": "2025-08-18T19:19:37.964513Z"}], "thread_id": "Thread-6", "execution_time": 0.33928418159484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_size.b4ddb09dda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect size\nfrom `dbt`.`stg_execution__blocks`\nwhere size is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.735901Z", "completed_at": "2025-08-18T19:19:37.933225Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.966127Z", "completed_at": "2025-08-18T19:19:37.966138Z"}], "thread_id": "Thread-30", "execution_time": 0.3396904468536377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv4__visits`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        toString(peer_properties.network_id) = '100'\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv4_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.740656Z", "completed_at": "2025-08-18T19:19:37.933992Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.967063Z", "completed_at": "2025-08-18T19:19:37.967071Z"}], "thread_id": "Thread-33", "execution_time": 0.34002208709716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv4__visits_visit_started_at.de065da8ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv4__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.729479Z", "completed_at": "2025-08-18T19:19:37.934977Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.968525Z", "completed_at": "2025-08-18T19:19:37.968533Z"}], "thread_id": "Thread-2", "execution_time": 0.3427093029022217, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `dbt`.`stg_nebula_discv4__visits` A\n  WHERE\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv4_peers`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  ),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    --replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    arrayElement(splitByChar('/', ifNull(connect_maddr, '')), 3) AS ip,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(\n      plus_build != '',\n      arrayElement(splitByChar('-', pre_blob), 1),\n      splitByChar('-', ver_blob)[1]\n    )                                                       AS version,\n    IF(\n      plus_build != '',\n      IF(\n        length(splitByChar('-', pre_blob)) >= 2,\n        arrayElement(splitByChar('-', pre_blob), 2),\n        ''\n      ),\n      IF(\n        length(splitByChar('-', ver_blob)) = 3,\n        arrayElement(splitByChar('-', ver_blob), 2),\n        ''\n      )\n    )                                                       AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(\n        length(splitByChar('-', ver_blob)) > 1,\n        arrayElement(splitByChar('-', ver_blob), -1),\n        ''\n      )\n    )                                                       AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  t1.platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv4_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.746973Z", "completed_at": "2025-08-18T19:19:37.935605Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.969419Z", "completed_at": "2025-08-18T19:19:37.969427Z"}], "thread_id": "Thread-9", "execution_time": 0.34108781814575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.connect_maddr,\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM `dbt`.`stg_nebula_discv5__visits` AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv5_peers`\n    )\n  \n\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    fork_digest,\n    cl_fork_name,\n    cl_next_fork_name,\n    next_fork_version,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n    IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n    )                                                                          AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.fork_digest,\n  t1.cl_fork_name,\n  t1.cl_next_fork_name,\n  t1.next_fork_version,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  CASE\n      WHEN t1.platform = '' THEN 'Unknown'\n      WHEN t1.platform = 'aarch64-linux' THEN 'linux-aarch_64'\n      WHEN t1.platform = 'x86_64-linux' THEN 'linux-x86_64'\n      WHEN t1.platform = 'x86_64-windows' THEN 'windows-x86_64'\n      ELSE t1.platform\n  END AS platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv5_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.753152Z", "completed_at": "2025-08-18T19:19:37.939775Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.970410Z", "completed_at": "2025-08-18T19:19:37.970418Z"}], "thread_id": "Thread-8", "execution_time": 0.34148359298706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv5__visits`\n    WHERE\n      toStartOfDay(visit_ended_at) < today()\n      AND\n      (\n        toString(peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR toString(peer_properties.next_fork_version) LIKE '%064'\n      )\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv5_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.758179Z", "completed_at": "2025-08-18T19:19:37.940647Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.971321Z", "completed_at": "2025-08-18T19:19:37.971331Z"}], "thread_id": "Thread-31", "execution_time": 0.3417801856994629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_crawl_id.9cb9b578fa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect crawl_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere crawl_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.763381Z", "completed_at": "2025-08-18T19:19:37.941603Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.972743Z", "completed_at": "2025-08-18T19:19:37.972752Z"}], "thread_id": "Thread-12", "execution_time": 0.34195804595947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_peer_id.216f34e1f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.767871Z", "completed_at": "2025-08-18T19:19:37.942153Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.973630Z", "completed_at": "2025-08-18T19:19:37.973641Z"}], "thread_id": "Thread-7", "execution_time": 0.34221529960632324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_visit_started_at.7bc42b8695", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.777839Z", "completed_at": "2025-08-18T19:19:37.942764Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.974514Z", "completed_at": "2025-08-18T19:19:37.974522Z"}], "thread_id": "Thread-14", "execution_time": 0.3418745994567871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"to\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"to\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.772669Z", "completed_at": "2025-08-18T19:19:37.943852Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.975373Z", "completed_at": "2025-08-18T19:19:37.975381Z"}], "thread_id": "Thread-32", "execution_time": 0.34336090087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"from\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"from\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.787756Z", "completed_at": "2025-08-18T19:19:37.944449Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.976203Z", "completed_at": "2025-08-18T19:19:37.976211Z"}], "thread_id": "Thread-13", "execution_time": 0.34174108505249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"transaction_hash\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"transaction_hash\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.783312Z", "completed_at": "2025-08-18T19:19:37.944980Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.977063Z", "completed_at": "2025-08-18T19:19:37.977070Z"}], "thread_id": "Thread-11", "execution_time": 0.3432142734527588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"token_address\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"token_address\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.792864Z", "completed_at": "2025-08-18T19:19:37.947485Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.979343Z", "completed_at": "2025-08-18T19:19:37.979351Z"}], "thread_id": "Thread-17", "execution_time": 0.3395845890045166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.798344Z", "completed_at": "2025-08-18T19:19:37.948843Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.980801Z", "completed_at": "2025-08-18T19:19:37.980809Z"}], "thread_id": "Thread-15", "execution_time": 0.34039974212646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.804844Z", "completed_at": "2025-08-18T19:19:37.950879Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.983100Z", "completed_at": "2025-08-18T19:19:37.983111Z"}], "thread_id": "Thread-18", "execution_time": 0.33728909492492676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.885158Z", "completed_at": "2025-08-18T19:19:37.951813Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.983988Z", "completed_at": "2025-08-18T19:19:37.983995Z"}], "thread_id": "Thread-20", "execution_time": 0.32166528701782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,credentials_type\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)) * 100,2) AS pct \nFROM `dbt`.`int_consensus_credentials_daily`\nORDER BY date, credentials_type", "relation_name": "`dbt`.`api_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.881807Z", "completed_at": "2025-08-18T19:19:37.952383Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.984864Z", "completed_at": "2025-08-18T19:19:37.984874Z"}], "thread_id": "Thread-16", "execution_time": 0.3231809139251709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_forks", "compiled": true, "compiled_code": "SELECT\n  fork_name\n  ,fork_version \n  ,fork_digest\n  ,fork_epoch \nFROM `dbt`.`fct_consensus_forks`\nORDER BY fork_version ASC", "relation_name": "`dbt`.`api_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.888529Z", "completed_at": "2025-08-18T19:19:37.953863Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.986378Z", "completed_at": "2025-08-18T19:19:37.986389Z"}], "thread_id": "Thread-23", "execution_time": 0.3234539031982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_latest", "compiled": true, "compiled_code": "SELECT \n    credentials_type\n    ,cnt\nFROM `dbt`.`int_consensus_credentials_daily`\nWHERE date = (SELECT MAX(date) FROM `dbt`.`int_consensus_credentials_daily`)", "relation_name": "`dbt`.`api_consensus_credentials_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.896308Z", "completed_at": "2025-08-18T19:19:37.955080Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.987241Z", "completed_at": "2025-08-18T19:19:37.987267Z"}], "thread_id": "Thread-22", "execution_time": 0.3230555057525635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_staked_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,effective_balance AS value\nFROM `dbt`.`int_consensus_validators_balances_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_staked_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.892971Z", "completed_at": "2025-08-18T19:19:37.955968Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.988121Z", "completed_at": "2025-08-18T19:19:37.988131Z"}], "thread_id": "Thread-19", "execution_time": 0.3245429992675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_entry_queue_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,validator_count\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\n    ,mean\nFROM `dbt`.`int_consensus_entry_queue_daily`\nORDER BY date ASC", "relation_name": "`dbt`.`api_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.900605Z", "completed_at": "2025-08-18T19:19:37.956641Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.989002Z", "completed_at": "2025-08-18T19:19:37.989009Z"}], "thread_id": "Thread-24", "execution_time": 0.3241877555847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_balances_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT\n        date\n        ,'balance' AS label\n        ,balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n\n    UNION ALL \n\n    SELECT\n        date\n        ,'eff. balance' AS label\n        ,effective_balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n)\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.908735Z", "completed_at": "2025-08-18T19:19:37.957440Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.989862Z", "completed_at": "2025-08-18T19:19:37.989869Z"}], "thread_id": "Thread-26", "execution_time": 0.3238396644592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_cnt.d87cfc9f31", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.904327Z", "completed_at": "2025-08-18T19:19:37.958951Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.991404Z", "completed_at": "2025-08-18T19:19:37.991415Z"}], "thread_id": "Thread-21", "execution_time": 0.32598304748535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_balances_dist_daily_date.20565492ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_balances_dist_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.913576Z", "completed_at": "2025-08-18T19:19:37.960655Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.992922Z", "completed_at": "2025-08-18T19:19:37.992930Z"}], "thread_id": "Thread-25", "execution_time": 0.32515668869018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_date.8a3bdc4a88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.918905Z", "completed_at": "2025-08-18T19:19:37.963041Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.995170Z", "completed_at": "2025-08-18T19:19:37.995177Z"}], "thread_id": "Thread-27", "execution_time": 0.3267853260040283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_status.6ce758daa0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.928794Z", "completed_at": "2025-08-18T19:19:37.967904Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:37.999386Z", "completed_at": "2025-08-18T19:19:37.999397Z"}], "thread_id": "Thread-29", "execution_time": 0.32145142555236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,balance\n    ,rate\n    ,avg(rate) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rate_7dma\n    ,apy\n    ,ROUND((POWER((1+rate_7dma),365) - 1) * 100,2) AS apy_7dma\nFROM `dbt`.`int_consensus_validators_apy_daily`\nWHERE date > DATE '2021-12-08'", "relation_name": "`dbt`.`fct_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:37.936459Z", "completed_at": "2025-08-18T19:19:37.972177Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.003284Z", "completed_at": "2025-08-18T19:19:38.003293Z"}], "thread_id": "Thread-28", "execution_time": 0.32296156883239746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.034181Z", "completed_at": "2025-08-18T19:19:38.087343Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.191455Z", "completed_at": "2025-08-18T19:19:38.191472Z"}], "thread_id": "Thread-35", "execution_time": 0.21291136741638184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,'withdrawls' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\n\nUNION ALL\n\nSELECT\n    date\n    ,'deposits' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_deposits_daily`", "relation_name": "`dbt`.`fct_consensus_deposits_withdrawls_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.038654Z", "completed_at": "2025-08-18T19:19:38.089770Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.201900Z", "completed_at": "2025-08-18T19:19:38.201915Z"}], "thread_id": "Thread-34", "execution_time": 0.22185707092285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_block_timestamp.b2f425af6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.048348Z", "completed_at": "2025-08-18T19:19:38.090393Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.203004Z", "completed_at": "2025-08-18T19:19:38.203012Z"}], "thread_id": "Thread-37", "execution_time": 0.22060799598693848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_depositor_address.f3e976d68d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect depositor_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere depositor_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.043816Z", "completed_at": "2025-08-18T19:19:38.091601Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.208489Z", "completed_at": "2025-08-18T19:19:38.208498Z"}], "thread_id": "Thread-36", "execution_time": 0.22674012184143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_contract_address.e8714ee1a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.056164Z", "completed_at": "2025-08-18T19:19:38.093484Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.218586Z", "completed_at": "2025-08-18T19:19:38.218595Z"}], "thread_id": "Thread-38", "execution_time": 0.23294758796691895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_event_timestamp.42906a28e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.069174Z", "completed_at": "2025-08-18T19:19:38.136046Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.258395Z", "completed_at": "2025-08-18T19:19:38.258407Z"}], "thread_id": "Thread-40", "execution_time": 0.26110267639160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_log_index.548a0d340c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.082024Z", "completed_at": "2025-08-18T19:19:38.192561Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.279317Z", "completed_at": "2025-08-18T19:19:38.279329Z"}], "thread_id": "Thread-1", "execution_time": 0.2712724208831787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_transaction_hash.fdd9d805b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.096400Z", "completed_at": "2025-08-18T19:19:38.243167Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.289304Z", "completed_at": "2025-08-18T19:19:38.289312Z"}], "thread_id": "Thread-4", "execution_time": 0.2710285186767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_events_transaction_hash.162d1b026f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.101390Z", "completed_at": "2025-08-18T19:19:38.249420Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.290848Z", "completed_at": "2025-08-18T19:19:38.290859Z"}], "thread_id": "Thread-39", "execution_time": 0.2712702751159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_number.772cd91469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.106618Z", "completed_at": "2025-08-18T19:19:38.250679Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.292405Z", "completed_at": "2025-08-18T19:19:38.292413Z"}], "thread_id": "Thread-10", "execution_time": 0.27152180671691895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_timestamp.28ab9881a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.112326Z", "completed_at": "2025-08-18T19:19:38.256090Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.293969Z", "completed_at": "2025-08-18T19:19:38.293980Z"}], "thread_id": "Thread-3", "execution_time": 0.27240848541259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_contract_address.5e413fb6b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.121901Z", "completed_at": "2025-08-18T19:19:38.257197Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.295474Z", "completed_at": "2025-08-18T19:19:38.295482Z"}], "thread_id": "Thread-6", "execution_time": 0.2719876766204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_type.fb2b12ee58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.117362Z", "completed_at": "2025-08-18T19:19:38.257776Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.296345Z", "completed_at": "2025-08-18T19:19:38.296355Z"}], "thread_id": "Thread-5", "execution_time": 0.2734968662261963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_id.bacaecb2df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.130943Z", "completed_at": "2025-08-18T19:19:38.264070Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.297998Z", "completed_at": "2025-08-18T19:19:38.298006Z"}], "thread_id": "Thread-33", "execution_time": 0.27269577980041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_transaction_hash.4b872e6755", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.126521Z", "completed_at": "2025-08-18T19:19:38.264947Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.298962Z", "completed_at": "2025-08-18T19:19:38.298970Z"}], "thread_id": "Thread-30", "execution_time": 0.2742879390716553, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_log_index.165bf735c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.137821Z", "completed_at": "2025-08-18T19:19:38.265653Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.300401Z", "completed_at": "2025-08-18T19:19:38.300411Z"}], "thread_id": "Thread-2", "execution_time": 0.2737905979156494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolInstance_events_event_id.5bd3309b6d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.142128Z", "completed_at": "2025-08-18T19:19:38.266508Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.301267Z", "completed_at": "2025-08-18T19:19:38.301275Z"}], "thread_id": "Thread-9", "execution_time": 0.273970365524292, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_timestamp.d03f151257", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.146853Z", "completed_at": "2025-08-18T19:19:38.271585Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.302237Z", "completed_at": "2025-08-18T19:19:38.302261Z"}], "thread_id": "Thread-8", "execution_time": 0.2743489742279053, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_event_name.821449d8bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.151377Z", "completed_at": "2025-08-18T19:19:38.272468Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.303162Z", "completed_at": "2025-08-18T19:19:38.303171Z"}], "thread_id": "Thread-31", "execution_time": 0.2746610641479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_log_index.5c1c243977", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.166449Z", "completed_at": "2025-08-18T19:19:38.273672Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.304595Z", "completed_at": "2025-08-18T19:19:38.304603Z"}], "thread_id": "Thread-14", "execution_time": 0.2735424041748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolConfigurator_events_transaction_hash.2fcedf0475", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.161062Z", "completed_at": "2025-08-18T19:19:38.274331Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.305457Z", "completed_at": "2025-08-18T19:19:38.305464Z"}], "thread_id": "Thread-7", "execution_time": 0.27501773834228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_transaction_hash.e2fc28195f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.156651Z", "completed_at": "2025-08-18T19:19:38.274886Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.306310Z", "completed_at": "2025-08-18T19:19:38.306318Z"}], "thread_id": "Thread-12", "execution_time": 0.2765052318572998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_pool_address.129b9b2f1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pool_address\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere pool_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.171729Z", "completed_at": "2025-08-18T19:19:38.275901Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.307138Z", "completed_at": "2025-08-18T19:19:38.307146Z"}], "thread_id": "Thread-32", "execution_time": 0.27547121047973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_number.3e4faff869", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.176120Z", "completed_at": "2025-08-18T19:19:38.276553Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.307997Z", "completed_at": "2025-08-18T19:19:38.308008Z"}], "thread_id": "Thread-13", "execution_time": 0.2757103443145752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_timestamp.9aee384fb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.180705Z", "completed_at": "2025-08-18T19:19:38.277154Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.308875Z", "completed_at": "2025-08-18T19:19:38.308882Z"}], "thread_id": "Thread-11", "execution_time": 0.27599620819091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_contract_address.b6be4491b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.185711Z", "completed_at": "2025-08-18T19:19:38.278514Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.310413Z", "completed_at": "2025-08-18T19:19:38.310421Z"}], "thread_id": "Thread-17", "execution_time": 0.2726294994354248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_name.655be1dbf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.193107Z", "completed_at": "2025-08-18T19:19:38.281925Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.313214Z", "completed_at": "2025-08-18T19:19:38.313221Z"}], "thread_id": "Thread-15", "execution_time": 0.27019214630126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_timestamp.65b0a361c3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.197495Z", "completed_at": "2025-08-18T19:19:38.283512Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.314709Z", "completed_at": "2025-08-18T19:19:38.314716Z"}], "thread_id": "Thread-18", "execution_time": 0.26080846786499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_log_index.edcd08f3d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.203901Z", "completed_at": "2025-08-18T19:19:38.284072Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.315773Z", "completed_at": "2025-08-18T19:19:38.315780Z"}], "thread_id": "Thread-20", "execution_time": 0.2609751224517822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c86a200558", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.209411Z", "completed_at": "2025-08-18T19:19:38.285618Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.317237Z", "completed_at": "2025-08-18T19:19:38.317264Z"}], "thread_id": "Thread-16", "execution_time": 0.2617964744567871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_timestamp.f629afe28e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.213925Z", "completed_at": "2025-08-18T19:19:38.286176Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.318106Z", "completed_at": "2025-08-18T19:19:38.318117Z"}], "thread_id": "Thread-23", "execution_time": 0.25763869285583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_contract_address.7aa8aa1478", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.224641Z", "completed_at": "2025-08-18T19:19:38.287314Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.318990Z", "completed_at": "2025-08-18T19:19:38.318997Z"}], "thread_id": "Thread-19", "execution_time": 0.257112979888916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_transaction_hash.28a9f27947", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.219489Z", "completed_at": "2025-08-18T19:19:38.287862Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.319855Z", "completed_at": "2025-08-18T19:19:38.319862Z"}], "thread_id": "Thread-22", "execution_time": 0.25861668586730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_log_index.8e8bf1d633", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.230028Z", "completed_at": "2025-08-18T19:19:38.288510Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.320743Z", "completed_at": "2025-08-18T19:19:38.320753Z"}], "thread_id": "Thread-24", "execution_time": 0.25821876525878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c69c10d4f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.234398Z", "completed_at": "2025-08-18T19:19:38.290184Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.322302Z", "completed_at": "2025-08-18T19:19:38.322310Z"}], "thread_id": "Thread-26", "execution_time": 0.2591710090637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bC3M_Oracle_events_transaction_hash.fed5e1c563", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.238815Z", "completed_at": "2025-08-18T19:19:38.291699Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.323827Z", "completed_at": "2025-08-18T19:19:38.323839Z"}], "thread_id": "Thread-21", "execution_time": 0.2594928741455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_number.a01484fb80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.243994Z", "completed_at": "2025-08-18T19:19:38.293309Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.325408Z", "completed_at": "2025-08-18T19:19:38.325421Z"}], "thread_id": "Thread-25", "execution_time": 0.2598876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_timestamp.9680585ac6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.251412Z", "completed_at": "2025-08-18T19:19:38.294897Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.327094Z", "completed_at": "2025-08-18T19:19:38.327102Z"}], "thread_id": "Thread-27", "execution_time": 0.2597630023956299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_contract_address.9d8dacefb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.259480Z", "completed_at": "2025-08-18T19:19:38.299806Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.331315Z", "completed_at": "2025-08-18T19:19:38.331325Z"}], "thread_id": "Thread-29", "execution_time": 0.25640273094177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_event_name.d56a70b6b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.267214Z", "completed_at": "2025-08-18T19:19:38.303985Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.334911Z", "completed_at": "2025-08-18T19:19:38.334920Z"}], "thread_id": "Thread-28", "execution_time": 0.2570526599884033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_log_index.06d6f07e27", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.366332Z", "completed_at": "2025-08-18T19:19:38.417423Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.527680Z", "completed_at": "2025-08-18T19:19:38.527692Z"}], "thread_id": "Thread-35", "execution_time": 0.2180488109588623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.02a05d1854", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.372552Z", "completed_at": "2025-08-18T19:19:38.424340Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.538477Z", "completed_at": "2025-08-18T19:19:38.538489Z"}], "thread_id": "Thread-34", "execution_time": 0.22669267654418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.342e67119b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.383807Z", "completed_at": "2025-08-18T19:19:38.424987Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.539598Z", "completed_at": "2025-08-18T19:19:38.539609Z"}], "thread_id": "Thread-36", "execution_time": 0.2256324291229248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_contract_address.894b7116b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.377005Z", "completed_at": "2025-08-18T19:19:38.425576Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.540508Z", "completed_at": "2025-08-18T19:19:38.540516Z"}], "thread_id": "Thread-37", "execution_time": 0.22799921035766602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_timestamp.d04237ee7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.389792Z", "completed_at": "2025-08-18T19:19:38.428065Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.563858Z", "completed_at": "2025-08-18T19:19:38.563868Z"}], "thread_id": "Thread-38", "execution_time": 0.24732708930969238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_log_index.e78654368d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.403482Z", "completed_at": "2025-08-18T19:19:38.467792Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.601934Z", "completed_at": "2025-08-18T19:19:38.601946Z"}], "thread_id": "Thread-40", "execution_time": 0.2727231979370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.b6309f3c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.418011Z", "completed_at": "2025-08-18T19:19:38.533447Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.623352Z", "completed_at": "2025-08-18T19:19:38.623361Z"}], "thread_id": "Thread-1", "execution_time": 0.2820470333099365, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.f8c471d6f8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.430471Z", "completed_at": "2025-08-18T19:19:38.584384Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.632614Z", "completed_at": "2025-08-18T19:19:38.632626Z"}], "thread_id": "Thread-4", "execution_time": 0.2829916477203369, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_block_timestamp.ee2f623fb4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.436741Z", "completed_at": "2025-08-18T19:19:38.589419Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.634400Z", "completed_at": "2025-08-18T19:19:38.634411Z"}], "thread_id": "Thread-39", "execution_time": 0.2835068702697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_contract_address.9a75ada408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.441977Z", "completed_at": "2025-08-18T19:19:38.594721Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.636591Z", "completed_at": "2025-08-18T19:19:38.636601Z"}], "thread_id": "Thread-10", "execution_time": 0.28431200981140137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_log_index.99505e6cc4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.447174Z", "completed_at": "2025-08-18T19:19:38.600120Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.638139Z", "completed_at": "2025-08-18T19:19:38.638146Z"}], "thread_id": "Thread-3", "execution_time": 0.28452277183532715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_timestamp.d0c596dfea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.457013Z", "completed_at": "2025-08-18T19:19:38.601171Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.639052Z", "completed_at": "2025-08-18T19:19:38.639059Z"}], "thread_id": "Thread-5", "execution_time": 0.282958984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_timestamp.388a973e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.452312Z", "completed_at": "2025-08-18T19:19:38.602818Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.641133Z", "completed_at": "2025-08-18T19:19:38.641143Z"}], "thread_id": "Thread-6", "execution_time": 0.28620457649230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.56bda730ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.468533Z", "completed_at": "2025-08-18T19:19:38.608162Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.642161Z", "completed_at": "2025-08-18T19:19:38.642169Z"}], "thread_id": "Thread-30", "execution_time": 0.28418707847595215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_log_index.43eca84613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.473721Z", "completed_at": "2025-08-18T19:19:38.609076Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.643147Z", "completed_at": "2025-08-18T19:19:38.643158Z"}], "thread_id": "Thread-2", "execution_time": 0.2838289737701416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_hash.dbd74bbec2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.463060Z", "completed_at": "2025-08-18T19:19:38.609861Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.644594Z", "completed_at": "2025-08-18T19:19:38.644604Z"}], "thread_id": "Thread-33", "execution_time": 0.2872147560119629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_contract_address.925725dc94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.478389Z", "completed_at": "2025-08-18T19:19:38.610632Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.645500Z", "completed_at": "2025-08-18T19:19:38.645511Z"}], "thread_id": "Thread-9", "execution_time": 0.28555917739868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.2128bbb118", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.482941Z", "completed_at": "2025-08-18T19:19:38.611299Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.646398Z", "completed_at": "2025-08-18T19:19:38.646406Z"}], "thread_id": "Thread-8", "execution_time": 0.28582167625427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bIB01_Oracle_events_transaction_hash.d090f3f6f3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.487422Z", "completed_at": "2025-08-18T19:19:38.611869Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.647282Z", "completed_at": "2025-08-18T19:19:38.647292Z"}], "thread_id": "Thread-31", "execution_time": 0.2861158847808838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_timestamp.5e95caaec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.493907Z", "completed_at": "2025-08-18T19:19:38.617561Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.648444Z", "completed_at": "2025-08-18T19:19:38.648451Z"}], "thread_id": "Thread-14", "execution_time": 0.28595805168151855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_contract_address.1adbd503a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.498631Z", "completed_at": "2025-08-18T19:19:38.618273Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.649839Z", "completed_at": "2025-08-18T19:19:38.649847Z"}], "thread_id": "Thread-7", "execution_time": 0.2867546081542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_log_index.4d86fa50f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.503155Z", "completed_at": "2025-08-18T19:19:38.619116Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.650723Z", "completed_at": "2025-08-18T19:19:38.650734Z"}], "thread_id": "Thread-12", "execution_time": 0.28701257705688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.f26d7fac89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.508138Z", "completed_at": "2025-08-18T19:19:38.619704Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.651607Z", "completed_at": "2025-08-18T19:19:38.651615Z"}], "thread_id": "Thread-32", "execution_time": 0.28725671768188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_timestamp.9775e2fb1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.512633Z", "completed_at": "2025-08-18T19:19:38.620321Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.652473Z", "completed_at": "2025-08-18T19:19:38.652483Z"}], "thread_id": "Thread-13", "execution_time": 0.28752636909484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_contract_address.6fdea4126c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.523312Z", "completed_at": "2025-08-18T19:19:38.622128Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.653985Z", "completed_at": "2025-08-18T19:19:38.653992Z"}], "thread_id": "Thread-17", "execution_time": 0.28285813331604004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_timestamp.af620f849b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.517405Z", "completed_at": "2025-08-18T19:19:38.622719Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.654842Z", "completed_at": "2025-08-18T19:19:38.654851Z"}], "thread_id": "Thread-11", "execution_time": 0.28923773765563965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_log_index.44098cb871", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.528731Z", "completed_at": "2025-08-18T19:19:38.624168Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.656445Z", "completed_at": "2025-08-18T19:19:38.656456Z"}], "thread_id": "Thread-15", "execution_time": 0.2734408378601074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.88ba11e669", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.534149Z", "completed_at": "2025-08-18T19:19:38.625651Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.657923Z", "completed_at": "2025-08-18T19:19:38.657932Z"}], "thread_id": "Thread-18", "execution_time": 0.2695293426513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.b4c568d90c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.553488Z", "completed_at": "2025-08-18T19:19:38.628751Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.660676Z", "completed_at": "2025-08-18T19:19:38.660683Z"}], "thread_id": "Thread-16", "execution_time": 0.2666189670562744, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_timestamp.ea5eb46130", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.559194Z", "completed_at": "2025-08-18T19:19:38.629707Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.661538Z", "completed_at": "2025-08-18T19:19:38.661545Z"}], "thread_id": "Thread-23", "execution_time": 0.26668214797973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_contract_address.3d9bb54174", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.541381Z", "completed_at": "2025-08-18T19:19:38.630289Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.662400Z", "completed_at": "2025-08-18T19:19:38.662411Z"}], "thread_id": "Thread-20", "execution_time": 0.273362398147583, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_rwa_backedfi_prices", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "relation_name": "`dbt`.`int_execution_rwa_backedfi_prices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.564768Z", "completed_at": "2025-08-18T19:19:38.631179Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.663270Z", "completed_at": "2025-08-18T19:19:38.663277Z"}], "thread_id": "Thread-19", "execution_time": 0.2677609920501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_log_index.7bbf5e90e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.569203Z", "completed_at": "2025-08-18T19:19:38.631933Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.664097Z", "completed_at": "2025-08-18T19:19:38.664113Z"}], "thread_id": "Thread-22", "execution_time": 0.26799702644348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.8917d56005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.578497Z", "completed_at": "2025-08-18T19:19:38.633595Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.665637Z", "completed_at": "2025-08-18T19:19:38.665645Z"}], "thread_id": "Thread-26", "execution_time": 0.2676725387573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_contract_address.b1c59a2277", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.574002Z", "completed_at": "2025-08-18T19:19:38.635270Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.667200Z", "completed_at": "2025-08-18T19:19:38.667207Z"}], "thread_id": "Thread-24", "execution_time": 0.27046823501586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_timestamp.bf7705d6a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.585036Z", "completed_at": "2025-08-18T19:19:38.635955Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.668079Z", "completed_at": "2025-08-18T19:19:38.668087Z"}], "thread_id": "Thread-21", "execution_time": 0.2689170837402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_log_index.95ea7ac278", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.590263Z", "completed_at": "2025-08-18T19:19:38.637493Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.669652Z", "completed_at": "2025-08-18T19:19:38.669663Z"}], "thread_id": "Thread-25", "execution_time": 0.2692856788635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.0bc4e9f337", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.595574Z", "completed_at": "2025-08-18T19:19:38.639878Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.671880Z", "completed_at": "2025-08-18T19:19:38.671888Z"}], "thread_id": "Thread-27", "execution_time": 0.2702968120574951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_block_timestamp.4dc290223b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.603633Z", "completed_at": "2025-08-18T19:19:38.643997Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.675429Z", "completed_at": "2025-08-18T19:19:38.675437Z"}], "thread_id": "Thread-29", "execution_time": 0.2659757137298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_contract_address.bbcc2fc5da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.612484Z", "completed_at": "2025-08-18T19:19:38.649227Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.679694Z", "completed_at": "2025-08-18T19:19:38.679706Z"}], "thread_id": "Thread-28", "execution_time": 0.2672901153564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_log_index.37ce7f1498", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.711027Z", "completed_at": "2025-08-18T19:19:38.762056Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.870802Z", "completed_at": "2025-08-18T19:19:38.870814Z"}], "thread_id": "Thread-35", "execution_time": 0.21755123138427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_transaction_hash.fe02a9b64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.718050Z", "completed_at": "2025-08-18T19:19:38.771189Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.882045Z", "completed_at": "2025-08-18T19:19:38.882057Z"}], "thread_id": "Thread-34", "execution_time": 0.22485637664794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_Hub_events_transaction_hash.1c932724e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.723111Z", "completed_at": "2025-08-18T19:19:38.771840Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.883601Z", "completed_at": "2025-08-18T19:19:38.883612Z"}], "thread_id": "Thread-36", "execution_time": 0.2249007225036621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_timestamp.16109c20e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.727804Z", "completed_at": "2025-08-18T19:19:38.772410Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.884512Z", "completed_at": "2025-08-18T19:19:38.884520Z"}], "thread_id": "Thread-37", "execution_time": 0.2251605987548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_log_index.143d8c5c9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.732179Z", "completed_at": "2025-08-18T19:19:38.774268Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.894601Z", "completed_at": "2025-08-18T19:19:38.894612Z"}], "thread_id": "Thread-38", "execution_time": 0.23467135429382324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_transaction_hash.445891e408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.746393Z", "completed_at": "2025-08-18T19:19:38.812450Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.937145Z", "completed_at": "2025-08-18T19:19:38.937155Z"}], "thread_id": "Thread-40", "execution_time": 0.2645237445831299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_NameRegistry_events_transaction_hash.b2db57971e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.762654Z", "completed_at": "2025-08-18T19:19:38.883010Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.961029Z", "completed_at": "2025-08-18T19:19:38.961041Z"}], "thread_id": "Thread-1", "execution_time": 0.27591609954833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_yields_sdai_rate_daily", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`int_yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`int_yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "relation_name": "`dbt`.`int_yields_sdai_rate_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.776599Z", "completed_at": "2025-08-18T19:19:38.915331Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.968958Z", "completed_at": "2025-08-18T19:19:38.968966Z"}], "thread_id": "Thread-4", "execution_time": 0.2758824825286865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_timestamp.f61b316290", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_sdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.781748Z", "completed_at": "2025-08-18T19:19:38.920340Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.970073Z", "completed_at": "2025-08-18T19:19:38.970084Z"}], "thread_id": "Thread-39", "execution_time": 0.27570676803588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_contract_address.55e37a25d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_sdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.787477Z", "completed_at": "2025-08-18T19:19:38.930178Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.973809Z", "completed_at": "2025-08-18T19:19:38.973818Z"}], "thread_id": "Thread-10", "execution_time": 0.27742719650268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_log_index.70e75cfc4a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_sdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.798198Z", "completed_at": "2025-08-18T19:19:38.935587Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.974826Z", "completed_at": "2025-08-18T19:19:38.974834Z"}], "thread_id": "Thread-5", "execution_time": 0.2765064239501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_sdai_events_transaction_hash.50bdbdb4f5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.792603Z", "completed_at": "2025-08-18T19:19:38.936208Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.976307Z", "completed_at": "2025-08-18T19:19:38.976315Z"}], "thread_id": "Thread-3", "execution_time": 0.27861595153808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_transaction_hash.8bc24e2c1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.803400Z", "completed_at": "2025-08-18T19:19:38.938131Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.977865Z", "completed_at": "2025-08-18T19:19:38.977873Z"}], "thread_id": "Thread-6", "execution_time": 0.2777085304260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_timestamp.a0d94f1927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.807841Z", "completed_at": "2025-08-18T19:19:38.938724Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.978736Z", "completed_at": "2025-08-18T19:19:38.978744Z"}], "thread_id": "Thread-30", "execution_time": 0.27797532081604004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_contract_address.6d72ec6909", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_wxdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.813147Z", "completed_at": "2025-08-18T19:19:38.945321Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.979739Z", "completed_at": "2025-08-18T19:19:38.979748Z"}], "thread_id": "Thread-2", "execution_time": 0.2783362865447998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_log_index.f7c64f3a59", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_wxdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.818322Z", "completed_at": "2025-08-18T19:19:38.945987Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.980653Z", "completed_at": "2025-08-18T19:19:38.980661Z"}], "thread_id": "Thread-33", "execution_time": 0.27796006202697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_hash.e5bd1686bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.828014Z", "completed_at": "2025-08-18T19:19:38.946867Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.982081Z", "completed_at": "2025-08-18T19:19:38.982088Z"}], "thread_id": "Thread-8", "execution_time": 0.278156042098999, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_number.ceeff5eb22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.822859Z", "completed_at": "2025-08-18T19:19:38.947435Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.982955Z", "completed_at": "2025-08-18T19:19:38.982963Z"}], "thread_id": "Thread-9", "execution_time": 0.27962684631347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_events_transaction_hash.cf34c446fb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.833327Z", "completed_at": "2025-08-18T19:19:38.952949Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.983955Z", "completed_at": "2025-08-18T19:19:38.983963Z"}], "thread_id": "Thread-31", "execution_time": 0.279386043548584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_timestamp.98dea1810b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.837660Z", "completed_at": "2025-08-18T19:19:38.953547Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.984867Z", "completed_at": "2025-08-18T19:19:38.984874Z"}], "thread_id": "Thread-14", "execution_time": 0.279665470123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_incremental_column.dda2c25ff4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect incremental_column\nfrom `dbt`.`contracts_wxdai_calls`\nwhere incremental_column is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.842830Z", "completed_at": "2025-08-18T19:19:38.954183Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.986340Z", "completed_at": "2025-08-18T19:19:38.986351Z"}], "thread_id": "Thread-7", "execution_time": 0.2780144214630127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_hash.5f3c74de8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.851669Z", "completed_at": "2025-08-18T19:19:38.954997Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.987193Z", "completed_at": "2025-08-18T19:19:38.987201Z"}], "thread_id": "Thread-32", "execution_time": 0.2775301933288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_timestamp.427c640d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.847216Z", "completed_at": "2025-08-18T19:19:38.955762Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.988037Z", "completed_at": "2025-08-18T19:19:38.988045Z"}], "thread_id": "Thread-12", "execution_time": 0.27898740768432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_calls_transaction_hash.f8705da391", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.857514Z", "completed_at": "2025-08-18T19:19:38.957507Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.989576Z", "completed_at": "2025-08-18T19:19:38.989587Z"}], "thread_id": "Thread-13", "execution_time": 0.279254674911499, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_deposit_id.e5de3f71da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.861989Z", "completed_at": "2025-08-18T19:19:38.958160Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.990448Z", "completed_at": "2025-08-18T19:19:38.990459Z"}], "thread_id": "Thread-17", "execution_time": 0.27497386932373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_hash.f28d1a031d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.866342Z", "completed_at": "2025-08-18T19:19:38.958770Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.991303Z", "completed_at": "2025-08-18T19:19:38.991311Z"}], "thread_id": "Thread-11", "execution_time": 0.2752218246459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_deposit_id.e60e7a7d4f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deposit_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is not null\ngroup by deposit_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.871908Z", "completed_at": "2025-08-18T19:19:38.960405Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.992790Z", "completed_at": "2025-08-18T19:19:38.992801Z"}], "thread_id": "Thread-15", "execution_time": 0.2754547595977783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_transaction_hash.c886f64cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.876311Z", "completed_at": "2025-08-18T19:19:38.962883Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.995145Z", "completed_at": "2025-08-18T19:19:38.995157Z"}], "thread_id": "Thread-18", "execution_time": 0.27307987213134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_client.6c0ca0f06e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.885389Z", "completed_at": "2025-08-18T19:19:38.965131Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.997548Z", "completed_at": "2025-08-18T19:19:38.997555Z"}], "thread_id": "Thread-16", "execution_time": 0.26073503494262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_date.1689fe7ae8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.889836Z", "completed_at": "2025-08-18T19:19:38.966162Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.998434Z", "completed_at": "2025-08-18T19:19:38.998445Z"}], "thread_id": "Thread-23", "execution_time": 0.26082444190979004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_date.3153592556", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.895630Z", "completed_at": "2025-08-18T19:19:38.966807Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:38.999308Z", "completed_at": "2025-08-18T19:19:38.999316Z"}], "thread_id": "Thread-20", "execution_time": 0.2610478401184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_value.428f56d13e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.900007Z", "completed_at": "2025-08-18T19:19:38.967793Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.000142Z", "completed_at": "2025-08-18T19:19:39.000152Z"}], "thread_id": "Thread-19", "execution_time": 0.2612428665161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_date.17a4b4d6fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.904690Z", "completed_at": "2025-08-18T19:19:38.968348Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.001017Z", "completed_at": "2025-08-18T19:19:39.001025Z"}], "thread_id": "Thread-22", "execution_time": 0.26141881942749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_value.18da2344fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.909322Z", "completed_at": "2025-08-18T19:19:38.970964Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.003281Z", "completed_at": "2025-08-18T19:19:39.003290Z"}], "thread_id": "Thread-26", "execution_time": 0.26247572898864746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_client.09f15c0dd6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.915974Z", "completed_at": "2025-08-18T19:19:38.972021Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.004142Z", "completed_at": "2025-08-18T19:19:39.004149Z"}], "thread_id": "Thread-24", "execution_time": 0.262129545211792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_cloud.c41159661e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cloud\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere cloud is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.921067Z", "completed_at": "2025-08-18T19:19:38.972593Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.005014Z", "completed_at": "2025-08-18T19:19:39.005025Z"}], "thread_id": "Thread-21", "execution_time": 0.262387752532959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_date.85645cfc12", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.925670Z", "completed_at": "2025-08-18T19:19:38.973195Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.005900Z", "completed_at": "2025-08-18T19:19:39.005908Z"}], "thread_id": "Thread-25", "execution_time": 0.26205921173095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_value.6e304629e2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.931224Z", "completed_at": "2025-08-18T19:19:38.975719Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.008084Z", "completed_at": "2025-08-18T19:19:39.008094Z"}], "thread_id": "Thread-27", "execution_time": 0.26242733001708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_client.e644725624", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.939453Z", "completed_at": "2025-08-18T19:19:38.981489Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.012958Z", "completed_at": "2025-08-18T19:19:39.012968Z"}], "thread_id": "Thread-29", "execution_time": 0.25882673263549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_date.469721c547", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:38.948275Z", "completed_at": "2025-08-18T19:19:38.985731Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.016552Z", "completed_at": "2025-08-18T19:19:39.016563Z"}], "thread_id": "Thread-28", "execution_time": 0.2588846683502197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_quic.4ea4e6aa99", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quic\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere quic is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.042861Z", "completed_at": "2025-08-18T19:19:39.090483Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.268431Z", "completed_at": "2025-08-18T19:19:39.268452Z"}], "thread_id": "Thread-35", "execution_time": 0.2796649932861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_value.752046c959", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.050015Z", "completed_at": "2025-08-18T19:19:39.092453Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.279039Z", "completed_at": "2025-08-18T19:19:39.279050Z"}], "thread_id": "Thread-34", "execution_time": 0.2870299816131592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_transactions_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,success\n    ,n_txs\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE date < today()", "relation_name": "`dbt`.`fct_execution_transactions_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.054789Z", "completed_at": "2025-08-18T19:19:39.098426Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.284889Z", "completed_at": "2025-08-18T19:19:39.284901Z"}], "thread_id": "Thread-36", "execution_time": 0.2906069755554199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_transactions_value_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,success\n    ,xdai_value \n    ,xdai_value_avg \n    ,xdai_value_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE date < today()", "relation_name": "`dbt`.`fct_execution_transactions_value_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.059197Z", "completed_at": "2025-08-18T19:19:39.100648Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.293203Z", "completed_at": "2025-08-18T19:19:39.293215Z"}], "thread_id": "Thread-37", "execution_time": 0.29706907272338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.063706Z", "completed_at": "2025-08-18T19:19:39.101259Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.294237Z", "completed_at": "2025-08-18T19:19:39.294261Z"}], "thread_id": "Thread-38", "execution_time": 0.2974412441253662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.077984Z", "completed_at": "2025-08-18T19:19:39.136799Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.328617Z", "completed_at": "2025-08-18T19:19:39.328627Z"}], "thread_id": "Thread-40", "execution_time": 0.3190913200378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.093038Z", "completed_at": "2025-08-18T19:19:39.286007Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.344070Z", "completed_at": "2025-08-18T19:19:39.344079Z"}], "thread_id": "Thread-1", "execution_time": 0.32088470458984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_gas_used_daily_date.a9330bcf57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_transactions_gas_used_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.108110Z", "completed_at": "2025-08-18T19:19:39.316189Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.349235Z", "completed_at": "2025-08-18T19:19:39.349260Z"}], "thread_id": "Thread-39", "execution_time": 0.31894946098327637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_gas_used_daily_transaction_type.8ce7683337", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`fct_execution_transactions_gas_used_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.103622Z", "completed_at": "2025-08-18T19:19:39.316917Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.350187Z", "completed_at": "2025-08-18T19:19:39.350197Z"}], "thread_id": "Thread-4", "execution_time": 0.3205721378326416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_gas_used_daily_success.315a7fa910", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`fct_execution_transactions_gas_used_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.119393Z", "completed_at": "2025-08-18T19:19:39.326374Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.351961Z", "completed_at": "2025-08-18T19:19:39.351972Z"}], "thread_id": "Thread-5", "execution_time": 0.31826305389404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_state_size_full_diff_daily_date.d17c9483d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_state_size_full_diff_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.114750Z", "completed_at": "2025-08-18T19:19:39.326986Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.354182Z", "completed_at": "2025-08-18T19:19:39.354189Z"}], "thread_id": "Thread-10", "execution_time": 0.3211498260498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,SUM(bytes_diff) OVER (ORDER BY date ASC) AS bytes\nFROM `dbt`.`int_execution_state_size_full_diff_daily`\nWHERE date < today()", "relation_name": "`dbt`.`fct_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.124132Z", "completed_at": "2025-08-18T19:19:39.327927Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.355079Z", "completed_at": "2025-08-18T19:19:39.355087Z"}], "thread_id": "Thread-3", "execution_time": 0.32060790061950684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(cnt) AS cnt\n    FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    WHERE date < today()\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)),4) AS pct\nFROM \n    clients_blocks", "relation_name": "`dbt`.`fct_execution_blocks_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.132321Z", "completed_at": "2025-08-18T19:19:39.329484Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.356118Z", "completed_at": "2025-08-18T19:19:39.356126Z"}], "thread_id": "Thread-30", "execution_time": 0.3198082447052002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_date.dd5f7f1301", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.142721Z", "completed_at": "2025-08-18T19:19:39.330690Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.357006Z", "completed_at": "2025-08-18T19:19:39.357014Z"}], "thread_id": "Thread-33", "execution_time": 0.31942272186279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        ip,\n        any(client) AS client\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv4__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv4_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.127792Z", "completed_at": "2025-08-18T19:19:39.331235Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.357896Z", "completed_at": "2025-08-18T19:19:39.357905Z"}], "thread_id": "Thread-6", "execution_time": 0.32222700119018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_client.6852a73a05", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.137439Z", "completed_at": "2025-08-18T19:19:39.331798Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.358788Z", "completed_at": "2025-08-18T19:19:39.358796Z"}], "thread_id": "Thread-2", "execution_time": 0.32184839248657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.222647Z", "completed_at": "2025-08-18T19:19:39.332637Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.359652Z", "completed_at": "2025-08-18T19:19:39.359663Z"}], "thread_id": "Thread-8", "execution_time": 0.3213343620300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.232904Z", "completed_at": "2025-08-18T19:19:39.333358Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.360569Z", "completed_at": "2025-08-18T19:19:39.360576Z"}], "thread_id": "Thread-31", "execution_time": 0.3210153579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_geo_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[1]) AS lat\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[2]) AS long\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2, 3, 4", "relation_name": "`dbt`.`int_p2p_discv5_geo_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.227759Z", "completed_at": "2025-08-18T19:19:39.333909Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.361439Z", "completed_at": "2025-08-18T19:19:39.361447Z"}], "thread_id": "Thread-9", "execution_time": 0.32250499725341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_forks_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.243930Z", "completed_at": "2025-08-18T19:19:39.335028Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.362304Z", "completed_at": "2025-08-18T19:19:39.362315Z"}], "thread_id": "Thread-7", "execution_time": 0.3213920593261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_peer_id.85213b218b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.238412Z", "completed_at": "2025-08-18T19:19:39.335624Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.363145Z", "completed_at": "2025-08-18T19:19:39.363152Z"}], "thread_id": "Thread-14", "execution_time": 0.32295823097229004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv5__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.249368Z", "completed_at": "2025-08-18T19:19:39.336492Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.364012Z", "completed_at": "2025-08-18T19:19:39.364022Z"}], "thread_id": "Thread-32", "execution_time": 0.3224642276763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_visit_ended_at.892f1eee6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.255062Z", "completed_at": "2025-08-18T19:19:39.337049Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.364884Z", "completed_at": "2025-08-18T19:19:39.364892Z"}], "thread_id": "Thread-12", "execution_time": 0.3227405548095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_peer_id.e1f35aa77b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.259679Z", "completed_at": "2025-08-18T19:19:39.338039Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.365754Z", "completed_at": "2025-08-18T19:19:39.365763Z"}], "thread_id": "Thread-13", "execution_time": 0.3178133964538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_visit_ended_at.c6572c36d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.264122Z", "completed_at": "2025-08-18T19:19:39.339047Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.366638Z", "completed_at": "2025-08-18T19:19:39.366646Z"}], "thread_id": "Thread-17", "execution_time": 0.31798505783081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv4_peers_peer_id.6c2e84dcf5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.269472Z", "completed_at": "2025-08-18T19:19:39.339611Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.367549Z", "completed_at": "2025-08-18T19:19:39.367557Z"}], "thread_id": "Thread-11", "execution_time": 0.3182368278503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_peers_peer_id.90f643e9aa", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.281303Z", "completed_at": "2025-08-18T19:19:39.342277Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.369701Z", "completed_at": "2025-08-18T19:19:39.369708Z"}], "thread_id": "Thread-18", "execution_time": 0.31136393547058105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,label\n    ,apy\nFROM (\n    SELECT date, 'Daily' AS label, apy AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n    UNION ALL \n    SELECT date, '7DMA' AS label, apy_7dma AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n)\nWHERE date < DATE '2024-04-01'\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.273807Z", "completed_at": "2025-08-18T19:19:39.342929Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.370552Z", "completed_at": "2025-08-18T19:19:39.370559Z"}], "thread_id": "Thread-15", "execution_time": 0.3171122074127197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_visits_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`), 7)\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`)\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`), 7)\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`)\n)\n\nSELECT\n    t2.total_visits AS discv4_total_visits,\n    t2.pct_successful AS discv4_pct_successful,\n    t2.crawls AS discv4_crawls,\n    ROUND((COALESCE(t2.crawls / NULLIF(t1.crawls, 0), 0) - 1) * 100, 1) AS change_discv4_crawls_pct,\n    t4.total_visits AS discv5_total_visits,\n    t4.pct_successful AS discv5_pct_successful,\n    t4.crawls AS discv5_crawls,\n    ROUND((COALESCE(t4.crawls / NULLIF(t2.crawls, 0), 0) - 1) * 100, 1) AS change_discv5_crawls_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_visits_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.289791Z", "completed_at": "2025-08-18T19:19:39.345392Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.372142Z", "completed_at": "2025-08-18T19:19:39.372150Z"}], "thread_id": "Thread-23", "execution_time": 0.30165886878967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,total_amount AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_volume_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.286601Z", "completed_at": "2025-08-18T19:19:39.345964Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.373007Z", "completed_at": "2025-08-18T19:19:39.373018Z"}], "thread_id": "Thread-16", "execution_time": 0.30321192741394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,cnt AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.295111Z", "completed_at": "2025-08-18T19:19:39.347381Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.373907Z", "completed_at": "2025-08-18T19:19:39.373915Z"}], "thread_id": "Thread-20", "execution_time": 0.30279088020324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nORDER BY bticker, date", "relation_name": "`dbt`.`fct_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.301462Z", "completed_at": "2025-08-18T19:19:39.347949Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.374793Z", "completed_at": "2025-08-18T19:19:39.374800Z"}], "thread_id": "Thread-19", "execution_time": 0.3030414581298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_bticker.ccc46c2963", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.305815Z", "completed_at": "2025-08-18T19:19:39.348542Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.375648Z", "completed_at": "2025-08-18T19:19:39.375655Z"}], "thread_id": "Thread-22", "execution_time": 0.3032357692718506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_date.10510ec5d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.311767Z", "completed_at": "2025-08-18T19:19:39.351047Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.376743Z", "completed_at": "2025-08-18T19:19:39.376755Z"}], "thread_id": "Thread-26", "execution_time": 0.30250072479248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_execution_rwa_backedfi_prices_bticker.43f0b20be3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.317495Z", "completed_at": "2025-08-18T19:19:39.352994Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.377765Z", "completed_at": "2025-08-18T19:19:39.377773Z"}], "thread_id": "Thread-24", "execution_time": 0.302898645401001, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_yields_sdai_apy_daily", "compiled": true, "compiled_code": "WITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`int_yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "relation_name": "`dbt`.`fct_yields_sdai_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.320914Z", "completed_at": "2025-08-18T19:19:39.353603Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.378665Z", "completed_at": "2025-08-18T19:19:39.378674Z"}], "thread_id": "Thread-21", "execution_time": 0.3031885623931885, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_yields_sdai_rate_daily_date.df9fcc0c06", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_yields_sdai_rate_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.428588Z", "completed_at": "2025-08-18T19:19:39.464399Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.600335Z", "completed_at": "2025-08-18T19:19:39.600353Z"}], "thread_id": "Thread-27", "execution_time": 0.23140192031860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_cnt_daily_n_txs.e1c658a6ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_txs\nfrom `dbt`.`fct_execution_transactions_cnt_daily`\nwhere n_txs is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.423533Z", "completed_at": "2025-08-18T19:19:39.464980Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.601322Z", "completed_at": "2025-08-18T19:19:39.601337Z"}], "thread_id": "Thread-25", "execution_time": 0.23304152488708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_cnt_daily_date.63066c8b5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_transactions_cnt_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.436051Z", "completed_at": "2025-08-18T19:19:39.466344Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.606181Z", "completed_at": "2025-08-18T19:19:39.606191Z"}], "thread_id": "Thread-28", "execution_time": 0.2348942756652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_transactions_value_daily_date.8f1ba97cf8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_transactions_value_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.471007Z", "completed_at": "2025-08-18T19:19:39.639538Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.668994Z", "completed_at": "2025-08-18T19:19:39.669011Z"}], "thread_id": "Thread-34", "execution_time": 0.26246118545532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,bytes/POWER(10,9) AS value\nFROM `dbt`.`fct_execution_state_full_size_daily`", "relation_name": "`dbt`.`api_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.482516Z", "completed_at": "2025-08-18T19:19:39.640585Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.670051Z", "completed_at": "2025-08-18T19:19:39.670059Z"}], "thread_id": "Thread-36", "execution_time": 0.2615337371826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_pct_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,pct AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_pct_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.474496Z", "completed_at": "2025-08-18T19:19:39.641366Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.671631Z", "completed_at": "2025-08-18T19:19:39.671643Z"}], "thread_id": "Thread-6", "execution_time": 0.26439642906188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_state_full_size_daily_date.d76bb8ce85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.479107Z", "completed_at": "2025-08-18T19:19:39.642074Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.673115Z", "completed_at": "2025-08-18T19:19:39.673123Z"}], "thread_id": "Thread-29", "execution_time": 0.26523590087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,cnt AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.491451Z", "completed_at": "2025-08-18T19:19:39.642847Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.674029Z", "completed_at": "2025-08-18T19:19:39.674037Z"}], "thread_id": "Thread-35", "execution_time": 0.2642858028411865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.487016Z", "completed_at": "2025-08-18T19:19:39.643692Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.674937Z", "completed_at": "2025-08-18T19:19:39.674945Z"}], "thread_id": "Thread-2", "execution_time": 0.2658052444458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.501208Z", "completed_at": "2025-08-18T19:19:39.644395Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.675835Z", "completed_at": "2025-08-18T19:19:39.675847Z"}], "thread_id": "Thread-9", "execution_time": 0.2648642063140869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.496039Z", "completed_at": "2025-08-18T19:19:39.645308Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.676812Z", "completed_at": "2025-08-18T19:19:39.676820Z"}], "thread_id": "Thread-38", "execution_time": 0.26642441749572754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_clients_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n)\n\nSELECT\n    t2.discv4_count AS discv4_count,\n    ROUND((COALESCE(t2.discv4_count / NULLIF(t1.discv4_count, 0), 0) - 1) * 100, 1) AS change_discv4_pct,\n    t4.discv5_count AS discv5_count,\n    ROUND((COALESCE(t4.discv5_count / NULLIF(t3.discv5_count, 0), 0) - 1) * 100, 1) AS change_discv5_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.504875Z", "completed_at": "2025-08-18T19:19:39.646127Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.677704Z", "completed_at": "2025-08-18T19:19:39.677715Z"}], "thread_id": "Thread-40", "execution_time": 0.2660801410675049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv4_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.508497Z", "completed_at": "2025-08-18T19:19:39.646757Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.678606Z", "completed_at": "2025-08-18T19:19:39.678614Z"}], "thread_id": "Thread-7", "execution_time": 0.2663419246673584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.513271Z", "completed_at": "2025-08-18T19:19:39.647361Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.679487Z", "completed_at": "2025-08-18T19:19:39.679495Z"}], "thread_id": "Thread-1", "execution_time": 0.2666199207305908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv5_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.516779Z", "completed_at": "2025-08-18T19:19:39.648529Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.680374Z", "completed_at": "2025-08-18T19:19:39.680385Z"}], "thread_id": "Thread-14", "execution_time": 0.26690196990966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_info_latest", "compiled": true, "compiled_code": "WITH\n\ndeposits_withdrawls_latest AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_deposits_withdrawls_daily`)\n),\n\ndeposits_withdrawls_7d AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n),\n\napy_latest AS (\n    SELECT\n        apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`)\n),\n\napy_7d AS (\n    SELECT\n       apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`), 7)\n),\n\nstatus_latest AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`)\n),\n\nstatus_7d AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`), 7)\n),\n\n\n\ninfo_latest AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_latest),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_latest\n),\n\ninfo_7d AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_7d),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_7d\n)\n\nSELECT\n    t1.label\n    ,t1.value AS value\n    ,IF(t1.value=0 AND t2.value=0, 0, ROUND((COALESCE(t2.value / NULLIF(t1.value, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM info_latest t1\nINNER JOIN info_7d t2\nON t2.label = t1.label", "relation_name": "`dbt`.`fct_consensus_info_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.532653Z", "completed_at": "2025-08-18T19:19:39.649465Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.681229Z", "completed_at": "2025-08-18T19:19:39.681236Z"}], "thread_id": "Thread-4", "execution_time": 0.26596498489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_label.f7bfe8acf8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.528159Z", "completed_at": "2025-08-18T19:19:39.650317Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.682085Z", "completed_at": "2025-08-18T19:19:39.682092Z"}], "thread_id": "Thread-32", "execution_time": 0.26741623878479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_date.5fbdde7245", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.537334Z", "completed_at": "2025-08-18T19:19:39.650885Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.682961Z", "completed_at": "2025-08-18T19:19:39.682972Z"}], "thread_id": "Thread-5", "execution_time": 0.26736950874328613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_metric.71ca66ed76", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.521939Z", "completed_at": "2025-08-18T19:19:39.651570Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.684122Z", "completed_at": "2025-08-18T19:19:39.684130Z"}], "thread_id": "Thread-39", "execution_time": 0.27005743980407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_esg_country_power_consumption", "compiled": true, "compiled_code": "\n\n\nWITH\n\nconsensus_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_consensus_power`\n),\n\nexecution_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_execution_power`\n),\n\nidle_electric_power AS (\n    SELECT\n        type\n        ,mean\n    FROM\n        `dbt`.`stg_esg_idle_electric_power`\n),\n\nnode_distribution AS (\n    SELECT\n        type\n        ,distribution\n    FROM\n        `dbt`.`stg_esg_node_distribution`\n),\n\nnode_config_power AS (\n    SELECT\n        t1.type\n        ,t1.client AS consensus_client\n        ,t2.client AS execution_client\n        ,t1.mean + t2.mean + t3.mean AS mean\n    FROM\n        consensus_power t1\n    INNER JOIN\n        execution_power t2\n        ON \n        t2.type = t1.type\n    INNER JOIN\n        idle_electric_power t3\n        ON \n        t3.type = t1.type\n\n),\n\nbest_guess_per_client AS (\n    SELECT\n        t1.consensus_client\n        ,t1.execution_client\n        ,AVG(t1.mean * t2.distribution) AS mean\n    FROM\n        node_config_power t1\n    INNER JOIN\n        node_distribution t2\n        ON \n        t2.type = t1.type\n    GROUP BY\n        t1.consensus_client\n        ,t1.execution_client\n),\n\nconfiguration_distribution AS (\n    SELECT \n        execution_client\n        ,consensus_client\n        ,frac\n    FROM (\n        SELECT\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind', 'Nethermind']) AS execution_client,\n            arrayJoin(['Lighthouse', 'Teku', 'Lodestar', 'Nimbus', 'Lighthouse', 'Teku', 'Lodestar', 'Nimbus']) AS consensus_client,\n            arrayJoin([0.340, 0.114, 0.044, 0.002, 0.340, 0.114, 0.044, 0.002]) AS frac\n    )\n),\n\npower_best_guess AS (\n    SELECT \n        SUM(t1.mean * t2.frac) AS mean\n    FROM \n        best_guess_per_client t1\n    INNER JOIN\n        configuration_distribution t2\n        ON\n        t2.execution_client = t1.execution_client\n        AND\n        t2.consensus_client = t1.consensus_client\n)\n\n\nSELECT\n    t1.date\n    ,t1.country\n    ,t1.cnt * t2.mean AS power\nFROM\n    `dbt`.`int_p2p_discv5_geo_daily` t1\nCROSS JOIN \n    power_best_guess t2", "relation_name": "`dbt`.`int_esg_country_power_consumption`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.543123Z", "completed_at": "2025-08-18T19:19:39.652461Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.685027Z", "completed_at": "2025-08-18T19:19:39.685035Z"}], "thread_id": "Thread-12", "execution_time": 0.2685360908508301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_value.c619ab212e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.547544Z", "completed_at": "2025-08-18T19:19:39.653273Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.685920Z", "completed_at": "2025-08-18T19:19:39.685928Z"}], "thread_id": "Thread-10", "execution_time": 0.2688429355621338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_date.de8e044688", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.552110Z", "completed_at": "2025-08-18T19:19:39.653833Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.686893Z", "completed_at": "2025-08-18T19:19:39.686901Z"}], "thread_id": "Thread-3", "execution_time": 0.26919078826904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_ip.18de621d28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ip\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.556752Z", "completed_at": "2025-08-18T19:19:39.654704Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.687786Z", "completed_at": "2025-08-18T19:19:39.687794Z"}], "thread_id": "Thread-30", "execution_time": 0.2694411277770996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_peer_id.70954d55c9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.566468Z", "completed_at": "2025-08-18T19:19:39.655377Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.688670Z", "completed_at": "2025-08-18T19:19:39.688677Z"}], "thread_id": "Thread-33", "execution_time": 0.26907777786254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_current_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Current Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_current_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.561185Z", "completed_at": "2025-08-18T19:19:39.656006Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.689566Z", "completed_at": "2025-08-18T19:19:39.689577Z"}], "thread_id": "Thread-13", "execution_time": 0.2706260681152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_geo_daily_peer_id.51e0b67531", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.577226Z", "completed_at": "2025-08-18T19:19:39.657112Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.690449Z", "completed_at": "2025-08-18T19:19:39.690457Z"}], "thread_id": "Thread-37", "execution_time": 0.268845796585083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_cnt.f1ea59a2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.573947Z", "completed_at": "2025-08-18T19:19:39.657696Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.691307Z", "completed_at": "2025-08-18T19:19:39.691317Z"}], "thread_id": "Thread-8", "execution_time": 0.27033400535583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`", "relation_name": "`dbt`.`fct_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.570396Z", "completed_at": "2025-08-18T19:19:39.658282Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.692169Z", "completed_at": "2025-08-18T19:19:39.692177Z"}], "thread_id": "Thread-17", "execution_time": 0.2718086242675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_next_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Next Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_next_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.581681Z", "completed_at": "2025-08-18T19:19:39.659217Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.693040Z", "completed_at": "2025-08-18T19:19:39.693048Z"}], "thread_id": "Thread-31", "execution_time": 0.2708163261413574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_date.8e990ae415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.592191Z", "completed_at": "2025-08-18T19:19:39.660047Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.693906Z", "completed_at": "2025-08-18T19:19:39.693914Z"}], "thread_id": "Thread-18", "execution_time": 0.25939345359802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_label.2c896187e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.596629Z", "completed_at": "2025-08-18T19:19:39.662066Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.696096Z", "completed_at": "2025-08-18T19:19:39.696104Z"}], "thread_id": "Thread-15", "execution_time": 0.2609724998474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    peer_ip,\n    peer_discovery_id_prefix,\n    peer_cl_fork_name,\n    peer_cl_next_fork_name,\n    peer_client,\n    peer_hostname,\n    peer_city,\n    peer_country,\n    peer_org,\n    splitByChar(',', peer_loc)[1] AS peer_lat,\n    splitByChar(',', peer_loc)[2] AS peer_lon,\n    neighbor_ip,\n    neighbor_discovery_id_prefix,\n    neighbor_cl_fork_name,\n    neighbor_cl_next_fork_name,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n    splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n    cnt\nFROM  `dbt`.`int_p2p_discv5_topology_latest`", "relation_name": "`dbt`.`api_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.586176Z", "completed_at": "2025-08-18T19:19:39.663569Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.697625Z", "completed_at": "2025-08-18T19:19:39.697637Z"}], "thread_id": "Thread-11", "execution_time": 0.2748229503631592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_fork.5ed0691025", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.602270Z", "completed_at": "2025-08-18T19:19:39.664160Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.698516Z", "completed_at": "2025-08-18T19:19:39.698523Z"}], "thread_id": "Thread-23", "execution_time": 0.25775766372680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\ndiscv4_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv4_topology_latest`\n),\n\ndiscv5_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv5_topology_latest`\n)\n\nSELECT 'DiscV4' AS protocol, * FROM discv4_topology\nUNION ALL\nSELECT 'DiscV5' AS protocol, * FROM discv5_topology", "relation_name": "`dbt`.`fct_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.611703Z", "completed_at": "2025-08-18T19:19:39.665612Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.699386Z", "completed_at": "2025-08-18T19:19:39.699393Z"}], "thread_id": "Thread-20", "execution_time": 0.25716090202331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_date.6994a84654", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.616161Z", "completed_at": "2025-08-18T19:19:39.666322Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.700210Z", "completed_at": "2025-08-18T19:19:39.700217Z"}], "thread_id": "Thread-19", "execution_time": 0.25737953186035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_discovery_id_prefix.43e20b120a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.622220Z", "completed_at": "2025-08-18T19:19:39.666887Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.701056Z", "completed_at": "2025-08-18T19:19:39.701063Z"}], "thread_id": "Thread-22", "execution_time": 0.25744128227233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_ip.05c8d6b346", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_ip\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.607100Z", "completed_at": "2025-08-18T19:19:39.667459Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.701918Z", "completed_at": "2025-08-18T19:19:39.701925Z"}], "thread_id": "Thread-16", "execution_time": 0.2604682445526123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_cnt.ad27ee043e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.626715Z", "completed_at": "2025-08-18T19:19:39.668203Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.702776Z", "completed_at": "2025-08-18T19:19:39.702786Z"}], "thread_id": "Thread-26", "execution_time": 0.2584519386291504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "SELECT\n  bticker,\n  date,\n  price         \nFROM `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nORDER BY\n  bticker,\n  date", "relation_name": "`dbt`.`api_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.634545Z", "completed_at": "2025-08-18T19:19:39.671004Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.704762Z", "completed_at": "2025-08-18T19:19:39.704771Z"}], "thread_id": "Thread-21", "execution_time": 0.2591745853424072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_date.99116a3e90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.630131Z", "completed_at": "2025-08-18T19:19:39.672519Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.706851Z", "completed_at": "2025-08-18T19:19:39.706859Z"}], "thread_id": "Thread-24", "execution_time": 0.26190185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_bticker.0e7519a2a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.744101Z", "completed_at": "2025-08-18T19:19:39.780199Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.889187Z", "completed_at": "2025-08-18T19:19:39.889209Z"}], "thread_id": "Thread-27", "execution_time": 0.19460153579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_price.ff49bc8a9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.757234Z", "completed_at": "2025-08-18T19:19:39.782315Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.899169Z", "completed_at": "2025-08-18T19:19:39.899179Z"}], "thread_id": "Thread-28", "execution_time": 0.20232534408569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_label.e8b1838f2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.752550Z", "completed_at": "2025-08-18T19:19:39.783536Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.905491Z", "completed_at": "2025-08-18T19:19:39.905502Z"}], "thread_id": "Thread-25", "execution_time": 0.21015262603759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_date.b2bdc5f65c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.784698Z", "completed_at": "2025-08-18T19:19:39.916603Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.946398Z", "completed_at": "2025-08-18T19:19:39.946410Z"}], "thread_id": "Thread-34", "execution_time": 0.21814465522766113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_client.04116a3527", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.791301Z", "completed_at": "2025-08-18T19:19:39.926608Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.949351Z", "completed_at": "2025-08-18T19:19:39.949360Z"}], "thread_id": "Thread-36", "execution_time": 0.21848154067993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_date.49d7e9d160", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.795920Z", "completed_at": "2025-08-18T19:19:39.927887Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.951549Z", "completed_at": "2025-08-18T19:19:39.951557Z"}], "thread_id": "Thread-6", "execution_time": 0.22000527381896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_state_full_size_daily_date.453c8c3223", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.806279Z", "completed_at": "2025-08-18T19:19:39.928505Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.952452Z", "completed_at": "2025-08-18T19:19:39.952463Z"}], "thread_id": "Thread-35", "execution_time": 0.21951699256896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.810634Z", "completed_at": "2025-08-18T19:19:39.929303Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.953351Z", "completed_at": "2025-08-18T19:19:39.953359Z"}], "thread_id": "Thread-2", "execution_time": 0.2197859287261963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.801753Z", "completed_at": "2025-08-18T19:19:39.929995Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.954201Z", "completed_at": "2025-08-18T19:19:39.954210Z"}], "thread_id": "Thread-29", "execution_time": 0.22191882133483887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.814997Z", "completed_at": "2025-08-18T19:19:39.930718Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.955085Z", "completed_at": "2025-08-18T19:19:39.955093Z"}], "thread_id": "Thread-9", "execution_time": 0.22089385986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_date.1187b1bb2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.819560Z", "completed_at": "2025-08-18T19:19:39.931266Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.955957Z", "completed_at": "2025-08-18T19:19:39.955964Z"}], "thread_id": "Thread-4", "execution_time": 0.22116398811340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_label.dc6cbbebc0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.829716Z", "completed_at": "2025-08-18T19:19:39.932540Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.956847Z", "completed_at": "2025-08-18T19:19:39.956855Z"}], "thread_id": "Thread-32", "execution_time": 0.22081923484802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_active_ongoing_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'active_ongoing'", "relation_name": "`dbt`.`api_consensus_info_active_ongoing_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.824024Z", "completed_at": "2025-08-18T19:19:39.933377Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.957727Z", "completed_at": "2025-08-18T19:19:39.957734Z"}], "thread_id": "Thread-38", "execution_time": 0.22227692604064941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_metric.7417fc683c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.833067Z", "completed_at": "2025-08-18T19:19:39.933931Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.958607Z", "completed_at": "2025-08-18T19:19:39.958617Z"}], "thread_id": "Thread-40", "execution_time": 0.2219536304473877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_api_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'APY7D'", "relation_name": "`dbt`.`api_consensus_info_api_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.836314Z", "completed_at": "2025-08-18T19:19:39.934706Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.959482Z", "completed_at": "2025-08-18T19:19:39.959490Z"}], "thread_id": "Thread-7", "execution_time": 0.22219562530517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'deposits_cnt'", "relation_name": "`dbt`.`api_consensus_info_deposits_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.839515Z", "completed_at": "2025-08-18T19:19:39.935329Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.960338Z", "completed_at": "2025-08-18T19:19:39.960346Z"}], "thread_id": "Thread-1", "execution_time": 0.22246718406677246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'withdrawls_cnt'", "relation_name": "`dbt`.`api_consensus_info_withdrawls_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.846769Z", "completed_at": "2025-08-18T19:19:39.936430Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.961181Z", "completed_at": "2025-08-18T19:19:39.961188Z"}], "thread_id": "Thread-14", "execution_time": 0.22208380699157715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_power_consumption_top10", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        t1.date\n        ,IF(t1.country='' OR t1.country='Unknown', 'Unknown', t2.name) AS country\n        ,t1.power\n        ,ROW_NUMBER() OVER (PARTITION BY t1.date ORDER BY t1.power DESC) AS rank\n    FROM\n        `dbt`.`int_esg_country_power_consumption` t1\n    LEFT JOIN\n        `crawlers_data`.`country_codes` t2\n        ON\n        t2.\"alpha-2\" = t1.country\n)\n\nSELECT\n    date\n    ,IF(rank>10, 'Other', country) AS country\n    ,SUM(power) AS power\nFROM\n    gnosis_power_consumption\nGROUP BY \n    1, 2", "relation_name": "`dbt`.`fct_esg_power_consumption_top10`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.856645Z", "completed_at": "2025-08-18T19:19:39.937360Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.962062Z", "completed_at": "2025-08-18T19:19:39.962072Z"}], "thread_id": "Thread-39", "execution_time": 0.22170591354370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_country.5f0b1d361e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.842735Z", "completed_at": "2025-08-18T19:19:39.938081Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.962962Z", "completed_at": "2025-08-18T19:19:39.962973Z"}], "thread_id": "Thread-5", "execution_time": 0.22446632385253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_carbon_emissions", "compiled": true, "compiled_code": "WITH\n\ngnosis_power_consumption AS (\n    SELECT\n        date\n        ,country\n        ,power\n    FROM\n        `dbt`.`int_esg_country_power_consumption`\n),\n\nember_data AS (\n    SELECT\n        \"Date\" AS month_date\n        ,\"Value\" AS value\n        ,lagInFrame(\"Value\") OVER (PARTITION BY \"ISO 3 code\" ORDER BY \"Date\" ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS lag_value\n        ,\"ISO 3 code\" AS country\n    FROM\n        `crawlers_data`.`ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n\n)\n\nSELECT\n    t1.date\n    ,SUM(t1.power * 24)/POWER(10,6) AS energy -- MWh\n    ,SUM(\n        t1.power/POWER(10,3)  -- power in kW\n        * 24 -- hours in day\n        * COALESCE(t3.value,t3.lag_value) -- CIF in gCO2/kWh\n        )/POWER(10,6) AS co2_emissions -- in tCO2e\n    ,AVG(COALESCE(t3.value,t3.lag_value)) AS mean_cif\nFROM\n    gnosis_power_consumption t1\nLEFT JOIN\n    `crawlers_data`.`country_codes` t2\n    ON\n    t2.\"alpha-2\" = t1.country\nINNER JOIN\n    ember_data t3\n    ON\n    t3.country = t2.\"alpha-3\"\n    AND\n    t3.month_date = toStartOfMonth(t1.date)\nGROUP BY \n    1", "relation_name": "`dbt`.`fct_esg_carbon_emissions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.870055Z", "completed_at": "2025-08-18T19:19:39.939404Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.963871Z", "completed_at": "2025-08-18T19:19:39.963879Z"}], "thread_id": "Thread-30", "execution_time": 0.22167730331420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_date.81d71f6217", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.861038Z", "completed_at": "2025-08-18T19:19:39.940056Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.964773Z", "completed_at": "2025-08-18T19:19:39.964786Z"}], "thread_id": "Thread-12", "execution_time": 0.22384023666381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_date.f5adc6ed90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.865601Z", "completed_at": "2025-08-18T19:19:39.940648Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.965717Z", "completed_at": "2025-08-18T19:19:39.965724Z"}], "thread_id": "Thread-3", "execution_time": 0.2241365909576416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_type.979aeea8a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.875930Z", "completed_at": "2025-08-18T19:19:39.941444Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.966589Z", "completed_at": "2025-08-18T19:19:39.966597Z"}], "thread_id": "Thread-18", "execution_time": 0.22380685806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_fork.285fc1bfce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.852300Z", "completed_at": "2025-08-18T19:19:39.941990Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.967474Z", "completed_at": "2025-08-18T19:19:39.967482Z"}], "thread_id": "Thread-10", "execution_time": 0.22774887084960938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_client.4a35be3114", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.880321Z", "completed_at": "2025-08-18T19:19:39.943061Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.968330Z", "completed_at": "2025-08-18T19:19:39.968337Z"}], "thread_id": "Thread-33", "execution_time": 0.22493362426757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_date.617d796abf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.884804Z", "completed_at": "2025-08-18T19:19:39.943646Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.969166Z", "completed_at": "2025-08-18T19:19:39.969174Z"}], "thread_id": "Thread-13", "execution_time": 0.21840834617614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_fork.6488c6272b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.890315Z", "completed_at": "2025-08-18T19:19:39.944566Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.970290Z", "completed_at": "2025-08-18T19:19:39.970298Z"}], "thread_id": "Thread-37", "execution_time": 0.21850895881652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_p2p_discv5_forks_daily_date.71a6724bfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.894691Z", "completed_at": "2025-08-18T19:19:39.945117Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.971158Z", "completed_at": "2025-08-18T19:19:39.971165Z"}], "thread_id": "Thread-17", "execution_time": 0.20928645133972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_date.eb16694787", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.912095Z", "completed_at": "2025-08-18T19:19:39.947386Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.972166Z", "completed_at": "2025-08-18T19:19:39.972174Z"}], "thread_id": "Thread-15", "execution_time": 0.20760369300842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_bticker.4eb35e749f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.900107Z", "completed_at": "2025-08-18T19:19:39.947925Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.973036Z", "completed_at": "2025-08-18T19:19:39.973044Z"}], "thread_id": "Thread-11", "execution_time": 0.21033406257629395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_neighbor_discovery_id_prefix.fcd761a7f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect neighbor_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere neighbor_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.907186Z", "completed_at": "2025-08-18T19:19:39.948510Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.973938Z", "completed_at": "2025-08-18T19:19:39.973945Z"}], "thread_id": "Thread-31", "execution_time": 0.21058988571166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_peer_discovery_id_prefix.0d3232d2af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.917316Z", "completed_at": "2025-08-18T19:19:39.950384Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.974979Z", "completed_at": "2025-08-18T19:19:39.974991Z"}], "thread_id": "Thread-8", "execution_time": 0.20977044105529785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_date.1d033684e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.921700Z", "completed_at": "2025-08-18T19:19:39.950963Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:39.975883Z", "completed_at": "2025-08-18T19:19:39.975894Z"}], "thread_id": "Thread-21", "execution_time": 0.21007227897644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_api_execution_rwa_backedfi_prices_daily_bticker.accf7541b4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.996223Z", "completed_at": "2025-08-18T19:19:40.014912Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:40.017148Z", "completed_at": "2025-08-18T19:19:40.017163Z"}], "thread_id": "Thread-13", "execution_time": 0.03330874443054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_country.5bd56a4d58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:40.005362Z", "completed_at": "2025-08-18T19:19:40.015775Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:40.018157Z", "completed_at": "2025-08-18T19:19:40.018168Z"}], "thread_id": "Thread-22", "execution_time": 0.03301239013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_power.ab3e0cdb9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect power\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere power is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:40.000848Z", "completed_at": "2025-08-18T19:19:40.016354Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:40.020182Z", "completed_at": "2025-08-18T19:19:40.020190Z"}], "thread_id": "Thread-19", "execution_time": 0.03565835952758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_date.6115e7db55", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:40.009990Z", "completed_at": "2025-08-18T19:19:40.018995Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:40.021301Z", "completed_at": "2025-08-18T19:19:40.021313Z"}], "thread_id": "Thread-37", "execution_time": 0.03550863265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_rank.de32808782", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rank\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere rank is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T19:19:39.989496Z", "completed_at": "2025-08-18T19:19:40.019633Z"}, {"name": "execute", "started_at": "2025-08-18T19:19:40.022179Z", "completed_at": "2025-08-18T19:19:40.022186Z"}], "thread_id": "Thread-20", "execution_time": 0.03903388977050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_carbon_emissions_date.cc8d5b1e7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_carbon_emissions`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 7.353595733642578, "args": {"use_colors": true, "compile": true, "require_resource_names_without_spaces": false, "static": false, "write_json": true, "skip_nodes_if_on_run_start_fails": false, "populate_cache": true, "warn_error_options": {"include": [], "exclude": []}, "project_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "which": "generate", "print": true, "require_nested_cumulative_type_params": false, "invocation_command": "dbt docs generate", "source_freshness_run_project_hooks": false, "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_more_unrendered_values": false, "log_level": "info", "cache_selected_only": false, "show_resource_report": false, "select": [], "indirect_selection": "eager", "defer": false, "introspect": true, "send_anonymous_usage_stats": true, "empty_catalog": false, "state_modified_compare_vars": false, "version_check": true, "macro_debugging": false, "log_format_file": "debug", "favor_state": false, "partial_parse": true, "quiet": false, "static_parser": true, "use_colors_file": true, "log_file_max_bytes": 10485760, "strict_mode": false, "log_format": "default", "require_yaml_configuration_for_mf_time_spines": false, "vars": {}, "profiles_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "log_level_file": "debug", "log_path": "/home/runner/work/dbt-cerebro/dbt-cerebro/logs", "printer_width": 80, "partial_parse_file_diff": true, "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": []}}