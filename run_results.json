{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-08-19T19:27:03.710183Z", "invocation_id": "bfe5644f-def6-4c70-ae9f-c5eecb80ab98", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.126325Z", "completed_at": "2025-08-19T19:27:00.171998Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.230440Z", "completed_at": "2025-08-19T19:27:00.230463Z"}], "thread_id": "Thread-1", "execution_time": 0.1323719024658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_topology_latest", "compiled": true, "compiled_code": "SELECT\n    protocol,\n    date,\n    peer_discovery_id_prefix,\n    peer_client,\n    peer_city,\n    peer_country,\n    peer_org,\n    peer_lat,\n    peer_lon,\n    neighbor_discovery_id_prefix,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    neighbor_lat,\n    neighbor_lon,\n    cnt\nFROM dbt.fct_p2p_topology_latest\nWHERE peer_lat != '' AND neighbor_lat != ''\nORDER BY protocol DESC", "relation_name": "`dbt`.`api_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.143533Z", "completed_at": "2025-08-19T19:27:00.189685Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.264521Z", "completed_at": "2025-08-19T19:27:00.264540Z"}], "thread_id": "Thread-2", "execution_time": 0.16393303871154785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_transfers_erc20", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT\n        block_number\n        ,block_timestamp\n        ,transaction_index\n        ,log_index\n        ,transaction_hash\n        ,concat('0x', address) AS token_address\n        ,concat('0x', substring(topic1,25,40)) AS \"from\"\n        ,concat('0x', substring(topic2,25,40) ) AS \"to\"\n        ,toString(\n            reinterpretAsUInt256(\n                reverse(unhex(data))\n            )\n        ) AS \"value\"\n    FROM `execution`.`logs`\n    WHERE\n        topic0 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n        \n  \n\n\n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`int_transfers_erc20`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.154648Z", "completed_at": "2025-08-19T19:27:00.202382Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.289799Z", "completed_at": "2025-08-19T19:27:00.289815Z"}], "thread_id": "Thread-3", "execution_time": 0.18729948997497559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__attestations", "compiled": true, "compiled_code": "SELECT\n   slot,\n    attestation_index,\n    aggregation_bits,\n    signature,\n    attestation_slot,\n    committee_index,\n    beacon_block_root,\n    source_epoch,\n    source_root,\n    target_epoch,\n    target_root,\n    slot_timestamp\nFROM \n    `consensus`.`attestations` FINAL", "relation_name": "`dbt`.`stg_consensus__attestations`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.166230Z", "completed_at": "2025-08-19T19:27:00.226154Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.387005Z", "completed_at": "2025-08-19T19:27:00.387024Z"}], "thread_id": "Thread-4", "execution_time": 0.2803077697753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__blob_commitments", "compiled": true, "compiled_code": "SELECT\n   slot,\n    commitment_index,\n    commitment,\n    slot_timestamp\nFROM \n    `consensus`.`blob_commitments` FINAL", "relation_name": "`dbt`.`stg_consensus__blob_commitments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.172644Z", "completed_at": "2025-08-19T19:27:00.236293Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.390031Z", "completed_at": "2025-08-19T19:27:00.390040Z"}], "thread_id": "Thread-5", "execution_time": 0.28133344650268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__blocks", "compiled": true, "compiled_code": "SELECT\n   slot,\n    proposer_index,\n    parent_root,\n    state_root,\n    signature,\n    version,\n    randao_reveal,\n    graffiti,\n    eth1_deposit_root,\n    eth1_deposit_count,\n    eth1_block_hash,\n    sync_aggregate_participation,\n    withdrawals_count,\n    blob_kzg_commitments_count,\n    execution_requests_count,\n    slot_timestamp\nFROM \n    `consensus`.`blocks` FINAL", "relation_name": "`dbt`.`stg_consensus__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.178137Z", "completed_at": "2025-08-19T19:27:00.248920Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.394879Z", "completed_at": "2025-08-19T19:27:00.394888Z"}], "thread_id": "Thread-6", "execution_time": 0.2836449146270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__deposits", "compiled": true, "compiled_code": "SELECT\n   slot,\n    deposit_index,\n    pubkey,\n    withdrawal_credentials,\n    amount,\n    signature,\n    proof,\n    slot_timestamp\nFROM \n    `consensus`.`deposits` FINAL", "relation_name": "`dbt`.`stg_consensus__deposits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.184515Z", "completed_at": "2025-08-19T19:27:00.263711Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.398305Z", "completed_at": "2025-08-19T19:27:00.398314Z"}], "thread_id": "Thread-7", "execution_time": 0.28339242935180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__execution_requests", "compiled": true, "compiled_code": "SELECT\n    slot,\n    payload,\n    deposits_count,\n    withdrawals_count,\n    consolidations_count,\n    slot_timestamp\nFROM \n    `consensus`.`execution_requests` FINAL", "relation_name": "`dbt`.`stg_consensus__execution_requests`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.190375Z", "completed_at": "2025-08-19T19:27:00.269410Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.400465Z", "completed_at": "2025-08-19T19:27:00.400481Z"}], "thread_id": "Thread-8", "execution_time": 0.28367066383361816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__rewards", "compiled": true, "compiled_code": "SELECT\n    slot\n    proposer_index,\n    total,\n    attestations,\n    sync_aggregate,\n    proposer_slashings,\n    attester_slashings,\n    slot_timestamp\nFROM \n    `consensus`.`rewards` FINAL", "relation_name": "`dbt`.`stg_consensus__rewards`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.197650Z", "completed_at": "2025-08-19T19:27:00.290997Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.410969Z", "completed_at": "2025-08-19T19:27:00.410978Z"}], "thread_id": "Thread-9", "execution_time": 0.2898871898651123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__specs", "compiled": true, "compiled_code": "SELECT\n    parameter_name,\n    parameter_value,\nFROM \n    `consensus`.`specs` FINAL", "relation_name": "`dbt`.`stg_consensus__specs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.295767Z", "completed_at": "2025-08-19T19:27:00.297812Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.412051Z", "completed_at": "2025-08-19T19:27:00.412063Z"}], "thread_id": "Thread-32", "execution_time": 0.25000882148742676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.contracts_abi", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.298504Z", "completed_at": "2025-08-19T19:27:00.301621Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.413691Z", "completed_at": "2025-08-19T19:27:00.413701Z"}], "thread_id": "Thread-33", "execution_time": 0.2509431838989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.event_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.203687Z", "completed_at": "2025-08-19T19:27:00.302193Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.414608Z", "completed_at": "2025-08-19T19:27:00.414617Z"}], "thread_id": "Thread-10", "execution_time": 0.2916250228881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__time_helpers", "compiled": true, "compiled_code": "SELECT\n    genesis_time_unix,\n    seconds_per_slot,\n    slots_per_epoch\nFROM \n    `consensus`.`time_helpers` FINAL", "relation_name": "`dbt`.`stg_consensus__time_helpers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.303103Z", "completed_at": "2025-08-19T19:27:00.384059Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.415505Z", "completed_at": "2025-08-19T19:27:00.415513Z"}], "thread_id": "Thread-34", "execution_time": 0.2514462471008301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.gnosis_dbt.function_signatures", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.214283Z", "completed_at": "2025-08-19T19:27:00.385327Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.416362Z", "completed_at": "2025-08-19T19:27:00.416369Z"}], "thread_id": "Thread-12", "execution_time": 0.28150463104248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__withdrawals", "compiled": true, "compiled_code": "SELECT\n    slot,\n    block_number,\n    block_hash,\n    withdrawal_index,\n    validator_index,\n    address,\n    amount,\n    slot_timestamp\nFROM \n    `consensus`.`withdrawals` FINAL", "relation_name": "`dbt`.`stg_consensus__withdrawals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.209942Z", "completed_at": "2025-08-19T19:27:00.386271Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.417205Z", "completed_at": "2025-08-19T19:27:00.417214Z"}], "thread_id": "Thread-11", "execution_time": 0.29233264923095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_consensus__validators", "compiled": true, "compiled_code": "SELECT\n    slot,\n    validator_index,\n    balance,\n    status,\n    pubkey,\n    withdrawal_credentials,\n    effective_balance,\n    slashed,\n    activation_eligibility_epoch,\n    activation_epoch,\n    exit_epoch,\n    withdrawable_epoch,\n    slot_timestamp\nFROM \n    `consensus`.`validators` FINAL", "relation_name": "`dbt`.`stg_consensus__validators`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.218095Z", "completed_at": "2025-08-19T19:27:00.388412Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.418289Z", "completed_at": "2025-08-19T19:27:00.418301Z"}], "thread_id": "Thread-13", "execution_time": 0.2825944423675537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__ipinfo", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    ip,\n    hostname,\n    city,\n    region,\n    country,\n    loc,\n    org,\n    postal,\n    timezone,\n    asn,\n    company,\n    carrier,\n    is_bogon,\n    is_mobile,\n    multiIf(\n      lowerUTF8(org) ILIKE '%amazon web services%' OR lowerUTF8(org) ILIKE '%amazon data services%' OR lowerUTF8(org) ILIKE '%aws%' OR lowerUTF8(org) ILIKE '%amazon.com%', 'AWS',\n      (lowerUTF8(org) ILIKE '%google cloud%' OR lowerUTF8(org) ILIKE '%google llc%' OR lowerUTF8(org) ILIKE '%gcp%' OR lowerUTF8(org) ILIKE '%google%') AND lowerUTF8(org) NOT ILIKE '%fiber%', 'Google',\n      lowerUTF8(org) ILIKE '%microsoft azure%' OR lowerUTF8(org) ILIKE '%azure%' OR lowerUTF8(org) ILIKE '%microsoft corporation%' OR lowerUTF8(org) ILIKE '%msft%', 'Azure',\n      lowerUTF8(org) ILIKE '%oracle cloud%' OR lowerUTF8(org) ILIKE '%oracle america%' OR lowerUTF8(org) ILIKE '%oci%', 'Oracle Cloud',\n      lowerUTF8(org) ILIKE '%alibaba cloud%' OR lowerUTF8(org) ILIKE '%aliyun%' OR lowerUTF8(org) ILIKE '%alibaba%', 'Alibaba Cloud',\n\n      lowerUTF8(org) ILIKE '%cloudflare%', 'Cloudflare',\n      (lowerUTF8(org) ILIKE '%akamai%' AND lowerUTF8(org) NOT ILIKE '%linode%'), 'Akamai',\n      lowerUTF8(org) ILIKE '%fastly%', 'Fastly',\n\n      lowerUTF8(org) ILIKE '%digitalocean%' OR lowerUTF8(org) ILIKE '%digital ocean%', 'DigitalOcean',\n      lowerUTF8(org) ILIKE '%ovh%', 'OVHcloud',\n      lowerUTF8(org) ILIKE '%hetzner%', 'Hetzner',\n      lowerUTF8(org) ILIKE '%scaleway%' OR lowerUTF8(org) ILIKE '%online s.a.s%' OR lowerUTF8(org) ILIKE '%iliad%', 'Scaleway',\n      lowerUTF8(org) ILIKE '%linode%', 'Linode',\n      lowerUTF8(org) ILIKE '%vultr%' OR lowerUTF8(org) ILIKE '%choopa%', 'Vultr',\n      lowerUTF8(org) ILIKE '%equinix metal%' OR lowerUTF8(org) ILIKE '%packet host%' OR lowerUTF8(org) ILIKE '%packet, inc%', 'Equinix Metal',\n      lowerUTF8(org) ILIKE '%fly.io%' OR lowerUTF8(org) ILIKE '%fly io%', 'Fly.io',\n      lowerUTF8(org) ILIKE '%netlify%', 'Netlify',\n      lowerUTF8(org) ILIKE '%vercel%' OR lowerUTF8(org) ILIKE '%zeit%', 'Vercel',\n      lowerUTF8(org) ILIKE '%heroku%', 'Heroku',\n      lowerUTF8(org) ILIKE '%render.com%' OR lowerUTF8(org) ILIKE '% render %', 'Render',\n\n      -- Carrier / transit networks (keep as its own bucket; change to 'Public ISP (Home/Office)' if you prefer)\n      lowerUTF8(org) ILIKE '%cogent%' OR lowerUTF8(org) ILIKE '%lumen%' OR lowerUTF8(org) ILIKE '%level 3%' OR lowerUTF8(org) ILIKE '%centurylink%' OR\n      lowerUTF8(org) ILIKE '%telia carrier%' OR lowerUTF8(org) ILIKE '%arelion%' OR lowerUTF8(org) ILIKE '%gtt%' OR lowerUTF8(org) ILIKE '%hurricane electric%' OR\n      lowerUTF8(org) ILIKE '%he.net%' OR lowerUTF8(org) ILIKE '%ntt communications%' OR lowerUTF8(org) ILIKE '%tata communications%' OR lowerUTF8(org) ILIKE '%zayo%' OR\n      lowerUTF8(org) ILIKE '%kddi%' OR lowerUTF8(org) ILIKE '%sparkle%' OR lowerUTF8(org) ILIKE '%backbone%' OR lowerUTF8(org) ILIKE '%chinanet-backbone%', 'Carrier/Transit',\n\n      -- Education / government \u2192 treat like public access\n      lowerUTF8(org) ILIKE '%university%' OR lowerUTF8(org) ILIKE '%college%' OR lowerUTF8(org) ILIKE '%school%' OR lowerUTF8(org) ILIKE '%ministry%' OR lowerUTF8(org) ILIKE '%government%', 'Public ISP (Home/Office)',\n\n      -- Generic hosting/CDN hints\n      lowerUTF8(org) ILIKE '%datacenter%' OR lowerUTF8(org) ILIKE '%data center%' OR lowerUTF8(org) ILIKE '%colo%' OR lowerUTF8(org) ILIKE '%hosting%' OR lowerUTF8(org) ILIKE '%vps%' OR lowerUTF8(org) ILIKE '%server%' OR lowerUTF8(org) ILIKE '%incapsula%' OR lowerUTF8(org) ILIKE '%imperva%', 'Hosting/CDN (Other)',\n\n      -- Fallback for residential & office ISPs\n      lowerUTF8(org) ILIKE '%telecom%' OR lowerUTF8(org) ILIKE '%telekom%' OR lowerUTF8(org) ILIKE '%telecommunications%' OR lowerUTF8(org) ILIKE '%communications%' OR lowerUTF8(org) ILIKE '%wireless%' OR\n      lowerUTF8(org) ILIKE '%cable%' OR lowerUTF8(org) ILIKE '%broadband%' OR lowerUTF8(org) ILIKE '%internet%' OR lowerUTF8(org) ILIKE '%fibre%' OR lowerUTF8(org) ILIKE '%fiber%' OR lowerUTF8(org) ILIKE '%mobile%', 'Public ISP (Home/Office)',\n      lowerUTF8(org) = '', 'Unknown',\n      'Public ISP (Home/Office)'\n  ) AS generic_provider\n  FROM `crawlers_data`.`ipinfo` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_crawlers_data__ipinfo`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.226891Z", "completed_at": "2025-08-19T19:27:00.388994Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.419286Z", "completed_at": "2025-08-19T19:27:00.419295Z"}], "thread_id": "Thread-15", "execution_time": 0.2814466953277588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_cloud_provider_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    cloud_provider,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_cloud_provider_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.231721Z", "completed_at": "2025-08-19T19:27:00.391027Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.421036Z", "completed_at": "2025-08-19T19:27:00.421045Z"}], "thread_id": "Thread-16", "execution_time": 0.28182053565979004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_countries_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    country_name,\n    country,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_countries_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_countries_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.222549Z", "completed_at": "2025-08-19T19:27:00.391616Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.422550Z", "completed_at": "2025-08-19T19:27:00.422562Z"}], "thread_id": "Thread-14", "execution_time": 0.28545570373535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_agent_semvers_avg_1d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    agent_version_semver,\n    agent_version_semver_str,\n    __count,\n    __samples,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_agent_semvers_avg_1d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.237004Z", "completed_at": "2025-08-19T19:27:00.392779Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.423527Z", "completed_at": "2025-08-19T19:27:00.423536Z"}], "thread_id": "Thread-17", "execution_time": 0.283599853515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_crawlers_data__probelab_quic_support_over_7d", "compiled": true, "compiled_code": "SELECT\n    agent_version_type,\n    min_crawl_created_at,\n    max_crawl_created_at,\n    crawl_created_at,\n    quic_support,\n    __count,\n    __pct,\n    __total\nFROM \n    `crawlers_data`.`probelab_quic_support_over_7d`", "relation_name": "`dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.240710Z", "completed_at": "2025-08-19T19:27:00.393600Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.424466Z", "completed_at": "2025-08-19T19:27:00.424475Z"}], "thread_id": "Thread-18", "execution_time": 0.2838249206542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_consensus_power", "compiled": true, "compiled_code": "WITH consensus_power AS (\n    SELECT\n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Lighthouse', 'Lighthouse', 'Lighthouse', 'Teku', 'Teku', 'Teku', 'Lodestar', 'Lodestar', 'Lodestar', 'Nimbus', 'Nimbus', 'Nimbus', 'Prysm', 'Prysm', 'Prysm']) AS client,\n            arrayJoin([2.75, 3.14, 18.84, 3.71, 3.32, 27.46, 3.14, 3.89, 33.55, 1.67, 2.08, 17.11, 3.51, 2.87, 24.33]) AS mean\n    )\n)\n\nSELECT * FROM consensus_power", "relation_name": "`dbt`.`stg_esg_consensus_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.243659Z", "completed_at": "2025-08-19T19:27:00.394264Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.425349Z", "completed_at": "2025-08-19T19:27:00.425363Z"}], "thread_id": "Thread-19", "execution_time": 0.2833678722381592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_execution_power", "compiled": true, "compiled_code": "WITH execution_power AS (\n    SELECT \n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind']) AS client,\n            arrayJoin([18.6, 17.59, 44.62, 18.6, 17.59, 44.62]) AS mean\n            \n    )\n)\n\nSELECT * FROM execution_power", "relation_name": "`dbt`.`stg_esg_execution_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.246286Z", "completed_at": "2025-08-19T19:27:00.395741Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.426324Z", "completed_at": "2025-08-19T19:27:00.426332Z"}], "thread_id": "Thread-20", "execution_time": 0.2836165428161621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_hardware_config", "compiled": true, "compiled_code": "WITH hardware_config AS (\n    SELECT\n        type\n        ,cpu\n        ,cores_threads\n        ,architecture\n        ,ram\n        ,storage\n        ,gpu\n        ,psu\n        ,\"case\"\n        ,os\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin(['Intel i5-1135G7', 'Intel i5-10400', 'AMD 3970X']) AS cpu,\n            arrayJoin(['4/8', '6/12', '32/64']) AS cores_threads,\n            arrayJoin(['x86/x64', 'x86/x64', 'x86/x64']) AS architecture,\n            arrayJoin(['16 GB', '64 GB', '256 GB']) AS ram,\n            arrayJoin(['2 TB SSD', '2TB SSD', '2TB SSD']) AS storage,\n            arrayJoin(['Onboard', 'Onboard', 'AM 6970']) AS gpu,\n            arrayJoin(['65 Watt', '650 Watt', '1000 Watt']) AS psu,\n            arrayJoin(['Integrated', 'Custom', 'Custom']) AS \"case\",\n            arrayJoin(['Ubuntu 20.04', 'Ubuntu 21', 'Ubuntu 20.04']) AS os\n    )\n)\n\nSELECT * FROM hardware_config", "relation_name": "`dbt`.`stg_esg_hardware_config`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.252384Z", "completed_at": "2025-08-19T19:27:00.396771Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.427989Z", "completed_at": "2025-08-19T19:27:00.428001Z"}], "thread_id": "Thread-22", "execution_time": 0.27906370162963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_node_distribution", "compiled": true, "compiled_code": "WITH node_distribution AS (\n    SELECT \n        type\n        ,distribution\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([0.25, 0.50, 0.25]) AS distribution\n    )\n)\n\nSELECT * FROM node_distribution", "relation_name": "`dbt`.`stg_esg_node_distribution`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.249728Z", "completed_at": "2025-08-19T19:27:00.397557Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.428932Z", "completed_at": "2025-08-19T19:27:00.428941Z"}], "thread_id": "Thread-21", "execution_time": 0.2808201313018799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_esg_idle_electric_power", "compiled": true, "compiled_code": "WITH idle_electric_power AS (\n    SELECT \n        type\n        ,mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([3.66, 25.04, 78.17]) AS mean\n    )\n)\n\nSELECT * FROM idle_electric_power", "relation_name": "`dbt`.`stg_esg_idle_electric_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.256145Z", "completed_at": "2025-08-19T19:27:00.399745Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.429919Z", "completed_at": "2025-08-19T19:27:00.429930Z"}], "thread_id": "Thread-23", "execution_time": 0.2796318531036377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__blocks", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT \n        block_number,\n        block_hash,\n        parent_hash,\n        uncles_hash,\n        author,\n        state_root,\n        transactions_root,\n        receipts_root,\n        gas_used,\n        gas_limit,\n        extra_data,\n        size,\n        mix_hash,\n        nonce,\n        base_fee_per_gas,\n        withdrawals_root,\n        block_timestamp\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n)\n\nSELECT\n    block_number,\n    block_hash,\n    parent_hash,\n    uncles_hash,\n    CONCAT('0x',author) AS author,\n    state_root,\n    transactions_root,\n    receipts_root,\n    gas_used,\n    gas_limit,\n    extra_data,\n    \narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(coalesce(extra_data, '')), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(coalesce(extra_data, '')), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(coalesce(extra_data, ''))) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data,\n    size,\n    mix_hash,\n    nonce,\n    base_fee_per_gas,\n    withdrawals_root,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.265761Z", "completed_at": "2025-08-19T19:27:00.403418Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.432537Z", "completed_at": "2025-08-19T19:27:00.432546Z"}], "thread_id": "Thread-25", "execution_time": 0.2802004814147949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__transactions", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n    SELECT\n        block_number,\n        transaction_index,\n        transaction_hash,\n        nonce,\n        from_address,\n        to_address,\n        value_string,\n        input,\n        gas_limit,\n        gas_used,\n        gas_price,\n        transaction_type,\n        max_priority_fee_per_gas,\n        max_fee_per_gas,\n        success,\n        n_input_bytes,\n        n_input_zero_bytes,\n        n_input_nonzero_bytes,\n        n_rlp_bytes,\n        r,\n        s,\n        v,\n        block_hash,\n        block_timestamp\n    FROM `execution`.`transactions` FINAL\n)\n\nSELECT\n    block_number,\n    transaction_index,\n    transaction_hash,\n    nonce,\n    CONCAT('0x',from_address) AS from_address,\n    IF(to_address IS NULL, NULL, CONCAT('0x',to_address)) AS to_address,\n    CAST(value_string AS UInt256) AS value,\n    input,\n    gas_limit,\n    gas_used,\n    gas_price,\n    transaction_type,\n    max_priority_fee_per_gas,\n    max_fee_per_gas,\n    success,\n    n_input_bytes,\n    n_input_zero_bytes,\n    n_input_nonzero_bytes,\n    n_rlp_bytes,\n    r,\n    s,\n    v,\n    block_hash,\n    block_timestamp\nFROM source", "relation_name": "`dbt`.`stg_execution__transactions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.260200Z", "completed_at": "2025-08-19T19:27:00.404150Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.433431Z", "completed_at": "2025-08-19T19:27:00.433439Z"}], "thread_id": "Thread-24", "execution_time": 0.2824280261993408, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_execution__storage_diffs", "compiled": true, "compiled_code": "WITH\n\n\nsource AS (\n    SELECT \n        block_number,\n        transaction_index,\n        CONCAT('0x', transaction_hash) AS transaction_hash,\n        CONCAT('0x', address) AS address,\n        slot,\n        from_value,\n        to_value,\n        block_timestamp\n    FROM \n        `execution`.`storage_diffs`\n)\n\nSELECT\n    *\nFROM source", "relation_name": "`dbt`.`stg_execution__storage_diffs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.270175Z", "completed_at": "2025-08-19T19:27:00.405446Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.435054Z", "completed_at": "2025-08-19T19:27:00.435062Z"}], "thread_id": "Thread-26", "execution_time": 0.282259464263916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula_discv4`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.273805Z", "completed_at": "2025-08-19T19:27:00.406189Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.436155Z", "completed_at": "2025-08-19T19:27:00.436163Z"}], "thread_id": "Thread-27", "execution_time": 0.28244519233703613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula_discv4`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.277383Z", "completed_at": "2025-08-19T19:27:00.407668Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.437771Z", "completed_at": "2025-08-19T19:27:00.437780Z"}], "thread_id": "Thread-28", "execution_time": 0.27974748611450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv4__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula_discv4`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv4__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.282609Z", "completed_at": "2025-08-19T19:27:00.408963Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.439403Z", "completed_at": "2025-08-19T19:27:00.439412Z"}], "thread_id": "Thread-29", "execution_time": 0.28064870834350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__discovery_id_prefixes_x_peer_ids", "compiled": true, "compiled_code": "WITH\n\nsource AS (\n  SELECT \n    discovery_id_prefix,\n    peer_id\n  FROM `nebula`.`discovery_id_prefixes_x_peer_ids` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.286273Z", "completed_at": "2025-08-19T19:27:00.409687Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.440270Z", "completed_at": "2025-08-19T19:27:00.440278Z"}], "thread_id": "Thread-30", "execution_time": 0.28023290634155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__neighbors", "compiled": true, "compiled_code": "WITH \n\nsource AS (\n  SELECT \n    crawl_id,\n    crawl_created_at,\n    peer_discovery_id_prefix,\n    neighbor_discovery_id_prefix,\n    error_bits\n  FROM `nebula`.`neighbors` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__neighbors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.291629Z", "completed_at": "2025-08-19T19:27:00.413035Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.442055Z", "completed_at": "2025-08-19T19:27:00.442064Z"}], "thread_id": "Thread-31", "execution_time": 0.2813148498535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.stg_nebula_discv5__visits", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n  SELECT \n    crawl_id,\n    peer_id,\n    agent_version,\n    protocols,\n    dial_maddrs,\n    filtered_maddrs,\n    extra_maddrs,\n    dial_errors,\n    connect_maddr,\n    crawl_error,\n    visit_started_at,\n    visit_ended_at,\n    peer_properties\n  FROM `nebula`.`visits` \n)\n\nSELECT * FROM source", "relation_name": "`dbt`.`stg_nebula_discv5__visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.489905Z", "completed_at": "2025-08-19T19:27:00.575789Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.718279Z", "completed_at": "2025-08-19T19:27:00.718294Z"}], "thread_id": "Thread-36", "execution_time": 0.2874307632446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_transfers_erc20_bluechips", "compiled": true, "compiled_code": "\n\n\nSELECT\n    block_number\n    ,block_timestamp\n    ,transaction_index\n    ,log_index\n    ,transaction_hash\n    ,token_address\n    ,\"from\"\n    ,\"to\"\n    ,\"value\"\nFROM `dbt`.`int_transfers_erc20`\nWHERE\n    token_address = '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`int_transfers_erc20_bluechips`\n    )\n  \n", "relation_name": "`dbt`.`int_transfers_erc20_bluechips`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.498476Z", "completed_at": "2025-08-19T19:27:00.577014Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.725702Z", "completed_at": "2025-08-19T19:27:00.725713Z"}], "thread_id": "Thread-37", "execution_time": 0.29403233528137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_number.3617f74e56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`int_transfers_erc20`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.513965Z", "completed_at": "2025-08-19T19:27:00.578356Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.736419Z", "completed_at": "2025-08-19T19:27:00.736433Z"}], "thread_id": "Thread-38", "execution_time": 0.3022193908691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_block_timestamp.410e103aed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`int_transfers_erc20`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.521873Z", "completed_at": "2025-08-19T19:27:00.579719Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.743135Z", "completed_at": "2025-08-19T19:27:00.743144Z"}], "thread_id": "Thread-39", "execution_time": 0.30620837211608887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_transaction_hash.78d1c44d49", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`int_transfers_erc20`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.527364Z", "completed_at": "2025-08-19T19:27:00.582212Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.760316Z", "completed_at": "2025-08-19T19:27:00.760330Z"}], "thread_id": "Thread-40", "execution_time": 0.321779727935791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_transfers_erc20_transaction_hash.c325ae07ac", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_transfers_erc20`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.536004Z", "completed_at": "2025-08-19T19:27:00.594220Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.764938Z", "completed_at": "2025-08-19T19:27:00.764951Z"}], "thread_id": "Thread-1", "execution_time": 0.32392048835754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_attestations_daily", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,slot - attestation_slot AS inclusion_delay\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__attestations`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_attestations_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_attestations_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.549476Z", "completed_at": "2025-08-19T19:27:00.652171Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.774129Z", "completed_at": "2025-08-19T19:27:00.774141Z"}], "thread_id": "Thread-3", "execution_time": 0.322906494140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_blob_commitments_daily", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__blob_commitments`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blob_commitments_daily`\n    )\n  \n\nGROUP BY 1", "relation_name": "`dbt`.`int_consensus_blob_commitments_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.557699Z", "completed_at": "2025-08-19T19:27:00.684826Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.779859Z", "completed_at": "2025-08-19T19:27:00.779869Z"}], "thread_id": "Thread-2", "execution_time": 0.3252565860748291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_graffiti_daily", "compiled": true, "compiled_code": "\n\nWITH\n    -- Canonical lists\n    ['nethermind','erigon','geth','besu','reth'] AS el_keys,\n    ['Nethermind','Erigon','Geth','Besu','Reth'] AS el_names,\n    ['lighthouse','teku','prysm','lodestar','nimbus'] AS cl_keys,\n    ['Lighthouse','Teku','Prysm','Lodestar','Nimbus'] AS cl_names,\n\n    -- Platform/hosting brands \n    ['dappnode','avado','allnodes','twinstake','stakewise','gateway','kleros',\n     'filoozom','kpk-validators','hopr','digitalconsultantsllc',\n     'synthex'] AS brand_keys,\n    ['DappNode','Avado','Allnodes','Twinstake','StakeWise','gateway.fm','kleros.io',\n     'filoozom.eth','kpk-validators','HOPR','DigitalConsultantsLLC.xyz',\n     'Synthex'] AS brand_names,\n\n\nfinal AS (\n    SELECT\n        date\n        ,graffiti\n        ,cnt\n        -- Lowercased text to search in\n        ,lowerUTF8(graffiti) AS g\n\n        -- Detect any brand first (highest precedence)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, brand_keys) AS brands_found\n        ,if(length(brands_found) > 0,\n            arrayElement(brand_names, indexOf(brand_keys, brands_found[1])),\n            null) AS brand_label\n\n        -- Detect EL/CL clients (order-insensitive, separator-agnostic)\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, el_keys) AS el_found\n        ,arrayFilter(x -> positionCaseInsensitive(g, x) > 0, cl_keys) AS cl_found\n\n        -- Pick the first match per side by priority order above\n        ,if(length(el_found) > 0,\n            arrayElement(el_names, indexOf(el_keys, el_found[1])),\n            null) AS el_label\n\n        ,if(length(cl_found) > 0,\n            arrayElement(cl_names, indexOf(cl_keys, cl_found[1])),\n            null) AS cl_label\n\n        -- Final label priority:\n        -- 1) Brand/platform if any\n        -- 2) EL+CL combo if both found\n        -- 3) Single client if only one side found\n        -- 4) Other\n        ,coalesce(\n            brand_label,\n            if(el_label IS NOT NULL AND cl_label IS NOT NULL, concat(el_label, '+', cl_label), null),\n            el_label,\n            cl_label,\n            if(graffiti = 'None', graffiti, null),\n            'Other'\n        ) AS label\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date\n            ,IF(graffiti='0x0000000000000000000000000000000000000000000000000000000000000000', \n                'None', \n                unhex(right(graffiti,-2))\n            ) AS graffiti\n            ,COUNT(*) AS cnt\n        FROM `dbt`.`stg_consensus__blocks`\n        WHERE\n            slot_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_graffiti_daily`\n    )\n  \n\n        GROUP BY 1, 2\n    )\n)\n\nSELECT\n    date\n    ,graffiti\n    ,label\n    ,cnt\nFROM final", "relation_name": "`dbt`.`int_consensus_graffiti_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.566359Z", "completed_at": "2025-08-19T19:27:00.706373Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.784539Z", "completed_at": "2025-08-19T19:27:00.784551Z"}], "thread_id": "Thread-5", "execution_time": 0.3247983455657959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_deposits_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(amount/POWER(10,9)) AS total_amount\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__deposits`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_deposits_daily`\n    )\n  \n\nGROUP BY 1", "relation_name": "`dbt`.`int_consensus_deposits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.595101Z", "completed_at": "2025-08-19T19:27:00.766354Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.797026Z", "completed_at": "2025-08-19T19:27:00.797034Z"}], "thread_id": "Thread-11", "execution_time": 0.32278919219970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.589124Z", "completed_at": "2025-08-19T19:27:00.766953Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.798629Z", "completed_at": "2025-08-19T19:27:00.798638Z"}], "thread_id": "Thread-6", "execution_time": 0.32504868507385254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.583630Z", "completed_at": "2025-08-19T19:27:00.767899Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.799701Z", "completed_at": "2025-08-19T19:27:00.799710Z"}], "thread_id": "Thread-4", "execution_time": 0.32703328132629395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.606112Z", "completed_at": "2025-08-19T19:27:00.768645Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.800630Z", "completed_at": "2025-08-19T19:27:00.800638Z"}], "thread_id": "Thread-7", "execution_time": 0.32496118545532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.600561Z", "completed_at": "2025-08-19T19:27:00.769210Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.801542Z", "completed_at": "2025-08-19T19:27:00.801550Z"}], "thread_id": "Thread-35", "execution_time": 0.32665014266967773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.611419Z", "completed_at": "2025-08-19T19:27:00.770092Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.802432Z", "completed_at": "2025-08-19T19:27:00.802441Z"}], "thread_id": "Thread-13", "execution_time": 0.3259420394897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.623836Z", "completed_at": "2025-08-19T19:27:00.771102Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.803303Z", "completed_at": "2025-08-19T19:27:00.803310Z"}], "thread_id": "Thread-9", "execution_time": 0.32555198669433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.618398Z", "completed_at": "2025-08-19T19:27:00.771863Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.804173Z", "completed_at": "2025-08-19T19:27:00.804181Z"}], "thread_id": "Thread-8", "execution_time": 0.3270852565765381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.629383Z", "completed_at": "2025-08-19T19:27:00.772604Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.805058Z", "completed_at": "2025-08-19T19:27:00.805066Z"}], "thread_id": "Thread-15", "execution_time": 0.3266408443450928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.634864Z", "completed_at": "2025-08-19T19:27:00.773197Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.805948Z", "completed_at": "2025-08-19T19:27:00.805956Z"}], "thread_id": "Thread-32", "execution_time": 0.32687830924987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.640117Z", "completed_at": "2025-08-19T19:27:00.775000Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.807605Z", "completed_at": "2025-08-19T19:27:00.807614Z"}], "thread_id": "Thread-33", "execution_time": 0.3279001712799072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.658041Z", "completed_at": "2025-08-19T19:27:00.776147Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.808577Z", "completed_at": "2025-08-19T19:27:00.808585Z"}], "thread_id": "Thread-34", "execution_time": 0.3263213634490967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.647019Z", "completed_at": "2025-08-19T19:27:00.776734Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.809456Z", "completed_at": "2025-08-19T19:27:00.809464Z"}], "thread_id": "Thread-10", "execution_time": 0.3284933567047119, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.652918Z", "completed_at": "2025-08-19T19:27:00.777329Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.810326Z", "completed_at": "2025-08-19T19:27:00.810333Z"}], "thread_id": "Thread-16", "execution_time": 0.32870984077453613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.663391Z", "completed_at": "2025-08-19T19:27:00.778150Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.811188Z", "completed_at": "2025-08-19T19:27:00.811196Z"}], "thread_id": "Thread-12", "execution_time": 0.3283369541168213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.668656Z", "completed_at": "2025-08-19T19:27:00.779007Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.812072Z", "completed_at": "2025-08-19T19:27:00.812079Z"}], "thread_id": "Thread-14", "execution_time": 0.327958345413208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_sdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_sdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.673890Z", "completed_at": "2025-08-19T19:27:00.780770Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.813603Z", "completed_at": "2025-08-19T19:27:00.813612Z"}], "thread_id": "Thread-17", "execution_time": 0.32883477210998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.679096Z", "completed_at": "2025-08-19T19:27:00.781413Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.814671Z", "completed_at": "2025-08-19T19:27:00.814679Z"}], "thread_id": "Thread-18", "execution_time": 0.32924365997314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_forks", "compiled": true, "compiled_code": "WITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nfork_version AS (\n    SELECT\n        IF(fork_name='GENESIS', 'PHASE0', fork_name) AS fork_name\n        ,parameter_value\n    FROM (\n        SELECT\n            arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n            ,parameter_value\n        FROM `dbt`.`stg_consensus__specs`\n        WHERE parameter_name LIKE '%_FORK_VERSION'\n    )\n),\n\nfork_epoch AS (\n    SELECT\n        arrayElement(splitByChar('_', ifNull(parameter_name, '')), 1) AS fork_name\n        ,parameter_value\n    FROM `dbt`.`stg_consensus__specs`\n    WHERE parameter_name LIKE '%_FORK_EPOCH'\n\n    UNION ALL \n\n    SELECT 'PHASE0' AS fork_name, '0' AS parameter_value \n)\n\nSELECT \n  t1.cl_fork_name AS fork_name\n  ,t2.parameter_value AS fork_version \n  ,t1.fork_digest AS fork_digest\n  ,t3.parameter_value AS fork_epoch \n  ,IF(CAST(t3.parameter_value AS Int) = -1, NULL,\n    addSeconds(\n          toDateTime(t4.genesis_time_unix, 'UTC'),\n          CAST(t3.parameter_value AS Int) * (t4.seconds_per_slot * t4.slots_per_epoch )\n      )\n   ) AS fork_time\nFROM \n  fork_digests t1\nINNER JOIN\n  fork_version t2\n  ON LOWER(t2.fork_name) = LOWER(t1.cl_fork_name)\nINNER JOIN\n  fork_epoch t3\n  ON LOWER(t3.fork_name) = LOWER(t1.cl_fork_name)\nCROSS JOIN `dbt`.`stg_consensus__time_helpers` t4", "relation_name": "`dbt`.`fct_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.690884Z", "completed_at": "2025-08-19T19:27:00.782554Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.815566Z", "completed_at": "2025-08-19T19:27:00.815579Z"}], "thread_id": "Thread-20", "execution_time": 0.32889318466186523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.685496Z", "completed_at": "2025-08-19T19:27:00.783196Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.816477Z", "completed_at": "2025-08-19T19:27:00.816486Z"}], "thread_id": "Thread-19", "execution_time": 0.3304271697998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_blocks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ntime_helpers AS (\n    SELECT\n        genesis_time_unix,\n        seconds_per_slot\n    FROM \n        `dbt`.`stg_consensus__time_helpers`\n)\n\nSELECT\n    date\n    ,cnt AS blocks_produced\n    ,CASE\n        WHEN toStartOfDay(toDateTime(genesis_time_unix)) = date \n            THEN CAST((86400 - toUnixTimestamp(toDateTime(genesis_time_unix)) % 86400) / seconds_per_slot - cnt AS UInt64)\n        ELSE CAST(86400 / seconds_per_slot - cnt AS UInt64)\n    END AS blocks_missed\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_consensus__blocks`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_blocks_daily`\n    )\n  \n\n    GROUP BY 1\n) t1\nCROSS JOIN time_helpers t2", "relation_name": "`dbt`.`int_consensus_blocks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.696309Z", "completed_at": "2025-08-19T19:27:00.783821Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.817363Z", "completed_at": "2025-08-19T19:27:00.817375Z"}], "thread_id": "Thread-22", "execution_time": 0.3294708728790283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.701414Z", "completed_at": "2025-08-19T19:27:00.785393Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.818933Z", "completed_at": "2025-08-19T19:27:00.818942Z"}], "thread_id": "Thread-21", "execution_time": 0.3303990364074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,total_amount\n    ,cnt\n    ,q_amount[1] AS min\n    ,q_amount[2] AS q05\n    ,q_amount[3] AS q10\n    ,q_amount[4] AS q25\n    ,q_amount[5] AS q50\n    ,q_amount[6] AS q75\n    ,q_amount[7] AS q90\n    ,q_amount[8] AS q95\n    ,q_amount[9] AS max\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount/POWER(10,9)) AS total_amount\n        ,COUNT(*) AS cnt\n        ,quantilesTDigest(\n            0.0, 0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95, 1\n        )(amount/POWER(10,9)) AS q_amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    WHERE\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_withdrawls_dist_daily`\n    )\n  \n\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.706988Z", "completed_at": "2025-08-19T19:27:00.787043Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.820538Z", "completed_at": "2025-08-19T19:27:00.820546Z"}], "thread_id": "Thread-23", "execution_time": 0.3313713073730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_credentials_daily", "compiled": true, "compiled_code": "\n\n\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,leftUTF8(withdrawal_credentials, 4) AS credentials_type\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\n\n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_credentials_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.713314Z", "completed_at": "2025-08-19T19:27:00.788894Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.822029Z", "completed_at": "2025-08-19T19:27:00.822037Z"}], "thread_id": "Thread-25", "execution_time": 0.30994319915771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_entry_queue_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nqueue_activation AS (\n    SELECT\n        validator_index\n        ,date\n        ,epoch_eligibility\n        ,epoch_activation\n        ,(epoch_activation - epoch_eligibility) * 16 * 5 /(60 * 60 * 24) AS activation_days\n    FROM (\n        SELECT \n            validator_index\n            ,toStartOfDay(argMin(slot_timestamp,slot)) AS date\n            ,argMin(activation_eligibility_epoch,slot) AS epoch_eligibility\n            ,argMin(activation_epoch,slot) AS epoch_activation\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE \n            activation_epoch < 18446744073709551615\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_entry_queue_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT\n    date\n    ,validator_count\n    ,q_activation[1] AS q05\n    ,q_activation[2] AS q10\n    ,q_activation[3] AS q25\n    ,q_activation[4] AS q50\n    ,q_activation[5] AS q75\n    ,q_activation[6] AS q90\n    ,q_activation[7] AS q95\n    ,mean\nFROM (\n    SELECT\n        date,\n        count() AS validator_count\n        ,quantilesTDigest(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(activation_days) AS q_activation\n        ,avg(activation_days) AS  mean\n    FROM queue_activation\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.719332Z", "completed_at": "2025-08-19T19:27:00.789730Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.824071Z", "completed_at": "2025-08-19T19:27:00.824080Z"}], "thread_id": "Thread-24", "execution_time": 0.31084418296813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_proposers_apy_daily", "compiled": true, "compiled_code": "\n\n-- Step 1: Get daily rewards (this should be small since only proposers)\nWITH daily_rewards AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date,\n        SUM(total) AS total_rewards,\n        COUNT(DISTINCT proposer_index) AS unique_proposers,\n        -- Collect all proposer indices for this date\n        groupArray(DISTINCT proposer_index) AS proposer_indices\n    FROM `dbt`.`stg_consensus__rewards`\n    WHERE total > 0\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_proposers_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n-- Step 2: Get balances only for proposers on their respective dates\n-- Use arrayJoin to expand the proposer arrays\nproposer_balances AS (\n    SELECT \n        dr.date,\n        dr.total_rewards,\n        dr.unique_proposers,\n        SUM(v.balance) AS total_proposer_balance\n    FROM daily_rewards dr\n    ARRAY JOIN dr.proposer_indices AS proposer_idx\n    LEFT JOIN (\n        SELECT \n            toStartOfDay(slot_timestamp) AS date,\n            validator_index,\n            balance\n        FROM `dbt`.`stg_consensus__validators`\n        WHERE balance > 0\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_proposers_apy_daily`\n    )\n  \n\n    ) v ON v.date = dr.date AND v.validator_index = proposer_idx\n    GROUP BY 1, 2, 3\n)\n\n-- Step 3: Calculate final metrics\nSELECT \n    date,\n    total_rewards AS amount,\n    total_proposer_balance AS balance,\n    unique_proposers,\n    CASE \n        WHEN total_proposer_balance > total_rewards AND total_rewards > 0\n        THEN total_rewards / (total_proposer_balance - total_rewards)\n        ELSE 0 \n    END AS rate,\n    CASE \n        WHEN total_proposer_balance > total_rewards AND total_rewards > 0\n        THEN floor(POWER((1 + total_rewards / (total_proposer_balance - total_rewards)), 365) - 1, 4) * 100\n        ELSE 0 \n    END AS apy\nFROM proposer_balances", "relation_name": "`dbt`.`int_consensus_proposers_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.726635Z", "completed_at": "2025-08-19T19:27:00.790422Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.824957Z", "completed_at": "2025-08-19T19:27:00.824967Z"}], "thread_id": "Thread-26", "execution_time": 0.3045053482055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_daily", "compiled": true, "compiled_code": "\n\nWITH\n\ndeposists AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date\n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__deposits`\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ndeposists_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(deposit, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'deposits') AS deposit\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\n\nwithdrawals AS (\n    SELECT \n        toStartOfDay(slot_timestamp) AS date \n        ,SUM(amount) AS amount\n    FROM `dbt`.`stg_consensus__withdrawals`\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nwithdrawals_requests AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        SUM(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS amount\n    FROM `dbt`.`stg_consensus__execution_requests`\n    ARRAY JOIN JSONExtractArrayRaw(payload, 'withdrawals') AS withdrawals\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\nvalidators AS (\n    SELECT\n        date,\n        balance,\n        lagInFrame(balance, 1, balance) OVER (\n            ORDER BY date\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n        ) AS prev_balance,\n        balance - prev_balance AS balance_diff\n    FROM (\n        SELECT\n            toStartOfDay(slot_timestamp) AS date,\n            SUM(balance) AS balance\n        FROM `dbt`.`stg_consensus__validators`\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_apy_daily`\n    )\n  \n\n        GROUP BY 1\n    )\n)\n\nSELECT \n    t1.date AS date\n    ,t1.balance AS balance\n    ,t1.balance_diff AS balance_diff_original\n    ,COALESCE(t2.amount,0)  AS deposited_amount\n    ,COALESCE(t3.amount,0)  AS withdrawaled_amount\n    ,t1.balance_diff - COALESCE(t2.amount,0) - COALESCE(t4.amount,0) + COALESCE(t3.amount,0) + COALESCE(t5.amount,0) AS eff_balance_diff\n    ,eff_balance_diff/t1.prev_balance AS rate\n    ,ROUND((POWER((1+rate),365) - 1) * 100,2) AS apy\nFROM validators t1\nLEFT JOIN \n    deposists t2\n    ON t2.date = t1.date\nLEFT JOIN \n    withdrawals t3\n    ON t3.date = t1.date\nLEFT JOIN \n    deposists_requests t4\n    ON t4.date = t1.date\nLEFT JOIN \n    withdrawals_requests t5\n    ON t5.date = t1.date", "relation_name": "`dbt`.`int_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.737410Z", "completed_at": "2025-08-19T19:27:00.792575Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.827150Z", "completed_at": "2025-08-19T19:27:00.827158Z"}], "thread_id": "Thread-27", "execution_time": 0.3060469627380371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_apy_dist", "compiled": true, "compiled_code": "\n\nWITH\n\n/* 1) Daily per-validator balance snapshot (already 1 row/day) */\ndaily_validator_balances AS (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n        pubkey,\n        validator_index,\n        balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        balance > 0\n        AND\n        toStartOfDay(slot_timestamp) >= DATE '2023-01-01'\n        AND\n        toStartOfDay(slot_timestamp) < DATE '2023-02-01'\n),\n\n/* 2) True previous-day balance per validator using a window function */\nvalidator_with_prev AS (\n    SELECT\n        date,\n        pubkey,\n        validator_index,\n        balance,\n        -- default value = current balance on first day\n        lagInFrame(balance, 1, balance) OVER (\n            PARTITION BY pubkey, validator_index\n            ORDER BY date\n        ) AS prev_balance\n    FROM daily_validator_balances\n),\n\n/* 3) Get date range to filter other tables - materialize this first */\ndate_range AS (\n    SELECT \n        min(date) AS min_date,\n        max(date) AS max_date\n    FROM validator_with_prev\n),\n\n/* 4) Per-day deposits - direct pubkey and amount columns */\ndeposits AS (\n    SELECT\n        toStartOfDay(d.slot_timestamp) AS dep_date,\n        d.pubkey AS dep_pubkey,\n        sum(d.amount) AS dep_amount\n    FROM `dbt`.`stg_consensus__deposits` d\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(d.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(d.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(d.slot_timestamp), d.pubkey\n),\n\n/* 5) Deposit requests - use JSON extraction with explicit date range */\ndeposit_requests AS (\n    SELECT\n        toStartOfDay(dr_table.slot_timestamp) AS dr_date,\n        toString(JSONExtractString(deposit, 'pubkey')) AS dr_pubkey,\n        sum(toUInt64(JSONExtractString(deposit, 'amount'))) AS dep_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` dr_table\n    ARRAY JOIN JSONExtractArrayRaw(dr_table.payload, 'deposits') AS deposit\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(dr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(dr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(dr_table.slot_timestamp), toString(JSONExtractString(deposit, 'pubkey'))\n),\n\n/* 6) Withdrawals - uses validator_index, not pubkey */\nwithdrawals AS (\n    SELECT\n        toStartOfDay(w.slot_timestamp) AS w_date,\n        w.validator_index AS w_validator_index,\n        sum(w.amount) AS wdr_amount\n    FROM `dbt`.`stg_consensus__withdrawals` w\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(w.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(w.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(w.slot_timestamp), w.validator_index\n),\n\n/* 7) Withdrawal requests - use JSON extraction with explicit date range */\nwithdrawal_requests AS (\n    SELECT\n        toStartOfDay(wr_table.slot_timestamp) AS wr_date,\n        toString(JSONExtractString(withdrawals, 'validator_pubkey')) AS wr_pubkey,\n        sum(toUInt64(JSONExtractString(withdrawals, 'amount'))) AS wdr_req_amount\n    FROM `dbt`.`stg_consensus__execution_requests` wr_table\n    ARRAY JOIN JSONExtractArrayRaw(wr_table.payload, 'withdrawals') AS withdrawals\n    CROSS JOIN date_range dr\n    WHERE toStartOfDay(wr_table.slot_timestamp) >= dr.min_date \n      AND toStartOfDay(wr_table.slot_timestamp) <= dr.max_date\n    GROUP BY toStartOfDay(wr_table.slot_timestamp), toString(JSONExtractString(withdrawals, 'validator_pubkey'))\n),\n\n/* 8) Per-validator daily net change excluding external flows */\nvalidator_rates AS (\n    SELECT\n        v.date,\n        v.pubkey,\n        v.validator_index,\n        v.prev_balance,\n        v.balance,\n        (v.balance - v.prev_balance) AS raw_diff,\n\n        coalesce(d.dep_amount, 0) AS deposits_amt,\n        coalesce(dr.dep_req_amount, 0) AS deposit_req_amt,\n        coalesce(w.wdr_amount, 0) AS withdrawals_amt,\n        coalesce(wr.wdr_req_amount, 0) AS withdrawal_req_amt,\n\n        /* Adjust for external flows (requests set to 0 unless you want them) */\n        (\n            (v.balance - v.prev_balance)\n            - coalesce(d.dep_amount, 0)   -- deposits increase balance -> subtract to isolate rewards\n            + coalesce(w.wdr_amount, 0)   -- withdrawals decrease balance -> add back\n            - coalesce(dr.dep_req_amount, 0)\n            + coalesce(wr.wdr_req_amount, 0)\n        ) AS adjusted_diff,\n\n        /* Daily rate per validator; guard against division by zero. */\n        CASE \n            WHEN v.prev_balance > 0 \n            THEN toFloat64(adjusted_diff) / toFloat64(v.prev_balance)\n            ELSE toFloat64(0)\n        END AS rate\n    FROM validator_with_prev v\n    LEFT JOIN deposits d ON d.dep_date = v.date AND d.dep_pubkey = v.pubkey\n    LEFT JOIN deposit_requests dr ON dr.dr_date = v.date AND dr.dr_pubkey = v.pubkey\n    LEFT JOIN withdrawals w ON w.w_date = v.date AND w.w_validator_index = v.validator_index\n    LEFT JOIN withdrawal_requests wr ON wr.wr_date = v.date AND wr.wr_pubkey = v.pubkey\n    WHERE v.prev_balance > 0  -- Only consider validators with positive previous balance\n        AND v.date > DATE '2023-01-01'\n)\n\n\nSELECT\n    date,\n    ROUND(q_apy[1],2) AS q05,\n    ROUND(q_apy[2],2) AS q10,\n    ROUND(q_apy[3],2) AS q25,\n    ROUND(q_apy[4],2) AS q50,\n    ROUND(q_apy[5],2) AS q75,\n    ROUND(q_apy[6],2) AS q90,\n    ROUND(q_apy[7],2) AS q95 \nFROM (\n    SELECT\n        toStartOfMonth(date) AS date\n        ,quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )((power(1 + rate, 365) - 1) * 100) AS q_apy\n    FROM validator_rates\n    GROUP BY 1\n)", "relation_name": "`dbt`.`int_consensus_validators_apy_dist`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.750557Z", "completed_at": "2025-08-19T19:27:00.793597Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.828046Z", "completed_at": "2025-08-19T19:27:00.828054Z"}], "thread_id": "Thread-29", "execution_time": 0.2934901714324951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_dist_daily", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `dbt`.`stg_consensus__validators`\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n\n    GROUP BY date\n)", "relation_name": "`dbt`.`int_consensus_validators_balances_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.744073Z", "completed_at": "2025-08-19T19:27:00.794230Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.828961Z", "completed_at": "2025-08-19T19:27:00.828968Z"}], "thread_id": "Thread-28", "execution_time": 0.3024892807006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_balances_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(slot_timestamp) AS date\n    ,SUM(balance/POWER(10,9)) AS balance\n    ,SUM(effective_balance/POWER(10,9)) AS effective_balance\nFROM `dbt`.`stg_consensus__validators`\nWHERE \n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_balances_daily`\n    )\n  \n\nGROUP BY date", "relation_name": "`dbt`.`int_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.755440Z", "completed_at": "2025-08-19T19:27:00.794859Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.829851Z", "completed_at": "2025-08-19T19:27:00.829860Z"}], "thread_id": "Thread-30", "execution_time": 0.2945826053619385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_consensus_validators_status_daily", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `dbt`.`stg_consensus__validators`\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`int_consensus_validators_status_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.761362Z", "completed_at": "2025-08-19T19:27:00.797979Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:00.832792Z", "completed_at": "2025-08-19T19:27:00.832802Z"}], "thread_id": "Thread-31", "execution_time": 0.291292667388916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_cloud_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,cloud_provider AS cloud\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d` \nORDER BY date ASC, client ASC, cloud ASC", "relation_name": "`dbt`.`api_probelab_clients_cloud_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.880725Z", "completed_at": "2025-08-19T19:27:00.946426Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.076853Z", "completed_at": "2025-08-19T19:27:01.076867Z"}], "thread_id": "Thread-36", "execution_time": 0.25713491439819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_cloud_provider_avg_1d_agent_version_type.d598a54924", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_cloud_provider_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.888810Z", "completed_at": "2025-08-19T19:27:00.947040Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.077834Z", "completed_at": "2025-08-19T19:27:01.077846Z"}], "thread_id": "Thread-37", "execution_time": 0.2565310001373291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_country_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,country\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_countries_avg_1d` \nORDER BY date ASC, client ASC, country ASC", "relation_name": "`dbt`.`api_probelab_clients_country_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.894615Z", "completed_at": "2025-08-19T19:27:00.950470Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.098558Z", "completed_at": "2025-08-19T19:27:01.098572Z"}], "thread_id": "Thread-38", "execution_time": 0.27283287048339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_agent_version_type.6608c14a96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.899694Z", "completed_at": "2025-08-19T19:27:00.951685Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.104221Z", "completed_at": "2025-08-19T19:27:01.104230Z"}], "thread_id": "Thread-39", "execution_time": 0.27782225608825684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_max_crawl_created_at.b401aa1bdb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect max_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere max_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.912523Z", "completed_at": "2025-08-19T19:27:00.953245Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.109804Z", "completed_at": "2025-08-19T19:27:01.109815Z"}], "thread_id": "Thread-1", "execution_time": 0.27852392196655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,any_value(toInt32(floor(__total))) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nGROUP BY 1, 2\nORDER BY date ASC, client ASC", "relation_name": "`dbt`.`api_probelab_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.907221Z", "completed_at": "2025-08-19T19:27:00.953837Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.110844Z", "completed_at": "2025-08-19T19:27:01.110853Z"}], "thread_id": "Thread-40", "execution_time": 0.28018951416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_countries_avg_1d_min_crawl_created_at.69cddc52ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect min_crawl_created_at\nfrom `dbt`.`stg_crawlers_data__probelab_countries_avg_1d`\nwhere min_crawl_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.923212Z", "completed_at": "2025-08-19T19:27:01.010489Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.125842Z", "completed_at": "2025-08-19T19:27:01.125859Z"}], "thread_id": "Thread-3", "execution_time": 0.2841832637786865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_version_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,agent_version_semver_str AS version\n    ,toInt32(floor(__count)) AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d` \nORDER BY date ASC, client ASC, version ASC", "relation_name": "`dbt`.`api_probelab_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.932111Z", "completed_at": "2025-08-19T19:27:01.039964Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.131395Z", "completed_at": "2025-08-19T19:27:01.131407Z"}], "thread_id": "Thread-2", "execution_time": 0.28380775451660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_agent_semvers_avg_1d_agent_version_type.8f8c6f1415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_agent_semvers_avg_1d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.940376Z", "completed_at": "2025-08-19T19:27:01.071516Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.137054Z", "completed_at": "2025-08-19T19:27:01.137063Z"}], "thread_id": "Thread-5", "execution_time": 0.28462958335876465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_probelab_clients_quic_daily", "compiled": true, "compiled_code": "SELECT \n    toStartOfDay(max_crawl_created_at) AS date\n    ,agent_version_type AS client\n    ,quic_support AS quic\n    ,__count AS value\nFROM \n    `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d` \nORDER BY date ASC, client ASC, quic ASC", "relation_name": "`dbt`.`api_probelab_clients_quic_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.954447Z", "completed_at": "2025-08-19T19:27:01.118273Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.149611Z", "completed_at": "2025-08-19T19:27:01.149621Z"}], "thread_id": "Thread-11", "execution_time": 0.28569674491882324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_crawlers_data__probelab_quic_support_over_7d_agent_version_type.1bc4663118", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agent_version_type\nfrom `dbt`.`stg_crawlers_data__probelab_quic_support_over_7d`\nwhere agent_version_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.965291Z", "completed_at": "2025-08-19T19:27:01.119227Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.150630Z", "completed_at": "2025-08-19T19:27:01.150643Z"}], "thread_id": "Thread-4", "execution_time": 0.2844736576080322, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_mean.511213d432", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_consensus_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.960586Z", "completed_at": "2025-08-19T19:27:01.120323Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.151587Z", "completed_at": "2025-08-19T19:27:01.151595Z"}], "thread_id": "Thread-6", "execution_time": 0.28620004653930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_client.0999b44ed1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_consensus_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.970088Z", "completed_at": "2025-08-19T19:27:01.120966Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.152544Z", "completed_at": "2025-08-19T19:27:01.152552Z"}], "thread_id": "Thread-7", "execution_time": 0.285747766494751, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_consensus_power_type.66b187714d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_consensus_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.981094Z", "completed_at": "2025-08-19T19:27:01.121779Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.154011Z", "completed_at": "2025-08-19T19:27:01.154021Z"}], "thread_id": "Thread-13", "execution_time": 0.2859501838684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_mean.03ac96d562", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_execution_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.976444Z", "completed_at": "2025-08-19T19:27:01.122338Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.154895Z", "completed_at": "2025-08-19T19:27:01.154903Z"}], "thread_id": "Thread-35", "execution_time": 0.28743982315063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_client.a5debabb79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`stg_esg_execution_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.990486Z", "completed_at": "2025-08-19T19:27:01.123477Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.155786Z", "completed_at": "2025-08-19T19:27:01.155797Z"}], "thread_id": "Thread-8", "execution_time": 0.2864394187927246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_architecture.9a73cdb068", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect architecture\nfrom `dbt`.`stg_esg_hardware_config`\nwhere architecture is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.985964Z", "completed_at": "2025-08-19T19:27:01.124571Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.156680Z", "completed_at": "2025-08-19T19:27:01.156688Z"}], "thread_id": "Thread-9", "execution_time": 0.2879621982574463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_execution_power_type.d7bef196db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_execution_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.000955Z", "completed_at": "2025-08-19T19:27:01.125162Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.157563Z", "completed_at": "2025-08-19T19:27:01.157576Z"}], "thread_id": "Thread-32", "execution_time": 0.28696703910827637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cores_threads.682ba505df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cores_threads\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cores_threads is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:00.995119Z", "completed_at": "2025-08-19T19:27:01.126800Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.159164Z", "completed_at": "2025-08-19T19:27:01.159172Z"}], "thread_id": "Thread-15", "execution_time": 0.28920936584472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_case.1190c367ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect case\nfrom `dbt`.`stg_esg_hardware_config`\nwhere case is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.011089Z", "completed_at": "2025-08-19T19:27:01.128080Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.160154Z", "completed_at": "2025-08-19T19:27:01.160162Z"}], "thread_id": "Thread-34", "execution_time": 0.2876920700073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_gpu.79e4a7071f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere gpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.005734Z", "completed_at": "2025-08-19T19:27:01.128652Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.161040Z", "completed_at": "2025-08-19T19:27:01.161051Z"}], "thread_id": "Thread-33", "execution_time": 0.289215087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_cpu.c2a5af552f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cpu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere cpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.015766Z", "completed_at": "2025-08-19T19:27:01.129217Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.161938Z", "completed_at": "2025-08-19T19:27:01.161950Z"}], "thread_id": "Thread-10", "execution_time": 0.28884410858154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_os.7f4f45f229", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect os\nfrom `dbt`.`stg_esg_hardware_config`\nwhere os is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.020327Z", "completed_at": "2025-08-19T19:27:01.129781Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.162859Z", "completed_at": "2025-08-19T19:27:01.162869Z"}], "thread_id": "Thread-16", "execution_time": 0.2891387939453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_psu.c8e144fff7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect psu\nfrom `dbt`.`stg_esg_hardware_config`\nwhere psu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.024959Z", "completed_at": "2025-08-19T19:27:01.130640Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.163738Z", "completed_at": "2025-08-19T19:27:01.163746Z"}], "thread_id": "Thread-12", "execution_time": 0.2893388271331787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_ram.a731e6fcf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ram\nfrom `dbt`.`stg_esg_hardware_config`\nwhere ram is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.030795Z", "completed_at": "2025-08-19T19:27:01.132310Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.165333Z", "completed_at": "2025-08-19T19:27:01.165343Z"}], "thread_id": "Thread-14", "execution_time": 0.29033470153808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_storage.0f9455ffe3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect storage\nfrom `dbt`.`stg_esg_hardware_config`\nwhere storage is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.035496Z", "completed_at": "2025-08-19T19:27:01.133086Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.166192Z", "completed_at": "2025-08-19T19:27:01.166200Z"}], "thread_id": "Thread-17", "execution_time": 0.28996753692626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_hardware_config_type.337ee769a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_hardware_config`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.045280Z", "completed_at": "2025-08-19T19:27:01.134311Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.167078Z", "completed_at": "2025-08-19T19:27:01.167088Z"}], "thread_id": "Thread-20", "execution_time": 0.2895815372467041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_type.2b12460db8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_node_distribution`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.040700Z", "completed_at": "2025-08-19T19:27:01.134865Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.167973Z", "completed_at": "2025-08-19T19:27:01.167982Z"}], "thread_id": "Thread-18", "execution_time": 0.2911217212677002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_node_distribution_distribution.f73f1fe384", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution\nfrom `dbt`.`stg_esg_node_distribution`\nwhere distribution is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.056642Z", "completed_at": "2025-08-19T19:27:01.135818Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.168860Z", "completed_at": "2025-08-19T19:27:01.168872Z"}], "thread_id": "Thread-22", "execution_time": 0.29012513160705566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_mean.8b31b45659", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.049925Z", "completed_at": "2025-08-19T19:27:01.136388Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.169749Z", "completed_at": "2025-08-19T19:27:01.169758Z"}], "thread_id": "Thread-19", "execution_time": 0.2916443347930908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_blocks_clients_version_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nclients_version AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,multiIf(\n             lower(decoded_extra_data[1]) = 'choose' \n            OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n            OR lower(decoded_extra_data[1]) = 'sanae.io'\n            OR decoded_extra_data[1] = ''  , \n            'Unknown',\n            decoded_extra_data[1]\n        )   AS client\n        ,IF(length(decoded_extra_data)>1, \n            IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n            ''\n        ) AS version\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`stg_execution__blocks`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2, 3\n)\n\nSELECT\n    *\nFROM clients_version", "relation_name": "`dbt`.`int_execution_blocks_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.061756Z", "completed_at": "2025-08-19T19:27:01.138206Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.171282Z", "completed_at": "2025-08-19T19:27:01.171291Z"}], "thread_id": "Thread-21", "execution_time": 0.2913215160369873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_esg_idle_electric_power_type.839b39309c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`stg_esg_idle_electric_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.072164Z", "completed_at": "2025-08-19T19:27:01.138829Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.172372Z", "completed_at": "2025-08-19T19:27:01.172380Z"}], "thread_id": "Thread-25", "execution_time": 0.27993154525756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_hash.3968ee550e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_hash\nfrom `dbt`.`stg_execution__blocks`\nwhere block_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.066760Z", "completed_at": "2025-08-19T19:27:01.140044Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.173886Z", "completed_at": "2025-08-19T19:27:01.173895Z"}], "thread_id": "Thread-23", "execution_time": 0.2859025001525879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_base_fee_per_gas.db4869ba64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect base_fee_per_gas\nfrom `dbt`.`stg_execution__blocks`\nwhere base_fee_per_gas is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.089469Z", "completed_at": "2025-08-19T19:27:01.142455Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.175398Z", "completed_at": "2025-08-19T19:27:01.175405Z"}], "thread_id": "Thread-27", "execution_time": 0.27086377143859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_chain_id.b8edd9122d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__blocks`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.078793Z", "completed_at": "2025-08-19T19:27:01.143163Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.176227Z", "completed_at": "2025-08-19T19:27:01.176236Z"}], "thread_id": "Thread-24", "execution_time": 0.2830362319946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_number.b945854619", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__blocks`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.094039Z", "completed_at": "2025-08-19T19:27:01.143734Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.177096Z", "completed_at": "2025-08-19T19:27:01.177104Z"}], "thread_id": "Thread-29", "execution_time": 0.27187418937683105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_limit.78300c6714", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_limit\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_limit is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.083445Z", "completed_at": "2025-08-19T19:27:01.144290Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.177950Z", "completed_at": "2025-08-19T19:27:01.177959Z"}], "thread_id": "Thread-26", "execution_time": 0.2840907573699951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_block_timestamp.d1b2bdbc42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__blocks`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.099709Z", "completed_at": "2025-08-19T19:27:01.147422Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.180952Z", "completed_at": "2025-08-19T19:27:01.180960Z"}], "thread_id": "Thread-28", "execution_time": 0.27509427070617676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_gas_used.94117d62bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gas_used\nfrom `dbt`.`stg_execution__blocks`\nwhere gas_used is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.105147Z", "completed_at": "2025-08-19T19:27:01.148676Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.182503Z", "completed_at": "2025-08-19T19:27:01.182515Z"}], "thread_id": "Thread-30", "execution_time": 0.275998592376709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__blocks_size.b4ddb09dda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect size\nfrom `dbt`.`stg_execution__blocks`\nwhere size is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.111913Z", "completed_at": "2025-08-19T19:27:01.153406Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.186060Z", "completed_at": "2025-08-19T19:27:01.186068Z"}], "thread_id": "Thread-31", "execution_time": 0.26912736892700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_state_size_full_diff_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `dbt`.`stg_execution__storage_diffs`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_state_size_full_diff_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT\n    *\nFROM state_size_diff", "relation_name": "`dbt`.`int_execution_state_size_full_diff_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.227459Z", "completed_at": "2025-08-19T19:27:01.293494Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.421138Z", "completed_at": "2025-08-19T19:27:01.421158Z"}], "thread_id": "Thread-36", "execution_time": 0.2481098175048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_transactions_info_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(value/POWER(10,18)) AS xdai_value -- xDai units\n    ,AVG(value/POWER(10,18)) AS xdai_value_avg -- xDai units\n    ,median(value/POWER(10,18)) AS xdai_value_median -- xDai units\n    ,SUM(COALESCE(gas_used/POWER(10,9),0)) AS gas_used -- Gas units in Gwei\n    ,CAST(AVG(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_avg -- Gas units in Gwei\n    ,CAST(median(COALESCE(gas_price/POWER(10,9),0)) AS Int32) AS gas_price_median -- Gas units in Gwei\nFROM `dbt`.`stg_execution__transactions`\nWHERE\n    block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_transactions_info_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_execution_transactions_info_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.234484Z", "completed_at": "2025-08-19T19:27:01.295385Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.431136Z", "completed_at": "2025-08-19T19:27:01.431151Z"}], "thread_id": "Thread-37", "execution_time": 0.2565436363220215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_address.fe7457493c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.247295Z", "completed_at": "2025-08-19T19:27:01.297621Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.441491Z", "completed_at": "2025-08-19T19:27:01.441502Z"}], "thread_id": "Thread-39", "execution_time": 0.2621309757232666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_timestamp.79a9bfbd42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.251907Z", "completed_at": "2025-08-19T19:27:01.298965Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.446882Z", "completed_at": "2025-08-19T19:27:01.446894Z"}], "thread_id": "Thread-1", "execution_time": 0.2666628360748291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_chain_id.413c6bb6df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.258666Z", "completed_at": "2025-08-19T19:27:01.299744Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.447992Z", "completed_at": "2025-08-19T19:27:01.448001Z"}], "thread_id": "Thread-40", "execution_time": 0.26624393463134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_slot.30b6f83693", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect slot\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere slot is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.242650Z", "completed_at": "2025-08-19T19:27:01.300949Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.454098Z", "completed_at": "2025-08-19T19:27:01.454108Z"}], "thread_id": "Thread-38", "execution_time": 0.27536487579345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_block_number.740300dea1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.270025Z", "completed_at": "2025-08-19T19:27:01.364645Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.469540Z", "completed_at": "2025-08-19T19:27:01.469555Z"}], "thread_id": "Thread-3", "execution_time": 0.27928853034973145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_hash.355bce9dc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.278301Z", "completed_at": "2025-08-19T19:27:01.384744Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.474107Z", "completed_at": "2025-08-19T19:27:01.474116Z"}], "thread_id": "Thread-2", "execution_time": 0.279099702835083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__storage_diffs_transaction_index.c3d3eabba2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.286648Z", "completed_at": "2025-08-19T19:27:01.415564Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.479379Z", "completed_at": "2025-08-19T19:27:01.479391Z"}], "thread_id": "Thread-5", "execution_time": 0.2794766426086426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_block_number.86826795d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`stg_execution__transactions`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.301526Z", "completed_at": "2025-08-19T19:27:01.456214Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.490716Z", "completed_at": "2025-08-19T19:27:01.490727Z"}], "thread_id": "Thread-11", "execution_time": 0.28041911125183105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_from_address.66ef809303", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom `dbt`.`stg_execution__transactions`\nwhere from_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.312396Z", "completed_at": "2025-08-19T19:27:01.457074Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.491746Z", "completed_at": "2025-08-19T19:27:01.491755Z"}], "thread_id": "Thread-6", "execution_time": 0.2801375389099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_index.f0d9adb918", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.306152Z", "completed_at": "2025-08-19T19:27:01.457670Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.493218Z", "completed_at": "2025-08-19T19:27:01.493226Z"}], "thread_id": "Thread-4", "execution_time": 0.2822842597961426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_execution__transactions_transaction_hash.92b0650777", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.316868Z", "completed_at": "2025-08-19T19:27:01.462866Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.494212Z", "completed_at": "2025-08-19T19:27:01.494221Z"}], "thread_id": "Thread-7", "execution_time": 0.2820017337799072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__storage_diffs_transaction_hash.ead3d5cd43", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__storage_diffs`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.322206Z", "completed_at": "2025-08-19T19:27:01.463787Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.495172Z", "completed_at": "2025-08-19T19:27:01.495183Z"}], "thread_id": "Thread-13", "execution_time": 0.2815232276916504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_stg_execution__transactions_transaction_hash.173e989c74", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`stg_execution__transactions`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.332689Z", "completed_at": "2025-08-19T19:27:01.464888Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.496646Z", "completed_at": "2025-08-19T19:27:01.496657Z"}], "thread_id": "Thread-8", "execution_time": 0.2816884517669678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv4__visits`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        toString(peer_properties.network_id) = '100'\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv4_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.326602Z", "completed_at": "2025-08-19T19:27:01.465693Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.497553Z", "completed_at": "2025-08-19T19:27:01.497564Z"}], "thread_id": "Thread-35", "execution_time": 0.2832062244415283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `dbt`.`stg_nebula_discv4__visits` A\n  WHERE\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv4_peers`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      connect_maddr,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  ),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    --replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    arrayElement(splitByChar('/', ifNull(connect_maddr, '')), 3) AS ip,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(\n      plus_build != '',\n      arrayElement(splitByChar('-', pre_blob), 1),\n      splitByChar('-', ver_blob)[1]\n    )                                                       AS version,\n    IF(\n      plus_build != '',\n      IF(\n        length(splitByChar('-', pre_blob)) >= 2,\n        arrayElement(splitByChar('-', pre_blob), 2),\n        ''\n      ),\n      IF(\n        length(splitByChar('-', ver_blob)) = 3,\n        arrayElement(splitByChar('-', ver_blob), 2),\n        ''\n      )\n    )                                                       AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(\n        length(splitByChar('-', ver_blob)) > 1,\n        arrayElement(splitByChar('-', ver_blob), -1),\n        ''\n      )\n    )                                                       AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  t1.platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv4_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.338818Z", "completed_at": "2025-08-19T19:27:01.467021Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.498462Z", "completed_at": "2025-08-19T19:27:01.498471Z"}], "thread_id": "Thread-9", "execution_time": 0.2828502655029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv4__visits_visit_started_at.de065da8ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv4__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.355155Z", "completed_at": "2025-08-19T19:27:01.467619Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.499351Z", "completed_at": "2025-08-19T19:27:01.499362Z"}], "thread_id": "Thread-34", "execution_time": 0.2812938690185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_crawl_id.9cb9b578fa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect crawl_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere crawl_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.343424Z", "completed_at": "2025-08-19T19:27:01.468181Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.500231Z", "completed_at": "2025-08-19T19:27:01.500240Z"}], "thread_id": "Thread-32", "execution_time": 0.28401827812194824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_peers", "compiled": true, "compiled_code": "\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.connect_maddr,\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM `dbt`.`stg_nebula_discv5__visits` AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`int_p2p_discv5_peers`\n    )\n  \n\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    connect_maddr,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n),\n\nbasic_info AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    replaceRegexpAll(connect_maddr, '^/ip4/([0-9.]+)/tcp/[0-9]+$', '\\\\1') AS ip,\n    fork_digest,\n    cl_fork_name,\n    cl_next_fork_name,\n    next_fork_version,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n    IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n    IF(\n      plus_build != '',\n      plus_build,\n      IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n    )                                                                          AS build,\n    platform,\n    runtime\n  FROM exploded\n)\n\nSELECT\n  t1.visit_ended_at,\n  t1.peer_id,\n  t1.agent_version,\n  t1.ip,\n  t1.fork_digest,\n  t1.cl_fork_name,\n  t1.cl_next_fork_name,\n  t1.next_fork_version,\n  t1.peer_properties,\n  t1.crawl_error,\n  t1.dial_errors,\n  t1.client,\n  t1.variant,\n  t1.version,\n  t1.channel,\n  t1.build,\n  CASE\n      WHEN t1.platform = '' THEN 'Unknown'\n      WHEN t1.platform = 'aarch64-linux' THEN 'linux-aarch_64'\n      WHEN t1.platform = 'x86_64-linux' THEN 'linux-x86_64'\n      WHEN t1.platform = 'x86_64-windows' THEN 'windows-x86_64'\n      ELSE t1.platform\n  END AS platform,\n  t1.runtime,\n  t2.hostname   AS peer_hostname,\n  t2.city       AS peer_city,\n  t2.country    AS peer_country,\n  t2.org        AS peer_org,\n  t2.loc        AS peer_loc,\n  t2.generic_provider AS generic_provider\nFROM\n  basic_info t1\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS t2\n  ON t2.ip = t1.ip", "relation_name": "`dbt`.`int_p2p_discv5_peers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.350005Z", "completed_at": "2025-08-19T19:27:01.468949Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.501130Z", "completed_at": "2025-08-19T19:27:01.501138Z"}], "thread_id": "Thread-15", "execution_time": 0.2836596965789795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_visits_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\nvisits_info AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,COUNT(visit_ended_at) AS total_visits\n        ,SUM(IF( empty(dial_errors) = 1 OR crawl_error IS NULL, 1, 0)) AS successful_visits\n        ,COUNT(DISTINCT crawl_id) AS crawls\n    FROM `dbt`.`stg_nebula_discv5__visits`\n    WHERE\n      toStartOfDay(visit_ended_at) < today()\n      AND\n      (\n        toString(peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR toString(peer_properties.next_fork_version) LIKE '%064'\n      )\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_visits_daily`\n    )\n  \n\n    GROUP BY 1\n)\n\nSELECT * FROM visits_info", "relation_name": "`dbt`.`int_p2p_discv5_visits_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.359978Z", "completed_at": "2025-08-19T19:27:01.470460Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.503025Z", "completed_at": "2025-08-19T19:27:01.503034Z"}], "thread_id": "Thread-33", "execution_time": 0.28432488441467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_peer_id.216f34e1f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.365294Z", "completed_at": "2025-08-19T19:27:01.471501Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.503913Z", "completed_at": "2025-08-19T19:27:01.503922Z"}], "thread_id": "Thread-10", "execution_time": 0.2845628261566162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_stg_nebula_discv5__visits_visit_started_at.7bc42b8695", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_started_at\nfrom `dbt`.`stg_nebula_discv5__visits`\nwhere visit_started_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.371137Z", "completed_at": "2025-08-19T19:27:01.472353Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.504815Z", "completed_at": "2025-08-19T19:27:01.504823Z"}], "thread_id": "Thread-16", "execution_time": 0.2848496437072754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__from_.7c0bb17fda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"from\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"from\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.375554Z", "completed_at": "2025-08-19T19:27:01.472904Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.505705Z", "completed_at": "2025-08-19T19:27:01.505713Z"}], "thread_id": "Thread-12", "execution_time": 0.28511953353881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__to_.dbbd9916e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"to\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"to\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.380327Z", "completed_at": "2025-08-19T19:27:01.473526Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.506600Z", "completed_at": "2025-08-19T19:27:01.506609Z"}], "thread_id": "Thread-14", "execution_time": 0.2848348617553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__token_address_.c3996e80e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"token_address\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"token_address\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.385521Z", "completed_at": "2025-08-19T19:27:01.475521Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.508242Z", "completed_at": "2025-08-19T19:27:01.508270Z"}], "thread_id": "Thread-17", "execution_time": 0.2858755588531494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips__transaction_hash_.22c6d3ce0b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"transaction_hash\"\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere \"transaction_hash\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.395421Z", "completed_at": "2025-08-19T19:27:01.476179Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.509127Z", "completed_at": "2025-08-19T19:27:01.509136Z"}], "thread_id": "Thread-18", "execution_time": 0.28546833992004395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_timestamp.67717b11ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.400636Z", "completed_at": "2025-08-19T19:27:01.477177Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.510015Z", "completed_at": "2025-08-19T19:27:01.510023Z"}], "thread_id": "Thread-22", "execution_time": 0.285719633102417, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_transaction_index.42c8126f4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.390125Z", "completed_at": "2025-08-19T19:27:01.477774Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.510909Z", "completed_at": "2025-08-19T19:27:01.510918Z"}], "thread_id": "Thread-20", "execution_time": 0.2879068851470947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_transfers_erc20_bluechips_block_number.41b700ad8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`int_transfers_erc20_bluechips`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.405209Z", "completed_at": "2025-08-19T19:27:01.478527Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.511798Z", "completed_at": "2025-08-19T19:27:01.511806Z"}], "thread_id": "Thread-19", "execution_time": 0.28688836097717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_attestations_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,inclusion_delay\n    ,cnt\nFROM `dbt`.`int_consensus_attestations_daily`\nORDER BY date, inclusion_delay", "relation_name": "`dbt`.`api_consensus_attestations_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.412074Z", "completed_at": "2025-08-19T19:27:01.480288Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.513384Z", "completed_at": "2025-08-19T19:27:01.513396Z"}], "thread_id": "Thread-25", "execution_time": 0.2866544723510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_graffiti_label_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,SUM(cnt) AS value\nFROM `dbt`.`int_consensus_graffiti_daily`\nGROUP BY date, label\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_graffiti_label_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.408694Z", "completed_at": "2025-08-19T19:27:01.480882Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.514270Z", "completed_at": "2025-08-19T19:27:01.514282Z"}], "thread_id": "Thread-21", "execution_time": 0.2881603240966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_blob_commitments_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,cnt AS value\nFROM `dbt`.`int_consensus_blob_commitments_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_blob_commitments_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.416277Z", "completed_at": "2025-08-19T19:27:01.482446Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.515815Z", "completed_at": "2025-08-19T19:27:01.515825Z"}], "thread_id": "Thread-23", "execution_time": 0.2832825183868408, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_graffiti_cloud", "compiled": true, "compiled_code": "\n\n\nWITH base AS (\n  SELECT\n      graffiti,\n      sumIf(cnt, date >= today() - 7)  AS v_7d,\n      sumIf(cnt, date >= today() - 30) AS v_30d,\n      sumIf(cnt, date >= today() - 90) AS v_90d,\n      sum(cnt)                         AS v_all\n  FROM `dbt`.`int_consensus_graffiti_daily`\n  WHERE graffiti != 'None'\n  GROUP BY graffiti\n)\nSELECT\n  label,\n  graffiti,\n  value\nFROM base\nARRAY JOIN\n  ['7D','30D','90D','All'] AS label,\n  [v_7d, v_30d, v_90d, v_all] AS value\nORDER BY label, value DESC\nLIMIT 50 BY label", "relation_name": "`dbt`.`fct_consensus_graffiti_cloud`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.422298Z", "completed_at": "2025-08-19T19:27:01.484494Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.517358Z", "completed_at": "2025-08-19T19:27:01.517369Z"}], "thread_id": "Thread-27", "execution_time": 0.27787137031555176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_number.772cd91469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.426688Z", "completed_at": "2025-08-19T19:27:01.485066Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.518228Z", "completed_at": "2025-08-19T19:27:01.518236Z"}], "thread_id": "Thread-24", "execution_time": 0.2779073715209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_timestamp.28ab9881a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.432242Z", "completed_at": "2025-08-19T19:27:01.485885Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.519106Z", "completed_at": "2025-08-19T19:27:01.519114Z"}], "thread_id": "Thread-29", "execution_time": 0.27782702445983887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_contract_address.5e413fb6b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.436823Z", "completed_at": "2025-08-19T19:27:01.487109Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.520645Z", "completed_at": "2025-08-19T19:27:01.520657Z"}], "thread_id": "Thread-26", "execution_time": 0.2787463665008545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_id.bacaecb2df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.442433Z", "completed_at": "2025-08-19T19:27:01.489317Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.522804Z", "completed_at": "2025-08-19T19:27:01.522812Z"}], "thread_id": "Thread-28", "execution_time": 0.2649247646331787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_event_type.fb2b12ee58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.448916Z", "completed_at": "2025-08-19T19:27:01.492632Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.525655Z", "completed_at": "2025-08-19T19:27:01.525663Z"}], "thread_id": "Thread-30", "execution_time": 0.2625417709350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_log_index.165bf735c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.458336Z", "completed_at": "2025-08-19T19:27:01.496036Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.528590Z", "completed_at": "2025-08-19T19:27:01.528599Z"}], "thread_id": "Thread-31", "execution_time": 0.26238393783569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_transaction_hash.4b872e6755", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.570198Z", "completed_at": "2025-08-19T19:27:01.637824Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.857454Z", "completed_at": "2025-08-19T19:27:01.857469Z"}], "thread_id": "Thread-36", "execution_time": 0.3424699306488037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolInstance_events_event_id.5bd3309b6d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.576126Z", "completed_at": "2025-08-19T19:27:01.639030Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.863428Z", "completed_at": "2025-08-19T19:27:01.863446Z"}], "thread_id": "Thread-37", "execution_time": 0.346876859664917, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_timestamp.d03f151257", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.582999Z", "completed_at": "2025-08-19T19:27:01.641163Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.875177Z", "completed_at": "2025-08-19T19:27:01.875191Z"}], "thread_id": "Thread-39", "execution_time": 0.3553457260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_event_name.821449d8bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.594834Z", "completed_at": "2025-08-19T19:27:01.642620Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.881002Z", "completed_at": "2025-08-19T19:27:01.881012Z"}], "thread_id": "Thread-40", "execution_time": 0.3589515686035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_pool_address.129b9b2f1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pool_address\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere pool_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.600033Z", "completed_at": "2025-08-19T19:27:01.734895Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.882109Z", "completed_at": "2025-08-19T19:27:01.882117Z"}], "thread_id": "Thread-38", "execution_time": 0.3585195541381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_transaction_hash.e2fc28195f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.588281Z", "completed_at": "2025-08-19T19:27:01.735721Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.883070Z", "completed_at": "2025-08-19T19:27:01.883082Z"}], "thread_id": "Thread-1", "execution_time": 0.36162614822387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_log_index.5c1c243977", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.612918Z", "completed_at": "2025-08-19T19:27:01.791762Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.902687Z", "completed_at": "2025-08-19T19:27:01.902698Z"}], "thread_id": "Thread-3", "execution_time": 0.3688032627105713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_aaveV3_PoolConfigurator_events_transaction_hash.2fcedf0475", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.620983Z", "completed_at": "2025-08-19T19:27:01.826793Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.908383Z", "completed_at": "2025-08-19T19:27:01.908391Z"}], "thread_id": "Thread-2", "execution_time": 0.3705098628997803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_block_timestamp.b2f425af6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.628753Z", "completed_at": "2025-08-19T19:27:01.841671Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.911055Z", "completed_at": "2025-08-19T19:27:01.911064Z"}], "thread_id": "Thread-5", "execution_time": 0.3691394329071045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_contract_address.e8714ee1a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.643446Z", "completed_at": "2025-08-19T19:27:01.883931Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.922744Z", "completed_at": "2025-08-19T19:27:01.922756Z"}], "thread_id": "Thread-11", "execution_time": 0.37093043327331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_depositor_address.f3e976d68d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect depositor_address\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere depositor_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.736436Z", "completed_at": "2025-08-19T19:27:01.889433Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.923778Z", "completed_at": "2025-08-19T19:27:01.923791Z"}], "thread_id": "Thread-6", "execution_time": 0.3713057041168213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_event_timestamp.42906a28e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.742553Z", "completed_at": "2025-08-19T19:27:01.890461Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.925285Z", "completed_at": "2025-08-19T19:27:01.925294Z"}], "thread_id": "Thread-4", "execution_time": 0.37154436111450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_log_index.548a0d340c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.747127Z", "completed_at": "2025-08-19T19:27:01.895966Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.926244Z", "completed_at": "2025-08-19T19:27:01.926273Z"}], "thread_id": "Thread-7", "execution_time": 0.3718295097351074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_transaction_hash.fdd9d805b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.751685Z", "completed_at": "2025-08-19T19:27:01.896756Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.927186Z", "completed_at": "2025-08-19T19:27:01.927194Z"}], "thread_id": "Thread-13", "execution_time": 0.372173547744751, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_events_transaction_hash.162d1b026f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.757107Z", "completed_at": "2025-08-19T19:27:01.897743Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.928646Z", "completed_at": "2025-08-19T19:27:01.928657Z"}], "thread_id": "Thread-8", "execution_time": 0.3722989559173584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_timestamp.f629afe28e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.762870Z", "completed_at": "2025-08-19T19:27:01.898389Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.929536Z", "completed_at": "2025-08-19T19:27:01.929545Z"}], "thread_id": "Thread-35", "execution_time": 0.3725240230560303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_contract_address.7aa8aa1478", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.771767Z", "completed_at": "2025-08-19T19:27:01.899156Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.930418Z", "completed_at": "2025-08-19T19:27:01.930426Z"}], "thread_id": "Thread-34", "execution_time": 0.3721284866333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_transaction_hash.28a9f27947", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.767333Z", "completed_at": "2025-08-19T19:27:01.899801Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.931296Z", "completed_at": "2025-08-19T19:27:01.931304Z"}], "thread_id": "Thread-9", "execution_time": 0.37363624572753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_log_index.8e8bf1d633", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.781123Z", "completed_at": "2025-08-19T19:27:01.900805Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.932136Z", "completed_at": "2025-08-19T19:27:01.932147Z"}], "thread_id": "Thread-15", "execution_time": 0.37256646156311035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_number.3e4faff869", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.787224Z", "completed_at": "2025-08-19T19:27:01.901521Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.933029Z", "completed_at": "2025-08-19T19:27:01.933037Z"}], "thread_id": "Thread-33", "execution_time": 0.37221813201904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_timestamp.9aee384fb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.776450Z", "completed_at": "2025-08-19T19:27:01.902054Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.933925Z", "completed_at": "2025-08-19T19:27:01.933936Z"}], "thread_id": "Thread-32", "execution_time": 0.3750112056732178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bC3M_Oracle_events_transaction_hash.fed5e1c563", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.797208Z", "completed_at": "2025-08-19T19:27:01.904047Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.935574Z", "completed_at": "2025-08-19T19:27:01.935582Z"}], "thread_id": "Thread-16", "execution_time": 0.3734931945800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_name.655be1dbf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.801752Z", "completed_at": "2025-08-19T19:27:01.904690Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.936450Z", "completed_at": "2025-08-19T19:27:01.936458Z"}], "thread_id": "Thread-12", "execution_time": 0.3737368583679199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_event_timestamp.65b0a361c3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere event_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.792540Z", "completed_at": "2025-08-19T19:27:01.905594Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.937353Z", "completed_at": "2025-08-19T19:27:01.937362Z"}], "thread_id": "Thread-10", "execution_time": 0.3758976459503174, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_contract_address.b6be4491b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.811032Z", "completed_at": "2025-08-19T19:27:01.906446Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.938200Z", "completed_at": "2025-08-19T19:27:01.938209Z"}], "thread_id": "Thread-17", "execution_time": 0.37323451042175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c86a200558", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.806368Z", "completed_at": "2025-08-19T19:27:01.907010Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.939091Z", "completed_at": "2025-08-19T19:27:01.939100Z"}], "thread_id": "Thread-14", "execution_time": 0.3757355213165283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_log_index.edcd08f3d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.817491Z", "completed_at": "2025-08-19T19:27:01.907745Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.939981Z", "completed_at": "2025-08-19T19:27:01.939989Z"}], "thread_id": "Thread-18", "execution_time": 0.37433433532714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_timestamp.d04237ee7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.822132Z", "completed_at": "2025-08-19T19:27:01.909416Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.941582Z", "completed_at": "2025-08-19T19:27:01.941593Z"}], "thread_id": "Thread-22", "execution_time": 0.37524986267089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_contract_address.894b7116b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.827582Z", "completed_at": "2025-08-19T19:27:01.910346Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.942481Z", "completed_at": "2025-08-19T19:27:01.942489Z"}], "thread_id": "Thread-20", "execution_time": 0.37552738189697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_log_index.e78654368d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.837134Z", "completed_at": "2025-08-19T19:27:01.911926Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.944013Z", "completed_at": "2025-08-19T19:27:01.944022Z"}], "thread_id": "Thread-25", "execution_time": 0.3751955032348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c69c10d4f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.832041Z", "completed_at": "2025-08-19T19:27:01.912580Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.944892Z", "completed_at": "2025-08-19T19:27:01.944900Z"}], "thread_id": "Thread-19", "execution_time": 0.3773016929626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.b6309f3c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.848328Z", "completed_at": "2025-08-19T19:27:01.913667Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.945775Z", "completed_at": "2025-08-19T19:27:01.945782Z"}], "thread_id": "Thread-23", "execution_time": 0.37049436569213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_number.a01484fb80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.842298Z", "completed_at": "2025-08-19T19:27:01.914979Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.947321Z", "completed_at": "2025-08-19T19:27:01.947333Z"}], "thread_id": "Thread-21", "execution_time": 0.3778393268585205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.f8c471d6f8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.852828Z", "completed_at": "2025-08-19T19:27:01.915776Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.948172Z", "completed_at": "2025-08-19T19:27:01.948184Z"}], "thread_id": "Thread-27", "execution_time": 0.3673388957977295, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_timestamp.9680585ac6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.858494Z", "completed_at": "2025-08-19T19:27:01.917382Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.949742Z", "completed_at": "2025-08-19T19:27:01.949752Z"}], "thread_id": "Thread-24", "execution_time": 0.36819934844970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_contract_address.9d8dacefb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.864463Z", "completed_at": "2025-08-19T19:27:01.918767Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.951312Z", "completed_at": "2025-08-19T19:27:01.951320Z"}], "thread_id": "Thread-29", "execution_time": 0.3690805435180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_event_name.d56a70b6b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.869058Z", "completed_at": "2025-08-19T19:27:01.919392Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.952148Z", "completed_at": "2025-08-19T19:27:01.952160Z"}], "thread_id": "Thread-26", "execution_time": 0.36461663246154785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_log_index.06d6f07e27", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.876182Z", "completed_at": "2025-08-19T19:27:01.920757Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.953683Z", "completed_at": "2025-08-19T19:27:01.953697Z"}], "thread_id": "Thread-28", "execution_time": 0.3544280529022217, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.02a05d1854", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.884681Z", "completed_at": "2025-08-19T19:27:01.924684Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.957519Z", "completed_at": "2025-08-19T19:27:01.957529Z"}], "thread_id": "Thread-30", "execution_time": 0.3514130115509033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_block_timestamp.ee2f623fb4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:01.891283Z", "completed_at": "2025-08-19T19:27:01.928033Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:01.960451Z", "completed_at": "2025-08-19T19:27:01.960463Z"}], "thread_id": "Thread-31", "execution_time": 0.3518671989440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_contract_address.9a75ada408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.001336Z", "completed_at": "2025-08-19T19:27:02.069837Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.210636Z", "completed_at": "2025-08-19T19:27:02.210656Z"}], "thread_id": "Thread-36", "execution_time": 0.2641422748565674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_log_index.99505e6cc4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.008287Z", "completed_at": "2025-08-19T19:27:02.071330Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.217845Z", "completed_at": "2025-08-19T19:27:02.217859Z"}], "thread_id": "Thread-37", "execution_time": 0.2688908576965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_timestamp.d0c596dfea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.015125Z", "completed_at": "2025-08-19T19:27:02.071934Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.218800Z", "completed_at": "2025-08-19T19:27:02.218808Z"}], "thread_id": "Thread-39", "execution_time": 0.26821255683898926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.56bda730ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.021439Z", "completed_at": "2025-08-19T19:27:02.074440Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.233992Z", "completed_at": "2025-08-19T19:27:02.234005Z"}], "thread_id": "Thread-40", "execution_time": 0.28110504150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bCSPX_Oracle_events_transaction_hash.342e67119b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.026787Z", "completed_at": "2025-08-19T19:27:02.080060Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.235266Z", "completed_at": "2025-08-19T19:27:02.235275Z"}], "thread_id": "Thread-38", "execution_time": 0.28080058097839355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.2128bbb118", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.031428Z", "completed_at": "2025-08-19T19:27:02.090926Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.245407Z", "completed_at": "2025-08-19T19:27:02.245417Z"}], "thread_id": "Thread-1", "execution_time": 0.2900371551513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_timestamp.388a973e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.045134Z", "completed_at": "2025-08-19T19:27:02.147068Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.260406Z", "completed_at": "2025-08-19T19:27:02.260416Z"}], "thread_id": "Thread-3", "execution_time": 0.29393911361694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_contract_address.925725dc94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.055477Z", "completed_at": "2025-08-19T19:27:02.185468Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.264034Z", "completed_at": "2025-08-19T19:27:02.264043Z"}], "thread_id": "Thread-2", "execution_time": 0.2928962707519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_log_index.43eca84613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.061616Z", "completed_at": "2025-08-19T19:27:02.191075Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.266974Z", "completed_at": "2025-08-19T19:27:02.266983Z"}], "thread_id": "Thread-5", "execution_time": 0.2938535213470459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_hash.dbd74bbec2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.075276Z", "completed_at": "2025-08-19T19:27:02.244041Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.278278Z", "completed_at": "2025-08-19T19:27:02.278288Z"}], "thread_id": "Thread-11", "execution_time": 0.29482245445251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bIB01_Oracle_events_transaction_hash.d090f3f6f3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.080650Z", "completed_at": "2025-08-19T19:27:02.244662Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.279186Z", "completed_at": "2025-08-19T19:27:02.279197Z"}], "thread_id": "Thread-6", "execution_time": 0.29511404037475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_timestamp.5e95caaec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.086115Z", "completed_at": "2025-08-19T19:27:02.246439Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.281468Z", "completed_at": "2025-08-19T19:27:02.281477Z"}], "thread_id": "Thread-4", "execution_time": 0.29602575302124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_contract_address.1adbd503a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.091684Z", "completed_at": "2025-08-19T19:27:02.252230Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.282490Z", "completed_at": "2025-08-19T19:27:02.282498Z"}], "thread_id": "Thread-7", "execution_time": 0.29640960693359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_log_index.4d86fa50f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.097943Z", "completed_at": "2025-08-19T19:27:02.252943Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.283430Z", "completed_at": "2025-08-19T19:27:02.283439Z"}], "thread_id": "Thread-13", "execution_time": 0.29671263694763184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.f26d7fac89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.103575Z", "completed_at": "2025-08-19T19:27:02.253955Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.284355Z", "completed_at": "2025-08-19T19:27:02.284365Z"}], "thread_id": "Thread-8", "execution_time": 0.29631471633911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_timestamp.ea5eb46130", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.112814Z", "completed_at": "2025-08-19T19:27:02.254711Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.285778Z", "completed_at": "2025-08-19T19:27:02.285786Z"}], "thread_id": "Thread-34", "execution_time": 0.2964358329772949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_log_index.7bbf5e90e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.108062Z", "completed_at": "2025-08-19T19:27:02.255289Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.286661Z", "completed_at": "2025-08-19T19:27:02.286668Z"}], "thread_id": "Thread-35", "execution_time": 0.2979569435119629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_contract_address.3d9bb54174", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.117414Z", "completed_at": "2025-08-19T19:27:02.255843Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.287541Z", "completed_at": "2025-08-19T19:27:02.287549Z"}], "thread_id": "Thread-9", "execution_time": 0.29756593704223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.8917d56005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.122275Z", "completed_at": "2025-08-19T19:27:02.256860Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.288427Z", "completed_at": "2025-08-19T19:27:02.288436Z"}], "thread_id": "Thread-15", "execution_time": 0.29779696464538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.0bc4e9f337", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.138063Z", "completed_at": "2025-08-19T19:27:02.257977Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.289304Z", "completed_at": "2025-08-19T19:27:02.289311Z"}], "thread_id": "Thread-16", "execution_time": 0.2961711883544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_log_index.37ce7f1498", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.128528Z", "completed_at": "2025-08-19T19:27:02.258650Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.290137Z", "completed_at": "2025-08-19T19:27:02.290144Z"}], "thread_id": "Thread-33", "execution_time": 0.29884815216064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_block_timestamp.4dc290223b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.133175Z", "completed_at": "2025-08-19T19:27:02.259211Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.291096Z", "completed_at": "2025-08-19T19:27:02.291105Z"}], "thread_id": "Thread-32", "execution_time": 0.29920101165771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_contract_address.bbcc2fc5da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.142654Z", "completed_at": "2025-08-19T19:27:02.259791Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.292012Z", "completed_at": "2025-08-19T19:27:02.292020Z"}], "thread_id": "Thread-12", "execution_time": 0.2982473373413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_transaction_hash.fe02a9b64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.147730Z", "completed_at": "2025-08-19T19:27:02.261729Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.295561Z", "completed_at": "2025-08-19T19:27:02.295570Z"}], "thread_id": "Thread-10", "execution_time": 0.30113673210144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_Hub_events_transaction_hash.1c932724e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.165972Z", "completed_at": "2025-08-19T19:27:02.262623Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.296469Z", "completed_at": "2025-08-19T19:27:02.296477Z"}], "thread_id": "Thread-14", "execution_time": 0.30079174041748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_timestamp.9775e2fb1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.170661Z", "completed_at": "2025-08-19T19:27:02.263267Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.297330Z", "completed_at": "2025-08-19T19:27:02.297338Z"}], "thread_id": "Thread-18", "execution_time": 0.30103158950805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_contract_address.6fdea4126c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.153544Z", "completed_at": "2025-08-19T19:27:02.265162Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.298842Z", "completed_at": "2025-08-19T19:27:02.298850Z"}], "thread_id": "Thread-17", "execution_time": 0.3038039207458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_execution_rwa_backedfi_prices", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_execution_rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "relation_name": "`dbt`.`int_execution_rwa_backedfi_prices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.175701Z", "completed_at": "2025-08-19T19:27:02.265795Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.299743Z", "completed_at": "2025-08-19T19:27:02.299751Z"}], "thread_id": "Thread-22", "execution_time": 0.30225539207458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_log_index.44098cb871", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.186303Z", "completed_at": "2025-08-19T19:27:02.266390Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.300633Z", "completed_at": "2025-08-19T19:27:02.300641Z"}], "thread_id": "Thread-25", "execution_time": 0.30127763748168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.88ba11e669", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.180195Z", "completed_at": "2025-08-19T19:27:02.268125Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.302168Z", "completed_at": "2025-08-19T19:27:02.302176Z"}], "thread_id": "Thread-20", "execution_time": 0.3040883541107178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_timestamp.af620f849b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.192399Z", "completed_at": "2025-08-19T19:27:02.269080Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.303034Z", "completed_at": "2025-08-19T19:27:02.303042Z"}], "thread_id": "Thread-19", "execution_time": 0.3030679225921631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_timestamp.bf7705d6a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.201504Z", "completed_at": "2025-08-19T19:27:02.269766Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.303903Z", "completed_at": "2025-08-19T19:27:02.303911Z"}], "thread_id": "Thread-21", "execution_time": 0.2970612049102783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_log_index.95ea7ac278", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.196987Z", "completed_at": "2025-08-19T19:27:02.270332Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.304767Z", "completed_at": "2025-08-19T19:27:02.304775Z"}], "thread_id": "Thread-23", "execution_time": 0.304171085357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_contract_address.b1c59a2277", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.206113Z", "completed_at": "2025-08-19T19:27:02.271761Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.306294Z", "completed_at": "2025-08-19T19:27:02.306301Z"}], "thread_id": "Thread-27", "execution_time": 0.29876112937927246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.b4c568d90c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.211776Z", "completed_at": "2025-08-19T19:27:02.273170Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.307765Z", "completed_at": "2025-08-19T19:27:02.307773Z"}], "thread_id": "Thread-24", "execution_time": 0.29337430000305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_timestamp.16109c20e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.219702Z", "completed_at": "2025-08-19T19:27:02.274966Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.309216Z", "completed_at": "2025-08-19T19:27:02.309223Z"}], "thread_id": "Thread-29", "execution_time": 0.28937244415283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_log_index.143d8c5c9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.224300Z", "completed_at": "2025-08-19T19:27:02.276316Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.310710Z", "completed_at": "2025-08-19T19:27:02.310719Z"}], "thread_id": "Thread-26", "execution_time": 0.29006385803222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_transaction_hash.445891e408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.229134Z", "completed_at": "2025-08-19T19:27:02.276849Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.311591Z", "completed_at": "2025-08-19T19:27:02.311602Z"}], "thread_id": "Thread-28", "execution_time": 0.28565049171447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_NameRegistry_events_transaction_hash.b2db57971e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.236400Z", "completed_at": "2025-08-19T19:27:02.280836Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.315114Z", "completed_at": "2025-08-19T19:27:02.315125Z"}], "thread_id": "Thread-30", "execution_time": 0.27756261825561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_yields_sdai_rate_daily", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`int_yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`int_yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "relation_name": "`dbt`.`int_yields_sdai_rate_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.247222Z", "completed_at": "2025-08-19T19:27:02.285164Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.318701Z", "completed_at": "2025-08-19T19:27:02.318710Z"}], "thread_id": "Thread-31", "execution_time": 0.2786221504211426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_timestamp.f61b316290", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_sdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.358782Z", "completed_at": "2025-08-19T19:27:02.420458Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.542245Z", "completed_at": "2025-08-19T19:27:02.542286Z"}], "thread_id": "Thread-36", "execution_time": 0.23678088188171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_contract_address.55e37a25d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_sdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.364522Z", "completed_at": "2025-08-19T19:27:02.421913Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.547762Z", "completed_at": "2025-08-19T19:27:02.547774Z"}], "thread_id": "Thread-37", "execution_time": 0.2407674789428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_log_index.70e75cfc4a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_sdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.369834Z", "completed_at": "2025-08-19T19:27:02.423093Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.553295Z", "completed_at": "2025-08-19T19:27:02.553306Z"}], "thread_id": "Thread-39", "execution_time": 0.2447972297668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_transaction_hash.8bc24e2c1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.375082Z", "completed_at": "2025-08-19T19:27:02.425042Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.563230Z", "completed_at": "2025-08-19T19:27:02.563243Z"}], "thread_id": "Thread-40", "execution_time": 0.2532947063446045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_sdai_events_transaction_hash.50bdbdb4f5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.380988Z", "completed_at": "2025-08-19T19:27:02.435237Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.565143Z", "completed_at": "2025-08-19T19:27:02.565152Z"}], "thread_id": "Thread-38", "execution_time": 0.25278353691101074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_forks", "compiled": true, "compiled_code": "SELECT\n  fork_name\n  ,fork_version \n  ,fork_digest\n  ,fork_epoch \nFROM `dbt`.`fct_consensus_forks`\nORDER BY fork_version ASC", "relation_name": "`dbt`.`api_consensus_forks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.385646Z", "completed_at": "2025-08-19T19:27:02.436815Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.571077Z", "completed_at": "2025-08-19T19:27:02.571092Z"}], "thread_id": "Thread-1", "execution_time": 0.2567131519317627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_timestamp.a0d94f1927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.400077Z", "completed_at": "2025-08-19T19:27:02.500534Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.587190Z", "completed_at": "2025-08-19T19:27:02.587202Z"}], "thread_id": "Thread-3", "execution_time": 0.26247215270996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_contract_address.6d72ec6909", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_wxdai_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.406585Z", "completed_at": "2025-08-19T19:27:02.508310Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.590205Z", "completed_at": "2025-08-19T19:27:02.590217Z"}], "thread_id": "Thread-2", "execution_time": 0.2628498077392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_log_index.f7c64f3a59", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_wxdai_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.412822Z", "completed_at": "2025-08-19T19:27:02.526576Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.594871Z", "completed_at": "2025-08-19T19:27:02.594880Z"}], "thread_id": "Thread-5", "execution_time": 0.26470422744750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_hash.e5bd1686bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.425758Z", "completed_at": "2025-08-19T19:27:02.564510Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.603941Z", "completed_at": "2025-08-19T19:27:02.603953Z"}], "thread_id": "Thread-11", "execution_time": 0.2642357349395752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_events_transaction_hash.cf34c446fb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.430305Z", "completed_at": "2025-08-19T19:27:02.566011Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.606075Z", "completed_at": "2025-08-19T19:27:02.606087Z"}], "thread_id": "Thread-6", "execution_time": 0.26571059226989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_blocks_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT date, 'produced' AS label, blocks_produced AS value FROM `dbt`.`int_consensus_blocks_daily`\n    UNION ALL \n    SELECT date, 'missed' AS label, blocks_missed AS value FROM `dbt`.`int_consensus_blocks_daily`\n)\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_blocks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.437410Z", "completed_at": "2025-08-19T19:27:02.572765Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.607813Z", "completed_at": "2025-08-19T19:27:02.607822Z"}], "thread_id": "Thread-4", "execution_time": 0.2655167579650879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_timestamp.427c640d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.441869Z", "completed_at": "2025-08-19T19:27:02.573410Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.609328Z", "completed_at": "2025-08-19T19:27:02.609336Z"}], "thread_id": "Thread-7", "execution_time": 0.2662947177886963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_deposit_id.e5de3f71da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.446322Z", "completed_at": "2025-08-19T19:27:02.574042Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.610178Z", "completed_at": "2025-08-19T19:27:02.610189Z"}], "thread_id": "Thread-13", "execution_time": 0.26653385162353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_hash.f28d1a031d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.450853Z", "completed_at": "2025-08-19T19:27:02.574704Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.611069Z", "completed_at": "2025-08-19T19:27:02.611076Z"}], "thread_id": "Thread-8", "execution_time": 0.26673054695129395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_deposit_id.e60e7a7d4f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deposit_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere deposit_id is not null\ngroup by deposit_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.460727Z", "completed_at": "2025-08-19T19:27:02.581702Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.612047Z", "completed_at": "2025-08-19T19:27:02.612054Z"}], "thread_id": "Thread-35", "execution_time": 0.2657756805419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_number.ceeff5eb22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.466704Z", "completed_at": "2025-08-19T19:27:02.582403Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.612976Z", "completed_at": "2025-08-19T19:27:02.612985Z"}], "thread_id": "Thread-9", "execution_time": 0.26610851287841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_timestamp.98dea1810b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.471183Z", "completed_at": "2025-08-19T19:27:02.583222Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.614439Z", "completed_at": "2025-08-19T19:27:02.614447Z"}], "thread_id": "Thread-15", "execution_time": 0.2669234275817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_incremental_column.dda2c25ff4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect incremental_column\nfrom `dbt`.`contracts_wxdai_calls`\nwhere incremental_column is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.456372Z", "completed_at": "2025-08-19T19:27:02.583883Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.615305Z", "completed_at": "2025-08-19T19:27:02.615312Z"}], "thread_id": "Thread-34", "execution_time": 0.2696659564971924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_transaction_hash.c886f64cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.480446Z", "completed_at": "2025-08-19T19:27:02.584688Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.616140Z", "completed_at": "2025-08-19T19:27:02.616148Z"}], "thread_id": "Thread-33", "execution_time": 0.26741766929626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_calls_transaction_hash.f8705da391", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.475790Z", "completed_at": "2025-08-19T19:27:02.585451Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.617006Z", "completed_at": "2025-08-19T19:27:02.617018Z"}], "thread_id": "Thread-16", "execution_time": 0.2689063549041748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_hash.5f3c74de8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.484947Z", "completed_at": "2025-08-19T19:27:02.586116Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.617897Z", "completed_at": "2025-08-19T19:27:02.617909Z"}], "thread_id": "Thread-32", "execution_time": 0.26856088638305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_withdrawls_dist_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_withdrawls_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.496896Z", "completed_at": "2025-08-19T19:27:02.588158Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.619452Z", "completed_at": "2025-08-19T19:27:02.619461Z"}], "thread_id": "Thread-14", "execution_time": 0.2676889896392822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_latest", "compiled": true, "compiled_code": "SELECT \n    credentials_type\n    ,cnt\nFROM `dbt`.`int_consensus_credentials_daily`\nWHERE date = (SELECT MAX(date) FROM `dbt`.`int_consensus_credentials_daily`)", "relation_name": "`dbt`.`api_consensus_credentials_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.488472Z", "completed_at": "2025-08-19T19:27:02.588720Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.620367Z", "completed_at": "2025-08-19T19:27:02.620374Z"}], "thread_id": "Thread-12", "execution_time": 0.27042150497436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_deposits_withdrawls_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,'withdrawls' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_withdrawls_dist_daily`\n\nUNION ALL\n\nSELECT\n    date\n    ,'deposits' AS label\n    ,cnt\n    ,total_amount\nFROM \n    `dbt`.`int_consensus_deposits_daily`", "relation_name": "`dbt`.`fct_consensus_deposits_withdrawls_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.493583Z", "completed_at": "2025-08-19T19:27:02.589346Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.621223Z", "completed_at": "2025-08-19T19:27:02.621234Z"}], "thread_id": "Thread-10", "execution_time": 0.2703666687011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_credentials_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,credentials_type\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)) * 100,2) AS pct \nFROM `dbt`.`int_consensus_credentials_daily`\nORDER BY date, credentials_type", "relation_name": "`dbt`.`api_consensus_credentials_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.501310Z", "completed_at": "2025-08-19T19:27:02.591052Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.623071Z", "completed_at": "2025-08-19T19:27:02.623082Z"}], "thread_id": "Thread-18", "execution_time": 0.2707054615020752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_entry_queue_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,validator_count\n    ,q05\n    ,q10\n    ,q25\n    ,q50\n    ,q75\n    ,q90\n    ,q95\n    ,mean\nFROM `dbt`.`int_consensus_entry_queue_daily`\nORDER BY date ASC", "relation_name": "`dbt`.`api_consensus_entry_queue_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.504800Z", "completed_at": "2025-08-19T19:27:02.592120Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.623967Z", "completed_at": "2025-08-19T19:27:02.623978Z"}], "thread_id": "Thread-17", "execution_time": 0.27042293548583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,balance\n    ,rate\n    ,avg(rate) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rate_7dma\n    ,apy\n    ,ROUND((POWER((1+rate_7dma),365) - 1) * 100,2) AS apy_7dma\nFROM `dbt`.`int_consensus_validators_apy_daily`\nWHERE date > DATE '2021-12-08'", "relation_name": "`dbt`.`fct_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.514905Z", "completed_at": "2025-08-19T19:27:02.592891Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.624854Z", "completed_at": "2025-08-19T19:27:02.624862Z"}], "thread_id": "Thread-25", "execution_time": 0.27008962631225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_staked_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,effective_balance AS value\nFROM `dbt`.`int_consensus_validators_balances_daily`\nORDER BY date", "relation_name": "`dbt`.`api_consensus_staked_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.518342Z", "completed_at": "2025-08-19T19:27:02.593660Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.625715Z", "completed_at": "2025-08-19T19:27:02.625726Z"}], "thread_id": "Thread-20", "execution_time": 0.26978254318237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_balances_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,value\nFROM (\n    SELECT\n        date\n        ,'balance' AS label\n        ,balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n\n    UNION ALL \n\n    SELECT\n        date\n        ,'eff. balance' AS label\n        ,effective_balance AS value\n    FROM `dbt`.`int_consensus_validators_balances_daily`\n)\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_balances_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.509061Z", "completed_at": "2025-08-19T19:27:02.594226Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.626611Z", "completed_at": "2025-08-19T19:27:02.626622Z"}], "thread_id": "Thread-22", "execution_time": 0.272479772567749, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_balances_dist_daily_date.20565492ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_balances_dist_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.521968Z", "completed_at": "2025-08-19T19:27:02.595922Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.628126Z", "completed_at": "2025-08-19T19:27:02.628137Z"}], "thread_id": "Thread-19", "execution_time": 0.2715628147125244, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_cnt.d87cfc9f31", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.531590Z", "completed_at": "2025-08-19T19:27:02.596972Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.629053Z", "completed_at": "2025-08-19T19:27:02.629060Z"}], "thread_id": "Thread-23", "execution_time": 0.2709951400756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_status.6ce758daa0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.527178Z", "completed_at": "2025-08-19T19:27:02.597630Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.629929Z", "completed_at": "2025-08-19T19:27:02.629939Z"}], "thread_id": "Thread-21", "execution_time": 0.2724649906158447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_consensus_validators_status_daily_date.8a3bdc4a88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_consensus_validators_status_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.536176Z", "completed_at": "2025-08-19T19:27:02.598823Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.631520Z", "completed_at": "2025-08-19T19:27:02.631528Z"}], "thread_id": "Thread-27", "execution_time": 0.2678675651550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_client.09f15c0dd6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.543306Z", "completed_at": "2025-08-19T19:27:02.600220Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.633008Z", "completed_at": "2025-08-19T19:27:02.633019Z"}], "thread_id": "Thread-24", "execution_time": 0.26405858993530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_cloud.c41159661e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cloud\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere cloud is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.548762Z", "completed_at": "2025-08-19T19:27:02.601784Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.634535Z", "completed_at": "2025-08-19T19:27:02.634543Z"}], "thread_id": "Thread-29", "execution_time": 0.2602999210357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_date.85645cfc12", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.554357Z", "completed_at": "2025-08-19T19:27:02.602559Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.635394Z", "completed_at": "2025-08-19T19:27:02.635402Z"}], "thread_id": "Thread-26", "execution_time": 0.25594091415405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_cloud_daily_value.6e304629e2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_cloud_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.558746Z", "completed_at": "2025-08-19T19:27:02.604805Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.637531Z", "completed_at": "2025-08-19T19:27:02.637539Z"}], "thread_id": "Thread-28", "execution_time": 0.25742101669311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_date.17a4b4d6fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.566633Z", "completed_at": "2025-08-19T19:27:02.608666Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.640929Z", "completed_at": "2025-08-19T19:27:02.640941Z"}], "thread_id": "Thread-30", "execution_time": 0.24927735328674316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_country_daily_value.18da2344fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_country_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.575278Z", "completed_at": "2025-08-19T19:27:02.613825Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.645152Z", "completed_at": "2025-08-19T19:27:02.645160Z"}], "thread_id": "Thread-31", "execution_time": 0.25046420097351074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_client.6c0ca0f06e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.684179Z", "completed_at": "2025-08-19T19:27:02.746872Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.877061Z", "completed_at": "2025-08-19T19:27:02.877074Z"}], "thread_id": "Thread-36", "execution_time": 0.24636483192443848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_daily_date.1689fe7ae8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.690450Z", "completed_at": "2025-08-19T19:27:02.748088Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.882469Z", "completed_at": "2025-08-19T19:27:02.882484Z"}], "thread_id": "Thread-37", "execution_time": 0.2502152919769287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_date.3153592556", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.695763Z", "completed_at": "2025-08-19T19:27:02.750000Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.892564Z", "completed_at": "2025-08-19T19:27:02.892573Z"}], "thread_id": "Thread-39", "execution_time": 0.2587733268737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_version_daily_value.428f56d13e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_version_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.701729Z", "completed_at": "2025-08-19T19:27:02.757213Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.897211Z", "completed_at": "2025-08-19T19:27:02.897225Z"}], "thread_id": "Thread-40", "execution_time": 0.2611525058746338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_client.e644725624", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.707759Z", "completed_at": "2025-08-19T19:27:02.761416Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.898944Z", "completed_at": "2025-08-19T19:27:02.898956Z"}], "thread_id": "Thread-38", "execution_time": 0.2606513500213623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_date.469721c547", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.714276Z", "completed_at": "2025-08-19T19:27:02.767214Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.905854Z", "completed_at": "2025-08-19T19:27:02.905865Z"}], "thread_id": "Thread-1", "execution_time": 0.2662780284881592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_quic.4ea4e6aa99", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quic\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere quic is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.726611Z", "completed_at": "2025-08-19T19:27:02.827081Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.919084Z", "completed_at": "2025-08-19T19:27:02.919093Z"}], "thread_id": "Thread-3", "execution_time": 0.26987648010253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_probelab_clients_quic_daily_value.752046c959", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_probelab_clients_quic_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.732861Z", "completed_at": "2025-08-19T19:27:02.850419Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.923653Z", "completed_at": "2025-08-19T19:27:02.923662Z"}], "thread_id": "Thread-2", "execution_time": 0.2716400623321533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_blocks_clients_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(cnt) AS cnt\n    FROM `dbt`.`int_execution_blocks_clients_version_daily`\n    WHERE date < today()\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,cnt\n    ,ROUND(cnt/(SUM(cnt) OVER (PARTITION BY date)),4) AS pct\nFROM \n    clients_blocks", "relation_name": "`dbt`.`fct_execution_blocks_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.739636Z", "completed_at": "2025-08-19T19:27:02.869925Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.928977Z", "completed_at": "2025-08-19T19:27:02.928985Z"}], "thread_id": "Thread-5", "execution_time": 0.2727315425872803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_client.6852a73a05", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.750716Z", "completed_at": "2025-08-19T19:27:02.898169Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.935492Z", "completed_at": "2025-08-19T19:27:02.935504Z"}], "thread_id": "Thread-11", "execution_time": 0.2716078758239746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_blocks_clients_version_daily_date.dd5f7f1301", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_blocks_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.757903Z", "completed_at": "2025-08-19T19:27:02.906750Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.937526Z", "completed_at": "2025-08-19T19:27:02.937537Z"}], "thread_id": "Thread-6", "execution_time": 0.2717463970184326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,SUM(bytes_diff) OVER (ORDER BY date ASC) AS bytes\nFROM `dbt`.`int_execution_state_size_full_diff_daily`\nWHERE date < today()", "relation_name": "`dbt`.`fct_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.762056Z", "completed_at": "2025-08-19T19:27:02.907566Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.938473Z", "completed_at": "2025-08-19T19:27:02.938482Z"}], "thread_id": "Thread-4", "execution_time": 0.27146267890930176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_state_size_full_diff_daily_date.d17c9483d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_state_size_full_diff_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.771184Z", "completed_at": "2025-08-19T19:27:02.908591Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.939912Z", "completed_at": "2025-08-19T19:27:02.939921Z"}], "thread_id": "Thread-13", "execution_time": 0.27092766761779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_total", "compiled": true, "compiled_code": "SELECT\n    transaction_type\n    ,SUM(n_txs) AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nGROUP BY transaction_type\nORDER BY transaction_type", "relation_name": "`dbt`.`api_execution_transactions_cnt_total`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.767899Z", "completed_at": "2025-08-19T19:27:02.909206Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.940811Z", "completed_at": "2025-08-19T19:27:02.940818Z"}], "thread_id": "Thread-7", "execution_time": 0.2724494934082031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,n_txs AS value\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.774431Z", "completed_at": "2025-08-19T19:27:02.909763Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.941691Z", "completed_at": "2025-08-19T19:27:02.941702Z"}], "thread_id": "Thread-8", "execution_time": 0.27205848693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_gas_used_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,gas_used\n    ,gas_price_avg\n    ,gas_price_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_gas_used_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.777680Z", "completed_at": "2025-08-19T19:27:02.914143Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.942700Z", "completed_at": "2025-08-19T19:27:02.942709Z"}], "thread_id": "Thread-35", "execution_time": 0.2724480628967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_transactions_value_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,transaction_type\n    ,xdai_value \n    ,xdai_value_avg \n    ,xdai_value_median\nFROM `dbt`.`int_execution_transactions_info_daily`\nWHERE success = 1\nORDER BY date, transaction_type", "relation_name": "`dbt`.`api_execution_transactions_value_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.782374Z", "completed_at": "2025-08-19T19:27:02.915103Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.943638Z", "completed_at": "2025-08-19T19:27:02.943647Z"}], "thread_id": "Thread-9", "execution_time": 0.2727634906768799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_date.5c42bfc6c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.787491Z", "completed_at": "2025-08-19T19:27:02.915837Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.945089Z", "completed_at": "2025-08-19T19:27:02.945098Z"}], "thread_id": "Thread-15", "execution_time": 0.2728846073150635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_success.15552423e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.791965Z", "completed_at": "2025-08-19T19:27:02.916719Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.945967Z", "completed_at": "2025-08-19T19:27:02.945975Z"}], "thread_id": "Thread-34", "execution_time": 0.2731485366821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_transactions_info_daily_transaction_type.b1687eae24", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`int_execution_transactions_info_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.796541Z", "completed_at": "2025-08-19T19:27:02.917399Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.946852Z", "completed_at": "2025-08-19T19:27:02.946860Z"}], "thread_id": "Thread-33", "execution_time": 0.2733895778656006, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv4_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.801939Z", "completed_at": "2025-08-19T19:27:02.918104Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.947728Z", "completed_at": "2025-08-19T19:27:02.947740Z"}], "thread_id": "Thread-16", "execution_time": 0.27367305755615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv4_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        ip,\n        any(client) AS client\n    FROM `dbt`.`int_p2p_discv4_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv4__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv4__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN  `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv4_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.817565Z", "completed_at": "2025-08-19T19:27:02.920086Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.948753Z", "completed_at": "2025-08-19T19:27:02.948761Z"}], "thread_id": "Thread-12", "execution_time": 0.27219367027282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv4_peers_peer_id.6c2e84dcf5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.807113Z", "completed_at": "2025-08-19T19:27:02.920711Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.949763Z", "completed_at": "2025-08-19T19:27:02.949771Z"}], "thread_id": "Thread-32", "execution_time": 0.2750585079193115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_peer_id.85213b218b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.812990Z", "completed_at": "2025-08-19T19:27:02.921281Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.950632Z", "completed_at": "2025-08-19T19:27:02.950640Z"}], "thread_id": "Thread-14", "execution_time": 0.2747063636779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv4_peers_visit_ended_at.892f1eee6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv4_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.822002Z", "completed_at": "2025-08-19T19:27:02.922170Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.951507Z", "completed_at": "2025-08-19T19:27:02.951519Z"}], "thread_id": "Thread-10", "execution_time": 0.2743098735809326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_visits_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`), 7)\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv4_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_visits_daily`)\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`), 7)\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        total_visits,\n        ROUND(COALESCE(successful_visits / NULLIF(total_visits, 0), 0) * 100, 1) AS pct_successful,\n        crawls\n    FROM `dbt`.`int_p2p_discv5_visits_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_visits_daily`)\n)\n\nSELECT\n    t2.total_visits AS discv4_total_visits,\n    t2.pct_successful AS discv4_pct_successful,\n    t2.crawls AS discv4_crawls,\n    ROUND((COALESCE(t2.crawls / NULLIF(t1.crawls, 0), 0) - 1) * 100, 1) AS change_discv4_crawls_pct,\n    t4.total_visits AS discv5_total_visits,\n    t4.pct_successful AS discv5_pct_successful,\n    t4.crawls AS discv5_crawls,\n    ROUND((COALESCE(t4.crawls / NULLIF(t2.crawls, 0), 0) - 1) * 100, 1) AS change_discv5_crawls_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_visits_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.828246Z", "completed_at": "2025-08-19T19:27:02.922778Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.952376Z", "completed_at": "2025-08-19T19:27:02.952387Z"}], "thread_id": "Thread-18", "execution_time": 0.2739686965942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,argMax(IF(client='','Unknown',client),visit_ended_at) AS client\n        ,argMax(platform,visit_ended_at) AS platform\n        ,argMax(generic_provider,visit_ended_at) AS generic_provider\n        ,argMax(peer_country,visit_ended_at) AS peer_country\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT date , 'Clients' AS metric, client AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Platform' AS metric, platform AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Provider' AS metric, generic_provider AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT date, 'Country' AS metric, peer_country AS label, COUNT(*) AS value FROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.839799Z", "completed_at": "2025-08-19T19:27:02.924579Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.953439Z", "completed_at": "2025-08-19T19:27:02.953448Z"}], "thread_id": "Thread-25", "execution_time": 0.2736976146697998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_geo_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[1]) AS lat\n    ,IF(t2.country='',NULL,splitByString(',',t2.loc)[2]) AS long\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2, 3, 4", "relation_name": "`dbt`.`int_p2p_discv5_geo_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.833389Z", "completed_at": "2025-08-19T19:27:02.925297Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.956125Z", "completed_at": "2025-08-19T19:27:02.956135Z"}], "thread_id": "Thread-17", "execution_time": 0.27703142166137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) < today()\n        AND\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`int_p2p_discv5_forks_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`int_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.845330Z", "completed_at": "2025-08-19T19:27:02.926281Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.957596Z", "completed_at": "2025-08-19T19:27:02.957604Z"}], "thread_id": "Thread-20", "execution_time": 0.27722978591918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`int_p2p_discv5_peers`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `dbt`.`stg_nebula_discv5__discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `dbt`.`stg_nebula_discv5__neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN `dbt`.`stg_crawlers_data__ipinfo` AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`int_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.851428Z", "completed_at": "2025-08-19T19:27:02.926851Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.958475Z", "completed_at": "2025-08-19T19:27:02.958482Z"}], "thread_id": "Thread-22", "execution_time": 0.27748751640319824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_peer_id.e1f35aa77b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.856058Z", "completed_at": "2025-08-19T19:27:02.927784Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.959315Z", "completed_at": "2025-08-19T19:27:02.959323Z"}], "thread_id": "Thread-19", "execution_time": 0.27709269523620605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_peers_visit_ended_at.c6572c36d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.860480Z", "completed_at": "2025-08-19T19:27:02.928356Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.960150Z", "completed_at": "2025-08-19T19:27:02.960162Z"}], "thread_id": "Thread-23", "execution_time": 0.27733874320983887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_peers_peer_id.90f643e9aa", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_peers`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.865029Z", "completed_at": "2025-08-19T19:27:02.930024Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.961162Z", "completed_at": "2025-08-19T19:27:02.961170Z"}], "thread_id": "Thread-21", "execution_time": 0.2777082920074463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_graffiti_cloud", "compiled": true, "compiled_code": "SELECT\n    label\n    ,graffiti\n    ,value\nFROM `dbt`.`fct_consensus_graffiti_cloud`\nORDER BY label DESC, value DESC", "relation_name": "`dbt`.`api_consensus_graffiti_cloud`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.870528Z", "completed_at": "2025-08-19T19:27:02.932554Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.963328Z", "completed_at": "2025-08-19T19:27:02.963335Z"}], "thread_id": "Thread-27", "execution_time": 0.2737593650817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`int_execution_rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL AND date < today()       -- drop rows before first real point\n\nORDER BY bticker, date", "relation_name": "`dbt`.`fct_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.878018Z", "completed_at": "2025-08-19T19:27:02.933117Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.964167Z", "completed_at": "2025-08-19T19:27:02.964176Z"}], "thread_id": "Thread-24", "execution_time": 0.2692997455596924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_bticker.ccc46c2963", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.883450Z", "completed_at": "2025-08-19T19:27:02.933886Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.965044Z", "completed_at": "2025-08-19T19:27:02.965052Z"}], "thread_id": "Thread-29", "execution_time": 0.26483726501464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_execution_rwa_backedfi_prices_date.10510ec5d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.888091Z", "completed_at": "2025-08-19T19:27:02.934706Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.965901Z", "completed_at": "2025-08-19T19:27:02.965908Z"}], "thread_id": "Thread-26", "execution_time": 0.26493144035339355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_execution_rwa_backedfi_prices_bticker.43f0b20be3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_execution_rwa_backedfi_prices`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.893671Z", "completed_at": "2025-08-19T19:27:02.936856Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.966899Z", "completed_at": "2025-08-19T19:27:02.966907Z"}], "thread_id": "Thread-28", "execution_time": 0.25991320610046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_yields_sdai_apy_daily", "compiled": true, "compiled_code": "WITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`int_yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "relation_name": "`dbt`.`fct_yields_sdai_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.900084Z", "completed_at": "2025-08-19T19:27:02.939311Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.969364Z", "completed_at": "2025-08-19T19:27:02.969372Z"}], "thread_id": "Thread-30", "execution_time": 0.25012826919555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_yields_sdai_rate_daily_date.df9fcc0c06", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_yields_sdai_rate_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:02.910657Z", "completed_at": "2025-08-19T19:27:02.944500Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:02.970851Z", "completed_at": "2025-08-19T19:27:02.970859Z"}], "thread_id": "Thread-31", "execution_time": 0.24793672561645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,cnt AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.017711Z", "completed_at": "2025-08-19T19:27:03.141632Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.274274Z", "completed_at": "2025-08-19T19:27:03.274294Z"}], "thread_id": "Thread-36", "execution_time": 0.3123893737792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_deposits_withdrawls_volume_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,total_amount AS value\nFROM \n    `dbt`.`fct_consensus_deposits_withdrawls_daily`\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_deposits_withdrawls_volume_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.022348Z", "completed_at": "2025-08-19T19:27:03.143606Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.284619Z", "completed_at": "2025-08-19T19:27:03.284636Z"}], "thread_id": "Thread-37", "execution_time": 0.3220710754394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_validators_apy_daily", "compiled": true, "compiled_code": "SELECT \n    date\n    ,label\n    ,apy\nFROM (\n    SELECT date, 'Daily' AS label, apy AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n    UNION ALL \n    SELECT date, '7DMA' AS label, apy_7dma AS apy FROM `dbt`.`fct_consensus_validators_apy_daily`\n)\nWHERE date < DATE '2024-12-01'\nORDER BY date, label", "relation_name": "`dbt`.`api_consensus_validators_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.033764Z", "completed_at": "2025-08-19T19:27:03.179011Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.312925Z", "completed_at": "2025-08-19T19:27:03.312941Z"}], "thread_id": "Thread-39", "execution_time": 0.33791089057922363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_cnt_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,cnt AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_cnt_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.038507Z", "completed_at": "2025-08-19T19:27:03.188129Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.316233Z", "completed_at": "2025-08-19T19:27:03.316242Z"}], "thread_id": "Thread-40", "execution_time": 0.33930087089538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_blocks_clients_pct_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,client\n    ,pct AS value\nFROM `dbt`.`fct_execution_blocks_clients_daily`\nORDER BY date, client", "relation_name": "`dbt`.`api_execution_blocks_clients_pct_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.121807Z", "completed_at": "2025-08-19T19:27:03.204285Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.319512Z", "completed_at": "2025-08-19T19:27:03.319522Z"}], "thread_id": "Thread-38", "execution_time": 0.34022045135498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_client.98762fe995", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.129637Z", "completed_at": "2025-08-19T19:27:03.229264Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.324932Z", "completed_at": "2025-08-19T19:27:03.324945Z"}], "thread_id": "Thread-1", "execution_time": 0.34211158752441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_blocks_clients_daily_date.ba453188e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_blocks_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.146051Z", "completed_at": "2025-08-19T19:27:03.305072Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.339350Z", "completed_at": "2025-08-19T19:27:03.339362Z"}], "thread_id": "Thread-2", "execution_time": 0.34326791763305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_state_full_size_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,bytes/POWER(10,9) AS value\nFROM `dbt`.`fct_execution_state_full_size_daily`", "relation_name": "`dbt`.`api_execution_state_full_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.149621Z", "completed_at": "2025-08-19T19:27:03.305861Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.341504Z", "completed_at": "2025-08-19T19:27:03.341513Z"}], "thread_id": "Thread-3", "execution_time": 0.34415626525878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_state_full_size_daily_date.d76bb8ce85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.158846Z", "completed_at": "2025-08-19T19:27:03.311352Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.342527Z", "completed_at": "2025-08-19T19:27:03.342536Z"}], "thread_id": "Thread-32", "execution_time": 0.3420548439025879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv4_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.155417Z", "completed_at": "2025-08-19T19:27:03.311925Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.344058Z", "completed_at": "2025-08-19T19:27:03.344066Z"}], "thread_id": "Thread-11", "execution_time": 0.34467363357543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv4_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv4_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv4_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.163950Z", "completed_at": "2025-08-19T19:27:03.314005Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.345951Z", "completed_at": "2025-08-19T19:27:03.345960Z"}], "thread_id": "Thread-6", "execution_time": 0.34482479095458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_consensus_info_latest", "compiled": true, "compiled_code": "WITH\n\ndeposits_withdrawls_latest AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_deposits_withdrawls_daily`)\n),\n\ndeposits_withdrawls_7d AS (\n    SELECT\n        label\n        ,cnt\n        ,total_amount\n    FROM \n        `dbt`.`fct_consensus_deposits_withdrawls_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n),\n\napy_latest AS (\n    SELECT\n        apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`)\n),\n\napy_7d AS (\n    SELECT\n       apy_7dma\n    FROM \n        `dbt`.`fct_consensus_validators_apy_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`fct_consensus_validators_apy_daily`), 7)\n),\n\nstatus_latest AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = (SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`)\n),\n\nstatus_7d AS (\n    SELECT\n        status AS label\n        ,CAST(COALESCE(cnt,0) AS Float64) AS value\n    FROM \n        `dbt`.`int_consensus_validators_status_daily`\n    WHERE\n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_consensus_validators_status_daily`), 7)\n),\n\n\n\ninfo_latest AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_latest WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_latest),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_latest\n),\n\ninfo_7d AS ( \n    SELECT\n        'deposits_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'withdrawls_cnt' AS label\n    ,COALESCE( (SELECT CAST(cnt AS Float64) FROM deposits_withdrawls_7d WHERE label = 'withdrawls'), 0) AS value\n    UNION ALL\n    SELECT\n        'deposits_total_amount' AS label \n    ,COALESCE( (SELECT ROUND(total_amount,2) FROM deposits_withdrawls_7d WHERE label = 'deposits'), 0) AS value\n    UNION ALL\n    SELECT\n        'APY7D' AS label \n    ,COALESCE((SELECT ROUND(apy_7dma,2) FROM apy_7d),0) AS value\n    UNION ALL\n    SELECT\n       label \n    ,  value\n    FROM status_7d\n)\n\nSELECT\n    t1.label\n    ,t1.value AS value\n    ,IF(t1.value=0 AND t2.value=0, 0, ROUND((COALESCE(t2.value / NULLIF(t1.value, 0), 0) - 1) * 100, 1)) AS change_pct\nFROM info_latest t1\nINNER JOIN info_7d t2\nON t2.label = t1.label", "relation_name": "`dbt`.`fct_consensus_info_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.170538Z", "completed_at": "2025-08-19T19:27:03.314738Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.346846Z", "completed_at": "2025-08-19T19:27:03.346855Z"}], "thread_id": "Thread-5", "execution_time": 0.344454288482666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_clients_latest", "compiled": true, "compiled_code": "WITH \n\ndiscv4_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv4 AS (\n    SELECT\n        date,\n        SUM(value) AS discv4_count\n    FROM `dbt`.`int_p2p_discv4_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv4_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5_prev7D AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = subtractDays((SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`), 7)\n        AND metric = 'Clients'\n    GROUP BY date\n),\n\ndiscv5 AS (\n    SELECT\n        date,\n        SUM(value) AS discv5_count\n    FROM `dbt`.`int_p2p_discv5_clients_daily`\n    WHERE \n        date = (SELECT MAX(date) FROM `dbt`.`int_p2p_discv5_clients_daily`)\n        AND metric = 'Clients'\n    GROUP BY date\n)\n\nSELECT\n    t2.discv4_count AS discv4_count,\n    ROUND((COALESCE(t2.discv4_count / NULLIF(t1.discv4_count, 0), 0) - 1) * 100, 1) AS change_discv4_pct,\n    t4.discv5_count AS discv5_count,\n    ROUND((COALESCE(t4.discv5_count / NULLIF(t3.discv5_count, 0), 0) - 1) * 100, 1) AS change_discv5_pct\nFROM discv4_prev7D t1\nCROSS JOIN discv4 t2\nCROSS JOIN discv5_prev7D t3\nCROSS JOIN discv5 t4", "relation_name": "`dbt`.`api_p2p_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.175660Z", "completed_at": "2025-08-19T19:27:03.315412Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.347742Z", "completed_at": "2025-08-19T19:27:03.347751Z"}], "thread_id": "Thread-13", "execution_time": 0.3447113037109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date < today()\nORDER BY date, metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.179853Z", "completed_at": "2025-08-19T19:27:03.317085Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.349388Z", "completed_at": "2025-08-19T19:27:03.349396Z"}], "thread_id": "Thread-7", "execution_time": 0.3450937271118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_clients_latest", "compiled": true, "compiled_code": "SELECT\n    metric\n    ,label\n    ,value\nFROM `dbt`.`int_p2p_discv5_clients_daily`\nWHERE date = (SELECT MAX(date) FROM  `dbt`.`int_p2p_discv5_clients_daily` )\nORDER BY metric, label", "relation_name": "`dbt`.`api_p2p_discv5_clients_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.183543Z", "completed_at": "2025-08-19T19:27:03.317718Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.350367Z", "completed_at": "2025-08-19T19:27:03.350376Z"}], "thread_id": "Thread-8", "execution_time": 0.3454549312591553, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_date.5fbdde7245", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.194825Z", "completed_at": "2025-08-19T19:27:03.318784Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.351237Z", "completed_at": "2025-08-19T19:27:03.351247Z"}], "thread_id": "Thread-9", "execution_time": 0.344463586807251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_metric.71ca66ed76", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.188785Z", "completed_at": "2025-08-19T19:27:03.320440Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.352770Z", "completed_at": "2025-08-19T19:27:03.352781Z"}], "thread_id": "Thread-35", "execution_time": 0.34720730781555176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_label.f7bfe8acf8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.199349Z", "completed_at": "2025-08-19T19:27:03.320992Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.353695Z", "completed_at": "2025-08-19T19:27:03.353706Z"}], "thread_id": "Thread-15", "execution_time": 0.34626293182373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_clients_daily_value.c619ab212e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`int_p2p_discv5_clients_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.209883Z", "completed_at": "2025-08-19T19:27:03.322083Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.354577Z", "completed_at": "2025-08-19T19:27:03.354585Z"}], "thread_id": "Thread-17", "execution_time": 0.3459017276763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_date.de8e044688", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.214330Z", "completed_at": "2025-08-19T19:27:03.322987Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.355441Z", "completed_at": "2025-08-19T19:27:03.355453Z"}], "thread_id": "Thread-33", "execution_time": 0.346132755279541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_ip.18de621d28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ip\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.204998Z", "completed_at": "2025-08-19T19:27:03.323640Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.356324Z", "completed_at": "2025-08-19T19:27:03.356332Z"}], "thread_id": "Thread-34", "execution_time": 0.3482823371887207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.int_esg_country_power_consumption", "compiled": true, "compiled_code": "\n\n\nWITH\n\nconsensus_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_consensus_power`\n),\n\nexecution_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`stg_esg_execution_power`\n),\n\nidle_electric_power AS (\n    SELECT\n        type\n        ,mean\n    FROM\n        `dbt`.`stg_esg_idle_electric_power`\n),\n\nnode_distribution AS (\n    SELECT\n        type\n        ,distribution\n    FROM\n        `dbt`.`stg_esg_node_distribution`\n),\n\nnode_config_power AS (\n    SELECT\n        t1.type\n        ,t1.client AS consensus_client\n        ,t2.client AS execution_client\n        ,t1.mean + t2.mean + t3.mean AS mean\n    FROM\n        consensus_power t1\n    INNER JOIN\n        execution_power t2\n        ON \n        t2.type = t1.type\n    INNER JOIN\n        idle_electric_power t3\n        ON \n        t3.type = t1.type\n\n),\n\nbest_guess_per_client AS (\n    SELECT\n        t1.consensus_client\n        ,t1.execution_client\n        ,AVG(t1.mean * t2.distribution) AS mean\n    FROM\n        node_config_power t1\n    INNER JOIN\n        node_distribution t2\n        ON \n        t2.type = t1.type\n    GROUP BY\n        t1.consensus_client\n        ,t1.execution_client\n),\n\nconfiguration_distribution AS (\n    SELECT \n        execution_client\n        ,consensus_client\n        ,frac\n    FROM (\n        SELECT\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind', 'Nethermind']) AS execution_client,\n            arrayJoin(['Lighthouse', 'Teku', 'Lodestar', 'Nimbus', 'Lighthouse', 'Teku', 'Lodestar', 'Nimbus']) AS consensus_client,\n            arrayJoin([0.340, 0.114, 0.044, 0.002, 0.340, 0.114, 0.044, 0.002]) AS frac\n    )\n),\n\npower_best_guess AS (\n    SELECT \n        SUM(t1.mean * t2.frac) AS mean\n    FROM \n        best_guess_per_client t1\n    INNER JOIN\n        configuration_distribution t2\n        ON\n        t2.execution_client = t1.execution_client\n        AND\n        t2.consensus_client = t1.consensus_client\n)\n\n\nSELECT\n    t1.date\n    ,t1.country\n    ,t1.cnt * t2.mean AS power\nFROM\n    `dbt`.`int_p2p_discv5_geo_daily` t1\nCROSS JOIN \n    power_best_guess t2", "relation_name": "`dbt`.`int_esg_country_power_consumption`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.220231Z", "completed_at": "2025-08-19T19:27:03.324195Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.357162Z", "completed_at": "2025-08-19T19:27:03.357169Z"}], "thread_id": "Thread-16", "execution_time": 0.346660852432251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_geo_daily_peer_id.70954d55c9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.224780Z", "completed_at": "2025-08-19T19:27:03.325845Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.358758Z", "completed_at": "2025-08-19T19:27:03.358766Z"}], "thread_id": "Thread-20", "execution_time": 0.34763193130493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_int_p2p_discv5_geo_daily_peer_id.51e0b67531", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`int_p2p_discv5_geo_daily`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.229882Z", "completed_at": "2025-08-19T19:27:03.327003Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.359671Z", "completed_at": "2025-08-19T19:27:03.359679Z"}], "thread_id": "Thread-14", "execution_time": 0.3479013442993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_current_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Current Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_current_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.233207Z", "completed_at": "2025-08-19T19:27:03.327769Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.360558Z", "completed_at": "2025-08-19T19:27:03.360569Z"}], "thread_id": "Thread-4", "execution_time": 0.3481283187866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_next_fork_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`\nWHERE label = 'Next Fork' \nORDER BY date ASC, fork ASC", "relation_name": "`dbt`.`api_p2p_discv5_next_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.236577Z", "completed_at": "2025-08-19T19:27:03.328368Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.361439Z", "completed_at": "2025-08-19T19:27:03.361447Z"}], "thread_id": "Thread-19", "execution_time": 0.3484022617340088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_discv5_forks_daily", "compiled": true, "compiled_code": "SELECT\n    date\n    ,label\n    ,fork\n    ,cnt\nFROM `dbt`.`int_p2p_discv5_forks_daily`", "relation_name": "`dbt`.`fct_p2p_discv5_forks_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.239903Z", "completed_at": "2025-08-19T19:27:03.329227Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.362298Z", "completed_at": "2025-08-19T19:27:03.362309Z"}], "thread_id": "Thread-10", "execution_time": 0.3486030101776123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_cnt.f1ea59a2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.246182Z", "completed_at": "2025-08-19T19:27:03.330120Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.363149Z", "completed_at": "2025-08-19T19:27:03.363158Z"}], "thread_id": "Thread-23", "execution_time": 0.34878039360046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_date.8e990ae415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.250625Z", "completed_at": "2025-08-19T19:27:03.330921Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.364027Z", "completed_at": "2025-08-19T19:27:03.364039Z"}], "thread_id": "Thread-18", "execution_time": 0.3490564823150635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_fork.5ed0691025", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.255320Z", "completed_at": "2025-08-19T19:27:03.331507Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.364917Z", "completed_at": "2025-08-19T19:27:03.364925Z"}], "thread_id": "Thread-25", "execution_time": 0.349454402923584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_forks_daily_label.2c896187e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`int_p2p_discv5_forks_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.260005Z", "completed_at": "2025-08-19T19:27:03.332324Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.366022Z", "completed_at": "2025-08-19T19:27:03.366030Z"}], "thread_id": "Thread-21", "execution_time": 0.3496692180633545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_p2p_discv5_topology_latest", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    peer_ip,\n    peer_discovery_id_prefix,\n    peer_cl_fork_name,\n    peer_cl_next_fork_name,\n    peer_client,\n    peer_hostname,\n    peer_city,\n    peer_country,\n    peer_org,\n    splitByChar(',', peer_loc)[1] AS peer_lat,\n    splitByChar(',', peer_loc)[2] AS peer_lon,\n    neighbor_ip,\n    neighbor_discovery_id_prefix,\n    neighbor_cl_fork_name,\n    neighbor_cl_next_fork_name,\n    neighbor_client,\n    neighbor_city,\n    neighbor_country,\n    neighbor_org,\n    splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n    splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n    cnt\nFROM  `dbt`.`int_p2p_discv5_topology_latest`", "relation_name": "`dbt`.`api_p2p_discv5_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.263935Z", "completed_at": "2025-08-19T19:27:03.333759Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.367624Z", "completed_at": "2025-08-19T19:27:03.367636Z"}], "thread_id": "Thread-12", "execution_time": 0.35065340995788574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_p2p_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\ndiscv4_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv4_topology_latest`\n),\n\ndiscv5_topology AS (\n    SELECT\n        date,\n        peer_ip,\n        peer_discovery_id_prefix,\n        peer_client,\n        peer_hostname,\n        peer_city,\n        peer_country,\n        peer_org,\n        splitByChar(',', peer_loc)[1] AS peer_lat,\n        splitByChar(',', peer_loc)[2] AS peer_lon,\n        neighbor_ip,\n        neighbor_discovery_id_prefix,\n        neighbor_client,\n        neighbor_city,\n        neighbor_country,\n        neighbor_org,\n        splitByChar(',', neighbor_loc)[1] AS neighbor_lat,\n        splitByChar(',', neighbor_loc)[2] AS neighbor_lon,\n        cnt\n    FROM `dbt`.`int_p2p_discv5_topology_latest`\n)\n\nSELECT 'DiscV4' AS protocol, * FROM discv4_topology\nUNION ALL\nSELECT 'DiscV5' AS protocol, * FROM discv5_topology", "relation_name": "`dbt`.`fct_p2p_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.268005Z", "completed_at": "2025-08-19T19:27:03.334928Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.368511Z", "completed_at": "2025-08-19T19:27:03.368519Z"}], "thread_id": "Thread-22", "execution_time": 0.34699416160583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_cnt.ad27ee043e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.275230Z", "completed_at": "2025-08-19T19:27:03.335583Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.369377Z", "completed_at": "2025-08-19T19:27:03.369388Z"}], "thread_id": "Thread-27", "execution_time": 0.3434915542602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_date.6994a84654", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.279777Z", "completed_at": "2025-08-19T19:27:03.336195Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.370231Z", "completed_at": "2025-08-19T19:27:03.370240Z"}], "thread_id": "Thread-24", "execution_time": 0.3435189723968506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_discovery_id_prefix.43e20b120a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.285746Z", "completed_at": "2025-08-19T19:27:03.337804Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.371754Z", "completed_at": "2025-08-19T19:27:03.371762Z"}], "thread_id": "Thread-29", "execution_time": 0.34430456161499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_p2p_discv5_topology_latest_peer_ip.05c8d6b346", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_ip\nfrom `dbt`.`int_p2p_discv5_topology_latest`\nwhere peer_ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.290359Z", "completed_at": "2025-08-19T19:27:03.338390Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.372634Z", "completed_at": "2025-08-19T19:27:03.372645Z"}], "thread_id": "Thread-26", "execution_time": 0.34456849098205566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_execution_rwa_backedfi_prices_daily", "compiled": true, "compiled_code": "SELECT\n  bticker,\n  date,\n  price         \nFROM `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nORDER BY\n  bticker,\n  date", "relation_name": "`dbt`.`api_execution_rwa_backedfi_prices_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.300456Z", "completed_at": "2025-08-19T19:27:03.340278Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.374181Z", "completed_at": "2025-08-19T19:27:03.374192Z"}], "thread_id": "Thread-30", "execution_time": 0.3436124324798584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_date.99116a3e90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.294054Z", "completed_at": "2025-08-19T19:27:03.340923Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.375218Z", "completed_at": "2025-08-19T19:27:03.375226Z"}], "thread_id": "Thread-28", "execution_time": 0.3465077877044678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_bticker.0e7519a2a0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.306456Z", "completed_at": "2025-08-19T19:27:03.343437Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.376915Z", "completed_at": "2025-08-19T19:27:03.376922Z"}], "thread_id": "Thread-31", "execution_time": 0.34561657905578613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_execution_rwa_backedfi_prices_daily_price.ff49bc8a9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `dbt`.`fct_execution_rwa_backedfi_prices_daily`\nwhere price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.415487Z", "completed_at": "2025-08-19T19:27:03.463482Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.575604Z", "completed_at": "2025-08-19T19:27:03.575619Z"}], "thread_id": "Thread-36", "execution_time": 0.20881319046020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_date.b2bdc5f65c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.422992Z", "completed_at": "2025-08-19T19:27:03.464811Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.581037Z", "completed_at": "2025-08-19T19:27:03.581047Z"}], "thread_id": "Thread-37", "execution_time": 0.21004986763000488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_yields_sdai_apy_daily_label.e8b1838f2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`fct_yields_sdai_apy_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.430767Z", "completed_at": "2025-08-19T19:27:03.484366Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.595704Z", "completed_at": "2025-08-19T19:27:03.595718Z"}], "thread_id": "Thread-39", "execution_time": 0.21788668632507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_client.0dab4f5da1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.439229Z", "completed_at": "2025-08-19T19:27:03.505906Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.598666Z", "completed_at": "2025-08-19T19:27:03.598675Z"}], "thread_id": "Thread-40", "execution_time": 0.2173595428466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_date.9319e2b653", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.445703Z", "completed_at": "2025-08-19T19:27:03.511873Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.601669Z", "completed_at": "2025-08-19T19:27:03.601678Z"}], "thread_id": "Thread-38", "execution_time": 0.21744155883789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_cnt_daily_value.884552d242", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`api_execution_blocks_clients_cnt_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.450182Z", "completed_at": "2025-08-19T19:27:03.512649Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.602644Z", "completed_at": "2025-08-19T19:27:03.602652Z"}], "thread_id": "Thread-1", "execution_time": 0.21683263778686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_client.04116a3527", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.465416Z", "completed_at": "2025-08-19T19:27:03.592547Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.615934Z", "completed_at": "2025-08-19T19:27:03.615945Z"}], "thread_id": "Thread-2", "execution_time": 0.21711277961730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_blocks_clients_pct_daily_date.49d7e9d160", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_blocks_clients_pct_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.476085Z", "completed_at": "2025-08-19T19:27:03.593757Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.617650Z", "completed_at": "2025-08-19T19:27:03.617659Z"}], "thread_id": "Thread-32", "execution_time": 0.2153158187866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_active_ongoing_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'active_ongoing'", "relation_name": "`dbt`.`api_consensus_info_active_ongoing_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.471421Z", "completed_at": "2025-08-19T19:27:03.594432Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.619191Z", "completed_at": "2025-08-19T19:27:03.619200Z"}], "thread_id": "Thread-3", "execution_time": 0.21830415725708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_state_full_size_daily_date.453c8c3223", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_state_full_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.481174Z", "completed_at": "2025-08-19T19:27:03.595019Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.620075Z", "completed_at": "2025-08-19T19:27:03.620083Z"}], "thread_id": "Thread-11", "execution_time": 0.2170848846435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_apy_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'APY7D'", "relation_name": "`dbt`.`api_consensus_info_apy_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.488338Z", "completed_at": "2025-08-19T19:27:03.597136Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.621102Z", "completed_at": "2025-08-19T19:27:03.621110Z"}], "thread_id": "Thread-6", "execution_time": 0.216796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_withdrawls_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'withdrawls_cnt'", "relation_name": "`dbt`.`api_consensus_info_withdrawls_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.491704Z", "completed_at": "2025-08-19T19:27:03.597984Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.622005Z", "completed_at": "2025-08-19T19:27:03.622013Z"}], "thread_id": "Thread-8", "execution_time": 0.21649956703186035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_date.1187b1bb2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.485113Z", "completed_at": "2025-08-19T19:27:03.599601Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.623021Z", "completed_at": "2025-08-19T19:27:03.623029Z"}], "thread_id": "Thread-13", "execution_time": 0.2193758487701416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.api_consensus_info_deposits_cnt_latest", "compiled": true, "compiled_code": "SELECT\n    value\n    ,change_pct\nFROM \n    `dbt`.`fct_consensus_info_latest`\nWHERE\n    label = 'deposits_cnt'", "relation_name": "`dbt`.`api_consensus_info_deposits_cnt_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.496166Z", "completed_at": "2025-08-19T19:27:03.600309Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.623907Z", "completed_at": "2025-08-19T19:27:03.623918Z"}], "thread_id": "Thread-5", "execution_time": 0.2177882194519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_label.dc6cbbebc0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.500658Z", "completed_at": "2025-08-19T19:27:03.601053Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.624809Z", "completed_at": "2025-08-19T19:27:03.624817Z"}], "thread_id": "Thread-9", "execution_time": 0.2180495262145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_clients_daily_metric.7417fc683c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric\nfrom `dbt`.`api_p2p_discv5_clients_daily`\nwhere metric is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.507747Z", "completed_at": "2025-08-19T19:27:03.603834Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.625933Z", "completed_at": "2025-08-19T19:27:03.625941Z"}], "thread_id": "Thread-7", "execution_time": 0.2173748016357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_carbon_emissions", "compiled": true, "compiled_code": "WITH\n\ngnosis_power_consumption AS (\n    SELECT\n        date\n        ,country\n        ,power\n    FROM\n        `dbt`.`int_esg_country_power_consumption`\n),\n\nember_data AS (\n    SELECT\n        \"Date\" AS month_date\n        ,\"Value\" AS value\n        ,lagInFrame(\"Value\") OVER (PARTITION BY \"ISO 3 code\" ORDER BY \"Date\" ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS lag_value\n        ,\"ISO 3 code\" AS country\n    FROM\n        `crawlers_data`.`ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n\n)\n\nSELECT\n    t1.date\n    ,SUM(t1.power * 24)/POWER(10,6) AS energy -- MWh\n    ,SUM(\n        t1.power/POWER(10,3)  -- power in kW\n        * 24 -- hours in day\n        * COALESCE(t3.value,t3.lag_value) -- CIF in gCO2/kWh\n        )/POWER(10,6) AS co2_emissions -- in tCO2e\n    ,AVG(COALESCE(t3.value,t3.lag_value)) AS mean_cif\nFROM\n    gnosis_power_consumption t1\nLEFT JOIN\n    `crawlers_data`.`country_codes` t2\n    ON\n    t2.\"alpha-2\" = t1.country\nINNER JOIN\n    ember_data t3\n    ON\n    t3.country = t2.\"alpha-3\"\n    AND\n    t3.month_date = toStartOfMonth(t1.date)\nGROUP BY \n    1", "relation_name": "`dbt`.`fct_esg_carbon_emissions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.513279Z", "completed_at": "2025-08-19T19:27:03.604493Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.626826Z", "completed_at": "2025-08-19T19:27:03.626834Z"}], "thread_id": "Thread-35", "execution_time": 0.21767783164978027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.fct_esg_power_consumption_top10", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        t1.date\n        ,IF(t1.country='' OR t1.country='Unknown', 'Unknown', t2.name) AS country\n        ,t1.power\n        ,ROW_NUMBER() OVER (PARTITION BY t1.date ORDER BY t1.power DESC) AS rank\n    FROM\n        `dbt`.`int_esg_country_power_consumption` t1\n    LEFT JOIN\n        `crawlers_data`.`country_codes` t2\n        ON\n        t2.\"alpha-2\" = t1.country\n)\n\nSELECT\n    date\n    ,IF(rank>10, 'Other', country) AS country\n    ,SUM(power) AS power\nFROM\n    gnosis_power_consumption\nGROUP BY \n    1, 2", "relation_name": "`dbt`.`fct_esg_power_consumption_top10`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.521961Z", "completed_at": "2025-08-19T19:27:03.605496Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.627728Z", "completed_at": "2025-08-19T19:27:03.627739Z"}], "thread_id": "Thread-15", "execution_time": 0.2172565460205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_country.5f0b1d361e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.517206Z", "completed_at": "2025-08-19T19:27:03.606389Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.628613Z", "completed_at": "2025-08-19T19:27:03.628620Z"}], "thread_id": "Thread-20", "execution_time": 0.2188248634338379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_client.4a35be3114", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.526837Z", "completed_at": "2025-08-19T19:27:03.607011Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.629478Z", "completed_at": "2025-08-19T19:27:03.629489Z"}], "thread_id": "Thread-17", "execution_time": 0.21841120719909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_date.f5adc6ed90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.532870Z", "completed_at": "2025-08-19T19:27:03.607600Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.630372Z", "completed_at": "2025-08-19T19:27:03.630380Z"}], "thread_id": "Thread-14", "execution_time": 0.21867108345031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_int_esg_country_power_consumption_type.979aeea8a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`int_esg_country_power_consumption`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.542025Z", "completed_at": "2025-08-19T19:27:03.608694Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.631208Z", "completed_at": "2025-08-19T19:27:03.631219Z"}], "thread_id": "Thread-16", "execution_time": 0.21829557418823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_fork.285fc1bfce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.537449Z", "completed_at": "2025-08-19T19:27:03.609312Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.632088Z", "completed_at": "2025-08-19T19:27:03.632096Z"}], "thread_id": "Thread-34", "execution_time": 0.21975135803222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_current_fork_daily_date.81d71f6217", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_current_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.546480Z", "completed_at": "2025-08-19T19:27:03.610031Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.632961Z", "completed_at": "2025-08-19T19:27:03.632971Z"}], "thread_id": "Thread-33", "execution_time": 0.21940970420837402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_date.617d796abf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.551014Z", "completed_at": "2025-08-19T19:27:03.610897Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.633846Z", "completed_at": "2025-08-19T19:27:03.633855Z"}], "thread_id": "Thread-4", "execution_time": 0.21970105171203613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_next_fork_daily_fork.6488c6272b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork\nfrom `dbt`.`api_p2p_discv5_next_fork_daily`\nwhere fork is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.555768Z", "completed_at": "2025-08-19T19:27:03.611694Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.634713Z", "completed_at": "2025-08-19T19:27:03.634723Z"}], "thread_id": "Thread-23", "execution_time": 0.21996140480041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_p2p_discv5_forks_daily_date.71a6724bfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_p2p_discv5_forks_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.566133Z", "completed_at": "2025-08-19T19:27:03.612581Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.635585Z", "completed_at": "2025-08-19T19:27:03.635597Z"}], "thread_id": "Thread-22", "execution_time": 0.21408867835998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_neighbor_discovery_id_prefix.fcd761a7f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect neighbor_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere neighbor_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.570821Z", "completed_at": "2025-08-19T19:27:03.613360Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.636461Z", "completed_at": "2025-08-19T19:27:03.636469Z"}], "thread_id": "Thread-19", "execution_time": 0.21419000625610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_peer_discovery_id_prefix.0d3232d2af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.561680Z", "completed_at": "2025-08-19T19:27:03.614089Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.637324Z", "completed_at": "2025-08-19T19:27:03.637336Z"}], "thread_id": "Thread-10", "execution_time": 0.21660590171813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_p2p_discv5_topology_latest_date.eb16694787", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_p2p_discv5_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.576565Z", "completed_at": "2025-08-19T19:27:03.615131Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.638174Z", "completed_at": "2025-08-19T19:27:03.638185Z"}], "thread_id": "Thread-25", "execution_time": 0.21073198318481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_bticker.4eb35e749f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.588248Z", "completed_at": "2025-08-19T19:27:03.617010Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.639182Z", "completed_at": "2025-08-19T19:27:03.639190Z"}], "thread_id": "Thread-12", "execution_time": 0.20976638793945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_api_execution_rwa_backedfi_prices_daily_bticker.accf7541b4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.582125Z", "completed_at": "2025-08-19T19:27:03.618572Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.640380Z", "completed_at": "2025-08-19T19:27:03.640391Z"}], "thread_id": "Thread-21", "execution_time": 0.21158719062805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_api_execution_rwa_backedfi_prices_daily_date.1d033684e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`api_execution_rwa_backedfi_prices_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.663395Z", "completed_at": "2025-08-19T19:27:03.679218Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.681389Z", "completed_at": "2025-08-19T19:27:03.681400Z"}], "thread_id": "Thread-20", "execution_time": 0.03288698196411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_date.6115e7db55", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.653475Z", "completed_at": "2025-08-19T19:27:03.679869Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.682897Z", "completed_at": "2025-08-19T19:27:03.682908Z"}], "thread_id": "Thread-18", "execution_time": 0.03571963310241699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_carbon_emissions_date.cc8d5b1e7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`fct_esg_carbon_emissions`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.658651Z", "completed_at": "2025-08-19T19:27:03.680502Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.684363Z", "completed_at": "2025-08-19T19:27:03.684372Z"}], "thread_id": "Thread-24", "execution_time": 0.03649306297302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_country.5bd56a4d58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.672535Z", "completed_at": "2025-08-19T19:27:03.682243Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.685363Z", "completed_at": "2025-08-19T19:27:03.685371Z"}], "thread_id": "Thread-17", "execution_time": 0.03557729721069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_rank.de32808782", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rank\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere rank is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T19:27:03.668056Z", "completed_at": "2025-08-19T19:27:03.683747Z"}, {"name": "execute", "started_at": "2025-08-19T19:27:03.686363Z", "completed_at": "2025-08-19T19:27:03.686371Z"}], "thread_id": "Thread-29", "execution_time": 0.0371859073638916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_fct_esg_power_consumption_top10_power.ab3e0cdb9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect power\nfrom `dbt`.`fct_esg_power_consumption_top10`\nwhere power is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 7.034548997879028, "args": {"write_json": true, "log_level": "info", "partial_parse": true, "profiles_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "send_anonymous_usage_stats": true, "version_check": true, "empty_catalog": false, "show_resource_report": false, "which": "generate", "strict_mode": false, "favor_state": false, "project_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "select": [], "source_freshness_run_project_hooks": false, "exclude": [], "static_parser": true, "state_modified_compare_more_unrendered_values": false, "indirect_selection": "eager", "require_batched_execution_for_custom_microbatch_strategy": false, "log_format_file": "debug", "static": false, "printer_width": 80, "log_format": "default", "use_colors_file": true, "log_path": "/home/runner/work/dbt-cerebro/dbt-cerebro/logs", "defer": false, "require_explicit_package_overrides_for_builtin_materializations": true, "macro_debugging": false, "skip_nodes_if_on_run_start_fails": false, "partial_parse_file_diff": true, "print": true, "quiet": false, "require_yaml_configuration_for_mf_time_spines": false, "warn_error_options": {"include": [], "exclude": []}, "compile": true, "require_resource_names_without_spaces": false, "vars": {}, "invocation_command": "dbt docs generate", "use_colors": true, "log_file_max_bytes": 10485760, "populate_cache": true, "state_modified_compare_vars": false, "cache_selected_only": false, "log_level_file": "debug", "introspect": true, "require_nested_cumulative_type_params": false}}