{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-08-07T16:15:08.438320Z", "invocation_id": "a08b9c3e-c1e4-4d2d-9af2-99a1d0a9db66", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.054024Z", "completed_at": "2025-08-07T16:15:06.115651Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.182315Z", "completed_at": "2025-08-07T16:15:06.182340Z"}], "thread_id": "Thread-1", "execution_time": 0.15559816360473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.consensus_validators_balances_dist_daily", "compiled": true, "compiled_code": "\n\nSELECT\n    date,\n    q_balance[1] AS q05,\n    q_balance[2] AS q10,\n    q_balance[3] AS q25,\n    q_balance[4] AS q50,\n    q_balance[5] AS q75,\n    q_balance[6] AS q90,\n    q_balance[7] AS q95\nFROM (\n    SELECT\n        toStartOfDay(slot_timestamp) AS date,\n       quantilesTDigest(-- quantilesExactExclusive(\n            0.05, 0.10, 0.25, 0.50, 0.75, 0.90, 0.95\n        )(balance/POWER(10,9)) AS q_balance\n    FROM `consensus`.`validators` FINAL\n    WHERE \n        status = 'active_ongoing'\n        AND\n        slot_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`consensus_validators_balances_dist_daily`\n    )\n  \n\n    GROUP BY date\n)", "relation_name": "`dbt`.`consensus_validators_balances_dist_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.080730Z", "completed_at": "2025-08-07T16:15:06.132543Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.227228Z", "completed_at": "2025-08-07T16:15:06.227244Z"}], "thread_id": "Thread-2", "execution_time": 0.19804143905639648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.consensus_validators_status_daily", "compiled": true, "compiled_code": "\n\n\nSELECT \n    toStartOfDay(slot_timestamp) AS date\n    ,status\n    ,COUNT(*) AS cnt\nFROM `consensus`.`validators` FINAL\nWHERE\n    slot_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(slot_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`consensus_validators_status_daily`\n    )\n  \n\nGROUP BY 1, 2", "relation_name": "`dbt`.`consensus_validators_status_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.092993Z", "completed_at": "2025-08-07T16:15:06.148484Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.270750Z", "completed_at": "2025-08-07T16:15:06.270760Z"}], "thread_id": "Thread-3", "execution_time": 0.23953819274902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_GBCDeposit_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.109129Z", "completed_at": "2025-08-07T16:15:06.181522Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.330741Z", "completed_at": "2025-08-07T16:15:06.330759Z"}], "thread_id": "Thread-4", "execution_time": 0.2958872318267822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_GBCDeposit_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_GBCDeposit_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '0b98057ea310f4d31f2a452b414647007d1645d9'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_GBCDeposit_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.117499Z", "completed_at": "2025-08-07T16:15:06.205523Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.335775Z", "completed_at": "2025-08-07T16:15:06.335786Z"}], "thread_id": "Thread-5", "execution_time": 0.29842400550842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolConfigurator_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolConfigurator_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '7304979ec9e4eaa0273b6a037a31c4e9e5a75d16'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolConfigurator_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.125454Z", "completed_at": "2025-08-07T16:15:06.216412Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.338203Z", "completed_at": "2025-08-07T16:15:06.338212Z"}], "thread_id": "Thread-6", "execution_time": 0.29833388328552246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_aaveV3_PoolInstance_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_aaveV3_PoolInstance_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'b50201558b00496a145fe76f7424749556e326d8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_aaveV3_PoolInstance_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.133753Z", "completed_at": "2025-08-07T16:15:06.240074Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.342910Z", "completed_at": "2025-08-07T16:15:06.342920Z"}], "thread_id": "Thread-7", "execution_time": 0.2993452548980713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_abi", "compiled": true, "compiled_code": "\n\nSELECT \n    '' AS contract_address,          -- The contract address (proxy or regular)\n    '' AS implementation_address,    -- For proxy contracts, the implementation address; NULL for regular/implementation contracts\n    '' AS abi_json,                  -- The ABI JSON\n    '' AS contract_name,             -- Contract name from blockscout\n    '' AS source,                    -- ABI source (e.g., 'blockscout')\n    toDateTime('1970-01-01 00:00:00') AS updated_at  -- Last updated timestamp\nWHERE 0=1", "relation_name": "`dbt`.`contracts_abi`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.139429Z", "completed_at": "2025-08-07T16:15:06.248925Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.346585Z", "completed_at": "2025-08-07T16:15:06.346596Z"}], "thread_id": "Thread-8", "execution_time": 0.3005654811859131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_TSLAx_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '19972d1750f959dd14cf436da6360185bd54cea0'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_TSLAx_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.149096Z", "completed_at": "2025-08-07T16:15:06.277618Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.353876Z", "completed_at": "2025-08-07T16:15:06.353905Z"}], "thread_id": "Thread-9", "execution_time": 0.3030514717102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bC3M_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '83ec02059f686e747392a22ddfed7833ba0d7ce3'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bC3M_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.154936Z", "completed_at": "2025-08-07T16:15:06.288402Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.354950Z", "completed_at": "2025-08-07T16:15:06.354961Z"}], "thread_id": "Thread-10", "execution_time": 0.3028135299682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCOIN_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '69b2d456e8830847f488afdde2a636bfb26218c6'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCOIN_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.162385Z", "completed_at": "2025-08-07T16:15:06.300078Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.358233Z", "completed_at": "2025-08-07T16:15:06.358241Z"}], "thread_id": "Thread-11", "execution_time": 0.2984790802001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bCSPX_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1332d2b4dc83238b621b7f7d0f72fec58bb81a9b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bCSPX_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.168708Z", "completed_at": "2025-08-07T16:15:06.310449Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.360121Z", "completed_at": "2025-08-07T16:15:06.360129Z"}], "thread_id": "Thread-12", "execution_time": 0.29024553298950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bHIGH_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9e8e794ad6ecdb6d5c7eabe059d30e907f58859b'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bHIGH_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.176487Z", "completed_at": "2025-08-07T16:15:06.331744Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.363494Z", "completed_at": "2025-08-07T16:15:06.363502Z"}], "thread_id": "Thread-13", "execution_time": 0.2898392677307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIB01_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '788d911ae7c95121a89a0f0306db65d87422e1de'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIB01_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.183397Z", "completed_at": "2025-08-07T16:15:06.333455Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.366367Z", "completed_at": "2025-08-07T16:15:06.366374Z"}], "thread_id": "Thread-14", "execution_time": 0.2919619083404541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bIBTA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '9f9953d8a2c5366f098754d48f2d69b144ce03da'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bIBTA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.193878Z", "completed_at": "2025-08-07T16:15:06.334332Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.367250Z", "completed_at": "2025-08-07T16:15:06.367258Z"}], "thread_id": "Thread-16", "execution_time": 0.29078173637390137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bNVDA_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '1d3be4d05eba2aa6c4eede85a74f491c31766e64'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bNVDA_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.188480Z", "completed_at": "2025-08-07T16:15:06.335130Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.368132Z", "completed_at": "2025-08-07T16:15:06.368139Z"}], "thread_id": "Thread-15", "execution_time": 0.29300451278686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_backedfi_bMSTR_Oracle_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c8429803dcda7df86822ab173ea285c10bf1eb66'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_backedfi_bMSTR_Oracle_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.200458Z", "completed_at": "2025-08-07T16:15:06.336728Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.369648Z", "completed_at": "2025-08-07T16:15:06.369659Z"}], "thread_id": "Thread-17", "execution_time": 0.2924673557281494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v1_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v1_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = '29b9a7fbb8995b2423a71cc17cf9810798f6c543'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v1_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.206224Z", "completed_at": "2025-08-07T16:15:06.337567Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.370779Z", "completed_at": "2025-08-07T16:15:06.370790Z"}], "thread_id": "Thread-18", "execution_time": 0.2929115295410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_Hub_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_Hub_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'c12c1e50abb450d6205ea2c3fa861b3b834d13e8'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_Hub_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.211386Z", "completed_at": "2025-08-07T16:15:06.339203Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.372411Z", "completed_at": "2025-08-07T16:15:06.372419Z"}], "thread_id": "Thread-19", "execution_time": 0.29341554641723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_circles_v2_NameRegistry_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_circles_v2_NameRegistry_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'a27566fd89162cc3d40cb59c87aaaa49b85f3474'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_circles_v2_NameRegistry_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.217039Z", "completed_at": "2025-08-07T16:15:06.341298Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.374329Z", "completed_at": "2025-08-07T16:15:06.374340Z"}], "thread_id": "Thread-20", "execution_time": 0.2944028377532959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_sdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_sdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'af204776c7245bf4147c2612bf6e5972ee483701'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_sdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.221988Z", "completed_at": "2025-08-07T16:15:06.341905Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.375236Z", "completed_at": "2025-08-07T16:15:06.375244Z"}], "thread_id": "Thread-21", "execution_time": 0.28954553604125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_calls", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nWITH\n  tx AS (\n    SELECT *\n    FROM `execution`.`transactions`\n    WHERE replaceAll(lower(to_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n      \n        AND block_timestamp >\n            (SELECT coalesce(max(block_timestamp), '1970-01-01') FROM `dbt`.`contracts_wxdai_calls`)\n      \n  ),\n  abi AS ( \nSELECT\n    substring(signature,1,8) AS selector,\n    function_name,\n    arrayMap(x -> JSONExtractString(x, 'name'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS names,\n    arrayMap(x -> JSONExtractString(x, 'type'),\n             arraySort(x -> toInt32OrZero(JSONExtractRaw(x, 'position')),\n                       JSONExtractArrayRaw(input_params))) AS types\nFROM `dbt`.`function_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\n  process AS (\n    SELECT\n      t.block_number,\n      t.block_timestamp,\n      t.transaction_hash,\n      t.nonce,\n      t.gas_price,\n      t.value_string AS value,\n      a.function_name,\n      substring(replaceAll(t.input, '0x', ''),1,8) AS call_selector,\n      substring(replaceAll(t.input, '0x', ''),9) AS args_raw_hex,\n      a.names AS param_names,\n      a.types AS param_types,\n\n      -- flags for dynamic params\n      arrayMap(i ->\n        if(\n          param_types[i+1] = 'bytes' OR\n          param_types[i+1] = 'string' OR\n          endsWith(param_types[i+1],'[]') OR\n          (startsWith(param_types[i+1],'bytes') AND param_types[i+1] != 'bytes32'),\n          1,\n          0\n        ),\n        range(length(param_types))\n      ) AS is_dynamic,\n\n      -- decode each param\n      arrayMap(i ->\n        if(i < length(param_types),\n          if(is_dynamic[i+1] = 1,\n            -- dynamic: offset in head + length + data\n            (\n              if(\n                toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64))))) IS NOT NULL\n                AND (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64 < length(args_raw_hex),\n                concat(\n                  '0x',\n                  substring(\n                    args_raw_hex,\n                    1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32+1)*64,\n                    toUInt32(\n                      reinterpretAsUInt256(\n                        reverse(unhex(\n                          substring(\n                            args_raw_hex,\n                            1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(substring(args_raw_hex,1+i*64,64)))))/32)*64,\n                            64\n                          )\n                        ))\n                      )\n                    ) * 2\n                  )\n                ),\n                NULL\n              )\n            ),\n            -- static: bytes32, address, uint\n            if(i*64 < length(args_raw_hex),\n              multiIf(\n                param_types[i+1] = 'bytes32',\n                  concat('0x', substring(args_raw_hex,1+i*64,64)),\n                param_types[i+1] = 'address',\n                  concat('0x', substring(substring(args_raw_hex,1+i*64,64),25,40)),\n                startsWith(param_types[i+1],'uint'),\n                  toString(\n                    reinterpretAsUInt256(\n                      reverse(unhex(substring(args_raw_hex,1+i*64,64)))\n                    )\n                  ),\n                NULL\n              ),\n              NULL\n            )\n          ),\n          NULL\n        ),\n        range(length(param_types))\n      ) AS param_values,\n\n      -- output\n      \n        mapFromArrays(param_names,param_values) AS decoded_input\n      \n    FROM tx AS t\n    ANY LEFT JOIN abi AS a\n      ON substring(replaceAll(t.input,'0x',''),1,8) = a.selector\n  )\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  nonce,\n  gas_price,\n  value,\n  function_name,\n  decoded_input\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_calls`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.237455Z", "completed_at": "2025-08-07T16:15:06.343743Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.376740Z", "completed_at": "2025-08-07T16:15:06.376749Z"}], "thread_id": "Thread-24", "execution_time": 0.28814172744750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_execution_power", "compiled": true, "compiled_code": "WITH execution_power AS (\n    SELECT \n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind']) AS client,\n            arrayJoin([18.6, 17.59, 44.62, 18.6, 17.59, 44.62]) AS mean\n            \n    )\n)\n\nSELECT * FROM execution_power", "relation_name": "`dbt`.`esg_execution_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.228326Z", "completed_at": "2025-08-07T16:15:06.344335Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.377778Z", "completed_at": "2025-08-07T16:15:06.377786Z"}], "thread_id": "Thread-22", "execution_time": 0.29122161865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.contracts_wxdai_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\nlogs AS (\n  SELECT *\n  FROM `execution`.`logs`\n  WHERE replaceAll(lower(address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    \n      AND block_timestamp >\n        (SELECT coalesce(max(block_timestamp),'1970-01-01')\n         FROM `dbt`.`contracts_wxdai_events`)\n    \n),\n\nabi AS ( \nSELECT\n  replace(signature,'0x','')                     AS topic0_sig,\n  event_name,\n  arrayMap(x->JSONExtractString(x,'name'),\n           JSONExtractArrayRaw(params))          AS names,\n  arrayMap(x->JSONExtractString(x,'type'),\n           JSONExtractArrayRaw(params))          AS types,\n  arrayMap(x->JSONExtractBool(x,'indexed'),\n           JSONExtractArrayRaw(params))          AS flags\nFROM `dbt`.`event_signatures`\nWHERE replaceAll(lower(contract_address),'0x','') = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n ),\n\nprocess AS (\n  SELECT\n    l.block_number,\n    l.block_timestamp,\n    l.transaction_hash,\n    l.transaction_index,\n    l.log_index,\n    l.address           AS contract_address,\n    a.event_name,\n\n    -- ABI arrays\n    a.names             AS param_names,\n    a.types             AS param_types,\n    a.flags             AS param_flags,\n    length(a.types)     AS n_params,\n\n    -- topics and data\n    [l.topic1, l.topic2, l.topic3]       AS raw_topics,\n    replaceAll(l.data,'0x','')           AS data_hex,\n\n    -- non-indexed metadata\n    arrayFilter((f,t,i) -> not f,\n      arrayZip(a.flags, a.types, range(n_params))\n    )                                    AS ni_meta,\n\n    arrayMap(x -> x.2, ni_meta)           AS ni_types,\n    arrayMap(x -> x.3, ni_meta)           AS ni_positions,\n\n    -- split data into words for non-indexed params\n    arrayMap(i ->\n      if(i*64 < length(data_hex),\n         substring(data_hex, 1 + i*64, 64),\n         NULL),\n      range(length(ni_types)*10)\n    )                                    AS data_words,\n\n    -- decode non-indexed values head/tail\n    arrayMap(j ->\n      if(\n        -- dynamic types\n        ni_types[j+1] = 'bytes'\n        OR ni_types[j+1] = 'string'\n        OR endsWith(ni_types[j+1],'[]')\n        OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'),\n\n        -- dynamic: extract offset, length, and data chunk\n        (\n          if(\n            toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) IS NOT NULL\n            AND (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64 < length(data_hex),\n            \n            -- Extract the raw hex data first\n            substring(\n              data_hex,\n              1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32 + 1) * 64,\n              toUInt32(\n                reinterpretAsUInt256(\n                  reverse(unhex(\n                    substring(\n                      data_hex,\n                      1 + (toUInt32(reinterpretAsUInt256(reverse(unhex(data_words[j+1])))) / 32) * 64,\n                      64\n                    )\n                  ))\n                )\n              ) * 2\n            ),\n            NULL\n          )\n        ),\n\n        -- static types: bytes32, address, uint\n        (\n          if(\n            data_words[j+1] IS NOT NULL,\n            multiIf(\n              ni_types[j+1] = 'bytes32',\n                concat('0x', data_words[j+1]),\n\n              ni_types[j+1] = 'address',\n                concat(\n                  '0x',\n                  substring(data_words[j+1], 25, 40)\n                ),\n\n              startsWith(ni_types[j+1],'uint') OR startsWith(ni_types[j+1],'int'),\n                toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(data_words[j+1]))\n                  )\n                ),\n\n              NULL\n            ),\n            NULL\n          )\n        )\n      ),\n      range(length(ni_types))\n    ) AS raw_decoded_values,\n\n    -- Convert string types from hex to text\n    arrayMap(j ->\n      if(\n        ni_types[j+1] = 'string' AND raw_decoded_values[j+1] IS NOT NULL,\n        -- Convert hex to UTF-8 string, removing null bytes\n        replaceRegexpAll(\n          reinterpretAsString(unhex(raw_decoded_values[j+1])),\n          '\\0',\n          ''\n        ),\n        -- For non-string types, keep the original value but add 0x prefix for bytes\n        if(\n          (ni_types[j+1] = 'bytes' OR (startsWith(ni_types[j+1],'bytes') AND ni_types[j+1] != 'bytes32'))\n          AND raw_decoded_values[j+1] IS NOT NULL,\n          concat('0x', raw_decoded_values[j+1]),\n          raw_decoded_values[j+1]\n        )\n      ),\n      range(length(ni_types))\n    ) AS decoded_ni_values,\n\n    -- stitch back into full order\n    arrayMap(i ->\n      if(\n        param_flags[i+1],\n        -- indexed: decode topic value\n        multiIf(\n          param_types[i+1] = 'address',\n          concat(\n            '0x',\n            substring(\n              replaceAll(raw_topics[i+1],'0x',''),\n              25,\n              40\n            )\n          ),\n          startsWith(param_types[i+1],'uint') OR startsWith(param_types[i+1],'int'),\n          toString(\n                  reinterpretAsUInt256(\n                    reverse(unhex(raw_topics[i+1]))\n                  )\n                ),\n          concat('0x', substring(replaceAll(raw_topics[i+1],'0x',''),1,64))\n        ),\n\n        -- non-indexed: pick correct decoded value\n        decoded_ni_values[\n          indexOf(ni_positions, i)\n        ]\n      ),\n      range(n_params)\n    ) AS param_values,\n\n    -- final JSON or map\n    \n      mapFromArrays(param_names, param_values) AS decoded_params\n    \n\n  FROM logs AS l\n  ANY LEFT JOIN abi AS a\n    ON replaceAll(l.topic0,'0x','') = a.topic0_sig\n)\n\nSELECT\n  block_number,\n  block_timestamp,\n  transaction_hash,\n  transaction_index,\n  log_index,\n  contract_address,\n  event_name,\n  decoded_params\nFROM process\n", "relation_name": "`dbt`.`contracts_wxdai_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.234788Z", "completed_at": "2025-08-07T16:15:06.344949Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.378664Z", "completed_at": "2025-08-07T16:15:06.378674Z"}], "thread_id": "Thread-23", "execution_time": 0.290755033493042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_consensus_power", "compiled": true, "compiled_code": "WITH consensus_power AS (\n    SELECT\n        type,\n        client,\n        mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]) AS type,\n            arrayJoin(['Lighthouse', 'Lighthouse', 'Lighthouse', 'Teku', 'Teku', 'Teku', 'Lodestar', 'Lodestar', 'Lodestar', 'Nimbus', 'Nimbus', 'Nimbus', 'Prysm', 'Prysm', 'Prysm']) AS client,\n            arrayJoin([2.75, 3.14, 18.84, 3.71, 3.32, 27.46, 3.14, 3.89, 33.55, 1.67, 2.08, 17.11, 3.51, 2.87, 24.33]) AS mean\n    )\n)\n\nSELECT * FROM consensus_power", "relation_name": "`dbt`.`esg_consensus_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.243610Z", "completed_at": "2025-08-07T16:15:06.345938Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.379582Z", "completed_at": "2025-08-07T16:15:06.379593Z"}], "thread_id": "Thread-26", "execution_time": 0.28883862495422363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_idle_electric_power", "compiled": true, "compiled_code": "WITH idle_electric_power AS (\n    SELECT \n        type\n        ,mean\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([3.66, 25.04, 78.17]) AS mean\n    )\n)\n\nSELECT * FROM idle_electric_power", "relation_name": "`dbt`.`esg_idle_electric_power`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.240838Z", "completed_at": "2025-08-07T16:15:06.347444Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.381221Z", "completed_at": "2025-08-07T16:15:06.381232Z"}], "thread_id": "Thread-25", "execution_time": 0.29190874099731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_hardware_config", "compiled": true, "compiled_code": "WITH hardware_config AS (\n    SELECT\n        type\n        ,cpu\n        ,cores_threads\n        ,architecture\n        ,ram\n        ,storage\n        ,gpu\n        ,psu\n        ,\"case\"\n        ,os\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin(['Intel i5-1135G7', 'Intel i5-10400', 'AMD 3970X']) AS cpu,\n            arrayJoin(['4/8', '6/12', '32/64']) AS cores_threads,\n            arrayJoin(['x86/x64', 'x86/x64', 'x86/x64']) AS architecture,\n            arrayJoin(['16 GB', '64 GB', '256 GB']) AS ram,\n            arrayJoin(['2 TB SSD', '2TB SSD', '2TB SSD']) AS storage,\n            arrayJoin(['Onboard', 'Onboard', 'AM 6970']) AS gpu,\n            arrayJoin(['65 Watt', '650 Watt', '1000 Watt']) AS psu,\n            arrayJoin(['Integrated', 'Custom', 'Custom']) AS \"case\",\n            arrayJoin(['Ubuntu 20.04', 'Ubuntu 21', 'Ubuntu 20.04']) AS os\n    )\n)\n\nSELECT * FROM hardware_config", "relation_name": "`dbt`.`esg_hardware_config`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.246290Z", "completed_at": "2025-08-07T16:15:06.348299Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.382262Z", "completed_at": "2025-08-07T16:15:06.382269Z"}], "thread_id": "Thread-27", "execution_time": 0.29079461097717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_node_distribution", "compiled": true, "compiled_code": "WITH node_distribution AS (\n    SELECT \n        type\n        ,distribution\n    FROM (\n        SELECT\n            arrayJoin([4, 5, 6]) AS type,\n            arrayJoin([0.25, 0.50, 0.25]) AS distribution\n    )\n)\n\nSELECT * FROM node_distribution", "relation_name": "`dbt`.`esg_node_distribution`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.249696Z", "completed_at": "2025-08-07T16:15:06.349418Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.383164Z", "completed_at": "2025-08-07T16:15:06.383172Z"}], "thread_id": "Thread-28", "execution_time": 0.2909865379333496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_production", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nblocks_extra_data AS (\n    SELECT \n        block_timestamp\n        ,extra_data\n    FROM \n        `execution`.`blocks`\n    WHERE \n        block_timestamp > '1970-01-01' -- remove genesis\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`execution_blocks_production`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM blocks_extra_data\nWHERE block_timestamp < today()", "relation_name": "`dbt`.`execution_blocks_production`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.255649Z", "completed_at": "2025-08-07T16:15:06.351281Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.384673Z", "completed_at": "2025-08-07T16:15:06.384681Z"}], "thread_id": "Thread-29", "execution_time": 0.28651857376098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_size_diff_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nstate_size_diff AS (\n    SELECT \n        address\n        ,toStartOfDay(block_timestamp) AS date \n        ,SUM(IF(to_value!='0x0000000000000000000000000000000000000000000000000000000000000000',32,-32)) AS bytes_diff\n    FROM \n        `execution`.`storage_diffs`\n    WHERE\n        block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`execution_state_size_diff_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    *\nFROM state_size_diff", "relation_name": "`dbt`.`execution_state_size_diff_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.265341Z", "completed_at": "2025-08-07T16:15:06.351959Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.385553Z", "completed_at": "2025-08-07T16:15:06.385563Z"}], "thread_id": "Thread-31", "execution_time": 0.2859487533569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_discv4_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\n  peers AS (\n    SELECT \n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors\n  FROM `nebula_discv4`.`visits` A\n  WHERE\n      visit_ended_at < today()\n      AND\n      toString(peer_properties.network_id) = '100'\n      \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_discv4_peers_info`\n    )\n  \n\n  ),\n\n  parsed AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      -- break into slash-delimited parts\n      splitByChar('/', agent_version)                        AS slash_parts,\n      length(slash_parts)                                    AS sp_len,\n\n      -- if 4+ parts, take last two as platform+runtime; otherwise only platform\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len-1),\n        arrayElement(slash_parts, sp_len)\n      )                                                       AS platform,\n\n      IF(\n        length(slash_parts) > 3,\n        arrayElement(slash_parts, sp_len),\n        ''\n      )                                                       AS runtime,\n\n      -- head_parts = everything before the last 1 or 2 elements\n      arraySlice(\n        slash_parts,\n        1,\n        sp_len - IF(sp_len > 3, 2, 1)\n      )                                                       AS head_parts\n\n    FROM peers\n  ),\n\n  exploded AS (\n    SELECT\n      visit_ended_at,\n      peer_id,\n      agent_version,\n      peer_properties,\n      crawl_error,\n      dial_errors,\n      head_parts[1]                                          AS client,\n\n      -- if head_parts has 3 elements, the middle is variant\n      IF(\n        length(head_parts) = 3,\n        head_parts[2],\n        ''\n      )                                                       AS variant,\n\n      -- the last element of head_parts is our raw \u201cver_blob\u201d\n      arrayElement(head_parts, length(head_parts))            AS ver_blob,\n\n      platform,\n      runtime,\n\n      -- split out \u201c+\u201d-style metadata\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 1), ver_blob) AS pre_blob,\n      IF(ver_blob LIKE '%+%', arrayElement(splitByChar('+', ver_blob), 2), '')        AS plus_build\n\n    FROM parsed\n  )\n\nSELECT\n  visit_ended_at,\n  peer_id,\n  agent_version,\n  peer_properties,\n  crawl_error,\n  dial_errors,\n  client,\n  variant,\n\n  -- version: drop +build, then drop any \u201c-channel\u201d suffix\n  IF(\n    plus_build != '',\n    arrayElement(splitByChar('-', pre_blob), 1),\n    splitByChar('-', ver_blob)[1]\n  )                                                       AS version,\n\n  -- channel: from pre_blob if +build present, else only when exactly three dash-segments\n  IF(\n    plus_build != '',\n    IF(\n      length(splitByChar('-', pre_blob)) >= 2,\n      arrayElement(splitByChar('-', pre_blob), 2),\n      ''\n    ),\n    IF(\n      length(splitByChar('-', ver_blob)) = 3,\n      arrayElement(splitByChar('-', ver_blob), 2),\n      ''\n    )\n  )                                                       AS channel,\n\n  -- build: +metadata if present, otherwise last dash-segment\n  IF(\n    plus_build != '',\n    plus_build,\n    IF(\n      length(splitByChar('-', ver_blob)) > 1,\n      arrayElement(splitByChar('-', ver_blob), -1),\n      ''\n    )\n  )                                                       AS build,\n\n  platform,\n  runtime\n\nFROM exploded", "relation_name": "`dbt`.`p2p_discv4_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.260357Z", "completed_at": "2025-08-07T16:15:06.352613Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.386453Z", "completed_at": "2025-08-07T16:15:06.386461Z"}], "thread_id": "Thread-30", "execution_time": 0.287553071975708, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_txs_info_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    toStartOfDay(block_timestamp) AS date\n    ,toString(transaction_type) AS transaction_type\n    ,success\n    ,COUNT(*) AS n_txs\n    ,SUM(COALESCE(gas_used,0)) AS gas_used\n    ,CAST(AVG(COALESCE(gas_price,0)) AS Int32) AS gas_price_avg\n    ,CAST(median(COALESCE(gas_price,0)) AS Int32) AS gas_price_median\nFROM `execution`.`transactions`\nWHERE block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_txs_info_daily`\n    )\n  \n\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`execution_txs_info_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.271836Z", "completed_at": "2025-08-07T16:15:06.353258Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.387336Z", "completed_at": "2025-08-07T16:15:06.387347Z"}], "thread_id": "Thread-32", "execution_time": 0.28637099266052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_discv5_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\n-- Known fork digests \u2192 names\nfork_digests AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_digest,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0xbc9a6864','Phase0'),\n      ('0x56fdb5e0','Altair'),\n      ('0x824be431','Bellatrix'),\n      ('0x21a6f836','Capella'),\n      ('0x3ebfd484','Deneb'),\n      ('0x7d5aab40','Electra'),\n      ('0xf9ab5f85','Fulu')\n    ]) AS tup\n  )\n),\n\n-- Known fork versions \u2192 names\nfork_version AS (\n  SELECT \n    tupleElement(tup, 1) AS fork_version,\n    tupleElement(tup, 2) AS cl_fork_name\n  FROM (\n    SELECT arrayJoin([\n      ('0x00000064','Phase0'),\n      ('0x01000064','Altair'),\n      ('0x02000064','Bellatrix'),\n      ('0x03000064','Capella'),\n      ('0x04000064','Deneb'),\n      ('0x05000064','Electra'),\n      ('0x06000064','Fulu')\n    ]) AS tup\n  )\n),\n\n/* Pull only relevant rows from source and normalize Dynamic\u2192String once */\npeers AS (\n  SELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n\n    -- Dynamic JSON leaves \u2192 String for safe joins/filters\n    toString(t1.peer_properties.fork_digest)         AS fork_digest,\n    toString(t1.peer_properties.next_fork_version)   AS next_fork_version,\n\n    -- Map to fork names\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name, toString(t1.peer_properties.next_fork_version))\n                                                    AS cl_next_fork_name,\n\n    t1.agent_version,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\n  FROM `nebula`.`visits` AS t1\n  LEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\n  LEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\n  WHERE\n    t1.visit_ended_at < today()\n    AND (\n      toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n      OR toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_discv5_peers_info`\n    )\n  \n\n),\n\n/* Split and locate version token via regex */\nparsed AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n\n    splitByChar('/', agent_version)                                         AS parts,\n    length(splitByChar('/', agent_version))                                 AS parts_len,\n    arraySlice(splitByChar('/', agent_version), 2)                         AS tail,\n    length(arraySlice(splitByChar('/', agent_version), 2))                 AS tail_len,\n\n    splitByChar('/', agent_version)[1]                                     AS client,\n\n    -- first tail index that looks like a version (v?digits(.digits){0,3}\u2026)\n    arrayFirstIndex(x ->\n        (substring(x, 1, 1) = 'v' OR match(x, '^[0-9]')) AND\n        match(x, '^v?[0-9]+(\\\\.[0-9]+){0,3}([\\\\-\\\\w\\\\.\\\\+]+)?$')\n      , arraySlice(splitByChar('/', agent_version), 2))                    AS ver_idx_tail\n  FROM peers\n),\n\n/* Derive variant, version blob, platform, runtime */\nwith_parts AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    agent_version,\n    parts,\n    parts_len,\n    tail,\n    tail_len,\n    client,\n    ver_idx_tail,\n\n    /* variant: exactly one token between client and version */\n    IF(ver_idx_tail > 1, tail[1], '')                                       AS variant,\n\n    /* raw version token (may include '-' channel and/or '+' build) */\n    IF(ver_idx_tail > 0, tail[ver_idx_tail], '')                            AS ver_blob,\n\n    /* tokens after version for platform/runtime */\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 1, tail[ver_idx_tail + 1], '')\n      AS platform,\n    IF(ver_idx_tail > 0 AND tail_len >= ver_idx_tail + 2, tail[ver_idx_tail + 2], '')\n      AS runtime\n  FROM parsed\n),\n\n/* Split version blob and prep hyphen parts; also clean runtime */\nexploded AS (\n  SELECT\n    visit_ended_at,\n    peer_id,\n    agent_version,\n    fork_digest,\n    next_fork_version,\n    cl_fork_name,\n    cl_next_fork_name,\n    peer_properties,\n    crawl_error,\n    dial_errors,\n    client,\n    variant,\n    ver_blob,\n\n    -- strip leading '-' in runtime\n    replaceRegexpOne(runtime, '^-+', '')                                    AS runtime,\n    platform,\n\n    /* version blob split around '+' */\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob) AS pre_blob,\n    IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[2], '')       AS plus_build,\n\n    /* hyphen parts for channel/build logic (work off pre_blob) */\n    splitByChar('-', IF(position(ver_blob, '+') > 0, splitByChar('+', ver_blob)[1], ver_blob))\n                                                                            AS hy_parts\n  FROM with_parts\n)\n\nSELECT\n  visit_ended_at,\n  peer_id,\n  agent_version,\n\n  fork_digest,\n  cl_fork_name,\n  cl_next_fork_name,\n  next_fork_version,\n\n  peer_properties,\n  crawl_error,\n  dial_errors,\n  client,\n  variant,\n\n  -- version: first hyphen piece if present\n  IF(length(hy_parts) >= 1, hy_parts[1], '')                                AS version,\n\n  -- channel: ONLY when there are 3+ hyphen pieces (e.g., vX-Y-Z)\n  IF(length(hy_parts) >= 3, hy_parts[2], '')                                 AS channel,\n\n  -- build: '+' suffix if present, else last hyphen piece when there are \u22652\n  IF(\n    plus_build != '',\n    plus_build,\n    IF(length(hy_parts) >= 2, hy_parts[length(hy_parts)], '')\n  )                                                                          AS build,\n\n  platform,\n  runtime\nFROM exploded", "relation_name": "`dbt`.`p2p_discv5_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.278343Z", "completed_at": "2025-08-07T16:15:06.356234Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.389687Z", "completed_at": "2025-08-07T16:15:06.389695Z"}], "thread_id": "Thread-33", "execution_time": 0.2874107360839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_info", "compiled": true, "compiled_code": "\n\nWITH\n\nfork_digests AS (\n    SELECT \n        tupleElement(tup, 1) AS fork_digest,\n        tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n        SELECT arrayJoin([\n            ('0xbc9a6864','Phase0'),\n            ('0x56fdb5e0','Altair'),\n            ('0x824be431','Bellatrix'),\n            ('0x21a6f836','Capella'),\n            ('0x3ebfd484','Deneb'),\n            ('0x7d5aab40','Electra'),\n            ('0xf9ab5f85','Fulu')\n        ]) AS tup\n    )\n),\n\nfork_version AS (\n    SELECT \n        tupleElement(tup, 1) AS fork_version,\n        tupleElement(tup, 2) AS cl_fork_name\n    FROM (\n        SELECT arrayJoin([\n            ('0x00000064','Phase0'),\n            ('0x01000064','Altair'),\n            ('0x02000064','Bellatrix'),\n            ('0x03000064','Capella'),\n            ('0x04000064','Deneb'),\n            ('0x05000064','Electra'),\n            ('0x06000064','Fulu')\n        ]) AS tup\n    )\n)\n\n\nSELECT \n    t1.visit_ended_at,\n    t1.peer_id,\n    t1.agent_version,\n    toString(t1.peer_properties.fork_digest)        AS fork_digest,\n    t2.cl_fork_name                                  AS cl_fork_name,\n    coalesce(t3.cl_fork_name,\n                toString(t1.peer_properties.next_fork_version)) AS cl_next_fork_name,\n    t1.peer_properties,\n    t1.crawl_error,\n    t1.dial_errors\nFROM `nebula`.`visits` AS t1\nLEFT JOIN fork_digests t2\n    ON toString(t1.peer_properties.fork_digest) = t2.fork_digest\nLEFT JOIN fork_version t3\n    ON toString(t1.peer_properties.next_fork_version) = t3.fork_version\nWHERE\n    t1.visit_ended_at < today()\n    AND\n    (\n        toString(t1.peer_properties.fork_digest) IN (SELECT fork_digest FROM fork_digests)\n        OR\n        toString(t1.peer_properties.next_fork_version) LIKE '%064'\n    )\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(visit_ended_at))\n      FROM `dbt`.`p2p_peers_info`\n    )\n  \n", "relation_name": "`dbt`.`p2p_peers_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.283615Z", "completed_at": "2025-08-07T16:15:06.356915Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.390681Z", "completed_at": "2025-08-07T16:15:06.390691Z"}], "thread_id": "Thread-34", "execution_time": 0.2876744270324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_cloud_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_cloud AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,cloud_provider AS cloud\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_cloud_provider_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_cloud_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_cloud \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_cloud_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.290350Z", "completed_at": "2025-08-07T16:15:06.357524Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.391714Z", "completed_at": "2025-08-07T16:15:06.391724Z"}], "thread_id": "Thread-35", "execution_time": 0.2872025966644287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_country_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_country AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,country\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_countries_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_country_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_country \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_country_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.295208Z", "completed_at": "2025-08-07T16:15:06.359154Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.393393Z", "completed_at": "2025-08-07T16:15:06.393403Z"}], "thread_id": "Thread-36", "execution_time": 0.2881143093109131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,any_value(toInt32(floor(__total))) AS value\n    FROM \n        `crawlers_data`.`probelab_agent_semvers_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_daily`\n    )\n  \n\n    GROUP BY\n        1, 2\n)\n\nSELECT\n    *\nFROM probelab_agent \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.300813Z", "completed_at": "2025-08-07T16:15:06.360987Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.395008Z", "completed_at": "2025-08-07T16:15:06.395016Z"}], "thread_id": "Thread-37", "execution_time": 0.28833699226379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_quic_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_quic AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,quic_support AS quic\n        ,__count AS value\n    FROM \n        `crawlers_data`.`probelab_quic_support_over_7d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_quic_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_quic \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_quic_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.305667Z", "completed_at": "2025-08-07T16:15:06.361570Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.396013Z", "completed_at": "2025-08-07T16:15:06.396020Z"}], "thread_id": "Thread-38", "execution_time": 0.2885894775390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.probelab_peers_clients_version_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\n\nprobelab_agent_version AS (\n    SELECT \n        toStartOfDay(max_crawl_created_at) AS date\n        ,agent_version_type AS client\n        ,agent_version_semver_str AS version\n        ,toInt32(floor(__count)) AS value\n    FROM \n        `crawlers_data`.`probelab_agent_semvers_avg_1d` \n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(max_crawl_created_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`probelab_peers_clients_version_daily`\n    )\n  \n\n)\n\nSELECT\n    *\nFROM probelab_agent_version \nWHERE date < today()", "relation_name": "`dbt`.`probelab_peers_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.311309Z", "completed_at": "2025-08-07T16:15:06.364500Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.398398Z", "completed_at": "2025-08-07T16:15:06.398406Z"}], "thread_id": "Thread-39", "execution_time": 0.2902200222015381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.transfers_erc20_bluechips", "compiled": true, "compiled_code": "\n\n\nSELECT\n    block_number\n    ,block_timestamp\n    ,transaction_index\n    ,log_index\n    ,transaction_hash\n    ,address AS token_address\n    ,concat('0x',substring(topic1,25,40)) AS \"from\"\n    ,concat('0x',substring(topic2,25,40) ) AS \"to\"\n    ,toString(\n        reinterpretAsUInt256(\n            reverse(unhex(data))\n        )\n    ) AS \"value\"\nFROM `execution`.`logs`\nWHERE\n    topic0 = 'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND address = 'e91d153e0b41518a2ce8dd3d7944fa863463a97d'\n    AND block_timestamp < today()\n    \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(block_timestamp))\n      FROM `dbt`.`transfers_erc20_bluechips`\n    )\n  \n", "relation_name": "`dbt`.`transfers_erc20_bluechips`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.317424Z", "completed_at": "2025-08-07T16:15:06.365743Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.400050Z", "completed_at": "2025-08-07T16:15:06.400058Z"}], "thread_id": "Thread-40", "execution_time": 0.28589344024658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_contract_abis_abi_json.455012a6a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect abi_json\nfrom `dbt`.`contract_abis`\nwhere abi_json is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.429521Z", "completed_at": "2025-08-07T16:15:06.474063Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.536486Z", "completed_at": "2025-08-07T16:15:06.536497Z"}], "thread_id": "Thread-1", "execution_time": 0.17145752906799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_contract_abis_contract_address.b603d52605", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contract_abis`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.440937Z", "completed_at": "2025-08-07T16:15:06.488120Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.574873Z", "completed_at": "2025-08-07T16:15:06.574902Z"}], "thread_id": "Thread-2", "execution_time": 0.20133614540100098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_contract_address.21e1331121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`event_signatures`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.453793Z", "completed_at": "2025-08-07T16:15:06.504550Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.619542Z", "completed_at": "2025-08-07T16:15:06.619557Z"}], "thread_id": "Thread-3", "execution_time": 0.23563289642333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_event_name.8114fcab41", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`event_signatures`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.467279Z", "completed_at": "2025-08-07T16:15:06.534656Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.666713Z", "completed_at": "2025-08-07T16:15:06.666729Z"}], "thread_id": "Thread-4", "execution_time": 0.2699770927429199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_event_signatures_signature.f84f3d98c3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect signature\nfrom `dbt`.`event_signatures`\nwhere signature is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.476427Z", "completed_at": "2025-08-07T16:15:06.558404Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.679506Z", "completed_at": "2025-08-07T16:15:06.679515Z"}], "thread_id": "Thread-5", "execution_time": 0.2763028144836426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_contract_address.b86e96ce0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`function_signatures`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.482214Z", "completed_at": "2025-08-07T16:15:06.569904Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.682343Z", "completed_at": "2025-08-07T16:15:06.682350Z"}], "thread_id": "Thread-6", "execution_time": 0.276975154876709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_function_name.18d9874c92", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect function_name\nfrom `dbt`.`function_signatures`\nwhere function_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.489301Z", "completed_at": "2025-08-07T16:15:06.584847Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.686785Z", "completed_at": "2025-08-07T16:15:06.686795Z"}], "thread_id": "Thread-7", "execution_time": 0.2776367664337158, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.source_not_null_raw_abi_function_signatures_signature.e4fc7e2bd5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect signature\nfrom `dbt`.`function_signatures`\nwhere signature is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.496353Z", "completed_at": "2025-08-07T16:15:06.614252Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.692333Z", "completed_at": "2025-08-07T16:15:06.692341Z"}], "thread_id": "Thread-8", "execution_time": 0.2791624069213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_balances_dist_daily_date.baed9cb968", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`consensus_validators_balances_dist_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.506954Z", "completed_at": "2025-08-07T16:15:06.640053Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.697818Z", "completed_at": "2025-08-07T16:15:06.697828Z"}], "thread_id": "Thread-9", "execution_time": 0.27783656120300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_status_daily_date.b14f3879d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`consensus_validators_status_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.511382Z", "completed_at": "2025-08-07T16:15:06.645187Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.699572Z", "completed_at": "2025-08-07T16:15:06.699580Z"}], "thread_id": "Thread-10", "execution_time": 0.27881908416748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_consensus_validators_status_daily_status.f3af3b6c57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom `dbt`.`consensus_validators_status_daily`\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.523209Z", "completed_at": "2025-08-07T16:15:06.660841Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.702831Z", "completed_at": "2025-08-07T16:15:06.702839Z"}], "thread_id": "Thread-12", "execution_time": 0.2775735855102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_timestamp.427c640d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.518190Z", "completed_at": "2025-08-07T16:15:06.661565Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.704917Z", "completed_at": "2025-08-07T16:15:06.704925Z"}], "thread_id": "Thread-11", "execution_time": 0.28107428550720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_block_number.1cc2a2f157", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.529040Z", "completed_at": "2025-08-07T16:15:06.672279Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.707300Z", "completed_at": "2025-08-07T16:15:06.707307Z"}], "thread_id": "Thread-13", "execution_time": 0.27915239334106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_contract_address.148f14d659", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.537433Z", "completed_at": "2025-08-07T16:15:06.678820Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.710152Z", "completed_at": "2025-08-07T16:15:06.710159Z"}], "thread_id": "Thread-14", "execution_time": 0.2743051052093506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_hash.f28d1a031d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.553762Z", "completed_at": "2025-08-07T16:15:06.680537Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.711692Z", "completed_at": "2025-08-07T16:15:06.711700Z"}], "thread_id": "Thread-17", "execution_time": 0.27335095405578613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_block_number.23f3105fa1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.546407Z", "completed_at": "2025-08-07T16:15:06.681538Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.712581Z", "completed_at": "2025-08-07T16:15:06.712589Z"}], "thread_id": "Thread-15", "execution_time": 0.2754542827606201, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_calls_transaction_hash.c886f64cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.559187Z", "completed_at": "2025-08-07T16:15:06.683201Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.714189Z", "completed_at": "2025-08-07T16:15:06.714197Z"}], "thread_id": "Thread-18", "execution_time": 0.275221586227417, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_deposit_timestamp.b721cec124", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_timestamp\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere deposit_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.564035Z", "completed_at": "2025-08-07T16:15:06.683730Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.715077Z", "completed_at": "2025-08-07T16:15:06.715087Z"}], "thread_id": "Thread-19", "execution_time": 0.2748758792877197, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_log_index.548a0d340c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.541848Z", "completed_at": "2025-08-07T16:15:06.684322Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.715964Z", "completed_at": "2025-08-07T16:15:06.715971Z"}], "thread_id": "Thread-16", "execution_time": 0.2796499729156494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_calls_transaction_index.c9756ce89e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_GBCDeposit_calls`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.575793Z", "completed_at": "2025-08-07T16:15:06.686115Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.717643Z", "completed_at": "2025-08-07T16:15:06.717652Z"}], "thread_id": "Thread-21", "execution_time": 0.27143359184265137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_GBCDeposit_events_transaction_hash.162d1b026f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.570468Z", "completed_at": "2025-08-07T16:15:06.687648Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.719243Z", "completed_at": "2025-08-07T16:15:06.719251Z"}], "thread_id": "Thread-20", "execution_time": 0.2736928462982178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_GBCDeposit_events_transaction_hash.fdd9d805b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_GBCDeposit_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.585644Z", "completed_at": "2025-08-07T16:15:06.688899Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.720115Z", "completed_at": "2025-08-07T16:15:06.720122Z"}], "thread_id": "Thread-22", "execution_time": 0.2720763683319092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_number.821bbe2661", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.596150Z", "completed_at": "2025-08-07T16:15:06.689488Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.721000Z", "completed_at": "2025-08-07T16:15:06.721010Z"}], "thread_id": "Thread-26", "execution_time": 0.27173352241516113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_event_name.821449d8bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere event_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.590118Z", "completed_at": "2025-08-07T16:15:06.690091Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.721860Z", "completed_at": "2025-08-07T16:15:06.721867Z"}], "thread_id": "Thread-23", "execution_time": 0.2732384204864502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_block_timestamp.d03f151257", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.580332Z", "completed_at": "2025-08-07T16:15:06.690630Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.722738Z", "completed_at": "2025-08-07T16:15:06.722748Z"}], "thread_id": "Thread-24", "execution_time": 0.2753281593322754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_address.956a512fec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.600728Z", "completed_at": "2025-08-07T16:15:06.691615Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.723624Z", "completed_at": "2025-08-07T16:15:06.723632Z"}], "thread_id": "Thread-25", "execution_time": 0.27184534072875977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolConfigurator_events_transaction_hash.e2fc28195f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolConfigurator_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.605431Z", "completed_at": "2025-08-07T16:15:06.693202Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.725199Z", "completed_at": "2025-08-07T16:15:06.725209Z"}], "thread_id": "Thread-27", "execution_time": 0.2727780342102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_number.772cd91469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.609916Z", "completed_at": "2025-08-07T16:15:06.694609Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.726708Z", "completed_at": "2025-08-07T16:15:06.726718Z"}], "thread_id": "Thread-28", "execution_time": 0.2736203670501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_block_timestamp.28ab9881a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.614960Z", "completed_at": "2025-08-07T16:15:06.695786Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.727593Z", "completed_at": "2025-08-07T16:15:06.727601Z"}], "thread_id": "Thread-29", "execution_time": 0.2692272663116455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_contract_address.5e413fb6b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.620677Z", "completed_at": "2025-08-07T16:15:06.696486Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.728483Z", "completed_at": "2025-08-07T16:15:06.728493Z"}], "thread_id": "Thread-31", "execution_time": 0.2694551944732666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_log_index.165bf735c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.626338Z", "completed_at": "2025-08-07T16:15:06.697071Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.729371Z", "completed_at": "2025-08-07T16:15:06.729378Z"}], "thread_id": "Thread-30", "execution_time": 0.26970672607421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_aaveV3_PoolInstance_events_transaction_hash.4b872e6755", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_aaveV3_PoolInstance_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.630760Z", "completed_at": "2025-08-07T16:15:06.698761Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.730937Z", "completed_at": "2025-08-07T16:15:06.730944Z"}], "thread_id": "Thread-32", "execution_time": 0.2706332206726074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_abi_contract_address.babd7f8846", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_abi`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.640872Z", "completed_at": "2025-08-07T16:15:06.700500Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.732457Z", "completed_at": "2025-08-07T16:15:06.732464Z"}], "thread_id": "Thread-34", "execution_time": 0.26972389221191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_abi_contract_address.63d4e73e50", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contract_address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_abi`\nwhere contract_address is not null\ngroup by contract_address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.635649Z", "completed_at": "2025-08-07T16:15:06.701224Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.733326Z", "completed_at": "2025-08-07T16:15:06.733336Z"}], "thread_id": "Thread-33", "execution_time": 0.2712116241455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_abi_updated_at.86925d1b72", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom `dbt`.`contracts_abi`\nwhere updated_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.645916Z", "completed_at": "2025-08-07T16:15:06.702190Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.734206Z", "completed_at": "2025-08-07T16:15:06.734214Z"}], "thread_id": "Thread-35", "execution_time": 0.2708408832550049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_address.d9ca4947e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.651807Z", "completed_at": "2025-08-07T16:15:06.703742Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.735725Z", "completed_at": "2025-08-07T16:15:06.735733Z"}], "thread_id": "Thread-36", "execution_time": 0.27114200592041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_number.3e4faff869", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.656487Z", "completed_at": "2025-08-07T16:15:06.704305Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.736593Z", "completed_at": "2025-08-07T16:15:06.736602Z"}], "thread_id": "Thread-37", "execution_time": 0.27074694633483887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_block_timestamp.9aee384fb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.662202Z", "completed_at": "2025-08-07T16:15:06.706592Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.738797Z", "completed_at": "2025-08-07T16:15:06.738804Z"}], "thread_id": "Thread-38", "execution_time": 0.27226758003234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_log_index.edcd08f3d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.667672Z", "completed_at": "2025-08-07T16:15:06.708210Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.740350Z", "completed_at": "2025-08-07T16:15:06.740357Z"}], "thread_id": "Thread-39", "execution_time": 0.26793599128723145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_TSLAx_Oracle_events_transaction_hash.c86a200558", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.673009Z", "completed_at": "2025-08-07T16:15:06.709543Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.741792Z", "completed_at": "2025-08-07T16:15:06.741800Z"}], "thread_id": "Thread-40", "execution_time": 0.2686021327972412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_number.576f215a28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.767968Z", "completed_at": "2025-08-07T16:15:06.816673Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.878588Z", "completed_at": "2025-08-07T16:15:06.878604Z"}], "thread_id": "Thread-1", "execution_time": 0.16976690292358398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_block_timestamp.f629afe28e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.780247Z", "completed_at": "2025-08-07T16:15:06.831293Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:06.971539Z", "completed_at": "2025-08-07T16:15:06.971551Z"}], "thread_id": "Thread-2", "execution_time": 0.2546365261077881, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bC3M_Oracle_events_transaction_hash.28a9f27947", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bC3M_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.791094Z", "completed_at": "2025-08-07T16:15:06.841992Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.022347Z", "completed_at": "2025-08-07T16:15:07.022362Z"}], "thread_id": "Thread-3", "execution_time": 0.29639267921447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_address.bdf5296248", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.804287Z", "completed_at": "2025-08-07T16:15:06.871980Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.068881Z", "completed_at": "2025-08-07T16:15:07.068907Z"}], "thread_id": "Thread-4", "execution_time": 0.3308730125427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_number.609ef43fc0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.812172Z", "completed_at": "2025-08-07T16:15:06.879549Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.081550Z", "completed_at": "2025-08-07T16:15:07.081563Z"}], "thread_id": "Thread-5", "execution_time": 0.3383011817932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_block_timestamp.d04237ee7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.818522Z", "completed_at": "2025-08-07T16:15:06.961385Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.084470Z", "completed_at": "2025-08-07T16:15:07.084480Z"}], "thread_id": "Thread-6", "execution_time": 0.33921098709106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCOIN_Oracle_events_transaction_hash.b6309f3c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.826943Z", "completed_at": "2025-08-07T16:15:06.976927Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.090379Z", "completed_at": "2025-08-07T16:15:07.090390Z"}], "thread_id": "Thread-7", "execution_time": 0.34116363525390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bCSPX_Oracle_events_block_number.a01484fb80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.835501Z", "completed_at": "2025-08-07T16:15:07.011878Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.096484Z", "completed_at": "2025-08-07T16:15:07.096492Z"}], "thread_id": "Thread-8", "execution_time": 0.3426542282104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_block_number.21e3d39fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.848834Z", "completed_at": "2025-08-07T16:15:07.042376Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.101523Z", "completed_at": "2025-08-07T16:15:07.101531Z"}], "thread_id": "Thread-10", "execution_time": 0.3417801856994629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_transaction_hash.56bda730ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.843791Z", "completed_at": "2025-08-07T16:15:07.048109Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.103102Z", "completed_at": "2025-08-07T16:15:07.103110Z"}], "thread_id": "Thread-9", "execution_time": 0.344646692276001, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bHIGH_Oracle_events_timestamp.d0c596dfea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.855370Z", "completed_at": "2025-08-07T16:15:07.058540Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.106775Z", "completed_at": "2025-08-07T16:15:07.106783Z"}], "thread_id": "Thread-12", "execution_time": 0.3443155288696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_address.165862a2aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.862398Z", "completed_at": "2025-08-07T16:15:07.068157Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.107906Z", "completed_at": "2025-08-07T16:15:07.107917Z"}], "thread_id": "Thread-11", "execution_time": 0.3432929515838623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_number.38fb650a25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.867575Z", "completed_at": "2025-08-07T16:15:07.069796Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.110662Z", "completed_at": "2025-08-07T16:15:07.110670Z"}], "thread_id": "Thread-13", "execution_time": 0.3441429138183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_block_timestamp.388a973e97", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.873846Z", "completed_at": "2025-08-07T16:15:07.082546Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.114380Z", "completed_at": "2025-08-07T16:15:07.114388Z"}], "thread_id": "Thread-14", "execution_time": 0.33920764923095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_hash.dbd74bbec2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.880125Z", "completed_at": "2025-08-07T16:15:07.083507Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.115265Z", "completed_at": "2025-08-07T16:15:07.115272Z"}], "thread_id": "Thread-17", "execution_time": 0.3388686180114746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIB01_Oracle_events_transaction_index.3d160fb148", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bIB01_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.889430Z", "completed_at": "2025-08-07T16:15:07.085325Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.116813Z", "completed_at": "2025-08-07T16:15:07.116823Z"}], "thread_id": "Thread-18", "execution_time": 0.3385739326477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_timestamp.5e95caaec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.884741Z", "completed_at": "2025-08-07T16:15:07.085958Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.117702Z", "completed_at": "2025-08-07T16:15:07.117712Z"}], "thread_id": "Thread-15", "execution_time": 0.34066128730773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_block_number.eefe564540", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.894676Z", "completed_at": "2025-08-07T16:15:07.087486Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.119223Z", "completed_at": "2025-08-07T16:15:07.119233Z"}], "thread_id": "Thread-19", "execution_time": 0.34029579162597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_contract_address.1adbd503a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.966731Z", "completed_at": "2025-08-07T16:15:07.089129Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.120115Z", "completed_at": "2025-08-07T16:15:07.120123Z"}], "thread_id": "Thread-21", "execution_time": 0.3355224132537842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_index.e1dcb67697", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.962078Z", "completed_at": "2025-08-07T16:15:07.089695Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.120945Z", "completed_at": "2025-08-07T16:15:07.120953Z"}], "thread_id": "Thread-16", "execution_time": 0.3414168357849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.f26d7fac89", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.972549Z", "completed_at": "2025-08-07T16:15:07.091228Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.122459Z", "completed_at": "2025-08-07T16:15:07.122467Z"}], "thread_id": "Thread-20", "execution_time": 0.3365788459777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_backedfi_bIBTA_Oracle_events_transaction_hash.83b910f903", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.987938Z", "completed_at": "2025-08-07T16:15:07.092314Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.123326Z", "completed_at": "2025-08-07T16:15:07.123337Z"}], "thread_id": "Thread-26", "execution_time": 0.33619093894958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_address.f089d36807", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.977541Z", "completed_at": "2025-08-07T16:15:07.093242Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.124211Z", "completed_at": "2025-08-07T16:15:07.124222Z"}], "thread_id": "Thread-22", "execution_time": 0.33796167373657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.rwa_backedfi_prices", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n\n\n        SELECT\n            'bC3M' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bC3M_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCOIN' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCOIN_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bCSPX' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bCSPX_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bHIGH' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bHIGH_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIB01' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIB01_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bIBTA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bIBTA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bMSTR' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'bNVDA' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    \nunion all\n\n        SELECT\n            'TSLAx' as bticker\n            ,toStartOfDay(block_timestamp) AS date\n            ,argMax(toUInt256OrNull(decoded_params['current'])/POWER(10,8),block_timestamp) AS price\n        FROM `dbt`.`contracts_backedfi_TSLAx_Oracle_events`\n        WHERE\n            event_name = 'AnswerUpdated'\n            AND block_timestamp < today()\n            \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`rwa_backedfi_prices`\n    )\n  \n\n        GROUP BY 1, 2\n    ", "relation_name": "`dbt`.`rwa_backedfi_prices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.993564Z", "completed_at": "2025-08-07T16:15:07.094021Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.125380Z", "completed_at": "2025-08-07T16:15:07.125390Z"}], "thread_id": "Thread-23", "execution_time": 0.3376278877258301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_number.1522d31da7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:06.997963Z", "completed_at": "2025-08-07T16:15:07.094744Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.126272Z", "completed_at": "2025-08-07T16:15:07.126282Z"}], "thread_id": "Thread-24", "execution_time": 0.33789753913879395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_block_timestamp.ea5eb46130", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.002432Z", "completed_at": "2025-08-07T16:15:07.095326Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.127161Z", "completed_at": "2025-08-07T16:15:07.127169Z"}], "thread_id": "Thread-25", "execution_time": 0.33813929557800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_hash.8917d56005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.007224Z", "completed_at": "2025-08-07T16:15:07.095864Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.128033Z", "completed_at": "2025-08-07T16:15:07.128043Z"}], "thread_id": "Thread-27", "execution_time": 0.3378102779388428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bMSTR_Oracle_events_transaction_index.19282f06e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bMSTR_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.017966Z", "completed_at": "2025-08-07T16:15:07.098613Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.130193Z", "completed_at": "2025-08-07T16:15:07.130201Z"}], "thread_id": "Thread-29", "execution_time": 0.33400988578796387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_number.680bebac6c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.012500Z", "completed_at": "2025-08-07T16:15:07.099204Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.131064Z", "completed_at": "2025-08-07T16:15:07.131072Z"}], "thread_id": "Thread-28", "execution_time": 0.3356313705444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_address.d3f53878e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.023468Z", "completed_at": "2025-08-07T16:15:07.099763Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.131916Z", "completed_at": "2025-08-07T16:15:07.131925Z"}], "thread_id": "Thread-31", "execution_time": 0.33511853218078613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_block_timestamp.9775e2fb1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.027968Z", "completed_at": "2025-08-07T16:15:07.100870Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.132770Z", "completed_at": "2025-08-07T16:15:07.132777Z"}], "thread_id": "Thread-30", "execution_time": 0.3353147506713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_hash.88ba11e669", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.032775Z", "completed_at": "2025-08-07T16:15:07.102405Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.134272Z", "completed_at": "2025-08-07T16:15:07.134280Z"}], "thread_id": "Thread-32", "execution_time": 0.3356015682220459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_backedfi_bNVDA_Oracle_events_transaction_index.68b3f1738e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_backedfi_bNVDA_Oracle_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.037799Z", "completed_at": "2025-08-07T16:15:07.103938Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.135819Z", "completed_at": "2025-08-07T16:15:07.135827Z"}], "thread_id": "Thread-34", "execution_time": 0.3359415531158447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_number.274cf154dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.049359Z", "completed_at": "2025-08-07T16:15:07.105079Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.136725Z", "completed_at": "2025-08-07T16:15:07.136732Z"}], "thread_id": "Thread-35", "execution_time": 0.3355839252471924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_chain_id.f74425b13a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect chain_id\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere chain_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.054053Z", "completed_at": "2025-08-07T16:15:07.105668Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.137597Z", "completed_at": "2025-08-07T16:15:07.137605Z"}], "thread_id": "Thread-36", "execution_time": 0.3352668285369873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_log_index.95ea7ac278", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.043027Z", "completed_at": "2025-08-07T16:15:07.106234Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.138473Z", "completed_at": "2025-08-07T16:15:07.138480Z"}], "thread_id": "Thread-33", "execution_time": 0.3379693031311035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_block_timestamp.bf7705d6a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.059139Z", "completed_at": "2025-08-07T16:15:07.108823Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.140678Z", "completed_at": "2025-08-07T16:15:07.140685Z"}], "thread_id": "Thread-37", "execution_time": 0.33770012855529785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v1_Hub_events_transaction_hash.8f3b8c3dcc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v1_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.063783Z", "completed_at": "2025-08-07T16:15:07.110043Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.142192Z", "completed_at": "2025-08-07T16:15:07.142199Z"}], "thread_id": "Thread-38", "execution_time": 0.33359336853027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_block_number.2e9b559c2a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.075968Z", "completed_at": "2025-08-07T16:15:07.112474Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.144320Z", "completed_at": "2025-08-07T16:15:07.144330Z"}], "thread_id": "Thread-40", "execution_time": 0.3336913585662842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_transaction_hash.fe02a9b64a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.070400Z", "completed_at": "2025-08-07T16:15:07.113729Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.145804Z", "completed_at": "2025-08-07T16:15:07.145812Z"}], "thread_id": "Thread-39", "execution_time": 0.33582258224487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_Hub_events_contract_address.bbcc2fc5da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_address\nfrom `dbt`.`contracts_circles_v2_Hub_events`\nwhere contract_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.170287Z", "completed_at": "2025-08-07T16:15:07.213621Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.277071Z", "completed_at": "2025-08-07T16:15:07.277083Z"}], "thread_id": "Thread-1", "execution_time": 0.1654033660888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_number.2a8e19f5e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.180567Z", "completed_at": "2025-08-07T16:15:07.227841Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.308243Z", "completed_at": "2025-08-07T16:15:07.308261Z"}], "thread_id": "Thread-2", "execution_time": 0.18980145454406738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_block_timestamp.16109c20e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.192706Z", "completed_at": "2025-08-07T16:15:07.243200Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.353691Z", "completed_at": "2025-08-07T16:15:07.353702Z"}], "thread_id": "Thread-3", "execution_time": 0.22431063652038574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_event_type.713ef9b907", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.205842Z", "completed_at": "2025-08-07T16:15:07.275747Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.404930Z", "completed_at": "2025-08-07T16:15:07.404941Z"}], "thread_id": "Thread-4", "execution_time": 0.2634882926940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_id.592e70b2ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.214228Z", "completed_at": "2025-08-07T16:15:07.283157Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.416848Z", "completed_at": "2025-08-07T16:15:07.416859Z"}], "thread_id": "Thread-5", "execution_time": 0.27179694175720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_log_index.143d8c5c9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.220652Z", "completed_at": "2025-08-07T16:15:07.294010Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.418717Z", "completed_at": "2025-08-07T16:15:07.418726Z"}], "thread_id": "Thread-6", "execution_time": 0.2708158493041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_name.d019754eea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.229055Z", "completed_at": "2025-08-07T16:15:07.324239Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.425656Z", "completed_at": "2025-08-07T16:15:07.425663Z"}], "thread_id": "Thread-7", "execution_time": 0.27321529388427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_owner_address.16e6eb27df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect owner_address\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere owner_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.237677Z", "completed_at": "2025-08-07T16:15:07.352958Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.429907Z", "completed_at": "2025-08-07T16:15:07.429915Z"}], "thread_id": "Thread-8", "execution_time": 0.2720353603363037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_registration_date.be77a3bc9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect registration_date\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere registration_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.245525Z", "completed_at": "2025-08-07T16:15:07.378638Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.435422Z", "completed_at": "2025-08-07T16:15:07.435431Z"}], "thread_id": "Thread-10", "execution_time": 0.27373456954956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_circles_v2_NameRegistry_events_transaction_hash.445891e408", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.250866Z", "completed_at": "2025-08-07T16:15:07.379328Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.437502Z", "completed_at": "2025-08-07T16:15:07.437510Z"}], "thread_id": "Thread-9", "execution_time": 0.2744772434234619, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_circles_v2_NameRegistry_events_id.bf3e44847c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_circles_v2_NameRegistry_events`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.265345Z", "completed_at": "2025-08-07T16:15:07.404283Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.442192Z", "completed_at": "2025-08-07T16:15:07.442202Z"}], "thread_id": "Thread-11", "execution_time": 0.27515554428100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_number.14a0066a94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_sdai_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.259072Z", "completed_at": "2025-08-07T16:15:07.405784Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.444323Z", "completed_at": "2025-08-07T16:15:07.444330Z"}], "thread_id": "Thread-12", "execution_time": 0.27792835235595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.yields_sdai_rate_daily", "compiled": true, "compiled_code": "\n\n\nWITH \n\nsdai_rate_sparse_daily AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,argMin(\n          toUInt256OrNull(decoded_params['assets']) / toUInt256OrNull(decoded_params['shares']),\n          block_timestamp\n        ) AS sdai_conversion\n    FROM \n        `dbt`.`contracts_sdai_events`\n    WHERE \n        event_name = 'Deposit'\n        AND toUInt256OrNull(decoded_params['shares']) != 0\n        AND block_timestamp < today()\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`yields_sdai_rate_daily`\n    )\n  \n\n    GROUP BY 1\n),\n\ncalendar AS (\n    SELECT\n        arrayJoin(\n            arrayMap(\n                x -> toStartOfDay(start_date + x),\n                range(toUInt32(end_date - start_date) + 1)\n            )\n        ) AS date\n    FROM (\n        SELECT \n          min(toDate(date)) AS start_date\n          ,max(toDate(date)) AS end_date\n        FROM sdai_rate_sparse_daily\n    )\n),\n\n\nlast_partition_value AS (\n    SELECT \n        sdai_conversion\n    FROM \n        `dbt`.`yields_sdai_rate_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`yields_sdai_rate_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nsdai_daily_rate AS (\n  SELECT\n      date\n      ,sdai_conversion\n      ,floor(\n          sdai_conversion \n          - (\n            \n            COALESCE(\n                lagInFrame(sdai_conversion) OVER (\n                    ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                ),\n                (SELECT sdai_conversion FROM last_partition_value)\n            )\n            \n            )\n      ,12) AS rate\n  FROM (\n    SELECT \n      t1.date\n      ,last_value(t2.sdai_conversion) ignore nulls OVER (ORDER BY t1.date) AS sdai_conversion\n    FROM calendar t1\n    LEFT JOIN\n      sdai_rate_sparse_daily t2\n      ON t2.date = t1.date\n  )\n)\n\n\nSELECT \n  date\n  ,sdai_conversion\n  ,rate\nFROM sdai_daily_rate\nWHERE rate IS NOT NULL", "relation_name": "`dbt`.`yields_sdai_rate_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.271385Z", "completed_at": "2025-08-07T16:15:07.410803Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.445322Z", "completed_at": "2025-08-07T16:15:07.445329Z"}], "thread_id": "Thread-13", "execution_time": 0.27576518058776855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_block_timestamp.f61b316290", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_sdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.278698Z", "completed_at": "2025-08-07T16:15:07.417847Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.448792Z", "completed_at": "2025-08-07T16:15:07.448800Z"}], "thread_id": "Thread-14", "execution_time": 0.271451473236084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_sdai_events_transaction_hash.8bc24e2c1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_sdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.289560Z", "completed_at": "2025-08-07T16:15:07.419901Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.450353Z", "completed_at": "2025-08-07T16:15:07.450361Z"}], "thread_id": "Thread-18", "execution_time": 0.2711191177368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_timestamp.98dea1810b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.283755Z", "completed_at": "2025-08-07T16:15:07.420667Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.451230Z", "completed_at": "2025-08-07T16:15:07.451239Z"}], "thread_id": "Thread-17", "execution_time": 0.2731902599334717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_block_number.ceeff5eb22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_calls`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.294731Z", "completed_at": "2025-08-07T16:15:07.421252Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.452100Z", "completed_at": "2025-08-07T16:15:07.452108Z"}], "thread_id": "Thread-15", "execution_time": 0.27224040031433105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_from_address.6fed187726", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from_address\nfrom `dbt`.`contracts_wxdai_calls`\nwhere from_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.299170Z", "completed_at": "2025-08-07T16:15:07.421855Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.452956Z", "completed_at": "2025-08-07T16:15:07.452963Z"}], "thread_id": "Thread-19", "execution_time": 0.2677164077758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_hash.5f3c74de8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.303712Z", "completed_at": "2025-08-07T16:15:07.423569Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.454432Z", "completed_at": "2025-08-07T16:15:07.454442Z"}], "thread_id": "Thread-21", "execution_time": 0.2685377597808838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_calls_transaction_index.6090a9279b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.313866Z", "completed_at": "2025-08-07T16:15:07.424448Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.455301Z", "completed_at": "2025-08-07T16:15:07.455308Z"}], "thread_id": "Thread-20", "execution_time": 0.267592191696167, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_client.fdd4b3b63a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`esg_execution_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.309292Z", "completed_at": "2025-08-07T16:15:07.425033Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.456150Z", "completed_at": "2025-08-07T16:15:07.456158Z"}], "thread_id": "Thread-16", "execution_time": 0.26966142654418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_contracts_wxdai_calls_transaction_hash.f8705da391", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`contracts_wxdai_calls`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.319901Z", "completed_at": "2025-08-07T16:15:07.426500Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.457609Z", "completed_at": "2025-08-07T16:15:07.457616Z"}], "thread_id": "Thread-26", "execution_time": 0.26926398277282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_mean.e72aa4f76d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_execution_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.324855Z", "completed_at": "2025-08-07T16:15:07.427696Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.458518Z", "completed_at": "2025-08-07T16:15:07.458525Z"}], "thread_id": "Thread-22", "execution_time": 0.2695651054382324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_execution_power_type.2d804f5192", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_execution_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.333820Z", "completed_at": "2025-08-07T16:15:07.428287Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.459412Z", "completed_at": "2025-08-07T16:15:07.459423Z"}], "thread_id": "Thread-24", "execution_time": 0.2692275047302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_number.1691d4f4da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.329241Z", "completed_at": "2025-08-07T16:15:07.428996Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.460309Z", "completed_at": "2025-08-07T16:15:07.460319Z"}], "thread_id": "Thread-23", "execution_time": 0.2707786560058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_address.f24185b4c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`contracts_wxdai_events`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.338354Z", "completed_at": "2025-08-07T16:15:07.430762Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.461806Z", "completed_at": "2025-08-07T16:15:07.461813Z"}], "thread_id": "Thread-25", "execution_time": 0.27105164527893066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_block_timestamp.a0d94f1927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`contracts_wxdai_events`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.343934Z", "completed_at": "2025-08-07T16:15:07.431415Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.462714Z", "completed_at": "2025-08-07T16:15:07.462721Z"}], "thread_id": "Thread-27", "execution_time": 0.2713203430175781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_hash.e5bd1686bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.348463Z", "completed_at": "2025-08-07T16:15:07.432618Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.464305Z", "completed_at": "2025-08-07T16:15:07.464313Z"}], "thread_id": "Thread-29", "execution_time": 0.26703715324401855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_contracts_wxdai_events_transaction_index.0a7b491fa4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`contracts_wxdai_events`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.359089Z", "completed_at": "2025-08-07T16:15:07.433825Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.465181Z", "completed_at": "2025-08-07T16:15:07.465190Z"}], "thread_id": "Thread-31", "execution_time": 0.26666259765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_mean.4aa6c6e862", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_consensus_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.354604Z", "completed_at": "2025-08-07T16:15:07.434557Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.466055Z", "completed_at": "2025-08-07T16:15:07.466063Z"}], "thread_id": "Thread-28", "execution_time": 0.26813697814941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_client.a68ecb1cba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`esg_consensus_power`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.368304Z", "completed_at": "2025-08-07T16:15:07.436341Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.467495Z", "completed_at": "2025-08-07T16:15:07.467503Z"}], "thread_id": "Thread-32", "execution_time": 0.2671382427215576, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_mean.138caad7da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect mean\nfrom `dbt`.`esg_idle_electric_power`\nwhere mean is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.374193Z", "completed_at": "2025-08-07T16:15:07.436916Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.468398Z", "completed_at": "2025-08-07T16:15:07.468407Z"}], "thread_id": "Thread-34", "execution_time": 0.2668490409851074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_idle_electric_power_type.897370fae1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_idle_electric_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.379934Z", "completed_at": "2025-08-07T16:15:07.438907Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.470136Z", "completed_at": "2025-08-07T16:15:07.470146Z"}], "thread_id": "Thread-35", "execution_time": 0.2679729461669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_architecture.1a16108ec8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect architecture\nfrom `dbt`.`esg_hardware_config`\nwhere architecture is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.363696Z", "completed_at": "2025-08-07T16:15:07.439485Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.471063Z", "completed_at": "2025-08-07T16:15:07.471071Z"}], "thread_id": "Thread-30", "execution_time": 0.2718985080718994, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_consensus_power_type.43a86a62ce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_consensus_power`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.388914Z", "completed_at": "2025-08-07T16:15:07.440263Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.471920Z", "completed_at": "2025-08-07T16:15:07.471927Z"}], "thread_id": "Thread-33", "execution_time": 0.2685427665710449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cores_threads.c5863fbd5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cores_threads\nfrom `dbt`.`esg_hardware_config`\nwhere cores_threads is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.384324Z", "completed_at": "2025-08-07T16:15:07.440983Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.472771Z", "completed_at": "2025-08-07T16:15:07.472777Z"}], "thread_id": "Thread-36", "execution_time": 0.2700176239013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_case.abaccc6a15", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect case\nfrom `dbt`.`esg_hardware_config`\nwhere case is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.393912Z", "completed_at": "2025-08-07T16:15:07.441514Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.473631Z", "completed_at": "2025-08-07T16:15:07.473639Z"}], "thread_id": "Thread-37", "execution_time": 0.26846885681152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_cpu.98ab2a1426", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cpu\nfrom `dbt`.`esg_hardware_config`\nwhere cpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.398364Z", "completed_at": "2025-08-07T16:15:07.443666Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.475798Z", "completed_at": "2025-08-07T16:15:07.475808Z"}], "thread_id": "Thread-38", "execution_time": 0.2643277645111084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_gpu.c77a6e9dce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gpu\nfrom `dbt`.`esg_hardware_config`\nwhere gpu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.406473Z", "completed_at": "2025-08-07T16:15:07.446198Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.478194Z", "completed_at": "2025-08-07T16:15:07.478202Z"}], "thread_id": "Thread-40", "execution_time": 0.26529407501220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_os.d2c67be612", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect os\nfrom `dbt`.`esg_hardware_config`\nwhere os is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.412244Z", "completed_at": "2025-08-07T16:15:07.448157Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.480361Z", "completed_at": "2025-08-07T16:15:07.480371Z"}], "thread_id": "Thread-39", "execution_time": 0.26177549362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_psu.31c3e2a6cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect psu\nfrom `dbt`.`esg_hardware_config`\nwhere psu is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.505239Z", "completed_at": "2025-08-07T16:15:07.552792Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.610022Z", "completed_at": "2025-08-07T16:15:07.610034Z"}], "thread_id": "Thread-1", "execution_time": 0.16335749626159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_ram.eebaf678d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ram\nfrom `dbt`.`esg_hardware_config`\nwhere ram is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.515246Z", "completed_at": "2025-08-07T16:15:07.561484Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.641769Z", "completed_at": "2025-08-07T16:15:07.641780Z"}], "thread_id": "Thread-2", "execution_time": 0.18813467025756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_storage.a7d4d3631f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect storage\nfrom `dbt`.`esg_hardware_config`\nwhere storage is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.526580Z", "completed_at": "2025-08-07T16:15:07.577805Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.682647Z", "completed_at": "2025-08-07T16:15:07.682663Z"}], "thread_id": "Thread-3", "execution_time": 0.21913814544677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_hardware_config_type.f3fa360602", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_hardware_config`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.540625Z", "completed_at": "2025-08-07T16:15:07.598970Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.737995Z", "completed_at": "2025-08-07T16:15:07.738009Z"}], "thread_id": "Thread-4", "execution_time": 0.2629530429840088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_distribution.565da13178", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distribution\nfrom `dbt`.`esg_node_distribution`\nwhere distribution is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.547677Z", "completed_at": "2025-08-07T16:15:07.612295Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.750594Z", "completed_at": "2025-08-07T16:15:07.750603Z"}], "thread_id": "Thread-5", "execution_time": 0.270979642868042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_node_distribution_type.2ca93f8673", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom `dbt`.`esg_node_distribution`\nwhere type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.553956Z", "completed_at": "2025-08-07T16:15:07.622199Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.752414Z", "completed_at": "2025-08-07T16:15:07.752423Z"}], "thread_id": "Thread-6", "execution_time": 0.27066659927368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_esg_hardware_config_type.2f881ae529", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`esg_hardware_config`\nwhere type is not null\ngroup by type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.563415Z", "completed_at": "2025-08-07T16:15:07.661116Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.760087Z", "completed_at": "2025-08-07T16:15:07.760095Z"}], "thread_id": "Thread-7", "execution_time": 0.2725245952606201, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_esg_node_distribution_type.f35649b25a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`esg_node_distribution`\nwhere type is not null\ngroup by type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.570279Z", "completed_at": "2025-08-07T16:15:07.676973Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.762868Z", "completed_at": "2025-08-07T16:15:07.762876Z"}], "thread_id": "Thread-8", "execution_time": 0.2720046043395996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_version_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nblocks_clients AS (\n    SELECT\n        toStartOfDay(block_timestamp) AS date\n        ,\narrayFilter(\n    x -> x != '',\n    /* split on every \u201cnon word-ish\u201d character (dash, @, space, etc.) */\n    splitByRegexp(\n        '[^A-Za-z0-9\\\\.]+',            -- \u21fd anything that isn\u2019t a\u2013z, 0\u20139 or \u201c.\u201d\n        arrayStringConcat(\n            arrayMap(\n                i -> if(\n                    reinterpretAsUInt8(substring(unhex(extra_data), i, 1)) BETWEEN 32 AND 126,\n                    reinterpretAsString(substring(unhex(extra_data), i, 1)),\n                    ' '\n                ),\n                range(1, length(unhex(extra_data)) + 1)\n            ),\n            ''\n        )\n    )\n)\n AS decoded_extra_data\n        ,COUNT(*) AS cnt\n    FROM `dbt`.`execution_blocks_production`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(block_timestamp)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_blocks_clients_version_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    , multiIf(\n        lower(decoded_extra_data[1]) = 'choose' \n         OR lower(decoded_extra_data[1]) = 'mysticryuujin'  \n         OR lower(decoded_extra_data[1]) = 'sanae.io'\n         OR decoded_extra_data[1] = ''  , 'Unknown',\n        decoded_extra_data[1]\n    )   AS client\n    ,IF(length(decoded_extra_data)>1, \n        IF(decoded_extra_data[2]='Ethereum',decoded_extra_data[3],decoded_extra_data[2]), \n        ''\n    ) AS version\n    ,SUM(cnt) AS value\nFROM blocks_clients\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`execution_blocks_clients_version_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.580150Z", "completed_at": "2025-08-07T16:15:07.708181Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.769455Z", "completed_at": "2025-08-07T16:15:07.769464Z"}], "thread_id": "Thread-10", "execution_time": 0.27402400970458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_production_block_timestamp.54f6bb4d82", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`execution_blocks_production`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.585918Z", "completed_at": "2025-08-07T16:15:07.717685Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.771754Z", "completed_at": "2025-08-07T16:15:07.771765Z"}], "thread_id": "Thread-9", "execution_time": 0.27437782287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_address_current", "compiled": true, "compiled_code": "\n\nSELECT\n    address\n    ,SUM(bytes_diff) AS bytes\nFROM \n    `dbt`.`execution_state_size_diff_daily`\nGROUP BY 1", "relation_name": "`dbt`.`execution_state_address_current`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.592425Z", "completed_at": "2025-08-07T16:15:07.739033Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.775856Z", "completed_at": "2025-08-07T16:15:07.775864Z"}], "thread_id": "Thread-11", "execution_time": 0.274564266204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_state_size_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nstate_size_diff_daily AS (\n    SELECT \n        date\n        ,bytes_diff\n    FROM \n        `dbt`.`execution_state_size_diff_daily`\n    \n  \n    \n      \n    \n\n    WHERE \n    toStartOfMonth(toStartOfDay(date)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`execution_state_size_daily`\n    )\n  \n\n),\n\n\nlast_partition_value AS (\n    SELECT \n        bytes\n    FROM \n        `dbt`.`execution_state_size_daily`\n    WHERE\n        toStartOfMonth(date) = (\n            SELECT addMonths(max(toStartOfMonth(date)), -1)\n            FROM `dbt`.`execution_state_size_daily`\n        )\n    ORDER BY date DESC\n    LIMIT 1\n),\n\n\nfinal AS (\n    SELECT\n        date\n        ,SUM(bytes_diff) OVER (ORDER BY date ASC) \n        \n            + (SELECT bytes FROM last_partition_value)\n        \n        AS bytes\n    FROM state_size_diff_daily\n)\n\nSELECT * FROM final", "relation_name": "`dbt`.`execution_state_size_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.603941Z", "completed_at": "2025-08-07T16:15:07.744377Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.777985Z", "completed_at": "2025-08-07T16:15:07.777992Z"}], "thread_id": "Thread-13", "execution_time": 0.2741358280181885, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_date.d52e37b9a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.599543Z", "completed_at": "2025-08-07T16:15:07.749271Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.779553Z", "completed_at": "2025-08-07T16:15:07.779561Z"}], "thread_id": "Thread-12", "execution_time": 0.2763636112213135, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_diff_daily_address.cc49e0e72c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.612904Z", "completed_at": "2025-08-07T16:15:07.751741Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.782380Z", "completed_at": "2025-08-07T16:15:07.782388Z"}], "thread_id": "Thread-14", "execution_time": 0.2709221839904785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_peer_id.61fe612c25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.617558Z", "completed_at": "2025-08-07T16:15:07.753280Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.783959Z", "completed_at": "2025-08-07T16:15:07.783970Z"}], "thread_id": "Thread-18", "execution_time": 0.271282434463501, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv4_peers_info_visit_ended_at.743faf92a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.627123Z", "completed_at": "2025-08-07T16:15:07.754107Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.784828Z", "completed_at": "2025-08-07T16:15:07.784835Z"}], "thread_id": "Thread-15", "execution_time": 0.2709052562713623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_discv4_peers_info_peer_id.5cb2faf1bf", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_discv4_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.622780Z", "completed_at": "2025-08-07T16:15:07.754676Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.785687Z", "completed_at": "2025-08-07T16:15:07.785695Z"}], "thread_id": "Thread-17", "execution_time": 0.2723727226257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_execution_state_size_diff_daily_address.08ea8e802a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`execution_state_size_diff_daily`\nwhere address is not null\ngroup by address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.636172Z", "completed_at": "2025-08-07T16:15:07.756543Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.787191Z", "completed_at": "2025-08-07T16:15:07.787202Z"}], "thread_id": "Thread-21", "execution_time": 0.2675740718841553, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_success.fc1cdd0ab3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `dbt`.`execution_txs_info_daily`\nwhere success is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.631585Z", "completed_at": "2025-08-07T16:15:07.757134Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.788063Z", "completed_at": "2025-08-07T16:15:07.788070Z"}], "thread_id": "Thread-19", "execution_time": 0.27353644371032715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_date.59c95191c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_txs_info_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.642824Z", "completed_at": "2025-08-07T16:15:07.757908Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.788900Z", "completed_at": "2025-08-07T16:15:07.788907Z"}], "thread_id": "Thread-20", "execution_time": 0.2685060501098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_txs_info_daily_transaction_type.402be83c8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type\nfrom `dbt`.`execution_txs_info_daily`\nwhere transaction_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.652080Z", "completed_at": "2025-08-07T16:15:07.758787Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.789726Z", "completed_at": "2025-08-07T16:15:07.789733Z"}], "thread_id": "Thread-26", "execution_time": 0.26749730110168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_fork_digest.7accb69d75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fork_digest\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere fork_digest is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.647261Z", "completed_at": "2025-08-07T16:15:07.759437Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.790596Z", "completed_at": "2025-08-07T16:15:07.790607Z"}], "thread_id": "Thread-16", "execution_time": 0.26956963539123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_clients_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,IF(client='','Unknown',client) AS client\n        ,IF(client='','Unknown',platform) AS platform\n    FROM `dbt`.`p2p_discv5_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_clients_daily`\n    )\n  \n\n    GROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    date\n    ,'Clients' AS metric\n    ,client AS label\n    ,COUNT(*) AS value\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL \n\nSELECT\n    date\n    ,'Platform' AS metric\n    ,platform AS label\n    ,COUNT(*) AS value\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`p2p_peers_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.656594Z", "completed_at": "2025-08-07T16:15:07.761505Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.792149Z", "completed_at": "2025-08-07T16:15:07.792157Z"}], "thread_id": "Thread-22", "execution_time": 0.26930975914001465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_peer_id.dc2e3166a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.672139Z", "completed_at": "2025-08-07T16:15:07.762205Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.792999Z", "completed_at": "2025-08-07T16:15:07.793007Z"}], "thread_id": "Thread-25", "execution_time": 0.2677183151245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_cl_fork_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,toString(any(cl_fork_name)) AS fork\n        ,toString(any(cl_next_fork_name)) AS next_fork\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_cl_fork_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,'Current Fork' AS label\n    ,fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3\n\nUNION ALL\n\nSELECT\n    date\n    ,'Next Fork' AS label\n    ,next_fork AS fork\n    ,COUNT(*) AS cnt\nFROM peers\nGROUP BY 1, 2, 3", "relation_name": "`dbt`.`p2p_peers_cl_fork_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.666354Z", "completed_at": "2025-08-07T16:15:07.763725Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.794478Z", "completed_at": "2025-08-07T16:15:07.794489Z"}], "thread_id": "Thread-23", "execution_time": 0.27041077613830566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_discv5_peers_info_peer_id.b6205b83bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.661737Z", "completed_at": "2025-08-07T16:15:07.764326Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.795610Z", "completed_at": "2025-08-07T16:15:07.795620Z"}], "thread_id": "Thread-24", "execution_time": 0.2721831798553467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_discv5_peers_info_visit_ended_at.1f4bf959d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_discv5_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.677740Z", "completed_at": "2025-08-07T16:15:07.766016Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.797389Z", "completed_at": "2025-08-07T16:15:07.797399Z"}], "thread_id": "Thread-27", "execution_time": 0.27150750160217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_daily", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_geo_daily`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\nSELECT\n    t1.date\n    ,IF(t2.country='','Unknown', t2.country) AS country\n    ,COUNT(*) AS cnt\nFROM peers_ip t1\nLEFT JOIN\n    `crawlers_data`.`ipinfo` t2\n    ON t1.ip = t2.ip\nGROUP BY 1, 2", "relation_name": "`dbt`.`p2p_peers_geo_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.683765Z", "completed_at": "2025-08-07T16:15:07.766651Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.798276Z", "completed_at": "2025-08-07T16:15:07.798283Z"}], "thread_id": "Thread-29", "execution_time": 0.2658240795135498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_hourly", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfHour(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 AND crawl_error IS NULL\n        \n  \n    \n      \n    \n\n    AND \n    toStartOfMonth(toStartOfDay(visit_ended_at)) >= (\n      SELECT\n        max(toStartOfMonth(date))\n      FROM `dbt`.`p2p_peers_geo_hourly`\n    )\n  \n\n    GROUP BY 1, 2\n)\n\n\nSELECT\n    date\n    ,splitByString(',',loc)[1] AS lat\n    ,splitByString(',',loc)[2] AS long\n    ,IF(country='','Unknown', country) AS country\n    ,cnt\nFROM (\n    SELECT\n        t1.date\n        ,t2.loc\n        ,t2.country\n        ,COUNT(*) AS cnt\n    FROM peers_ip t1\n    LEFT JOIN\n        `crawlers_data`.`ipinfo` t2\n        ON t1.ip = t2.ip\n    GROUP BY 1, 2, 3\n)", "relation_name": "`dbt`.`p2p_peers_geo_hourly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.688842Z", "completed_at": "2025-08-07T16:15:07.767224Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.799152Z", "completed_at": "2025-08-07T16:15:07.799162Z"}], "thread_id": "Thread-31", "execution_time": 0.26603126525878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_latest", "compiled": true, "compiled_code": "\n\nWITH\n\npeers_ip AS (\n    SELECT\n        toStartOfDay(visit_ended_at) AS date\n        ,peer_id\n        ,any(peer_properties.ip) AS ip\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        empty(dial_errors) = 1 \n        AND \n        crawl_error IS NULL \n        AND \n        date = least((SELECT MAX(toStartOfDay(visit_ended_at)) FROM `dbt`.`p2p_peers_info`),today())\n    GROUP BY 1, 2\n)\n\nSELECT\n    splitByString(',',loc)[1] AS lat\n    ,splitByString(',',loc)[2] AS long\n    ,IF(country='','Unknown', country) AS country\n    ,cnt\nFROM (\n    SELECT\n        t2.loc\n        ,t2.country\n        ,COUNT(*) AS cnt\n    FROM peers_ip t1\n    LEFT JOIN\n        `crawlers_data`.`ipinfo` t2\n        ON t1.ip = t2.ip\n    GROUP BY 1, 2\n)", "relation_name": "`dbt`.`p2p_peers_geo_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.693240Z", "completed_at": "2025-08-07T16:15:07.768249Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.800048Z", "completed_at": "2025-08-07T16:15:07.800056Z"}], "thread_id": "Thread-28", "execution_time": 0.26628994941711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.p2p_peers_geo_topology_latest", "compiled": true, "compiled_code": "\n\nWITH\n\n-- 1) First CTE: basic peer info\ngnosis_peers AS (\n    SELECT \n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        peer_properties.ip AS ip,\n        any(splitByChar('/', agent_version)[1]) AS client\n    FROM `dbt`.`p2p_peers_info`\n    WHERE\n        toStartOfDay(visit_ended_at) = today() - INTERVAL 1 DAY\n        AND empty(dial_errors) = 1\n        AND crawl_error IS NULL\n    GROUP BY\n        peer_id,\n        cl_fork_name,\n        cl_next_fork_name,\n        ip\n),\n\n-- 2) Second CTE: attach discovery_id_prefix to each peer\ngnosis_prefixes AS (\n    SELECT \n        d.discovery_id_prefix,\n        d.peer_id,\n        p.ip,\n        p.cl_fork_name,\n        p.cl_next_fork_name,\n        IF(p.client='', 'Unknown', p.client) AS client\n    FROM `nebula`.`discovery_id_prefixes_x_peer_ids` AS d\n    INNER JOIN gnosis_peers AS p\n      ON p.peer_id = d.peer_id\n)\n\nSELECT\n    t1.date,\n\n    -- Peer columns from the subquery t1\n    t1.peer_ip,\n    t1.peer_discovery_id_prefix,\n    t1.peer_cl_fork_name,\n    t1.peer_cl_next_fork_name,\n    t1.peer_client,\n\n    -- Geographical info for peer (from crawlers_data.ipinfo)\n    peer_info.hostname   AS peer_hostname,\n    peer_info.city       AS peer_city,\n    peer_info.country    AS peer_country,\n    peer_info.org        AS peer_org,\n    peer_info.loc        AS peer_loc,\n\n    -- Neighbor columns from subquery t1\n    t1.neighbor_ip,\n    t1.neighbor_discovery_id_prefix,\n    t1.neighbor_cl_fork_name,\n    t1.neighbor_cl_next_fork_name,\n    t1.neighbor_client,\n\n    -- Geographical info for neighbor (from crawlers_data.ipinfo)\n    neighbor_info.city    AS neighbor_city,\n    neighbor_info.country AS neighbor_country,\n    neighbor_info.org     AS neighbor_org,\n    neighbor_info.loc     AS neighbor_loc,\n\n    -- Finally, the count of edges\n    t1.cnt\nFROM (\n    SELECT\n        toStartOfDay(n.crawl_created_at) AS date,\n\n        -- \u201cPeer\u201d side of the edge\n        peer_p.ip                      AS peer_ip,\n        peer_p.discovery_id_prefix     AS peer_discovery_id_prefix,\n        peer_p.cl_fork_name            AS peer_cl_fork_name,\n        peer_p.cl_next_fork_name       AS peer_cl_next_fork_name,\n        peer_p.client                  AS peer_client,\n\n        -- \u201cNeighbor\u201d side of the edge\n        neighbor_p.ip                      AS neighbor_ip,\n        neighbor_p.discovery_id_prefix     AS neighbor_discovery_id_prefix,\n        neighbor_p.cl_fork_name            AS neighbor_cl_fork_name,\n        neighbor_p.cl_next_fork_name       AS neighbor_cl_next_fork_name,\n        neighbor_p.client                  AS neighbor_client,\n\n        COUNT(*) AS cnt\n    FROM `nebula`.`neighbors` AS n\n\n    -- join to get the discovery_prefix + client/fork info for \u201cpeer\u201d\n    INNER JOIN gnosis_prefixes AS peer_p\n      ON peer_p.discovery_id_prefix = n.peer_discovery_id_prefix\n\n    -- join to get the discovery_prefix + client/fork info for \u201cneighbor\u201d\n    INNER JOIN gnosis_prefixes AS neighbor_p\n      ON neighbor_p.discovery_id_prefix = n.neighbor_discovery_id_prefix\n\n    WHERE\n        toStartOfDay(n.crawl_created_at) = today() - INTERVAL 1 DAY\n\n    GROUP BY\n        date,\n        peer_p.ip,\n        peer_p.discovery_id_prefix,\n        peer_p.cl_fork_name,\n        peer_p.cl_next_fork_name,\n        peer_p.client,\n        neighbor_p.ip,\n        neighbor_p.discovery_id_prefix,\n        neighbor_p.cl_fork_name,\n        neighbor_p.cl_next_fork_name,\n        neighbor_p.client\n) AS t1\n\n-- LEFT JOIN to ipinfo for \u201cpeer\u201d\nLEFT JOIN crawlers_data.ipinfo AS peer_info\n  ON peer_info.ip = t1.peer_ip\n\n-- LEFT JOIN to ipinfo for \u201cneighbor\u201d\nLEFT JOIN crawlers_data.ipinfo AS neighbor_info\n  ON neighbor_info.ip = t1.neighbor_ip", "relation_name": "`dbt`.`p2p_peers_geo_topology_latest`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.699243Z", "completed_at": "2025-08-07T16:15:07.768802Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.800900Z", "completed_at": "2025-08-07T16:15:07.800910Z"}], "thread_id": "Thread-32", "execution_time": 0.26593828201293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_peer_id.d548cde04b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_info`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.703664Z", "completed_at": "2025-08-07T16:15:07.770317Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.802417Z", "completed_at": "2025-08-07T16:15:07.802425Z"}], "thread_id": "Thread-34", "execution_time": 0.2668466567993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_info_visit_ended_at.1b1c453cef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visit_ended_at\nfrom `dbt`.`p2p_peers_info`\nwhere visit_ended_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.708915Z", "completed_at": "2025-08-07T16:15:07.771147Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.803286Z", "completed_at": "2025-08-07T16:15:07.803294Z"}], "thread_id": "Thread-35", "execution_time": 0.26650285720825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_info_peer_id.985861696b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_info`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.713325Z", "completed_at": "2025-08-07T16:15:07.772659Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.804831Z", "completed_at": "2025-08-07T16:15:07.804842Z"}], "thread_id": "Thread-30", "execution_time": 0.26742982864379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_cloud.76a2c4b3ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cloud\nfrom `dbt`.`probelab_peers_clients_cloud_daily`\nwhere cloud is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.718489Z", "completed_at": "2025-08-07T16:15:07.773578Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.805808Z", "completed_at": "2025-08-07T16:15:07.805819Z"}], "thread_id": "Thread-33", "execution_time": 0.2677628993988037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_cloud_daily_date.4870d6f824", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_cloud_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.723114Z", "completed_at": "2025-08-07T16:15:07.774354Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.806688Z", "completed_at": "2025-08-07T16:15:07.806695Z"}], "thread_id": "Thread-36", "execution_time": 0.2680239677429199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_client.f975b7bde8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.728852Z", "completed_at": "2025-08-07T16:15:07.776711Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.808818Z", "completed_at": "2025-08-07T16:15:07.808826Z"}], "thread_id": "Thread-37", "execution_time": 0.26954078674316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_country.3139cd9c2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.733456Z", "completed_at": "2025-08-07T16:15:07.777287Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.809818Z", "completed_at": "2025-08-07T16:15:07.809825Z"}], "thread_id": "Thread-38", "execution_time": 0.2648601531982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_country_daily_date.357485d895", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_country_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.739931Z", "completed_at": "2025-08-07T16:15:07.778824Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.811375Z", "completed_at": "2025-08-07T16:15:07.811386Z"}], "thread_id": "Thread-40", "execution_time": 0.2645449638366699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_client.566b93f546", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.744951Z", "completed_at": "2025-08-07T16:15:07.780471Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.812940Z", "completed_at": "2025-08-07T16:15:07.812947Z"}], "thread_id": "Thread-39", "execution_time": 0.2609293460845947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_daily_date.a2751a8774", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.840455Z", "completed_at": "2025-08-07T16:15:07.888062Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.952791Z", "completed_at": "2025-08-07T16:15:07.952804Z"}], "thread_id": "Thread-1", "execution_time": 0.1718912124633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_quic_daily_date.f3992ddda1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_quic_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.850453Z", "completed_at": "2025-08-07T16:15:07.897654Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:07.978012Z", "completed_at": "2025-08-07T16:15:07.978029Z"}], "thread_id": "Thread-2", "execution_time": 0.19159793853759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_client.05cb036f1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.861809Z", "completed_at": "2025-08-07T16:15:07.912321Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.016061Z", "completed_at": "2025-08-07T16:15:08.016073Z"}], "thread_id": "Thread-3", "execution_time": 0.21967101097106934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_date.c681bad0f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.873767Z", "completed_at": "2025-08-07T16:15:07.932726Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.066720Z", "completed_at": "2025-08-07T16:15:08.066733Z"}], "thread_id": "Thread-4", "execution_time": 0.25930070877075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_probelab_peers_clients_version_daily_version.84dd199f00", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect version\nfrom `dbt`.`probelab_peers_clients_version_daily`\nwhere version is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.882856Z", "completed_at": "2025-08-07T16:15:07.953727Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.085202Z", "completed_at": "2025-08-07T16:15:08.085214Z"}], "thread_id": "Thread-5", "execution_time": 0.27089953422546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_number.e648e0b778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_number\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere block_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.888655Z", "completed_at": "2025-08-07T16:15:07.958803Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.086904Z", "completed_at": "2025-08-07T16:15:08.086914Z"}], "thread_id": "Thread-6", "execution_time": 0.2712733745574951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_block_timestamp.aaaaa9822b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect block_timestamp\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere block_timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.900051Z", "completed_at": "2025-08-07T16:15:07.997029Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.094059Z", "completed_at": "2025-08-07T16:15:08.094067Z"}], "thread_id": "Thread-7", "execution_time": 0.27166223526000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_from.74e8019439", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect from\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere from is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.905759Z", "completed_at": "2025-08-07T16:15:08.006575Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.096491Z", "completed_at": "2025-08-07T16:15:08.096499Z"}], "thread_id": "Thread-8", "execution_time": 0.27213096618652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_log_index.5f16511af4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect log_index\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere log_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.915250Z", "completed_at": "2025-08-07T16:15:08.045933Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.105458Z", "completed_at": "2025-08-07T16:15:08.105465Z"}], "thread_id": "Thread-10", "execution_time": 0.27481770515441895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_to.7acfff1426", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect to\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere to is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.920943Z", "completed_at": "2025-08-07T16:15:08.051069Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.106467Z", "completed_at": "2025-08-07T16:15:08.106475Z"}], "thread_id": "Thread-9", "execution_time": 0.27388715744018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_token_address.948fb51cad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere token_address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.927304Z", "completed_at": "2025-08-07T16:15:08.067711Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.111307Z", "completed_at": "2025-08-07T16:15:08.111316Z"}], "thread_id": "Thread-11", "execution_time": 0.27546262741088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_hash.fe03836772", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_hash is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.934306Z", "completed_at": "2025-08-07T16:15:08.077225Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.113217Z", "completed_at": "2025-08-07T16:15:08.113228Z"}], "thread_id": "Thread-13", "execution_time": 0.2754788398742676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_transfers_erc20_bluechips_transaction_index.f65a58c5c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_index\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_index is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.940708Z", "completed_at": "2025-08-07T16:15:08.083701Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.114719Z", "completed_at": "2025-08-07T16:15:08.114729Z"}], "thread_id": "Thread-12", "execution_time": 0.2756197452545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_transfers_erc20_bluechips_transaction_hash.44d5b8bae6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_hash as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`transfers_erc20_bluechips`\nwhere transaction_hash is not null\ngroup by transaction_hash\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.945868Z", "completed_at": "2025-08-07T16:15:08.086207Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.117554Z", "completed_at": "2025-08-07T16:15:08.117564Z"}], "thread_id": "Thread-14", "execution_time": 0.2702958583831787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.rwa_backedfi_prices_1d", "compiled": true, "compiled_code": "\n\n\n\n   -- safely before any token was listed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bC3M'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bC3M'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCOIN'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bCOIN'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bCSPX'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bCSPX'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bHIGH'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bHIGH'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIB01'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bIB01'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bIBTA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bIBTA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bMSTR'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bMSTR'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'bNVDA'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'bNVDA'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nUNION ALL\n\nSELECT\n  bticker,\n  date,\n  price\nFROM (\n    /* gather sparse rows, fill, forward-fill */\n    SELECT\n      'TSLAx'       AS bticker,\n      date,\n      /* forward-fill price */\n      last_value(price) IGNORE NULLS\n        OVER (\n          ORDER BY date\n          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) AS price\n    FROM (\n        /* sparse daily data for this one ticker */\n        SELECT\n          toDate(date)            AS date,\n          max(price)              AS price          -- one value per day\n        FROM `dbt`.`rwa_backedfi_prices`\n        WHERE bticker = 'TSLAx'\n        GROUP BY date\n        ORDER BY date\n          WITH FILL\n            FROM toDate('2020-01-01')\n            TO today()\n            STEP 1\n    )\n)\nWHERE price IS NOT NULL           -- drop rows before first real point\n\nORDER BY bticker, date", "relation_name": "`dbt`.`rwa_backedfi_prices_1d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.954424Z", "completed_at": "2025-08-07T16:15:08.087727Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.119155Z", "completed_at": "2025-08-07T16:15:08.119166Z"}], "thread_id": "Thread-18", "execution_time": 0.2706937789916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_bticker.d1a7bfb355", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`rwa_backedfi_prices`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.959492Z", "completed_at": "2025-08-07T16:15:08.088785Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.120051Z", "completed_at": "2025-08-07T16:15:08.120058Z"}], "thread_id": "Thread-15", "execution_time": 0.270953893661499, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_date.6ebbbf53e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`rwa_backedfi_prices`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.963864Z", "completed_at": "2025-08-07T16:15:08.090306Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.121533Z", "completed_at": "2025-08-07T16:15:08.121541Z"}], "thread_id": "Thread-17", "execution_time": 0.27182483673095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_bticker.c91112f059", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`rwa_backedfi_prices`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.968359Z", "completed_at": "2025-08-07T16:15:08.091210Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.122402Z", "completed_at": "2025-08-07T16:15:08.122409Z"}], "thread_id": "Thread-21", "execution_time": 0.2675819396972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.yields_sdai_apy_daily", "compiled": true, "compiled_code": "\n\nWITH\n\nsdai_apy_daily AS (\n    SELECT\n        date,\n        floor(POWER((1+rate),365) - 1,4) * 100 AS apy,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMA,\n        floor(\n            avg(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMA,\n         floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 6  PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_7DMM,\n        floor(\n            median(POWER((1+rate),365) - 1)\n                OVER (ORDER BY date ROWS BETWEEN 29 PRECEDING AND CURRENT ROW)\n            ,4) * 100 AS apy_30DMM\n    FROM `dbt`.`yields_sdai_rate_daily`\n)\n\nSELECT date, apy, 'Daily' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMA, '7DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMA, '30DMA' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_7DMM, '7DMM' AS label FROM sdai_apy_daily\nUNION ALL\nSELECT date, apy_30DMM, '30DMM' AS label FROM sdai_apy_daily", "relation_name": "`dbt`.`yields_sdai_apy_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.973464Z", "completed_at": "2025-08-07T16:15:08.091776Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.123261Z", "completed_at": "2025-08-07T16:15:08.123268Z"}], "thread_id": "Thread-19", "execution_time": 0.2678065299987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_rate_daily_date.91a9c7c956", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`yields_sdai_rate_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.979136Z", "completed_at": "2025-08-07T16:15:08.092609Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.124125Z", "completed_at": "2025-08-07T16:15:08.124133Z"}], "thread_id": "Thread-20", "execution_time": 0.2680354118347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_daily", "compiled": true, "compiled_code": "\n\n\nSELECT\n    date\n    ,client\n    ,SUM(value) AS value\nFROM `dbt`.`execution_blocks_clients_version_daily`\nGROUP BY 1, 2", "relation_name": "`dbt`.`execution_blocks_clients_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.982678Z", "completed_at": "2025-08-07T16:15:08.093182Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.124998Z", "completed_at": "2025-08-07T16:15:08.125006Z"}], "thread_id": "Thread-26", "execution_time": 0.2683079242706299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.execution_blocks_clients_pct_daily", "compiled": true, "compiled_code": "\n\n\nWITH\n\nclients_blocks AS (\n    SELECT\n        date\n        ,client\n        ,SUM(value) AS value\n    FROM `dbt`.`execution_blocks_clients_version_daily`\n    GROUP BY 1, 2\n)\n\nSELECT\n    date\n    ,client\n    ,ROUND(value/(SUM(value) OVER (PARTITION BY date)),4) AS pct\nFROM \n    clients_blocks", "relation_name": "`dbt`.`execution_blocks_clients_pct_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.991061Z", "completed_at": "2025-08-07T16:15:08.095177Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.125998Z", "completed_at": "2025-08-07T16:15:08.126005Z"}], "thread_id": "Thread-22", "execution_time": 0.2674691677093506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_date.e60d61e027", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.986301Z", "completed_at": "2025-08-07T16:15:08.095852Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.126826Z", "completed_at": "2025-08-07T16:15:08.126834Z"}], "thread_id": "Thread-16", "execution_time": 0.2695186138153076, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_client.05a120bb35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:07.997649Z", "completed_at": "2025-08-07T16:15:08.097702Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.127809Z", "completed_at": "2025-08-07T16:15:08.127817Z"}], "thread_id": "Thread-25", "execution_time": 0.2686746120452881, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_version_daily_value.184e159121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`execution_blocks_clients_version_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.007289Z", "completed_at": "2025-08-07T16:15:08.098338Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.128663Z", "completed_at": "2025-08-07T16:15:08.128672Z"}], "thread_id": "Thread-24", "execution_time": 0.2675762176513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_execution_state_address_current_address.a889cd3d66", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`execution_state_address_current`\nwhere address is not null\ngroup by address\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.002174Z", "completed_at": "2025-08-07T16:15:08.098868Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.129554Z", "completed_at": "2025-08-07T16:15:08.129562Z"}], "thread_id": "Thread-23", "execution_time": 0.2692234516143799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_address_current_address.266e37db94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address\nfrom `dbt`.`execution_state_address_current`\nwhere address is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.011623Z", "completed_at": "2025-08-07T16:15:08.100451Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.131068Z", "completed_at": "2025-08-07T16:15:08.131078Z"}], "thread_id": "Thread-27", "execution_time": 0.2648892402648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_state_size_daily_date.6dfc786bec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_state_size_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.021723Z", "completed_at": "2025-08-07T16:15:08.101651Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.131917Z", "completed_at": "2025-08-07T16:15:08.131924Z"}], "thread_id": "Thread-31", "execution_time": 0.2643399238586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_date.81dbeac762", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.027604Z", "completed_at": "2025-08-07T16:15:08.102241Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.132748Z", "completed_at": "2025-08-07T16:15:08.132756Z"}], "thread_id": "Thread-28", "execution_time": 0.2645232677459717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_value.dec8f11d8b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect value\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.017147Z", "completed_at": "2025-08-07T16:15:08.102931Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.133617Z", "completed_at": "2025-08-07T16:15:08.133627Z"}], "thread_id": "Thread-29", "execution_time": 0.33326005935668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_clients_daily_client.f1162a7b22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`p2p_peers_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.032046Z", "completed_at": "2025-08-07T16:15:08.103670Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.201350Z", "completed_at": "2025-08-07T16:15:08.201360Z"}], "thread_id": "Thread-32", "execution_time": 0.33250951766967773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_cl_fork_daily_date.8a23534f05", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_cl_fork_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.041317Z", "completed_at": "2025-08-07T16:15:08.104321Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.202277Z", "completed_at": "2025-08-07T16:15:08.202289Z"}], "thread_id": "Thread-35", "execution_time": 0.3316977024078369, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_cnt.b79a2efda6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.036534Z", "completed_at": "2025-08-07T16:15:08.104862Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.203292Z", "completed_at": "2025-08-07T16:15:08.203300Z"}], "thread_id": "Thread-34", "execution_time": 0.33326101303100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_country_power_consumption", "compiled": true, "compiled_code": "\n\n\nWITH\n\nconsensus_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`esg_consensus_power`\n),\n\nexecution_power AS (\n    SELECT\n        type\n        ,client\n        ,mean\n    FROM\n        `dbt`.`esg_execution_power`\n),\n\nidle_electric_power AS (\n    SELECT\n        type\n        ,mean\n    FROM\n        `dbt`.`esg_idle_electric_power`\n),\n\nnode_distribution AS (\n    SELECT\n        type\n        ,distribution\n    FROM\n        `dbt`.`esg_node_distribution`\n),\n\nnode_config_power AS (\n    SELECT\n        t1.type\n        ,t1.client AS consensus_client\n        ,t2.client AS execution_client\n        ,t1.mean + t2.mean + t3.mean AS mean\n    FROM\n        consensus_power t1\n    INNER JOIN\n        execution_power t2\n        ON \n        t2.type = t1.type\n    INNER JOIN\n        idle_electric_power t3\n        ON \n        t3.type = t1.type\n\n),\n\nbest_guess_per_client AS (\n    SELECT\n        t1.consensus_client\n        ,t1.execution_client\n        ,AVG(t1.mean * t2.distribution) AS mean\n    FROM\n        node_config_power t1\n    INNER JOIN\n        node_distribution t2\n        ON \n        t2.type = t1.type\n    GROUP BY\n        t1.consensus_client\n        ,t1.execution_client\n),\n\nconfiguration_distribution AS (\n    SELECT \n        execution_client\n        ,consensus_client\n        ,frac\n    FROM (\n        SELECT\n            arrayJoin(['Erigon', 'Erigon', 'Erigon', 'Erigon', 'Nethermind', 'Nethermind', 'Nethermind', 'Nethermind']) AS execution_client,\n            arrayJoin(['Lighthouse', 'Teku', 'Lodestar', 'Nimbus', 'Lighthouse', 'Teku', 'Lodestar', 'Nimbus']) AS consensus_client,\n            arrayJoin([0.340, 0.114, 0.044, 0.002, 0.340, 0.114, 0.044, 0.002]) AS frac\n    )\n),\n\npower_best_guess AS (\n    SELECT \n        SUM(t1.mean * t2.frac) AS mean\n    FROM \n        best_guess_per_client t1\n    INNER JOIN\n        configuration_distribution t2\n        ON\n        t2.execution_client = t1.execution_client\n        AND\n        t2.consensus_client = t1.consensus_client\n)\n\n\nSELECT\n    t1.date\n    ,t1.country\n    ,t1.cnt * t2.mean AS power\nFROM\n    `dbt`.`p2p_peers_geo_daily` t1\nCROSS JOIN \n    power_best_guess t2", "relation_name": "`dbt`.`esg_country_power_consumption`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.046651Z", "completed_at": "2025-08-07T16:15:08.107369Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.204498Z", "completed_at": "2025-08-07T16:15:08.204506Z"}], "thread_id": "Thread-30", "execution_time": 0.3326597213745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_date.d7ec75b51c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.051674Z", "completed_at": "2025-08-07T16:15:08.109068Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.206039Z", "completed_at": "2025-08-07T16:15:08.206049Z"}], "thread_id": "Thread-33", "execution_time": 0.3336060047149658, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_daily_peer_id.4b78402f2c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.056960Z", "completed_at": "2025-08-07T16:15:08.109706Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.206909Z", "completed_at": "2025-08-07T16:15:08.206917Z"}], "thread_id": "Thread-36", "execution_time": 0.3338301181793213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_date.194a01f9f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.062278Z", "completed_at": "2025-08-07T16:15:08.110256Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.207732Z", "completed_at": "2025-08-07T16:15:08.207740Z"}], "thread_id": "Thread-37", "execution_time": 0.3288893699645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_hourly_peer_id.c853aaf927", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.068345Z", "completed_at": "2025-08-07T16:15:08.112467Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.208718Z", "completed_at": "2025-08-07T16:15:08.208725Z"}], "thread_id": "Thread-38", "execution_time": 0.3292555809020996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_daily_peer_id.8f9a106223", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_daily`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.072758Z", "completed_at": "2025-08-07T16:15:08.114038Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.209737Z", "completed_at": "2025-08-07T16:15:08.209744Z"}], "thread_id": "Thread-40", "execution_time": 0.32906532287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_hourly_peer_id.53a0ce900e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_hourly`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.077995Z", "completed_at": "2025-08-07T16:15:08.115604Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.210711Z", "completed_at": "2025-08-07T16:15:08.210718Z"}], "thread_id": "Thread-39", "execution_time": 0.3286924362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_date.fdef1eb18f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.226370Z", "completed_at": "2025-08-07T16:15:08.264173Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.275042Z", "completed_at": "2025-08-07T16:15:08.275052Z"}], "thread_id": "Thread-1", "execution_time": 0.15894436836242676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_latest_peer_id.fd8fc19f6e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_id\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere peer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.234498Z", "completed_at": "2025-08-07T16:15:08.268349Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.301088Z", "completed_at": "2025-08-07T16:15:08.301099Z"}], "thread_id": "Thread-2", "execution_time": 0.18030095100402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_cnt.f1c86fe831", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cnt\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere cnt is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.247186Z", "completed_at": "2025-08-07T16:15:08.271479Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.319954Z", "completed_at": "2025-08-07T16:15:08.319969Z"}], "thread_id": "Thread-4", "execution_time": 0.11471986770629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_discovery_id_prefix.067b1990df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_discovery_id_prefix\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere peer_discovery_id_prefix is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.242790Z", "completed_at": "2025-08-07T16:15:08.272042Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.321058Z", "completed_at": "2025-08-07T16:15:08.321069Z"}], "thread_id": "Thread-3", "execution_time": 0.19073200225830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_date.bf8e5bb27a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.254642Z", "completed_at": "2025-08-07T16:15:08.280472Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.341035Z", "completed_at": "2025-08-07T16:15:08.341049Z"}], "thread_id": "Thread-5", "execution_time": 0.12898993492126465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_p2p_peers_geo_topology_latest_peer_ip.d3399c7198", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect peer_ip\nfrom `dbt`.`p2p_peers_geo_topology_latest`\nwhere peer_ip is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.259091Z", "completed_at": "2025-08-07T16:15:08.290345Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.343181Z", "completed_at": "2025-08-07T16:15:08.343189Z"}], "thread_id": "Thread-6", "execution_time": 0.13018345832824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_p2p_peers_geo_latest_peer_id.e2b2341b91", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    peer_id as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`p2p_peers_geo_latest`\nwhere peer_id is not null\ngroup by peer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.281256Z", "completed_at": "2025-08-07T16:15:08.342504Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.353512Z", "completed_at": "2025-08-07T16:15:08.353520Z"}], "thread_id": "Thread-8", "execution_time": 0.12035846710205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_date.5f24ab347b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.276110Z", "completed_at": "2025-08-07T16:15:08.344073Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.354521Z", "completed_at": "2025-08-07T16:15:08.354528Z"}], "thread_id": "Thread-7", "execution_time": 0.12200093269348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_rwa_backedfi_prices_1d_bticker.13d49b1ac0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bticker\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere bticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.286055Z", "completed_at": "2025-08-07T16:15:08.344667Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.355421Z", "completed_at": "2025-08-07T16:15:08.355431Z"}], "thread_id": "Thread-18", "execution_time": 0.12165713310241699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.unique_rwa_backedfi_prices_1d_bticker.6d07f8210c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    bticker as unique_field,\n    count(*) as n_records\n\nfrom `dbt`.`rwa_backedfi_prices_1d`\nwhere bticker is not null\ngroup by bticker\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.291060Z", "completed_at": "2025-08-07T16:15:08.345601Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.356312Z", "completed_at": "2025-08-07T16:15:08.356322Z"}], "thread_id": "Thread-20", "execution_time": 0.11745309829711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_date.d947ce7f13", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`yields_sdai_apy_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.295572Z", "completed_at": "2025-08-07T16:15:08.346367Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.357193Z", "completed_at": "2025-08-07T16:15:08.357203Z"}], "thread_id": "Thread-9", "execution_time": 0.11757326126098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_yields_sdai_apy_daily_label.27b8868fd2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label\nfrom `dbt`.`yields_sdai_apy_daily`\nwhere label is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.302117Z", "completed_at": "2025-08-07T16:15:08.347472Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.358049Z", "completed_at": "2025-08-07T16:15:08.358056Z"}], "thread_id": "Thread-13", "execution_time": 0.11780738830566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_client.87c82a2d32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.310870Z", "completed_at": "2025-08-07T16:15:08.348226Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.358868Z", "completed_at": "2025-08-07T16:15:08.358878Z"}], "thread_id": "Thread-14", "execution_time": 0.11743450164794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_client.66a3aaed10", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client\nfrom `dbt`.`execution_blocks_clients_pct_daily`\nwhere client is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.315515Z", "completed_at": "2025-08-07T16:15:08.348963Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.359746Z", "completed_at": "2025-08-07T16:15:08.359756Z"}], "thread_id": "Thread-10", "execution_time": 0.1176447868347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_pct_daily_date.e38a3348f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_pct_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.306493Z", "completed_at": "2025-08-07T16:15:08.349596Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.360633Z", "completed_at": "2025-08-07T16:15:08.360641Z"}], "thread_id": "Thread-16", "execution_time": 0.11975884437561035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_execution_blocks_clients_daily_date.166c6b3d17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`execution_blocks_clients_daily`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.321943Z", "completed_at": "2025-08-07T16:15:08.350789Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.361514Z", "completed_at": "2025-08-07T16:15:08.361526Z"}], "thread_id": "Thread-17", "execution_time": 0.10986161231994629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_carbon_emissions", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        date\n        ,country\n        ,power\n    FROM\n        `dbt`.`esg_country_power_consumption`\n),\n\nember_data AS (\n    SELECT\n        \"Date\" AS month_date\n        ,\"Value\" AS value\n        ,lagInFrame(\"Value\") OVER (PARTITION BY \"ISO 3 code\" ORDER BY \"Date\" ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)  AS lag_value\n        ,\"ISO 3 code\" AS country\n    FROM\n        `crawlers_data`.`ember_electricity_data`\n    WHERE   \n        \"Unit\" = 'gCO2/kWh'\n\n)\n\nSELECT\n    t1.date\n    ,SUM(t1.power * 24)/POWER(10,6) AS energy -- MWh\n    ,SUM(\n        t1.power/POWER(10,3)  -- power in kW\n        * 24 -- hours in day\n        * COALESCE(t3.value,t3.lag_value) -- CIF in gCO2/kWh\n        )/POWER(10,6) AS co2_emissions -- in tCO2e\n    ,AVG(COALESCE(t3.value,t3.lag_value)) AS mean_cif\nFROM\n    gnosis_power_consumption t1\nLEFT JOIN\n    `crawlers_data`.`country_codes` t2\n    ON\n    t2.\"alpha-2\" = t1.country\nINNER JOIN\n    ember_data t3\n    ON\n    t3.country = t2.\"alpha-3\"\n    AND\n    t3.month_date = toStartOfMonth(t1.date)\nGROUP BY \n    1", "relation_name": "`dbt`.`esg_carbon_emissions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.326330Z", "completed_at": "2025-08-07T16:15:08.351626Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.362467Z", "completed_at": "2025-08-07T16:15:08.362474Z"}], "thread_id": "Thread-21", "execution_time": 0.10999155044555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gnosis_dbt.esg_power_consumption_top10", "compiled": true, "compiled_code": "\n\n\nWITH\n\ngnosis_power_consumption AS (\n    SELECT\n        t1.date\n        ,IF(t1.country='' OR t1.country='Unknown', 'Unknown', t2.name) AS country\n        ,t1.power\n        ,ROW_NUMBER() OVER (PARTITION BY t1.date ORDER BY t1.power DESC) AS rank\n    FROM\n        `dbt`.`esg_country_power_consumption` t1\n    LEFT JOIN\n        `crawlers_data`.`country_codes` t2\n        ON\n        t2.\"alpha-2\" = t1.country\n)\n\nSELECT\n    date\n    ,IF(rank>10, 'Other', country) AS country\n    ,SUM(power) AS power\nFROM\n    gnosis_power_consumption\nGROUP BY \n    1, 2", "relation_name": "`dbt`.`esg_power_consumption_top10`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.331541Z", "completed_at": "2025-08-07T16:15:08.352215Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.363321Z", "completed_at": "2025-08-07T16:15:08.363329Z"}], "thread_id": "Thread-19", "execution_time": 0.11018180847167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_country.6357da0826", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_country_power_consumption`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.335998Z", "completed_at": "2025-08-07T16:15:08.352796Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.364193Z", "completed_at": "2025-08-07T16:15:08.364204Z"}], "thread_id": "Thread-33", "execution_time": 0.11039066314697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_country_power_consumption_date.42f194f3a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_country_power_consumption`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.376331Z", "completed_at": "2025-08-07T16:15:08.405808Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.409081Z", "completed_at": "2025-08-07T16:15:08.409093Z"}], "thread_id": "Thread-26", "execution_time": 0.04010367393493652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_country.fd35f87154", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_carbon_emissions`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.382107Z", "completed_at": "2025-08-07T16:15:08.407072Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.410704Z", "completed_at": "2025-08-07T16:15:08.410712Z"}], "thread_id": "Thread-22", "execution_time": 0.03989577293395996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_carbon_emissions_date.6e1823fe51", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_carbon_emissions`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.390972Z", "completed_at": "2025-08-07T16:15:08.407677Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.412148Z", "completed_at": "2025-08-07T16:15:08.412156Z"}], "thread_id": "Thread-12", "execution_time": 0.04007530212402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_date.129521a355", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `dbt`.`esg_power_consumption_top10`\nwhere date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.386492Z", "completed_at": "2025-08-07T16:15:08.408260Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.413019Z", "completed_at": "2025-08-07T16:15:08.413026Z"}], "thread_id": "Thread-33", "execution_time": 0.04157423973083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_country.40ea47789a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom `dbt`.`esg_power_consumption_top10`\nwhere country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.401457Z", "completed_at": "2025-08-07T16:15:08.410115Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.413971Z", "completed_at": "2025-08-07T16:15:08.413978Z"}], "thread_id": "Thread-15", "execution_time": 0.04008007049560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_rank.4d98fe86c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rank\nfrom `dbt`.`esg_power_consumption_top10`\nwhere rank is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-07T16:15:08.397068Z", "completed_at": "2025-08-07T16:15:08.411536Z"}, {"name": "execute", "started_at": "2025-08-07T16:15:08.414987Z", "completed_at": "2025-08-07T16:15:08.414994Z"}], "thread_id": "Thread-25", "execution_time": 0.04172372817993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.gnosis_dbt.not_null_esg_power_consumption_top10_power.18696c3e8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect power\nfrom `dbt`.`esg_power_consumption_top10`\nwhere power is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 5.561364412307739, "args": {"partial_parse_file_diff": true, "skip_nodes_if_on_run_start_fails": false, "use_colors": true, "printer_width": 80, "profiles_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "macro_debugging": false, "introspect": true, "show_resource_report": false, "state_modified_compare_more_unrendered_values": false, "warn_error_options": {"include": [], "exclude": []}, "log_level_file": "debug", "invocation_command": "dbt docs generate", "source_freshness_run_project_hooks": false, "compile": true, "exclude": [], "defer": false, "vars": {}, "log_format_file": "debug", "require_nested_cumulative_type_params": false, "empty_catalog": false, "which": "generate", "state_modified_compare_vars": false, "quiet": false, "use_colors_file": true, "require_resource_names_without_spaces": false, "cache_selected_only": false, "log_level": "info", "static": false, "indirect_selection": "eager", "require_yaml_configuration_for_mf_time_spines": false, "log_format": "default", "favor_state": false, "print": true, "project_dir": "/home/runner/work/dbt-cerebro/dbt-cerebro", "require_batched_execution_for_custom_microbatch_strategy": false, "send_anonymous_usage_stats": true, "static_parser": true, "write_json": true, "strict_mode": false, "log_path": "/home/runner/work/dbt-cerebro/dbt-cerebro/logs", "log_file_max_bytes": 10485760, "select": [], "populate_cache": true, "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse": true, "version_check": true}}