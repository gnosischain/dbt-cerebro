{
  "meta": {
    "type": "db",
    "canSave": true,
    "canEdit": true,
    "canAdmin": true,
    "canStar": true,
    "canDelete": true,
    "slug": "consensus-overview",
    "url": "/d/b0e1d65b-c5d9-4f58-9e2b-9c29779c2c53/consensus-overview",
    "expires": "0001-01-01T00:00:00Z",
    "created": "2024-10-18T12:26:17Z",
    "updated": "2024-10-23T06:48:40Z",
    "updatedBy": "gnosisid_hugo.serodio@gnosis.io",
    "createdBy": "gnosisid_hugo.serodio@gnosis.io",
    "version": 28,
    "hasAcl": false,
    "isFolder": false,
    "folderId": 2,
    "folderUid": "c049b211-0058-4301-b9e2-aa54973022e1",
    "folderTitle": "Cerebro Dashboards",
    "folderUrl": "/dashboards/f/c049b211-0058-4301-b9e2-aa54973022e1/cerebro-dashboards",
    "provisioned": false,
    "provisionedExternalId": "",
    "annotationsPermissions": {
      "dashboard": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      },
      "organization": {
        "canAdd": true,
        "canEdit": true,
        "canDelete": true
      }
    },
    "publicDashboardAccessToken": "",
    "publicDashboardUid": "",
    "publicDashboardEnabled": false
  },
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 4,
    "links": [],
    "liveNow": false,
    "panels": [
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 2,
          "w": 8,
          "x": 0,
          "y": 0
        },
        "id": 2,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"text-align: center; padding: 0; margin: 00; width: 100%; height: 100%; overflow: hidden;\">\n    <img src=\"https://raw.githubusercontent.com/gnosischain/media-kit/refs/heads/main/Logos/02%20Gnosis%20Chain/Transparent/PNG/GnosisChain-Horizontal-01-Moss.png\" alt=\"Sample Image\" style=\"max-width: 100%; height: 100%;\">\n</div>",
          "mode": "html"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 2,
          "w": 16,
          "x": 8,
          "y": 0
        },
        "id": 3,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color: #3e6957 ; height: 100%; display: flex; justify-content: center; overflow: hidden;\">\n    <h1 style=\"color: #f5f0e4; font-weight: bold; font-size: 45px;font-family: sans-serif;\">Consensus Overview</h1>\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 15,
          "w": 10,
          "x": 0,
          "y": 2
        },
        "id": 27,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color: #fffcfc; height: 100%;  justify-content: center; overflow: hidden;\">\n  \n  <h1 style=\"color: #3e6957; font-weight: bold; font-size: 25px;font-family: sans-serif; padding: 1rem;\">Blocks Production</h1>\n  \n  <p style=\"padding: 1rem;\">This dashboard provides a comprehensive view of Peer-to-Peer (P2P) network data. Key metrics include the number of active peers, geo location, client diversity and more.</p> \n</div>\n",
          "mode": "html"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#3e6957",
                  "value": null
                },
                {
                  "color": "#fffcfc",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 5,
          "x": 10,
          "y": 2
        },
        "id": 8,
        "options": {
          "colorMode": "background_solid",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "10.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT\nactive\nFROM dbt.consensus_validators_participation_rate\nORDER BY day DESC\nLIMIT 1",
            "refId": "A"
          }
        ],
        "title": "Last Day Active Validators",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#3e6957",
                  "value": null
                },
                {
                  "color": "#fffcfc",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 5,
          "x": 15,
          "y": 2
        },
        "id": 28,
        "options": {
          "colorMode": "background_solid",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "10.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT\nactive\nFROM dbt.consensus_validators_participation_rate\nORDER BY day DESC\nLIMIT 1",
            "refId": "A"
          }
        ],
        "title": "Last Day Active Validators",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#3e6957",
                  "value": null
                },
                {
                  "color": "#fffcfc",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 4,
          "x": 20,
          "y": 2
        },
        "id": 29,
        "options": {
          "colorMode": "background_solid",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "10.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT\nactive\nFROM dbt.consensus_validators_participation_rate\nORDER BY day DESC\nLIMIT 1",
            "refId": "A"
          }
        ],
        "title": "Last Day Active Validators",
        "transparent": true,
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 12,
          "w": 14,
          "x": 10,
          "y": 5
        },
        "id": 6,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = [];\n\n// Define your custom color palette with opacity (70%)\nconst colorPalette = [\n  'rgba(118, 150, 137, 0.7)',  // '#769689' - Light Green / Forest Light\n  'rgba(221, 113, 67, 0.7)',   // '#dd7143' - Orange\n  'rgba(154, 96, 180, 0.7)',   // '#9A60B4' - Purple\n];\n\n// Extract unique datetime_labels for the x-axis first\nconst uniqueSlots = Array.from(new Set(\n  context.panel.data.series.flatMap(s => {\n    const timeField = s.fields.find(f => f.name === 'datetime_label');\n    return timeField.values.buffer || timeField.values;\n  })\n)).sort((a, b) => new Date(a) - new Date(b)); // Assuming 'day' is a date\n\n// Group the data by 'label'\nconst groupedData = context.panel.data.series.reduce((acc, s) => {\n  const labelField = s.fields.find((f) => f.name === 'label');\n  const cntField = s.fields.find((f) => f.name === 'cnt');\n  const timeField = s.fields.find((f) => f.name === 'datetime_label');\n\n  if (!labelField || !cntField || !timeField) {\n    // Handle missing fields gracefully\n    return acc;\n  }\n\n  // Extract values, handling buffer if present\n  const cohorts = labelField.values.buffer || labelField.values;\n  const cntData = cntField.values.buffer || cntField.values;\n  const timeData = timeField.values.buffer || timeField.values;\n\n  cohorts.forEach((cohortValue, index) => {\n    if (!acc[cohortValue]) {\n      acc[cohortValue] = Array(uniqueSlots.length).fill(0);\n    }\n    const slotIndex = uniqueSlots.indexOf(timeData[index]);\n    if (slotIndex !== -1) {\n      acc[cohortValue][slotIndex] += parseFloat(cntData[index]) || 0;\n    }\n  });\n\n  return acc;\n}, {});\n\n// Generate a bar series for each cohort with color assignment\nObject.keys(groupedData).forEach((cohortValue, index) => {\n  series.push({\n    name: `${cohortValue}`, // Label each series as \"Cohort X\"\n    type: 'bar',\n    stack: 'stack', // Enable stacking\n    data: groupedData[cohortValue].map(y => parseFloat(y).toFixed(2)),\n    itemStyle: {\n      color: colorPalette[index % colorPalette.length], // Assign color cyclically with opacity\n      borderColor: 'rgba(26, 26, 26, 1)', // Dark Grey border with full opacity\n      borderWidth: 0.3, // Set border width for each bar\n    },\n    emphasis: { // Highlight on hover\n      itemStyle: {\n        borderColor: '#000', // Highlight border color (Black)\n        borderWidth: 2,       // Highlight border width\n      },\n    },\n  });\n});\n\n// Deduplicate total data\nconst totalDataMap = new Map();\n\ncontext.panel.data.series.forEach(s => {\n  const timeField = s.fields.find(f => f.name === 'datetime_label');\n  const totalField = s.fields.find(f => f.name === 'total');\n  \n  if (timeField && totalField) {\n    const timeData = timeField.values.buffer || timeField.values;\n    const totalValues = totalField.values.buffer || totalField.values;\n    \n    timeData.forEach((time, idx) => {\n      if (!totalDataMap.has(time)) {\n        totalDataMap.set(time, parseFloat(totalValues[idx]) || 0);\n      }\n      // If 'total' appears in multiple series, ensure it remains consistent\n      // Optionally, you can verify consistency here\n    });\n  }\n});\n\n// Align the total data with uniqueSlots\nconst totalData = uniqueSlots.map(slot => totalDataMap.get(slot) || 0);\n\n// Add the 'Total' line series\nseries.push({\n  name: 'Total',\n  type: 'line',\n  yAxisIndex: 1, // Assign to the second y-axis\n  data: totalData.map(value => parseFloat(value).toFixed(2)), // Ensure numerical values\n  smooth: true, // Makes the line smooth\n  lineStyle: {\n    color: '#133629',\n    width: 2,\n  },\n  itemStyle: {\n    color: '#133629',\n  },\n  tooltip: {\n    valueFormatter: value => parseInt(value, 10),\n  },\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => {\n  context.panel.chart.dispatchAction({\n    type: 'takeGlobalCursor',\n    key: 'dataZoomSelect',\n    dataZoomSelectActive: true,\n  });\n}, 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\n// Configure ECharts options with Title, Legend, Tooltip, etc.\nconst option = {\n  backgroundColor: '#fffcfa', // Light Cream Background\n\n  // Add the Title Component\n  title: {\n    text: 'Active Validators', // Main title text\n    subtext: 'Status Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'shadow' },\n    formatter: function (params) {\n      // Determine column count dynamically based on number of series\n      const columnCount = params.length > 6 ? 3 : 2;\n\n      // Start with the axis value (e.g., category name)\n      let tooltipText = `\n        <div style=\"\n          padding: 5px; \n          line-height: 1.2; \n          font-size: 12px;\n          max-width: 300px;\">\n          <strong style=\"color: #231e10;\">${params[0].axisValue}</strong><br/>\n          <div style=\"\n            column-count: ${columnCount}; \n            column-gap: 15px; \n            padding-top: 5px;\">\n      `;\n\n      // Iterate through each param to build tooltip entries\n      params.forEach(param => {\n        let valueAsInt = parseInt(param.value, 10);\n        tooltipText += `\n          <div style=\"margin-bottom: 4px; white-space: nowrap; color: #231e10;\">\n            ${param.marker} ${param.seriesName}: ${valueAsInt}\n          </div>\n        `;\n      });\n\n      // Close the divs\n      tooltipText += `\n          </div>\n        </div>\n      `;\n      return tooltipText;\n    },\n  },\n\n  legend: {\n    data: series.map((s) => s.name),\n    top: '18%', // Position the legend below the title\n    left: 'center', // Center the legend horizontally\n    orient: 'horizontal', // Arrange legend items horizontally\n    type: 'scroll', // Enable scrolling when items exceed the container\n    pageIconSize: 8, // Reduce the size of scroll buttons to make scrollbar less high\n    pageIconInactiveColor: '#ccc', // Inactive scroll button color\n    pageIconActiveColor: '#333', // Active scroll button color\n    pageTextStyle: {\n      color: '#333',\n      fontSize: 10, // Smaller font size for page indicators\n    },\n    width: '60%', // Limit legend width to allow wrapping into multiple lines\n    textStyle: {\n      fontSize: 12, // Legend text size\n      color: '#231e10', // Legend text color (Black)\n    },\n    itemGap: 15, // Space between legend items\n    selectedMode: 'multiple', // Allow multiple series to be toggled\n  },\n\n  xAxis: {\n    type: 'category',\n    data: uniqueSlots,\n    boundaryGap: true, // Ensure bars are nicely spaced\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  },\n\n  yAxis: [\n    {\n      // First Y-Axis (Left) for Bar Charts\n      type: 'value',\n      name: 'Count',\n      axisLabel: {\n        formatter: '{value}',\n        color: '#231e10', // Black\n        fontSize: 12,\n      },\n      axisLine: {\n        lineStyle: {\n          color: '#231e10',\n          width: 2,\n        },\n      },\n      splitLine: {\n        lineStyle: {\n          type: 'dashed',\n          color: '#231e10',\n          width: 1,\n        },\n      },\n    },\n    {\n      // Second Y-Axis (Right) for Total Line\n      type: 'value',\n      name: 'Total',\n      position: 'right',\n      axisLabel: {\n        formatter: '{value}',\n        color: '#133629',\n        fontSize: 12,\n      },\n      axisLine: {\n        lineStyle: {\n          color: '#133629',\n          width: 2,\n        },\n      },\n      splitLine: {\n        show: false, // Optionally hide split lines for clarity\n      },\n    },\n  ],\n\n  series: series,\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 80,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT\n*\n,CAST(day AS text) AS datetime_label\n,SUM(cnt) OVER(ORDER BY day) AS total\nFROM dbt.consensus_validators_activations\nORDER BY day ASC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 1,
          "w": 20,
          "x": 2,
          "y": 17
        },
        "id": 22,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color:  #3e6957; height: 100%; display: flex; justify-content: center; overflow: hidden;\">\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 12,
          "w": 14,
          "x": 0,
          "y": 18
        },
        "id": 5,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = [];\n\n// Define your custom color palette with opacity (70%)\nconst colorPalette = [\n  'rgba(118, 150, 137, 0.7)',  // '#769689' - Light Green / Forest Light (keep)\n  'rgba(221, 113, 67, 0.7)',   // '#dd7143' - Orange (keep)\n  'rgba(154, 96, 180, 0.7)',   // '#9A60B4'\n];\n\n// Group the data by 'inc_dist_cohort'\nconst groupedData = context.panel.data.series.reduce((acc, s) => {\n  const labelField = s.fields.find((f) => f.name === 'label');\n  const cntField = s.fields.find((f) => f.name === 'cnt');\n  const timeField = s.fields.find((f) => f.name === 'datetime_label');\n\n  // Extract values, handling buffer if present\n  const cohort = labelField.values.buffer || labelField.values;\n  const cntData = cntField.values.buffer || cntField.values;\n  const timeData = timeField.values.buffer || timeField.values;\n\n  cohort.forEach((cohortValue, index) => {\n    if (!acc[cohortValue]) {\n      acc[cohortValue] = [];\n    }\n    acc[cohortValue].push([timeData[index], cntData[index]]);\n  });\n\n  return acc;\n}, {});\n\n// Generate a bar series for each cohort with color assignment\nObject.keys(groupedData).forEach((cohortValue, index) => {\n  series.push({\n    name: `${cohortValue}`, // Label each series as \"Cohort X\"\n    type: 'bar',\n    stack: 'stack', // Enable stacking\n    data: groupedData[cohortValue].map(([x, y]) => [x, parseFloat(y).toFixed(2)]),\n    itemStyle: {\n      color: colorPalette[index % colorPalette.length], // Assign color cyclically with opacity\n      borderColor: 'rgba(26, 26, 26, 1)', // Dark Grey border with full opacity\n      borderWidth: 0.3, // Set border width for each bar\n    },\n    emphasis: { // Highlight on hover\n      itemStyle: {\n        borderColor: '#000', // Highlight border color (Black)\n        borderWidth: 2,       // Highlight border width\n      },\n    },\n  });\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => {\n  context.panel.chart.dispatchAction({\n    type: 'takeGlobalCursor',\n    key: 'dataZoomSelect',\n    dataZoomSelectActive: true,\n  });\n}, 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\n// Extract unique datetime_labels for the x-axis\nconst uniqueSlots = Array.from(new Set(\n  context.panel.data.series.flatMap(s => {\n    const timeField = s.fields.find(f => f.name === 'datetime_label');\n    return timeField.values.buffer || timeField.values;\n  })\n)).sort((a, b) => a - b); // Sort numerically or lexicographically as needed\n\n// Configure ECharts options with Title, Legend, Tooltip, etc.\nconst option = {\n  backgroundColor: '#fffcfa', // Light Cream Background\n\n  // Add the Title Component\n  title: {\n    text: 'Daily Blocks', // Main title text\n    subtext: 'State Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'shadow' },\n    formatter: function (params) {\n      // Determine column count dynamically based on number of series\n      const columnCount = params.length > 6 ? 3 : 2;\n\n      // Start with the axis value (e.g., category name)\n      let tooltipText = `\n        <div style=\"\n          padding: 5px; \n          line-height: 1.2; \n          font-size: 12px;\n          max-width: 300px;\">\n          <strong style=\"color: #231e10;\">${params[0].axisValue}</strong><br/>\n          <div style=\"\n            column-count: ${columnCount}; \n            column-gap: 15px; \n            padding-top: 5px;\">\n      `;\n\n      // Iterate through each param to build tooltip entries\n      params.forEach(param => {\n        let valueAsInt = parseInt(param.value[1], 10);\n        tooltipText += `\n          <div style=\"margin-bottom: 4px; white-space: nowrap; color: #231e10;\">\n            ${param.marker} ${param.seriesName}: ${valueAsInt}\n          </div>\n        `;\n      });\n\n      // Close the divs\n      tooltipText += `\n          </div>\n        </div>\n      `;\n      return tooltipText;\n    },\n  },\n\n  legend: {\n    data: series.map((s) => s.name),\n    top: '18%', // Position the legend below the title\n    left: 'center', // Center the legend horizontally\n    orient: 'horizontal', // Arrange legend items horizontally\n    type: 'scroll', // Enable scrolling when items exceed the container\n    pageIconSize: 8, // Reduce the size of scroll buttons to make scrollbar less high\n    pageIconInactiveColor: '#ccc', // Inactive scroll button color\n    pageIconActiveColor: '#333', // Active scroll button color\n    pageTextStyle: {\n      color: '#333',\n      fontSize: 10, // Smaller font size for page indicators\n    },\n    width: '60%', // Limit legend width to allow wrapping into multiple lines\n    textStyle: {\n      fontSize: 12, // Legend text size\n      color: '#231e10', // Legend text color (Black)\n    },\n    itemGap: 15, // Space between legend items\n    // itemWidth: 12, // Width of legend symbol (optional)\n    // itemHeight: 12, // Height of legend symbol (optional)\n    selectedMode: 'multiple', // Allow multiple series to be toggled\n  },\n\n  xAxis: {\n    type: 'category',\n    // name: 'Date',\n    data: uniqueSlots,\n    boundaryGap: true, // Ensure bars are nicely spaced\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  //  axisLabel: {\n  //    rotate: 45, // Rotate labels for better readability\n  //    color: '#231e10', // X-axis label color (Black)\n  //    fontSize: 12, // X-axis label font size\n  //  },\n  },\n\n  yAxis: {\n    type: 'value',\n    name: 'Count',\n    axisLabel: {\n      formatter: '{value}',\n      color: '#231e10', // Y-axis label color (Black)\n      fontSize: 12, // Y-axis label font size\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize y-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        color: '#231e10', // Changed from '#cbc3ad' to '#231e10' for better visibility\n        width: 1,         // Slightly thicker dashed lines\n      },\n    },\n  },\n\n  series: series,\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 60,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \n* \n,CAST(day AS text) AS datetime_label\nFROM dbt.consensus_blocks_production\nORDER BY day ASC, label DESC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 6,
          "w": 10,
          "x": 14,
          "y": 18
        },
        "id": 21,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color: #fffcfc; height: 100%;  justify-content: center; overflow: hidden;\">\n  \n  <h1 style=\"color: #3e6957; font-weight: bold; font-size: 25px;font-family: sans-serif; padding: 1rem;\">Blocks Production</h1>\n  \n  <p style=\"padding: 1rem;\">This dashboard provides a comprehensive view of Peer-to-Peer (P2P) network data. Key metrics include the number of active peers, geo location, client diversity and more.</p> \n</div>\n",
          "mode": "html"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 6,
          "w": 10,
          "x": 14,
          "y": 24
        },
        "id": 7,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.name === 'pct').values.buffer || s.fields.find((f) => f.name === 'pct').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: \"Participation Rate\", // Updated for clarity\n    type: 'line',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    itemStyle: { // Set the line color\n      color: 'rgba(118, 150, 137, 0.7)',  // Light Green / Forest Light\n      borderColor: 'rgba(26, 26, 26, 1)', // Optional: Dark Grey border with full opacity\n      borderWidth: 0.3,  // Optional: Set border width for each point\n    },\n    data: sData.map((d, i) => {\n      // If your data is in decimal form, uncomment the next line\n      // const value = (d * 100).toFixed(2);\n      const value = d.toFixed(2); // Assuming data is already in percentage\n      return [sTime[i], value];\n    }),\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: '#fffcfa',\n\n  // **Title Component**\n  title: {\n    text: 'Participation Rate', // Main title text\n    // subtext: 'Inclusion Distance Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n    formatter: function (params) {\n      const date = new Date(params[0].data[0]);\n      const value = params[0].data[1];\n      return `${date.toLocaleDateString()}<br/>Participation Rate: ${value}%`;\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'time',\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  },\n\n  yAxis: {\n    type: 'value',\n    min: 0,            // Start at 0 for better percentage representation\n    max: 100,          // Assuming participation rate is out of 100\n    axisLabel: {\n      formatter: '{value}%', // Append '%' to y-axis labels\n      color: '#231e10', // Y-axis label color (Black)\n      fontSize: 12, // Y-axis label font size\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize y-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        color: '#231e10', // Changed from '#cbc3ad' to '#231e10' for better visibility\n        width: 1,         // Slightly thicker dashed lines\n      },\n    },\n  },\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 0,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT\nday\n,participation_rate * 100 AS pct\n,CAST(day AS text) AS datetime_label\nFROM dbt.consensus_validators_participation_rate\nORDER BY day ASC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 1,
          "w": 20,
          "x": 2,
          "y": 30
        },
        "id": 23,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color:  #3e6957; height: 100%; display: flex; justify-content: center; overflow: hidden;\">\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 12,
          "w": 14,
          "x": 0,
          "y": 31
        },
        "id": 4,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = [];\n\n// Define your custom color palette with opacity (70%)\nconst colorPalette = [\n  'rgba(118, 150, 137, 0.7)',  // '#769689' - Light Green / Forest Light (keep)\n  'rgba(221, 113, 67, 0.7)',   // '#dd7143' - Orange (keep)\n  'rgba(84, 112, 198, 0.7)',   // '#5470C6'\n  'rgba(145, 204, 117, 0.7)',  // '#91CC75'\n  'rgba(250, 200, 88, 0.7)',   // '#FAC858'\n  'rgba(238, 102, 102, 0.7)',  // '#EE6666'\n  'rgba(115, 192, 222, 0.7)',  // '#73C0DE'\n  'rgba(59, 162, 114, 0.7)',   // '#3BA272'\n  'rgba(154, 96, 180, 0.7)',   // '#9A60B4'\n  'rgba(234, 124, 204, 0.7)',  // '#EA7CCC'\n  'rgba(255, 159, 127, 0.7)',  // '#FF9F7F'\n  'rgba(231, 188, 243, 0.7)',  // '#E7BCF3'\n  'rgba(212, 130, 101, 0.7)',  // '#D48265'\n  'rgba(145, 199, 174, 0.7)',  // '#91C7AE'\n  'rgba(116, 159, 131, 0.7)',  // '#749F83'\n  'rgba(202, 130, 34, 0.7)',   // '#CA8622'\n  'rgba(189, 162, 154, 0.7)',  // '#BDA29A'\n];\n\n// Group the data by 'inc_dist_cohort'\nconst groupedData = context.panel.data.series.reduce((acc, s) => {\n  const cohortField = s.fields.find((f) => f.name === 'inc_dist_cohort');\n  const cntField = s.fields.find((f) => f.name === 'cnt');\n  const timeField = s.fields.find((f) => f.name === 'datetime_label');\n\n  // Extract values, handling buffer if present\n  const cohort = cohortField.values.buffer || cohortField.values;\n  const cntData = cntField.values.buffer || cntField.values;\n  const timeData = timeField.values.buffer || timeField.values;\n\n  cohort.forEach((cohortValue, index) => {\n    if (!acc[cohortValue]) {\n      acc[cohortValue] = [];\n    }\n    acc[cohortValue].push([timeData[index], cntData[index]]);\n  });\n\n  return acc;\n}, {});\n\n// Generate a bar series for each cohort with color assignment\nObject.keys(groupedData).forEach((cohortValue, index) => {\n  series.push({\n    name: `${cohortValue}`, // Label each series as \"Cohort X\"\n    type: 'bar',\n    stack: 'stack', // Enable stacking\n    data: groupedData[cohortValue].map(([x, y]) => [x, parseFloat(y).toFixed(2)]),\n    itemStyle: {\n      color: colorPalette[index % colorPalette.length], // Assign color cyclically with opacity\n      borderColor: 'rgba(26, 26, 26, 1)', // Dark Grey border with full opacity\n      borderWidth: 0.3, // Set border width for each bar\n    },\n    emphasis: { // Highlight on hover\n      itemStyle: {\n        borderColor: '#000', // Highlight border color (Black)\n        borderWidth: 2,       // Highlight border width\n      },\n    },\n  });\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => {\n  context.panel.chart.dispatchAction({\n    type: 'takeGlobalCursor',\n    key: 'dataZoomSelect',\n    dataZoomSelectActive: true,\n  });\n}, 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\n// Extract unique datetime_labels for the x-axis\nconst uniqueSlots = Array.from(new Set(\n  context.panel.data.series.flatMap(s => {\n    const timeField = s.fields.find(f => f.name === 'datetime_label');\n    return timeField.values.buffer || timeField.values;\n  })\n)).sort((a, b) => a - b); // Sort numerically or lexicographically as needed\n\n// Configure ECharts options with Title, Legend, Tooltip, etc.\nconst option = {\n  backgroundColor: '#fffcfa', // Light Cream Background\n\n  // Add the Title Component\n  title: {\n    text: 'Daily Attestations', // Main title text\n    subtext: 'Inclusion Distance Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'shadow' },\n    formatter: function (params) {\n      // Determine column count dynamically based on number of series\n      const columnCount = params.length > 6 ? 3 : 2;\n\n      // Start with the axis value (e.g., category name)\n      let tooltipText = `\n        <div style=\"\n          padding: 5px; \n          line-height: 1.2; \n          font-size: 12px;\n          max-width: 300px;\">\n          <strong style=\"color: #231e10;\">${params[0].axisValue}</strong><br/>\n          <div style=\"\n            column-count: ${columnCount}; \n            column-gap: 15px; \n            padding-top: 5px;\">\n      `;\n\n      // Iterate through each param to build tooltip entries\n      params.forEach(param => {\n        let valueAsInt = parseInt(param.value[1], 10);\n        tooltipText += `\n          <div style=\"margin-bottom: 4px; white-space: nowrap; color: #231e10;\">\n            ${param.marker} ${param.seriesName}: ${valueAsInt}\n          </div>\n        `;\n      });\n\n      // Close the divs\n      tooltipText += `\n          </div>\n        </div>\n      `;\n      return tooltipText;\n    },\n  },\n\n  legend: {\n    data: series.map((s) => s.name),\n    top: '18%', // Position the legend below the title\n    left: 'center', // Center the legend horizontally\n    orient: 'horizontal', // Arrange legend items horizontally\n    type: 'scroll', // Enable scrolling when items exceed the container\n    pageIconSize: 8, // Reduce the size of scroll buttons to make scrollbar less high\n    pageIconInactiveColor: '#ccc', // Inactive scroll button color\n    pageIconActiveColor: '#333', // Active scroll button color\n    pageTextStyle: {\n      color: '#333',\n      fontSize: 10, // Smaller font size for page indicators\n    },\n    width: '60%', // Limit legend width to allow wrapping into multiple lines\n    textStyle: {\n      fontSize: 12, // Legend text size\n      color: '#231e10', // Legend text color (Black)\n    },\n    itemGap: 15, // Space between legend items\n    // itemWidth: 12, // Width of legend symbol (optional)\n    // itemHeight: 12, // Height of legend symbol (optional)\n    selectedMode: 'multiple', // Allow multiple series to be toggled\n  },\n\n  xAxis: {\n    type: 'category',\n    // name: 'Date',\n    data: uniqueSlots,\n    boundaryGap: true, // Ensure bars are nicely spaced\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  //  axisLabel: {\n  //    rotate: 45, // Rotate labels for better readability\n  //    color: '#231e10', // X-axis label color (Black)\n  //    fontSize: 12, // X-axis label font size\n  //  },\n  },\n\n  yAxis: {\n    type: 'value',\n    name: 'Count',\n    axisLabel: {\n      formatter: '{value}',\n      color: '#231e10', // Y-axis label color (Black)\n      fontSize: 12, // Y-axis label font size\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize y-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        color: '#231e10', // Changed from '#cbc3ad' to '#231e10' for better visibility\n        width: 1,         // Slightly thicker dashed lines\n      },\n    },\n  },\n\n  series: series,\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 60,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n};\n\nreturn option;\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \n* \n,CAST(day AS text) AS datetime_label\nFROM dbt.consensus_atts_inclusion_distance_d\nORDER BY day ASC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 6,
          "w": 10,
          "x": 14,
          "y": 31
        },
        "id": 24,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color: #fffcfc; height: 100%;  justify-content: center; overflow: hidden;\">\n  \n  <h1 style=\"color: #3e6957; font-weight: bold; font-size: 25px;font-family: sans-serif; padding: 1rem;\">Network Attestations</h1>\n  \n  <p style=\"padding: 1rem;\">This dashboard provides a comprehensive view of Peer-to-Peer (P2P) network data. Key metrics include the number of active peers, geo location, client diversity and more.</p> \n</div>\n",
          "mode": "html"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 1,
          "w": 20,
          "x": 2,
          "y": 43
        },
        "id": 25,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color:  #3e6957; height: 100%; display: flex; justify-content: center; overflow: hidden;\">\n</div>",
          "mode": "markdown"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 6,
          "w": 14,
          "x": 0,
          "y": 44
        },
        "id": 10,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: \"nodes\",\n    type: 'bar',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    itemStyle: { // Set the bar color\n      color: 'rgba(118, 150, 137, 0.7)',  // Light Green / Forest Light\n      borderColor: 'rgba(26, 26, 26, 1)', // Optional: Dark Grey border with full opacity\n      borderWidth: 0.3,  // Optional: Set border width for each bar\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: '#fffcfa',\n\n  // **Title Component**\n  title: {\n    text: 'Validators Entry Waiting Time', // Main title text\n    // subtext: 'Inclusion Distance Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'time',\n    name: 'Day',\n    nameLocation: 'middle',\n    nameGap: 20,\n    boundaryGap: true,\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  },\n\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n    name: 'Hours',\n    axisLabel: {\n      formatter: '{value}',\n      color: '#231e10', // Y-axis label color (Black)\n      fontSize: 12, // Y-axis label font size\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize y-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        color: '#231e10', // Changed from '#cbc3ad' to '#231e10' for better visibility\n        width: 1,         // Slightly thicker dashed lines\n      },\n    },\n  },\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 80,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \n* \n,CAST(day AS text) AS datetime_label\nFROM dbt.consensus_validators_waiting_times\nWHERE label = 'Median Entry'\nORDER BY day ASC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "gridPos": {
          "h": 6,
          "w": 10,
          "x": 14,
          "y": 44
        },
        "id": 26,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<div style=\"background-color: #fffcfc; height: 100%;  justify-content: center; overflow: hidden;\">\n  \n  <h1 style=\"color: #3e6957; font-weight: bold; font-size: 25px;font-family: sans-serif; padding: 1rem;\">Waiting Times</h1>\n  \n  <p style=\"padding: 1rem;\">This dashboard provides a comprehensive view of Peer-to-Peer (P2P) network data. Key metrics include the number of active peers, geo location, client diversity and more.</p> \n</div>\n",
          "mode": "html"
        },
        "pluginVersion": "10.1.0",
        "transparent": true,
        "type": "text"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "gridPos": {
          "h": 6,
          "w": 14,
          "x": 0,
          "y": 50
        },
        "id": 12,
        "options": {
          "baidu": {
            "callback": "bmapReady",
            "key": ""
          },
          "editor": {
            "format": "none"
          },
          "editorMode": "code",
          "gaode": {
            "key": "",
            "plugin": "AMap.Scale,AMap.ToolBar"
          },
          "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n\n  return {\n    name: \"nodes\",\n    type: 'bar',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    itemStyle: { // Set the bar color\n      color: 'rgba(118, 150, 137, 0.7)',  // Light Green / Forest Light\n      borderColor: 'rgba(26, 26, 26, 1)', // Optional: Dark Grey border with full opacity\n      borderWidth: 0.3,  // Optional: Set border width for each bar\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: '#fffcfa',\n\n  // **Title Component**\n  title: {\n    text: 'Validators Exit Waiting Time', // Main title text\n    // subtext: 'Inclusion Distance Cohorts', // Optional subtitle text\n    left: 'center', // Position the title centrally\n    top: '2%', // Position the title slightly below the top edge\n    textStyle: {\n      fontSize: 18, // Main title font size\n      fontWeight: 'bold', // Main title font weight\n      color: '#231e10', // Main title color (Black)\n    },\n    subtextStyle: {\n      fontSize: 14, // Subtitle font size\n      color: '#3e6957', // Subtitle color (Forest)\n    },\n  },\n\n  tooltip: {\n    trigger: 'axis',\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'time',\n    name: 'Day',\n    nameLocation: 'middle',\n    nameGap: 20,\n    boundaryGap: true,\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize x-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n  },\n\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n    name: 'Hours',\n    axisLabel: {\n      formatter: '{value}',\n      color: '#231e10', // Y-axis label color (Black)\n      fontSize: 12, // Y-axis label font size\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#231e10', // Customize y-axis line color (Black)\n        width: 2,         // Increased line width for better visibility\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        type: 'dashed',\n        color: '#231e10', // Changed from '#cbc3ad' to '#231e10' for better visibility\n        width: 1,         // Slightly thicker dashed lines\n      },\n    },\n  },\n\n  dataZoom: [\n    {\n      type: 'inside', // Enable zooming inside the chart\n      start: 80,\n      end: 100,\n    },\n    {\n      type: 'slider', // Enable a slider for zooming\n      start: 0,\n      end: 100,\n      height: 10, // Reduce the height of the data zoom slider\n      bottom: '10%', // Position it closer to the plot\n      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.4v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z', // Customize handle icon\n      handleSize: '80%', // Adjust handle size\n      handleStyle: {\n        color: '#6f592c', // Handle color (Saddle Brown)\n      },\n      textStyle: {\n        color: '#231e10', // Text color for data zoom\n        fontSize: 10, // Text size\n      },\n      backgroundColor: 'rgba(228, 221, 203, 1)', // '#e4ddcb' - Cream Medium with full opacity\n      fillerColor: 'rgba(118, 150, 137, 0.7)', // '#769689' - Light Green with opacity\n      borderColor: 'rgba(203, 195, 173, 1)', // '#cbc3ad' - Cream Dark with full opacity\n    },\n  ],\n\n  grid: {\n    left: '2%',\n    right: '10%',\n    top: '25%', // Increased top margin to accommodate legend and title\n    bottom: '15%', // Reduced bottom margin to bring the slider closer to the plot\n    containLabel: true,\n    backgroundColor: '#ffffff', // Plot area's background color (White)\n    borderColor: '#cbc3ad', // Border color of the plot area (Cream Dark)\n    borderWidth: 1, // Border width of the plot area\n    borderRadius: 5, // Rounded corners for the plot area\n    shadowColor: 'rgba(0, 0, 0, 0.05)', // Subtle shadow for depth\n    shadowBlur: 10,\n    shadowOffsetX: 0,\n    shadowOffsetY: 2,\n  },\n  series,\n};\n",
          "google": {
            "callback": "gmapReady",
            "key": ""
          },
          "map": "none",
          "renderer": "canvas",
          "themeEditor": {
            "config": "{}",
            "name": "custom"
          },
          "visualEditor": {
            "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
            "dataset": [
              {
                "name": "f_inclusion_slot",
                "source": "A"
              },
              {
                "name": "cnt",
                "source": "A"
              }
            ],
            "series": []
          }
        },
        "pluginVersion": "6.4.1",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \n* \n,CAST(day AS text) AS datetime_label\nFROM dbt.consensus_validators_waiting_times\nWHERE label = 'Median Exit'\nORDER BY day ASC",
            "refId": "A"
          }
        ],
        "type": "volkovlabs-echarts-panel"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#3e6957",
                  "value": null
                },
                {
                  "color": "#dd7143b3",
                  "value": 24
                },
                {
                  "color": "#eb5e38",
                  "value": 48
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 14,
          "y": 50
        },
        "id": 13,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "10.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \navg(value) AS value\nFROM dbt.consensus_validators_waiting_times\nWHERE label = 'Median Entry'\nAND day >= (SELECT MAX(day) FROM dbt.consensus_validators_waiting_times) - INTERVAL 7 DAYS\n",
            "refId": "A"
          }
        ],
        "title": "Last 7 Days Median Entry Time",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "grafana-clickhouse-datasource",
          "uid": "PD136F4A5A3B015AF"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "#3e6957",
                  "value": null
                },
                {
                  "color": "#dd7143b3",
                  "value": 6
                },
                {
                  "color": "#eb5e38",
                  "value": 16
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 3,
          "w": 6,
          "x": 14,
          "y": 53
        },
        "id": 15,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "10.1.0",
        "targets": [
          {
            "datasource": {
              "type": "grafana-clickhouse-datasource",
              "uid": "PD136F4A5A3B015AF"
            },
            "editorType": "sql",
            "format": 1,
            "meta": {
              "builderOptions": {
                "columns": [],
                "database": "",
                "limit": 1000,
                "mode": "list",
                "queryType": "table",
                "table": ""
              }
            },
            "pluginVersion": "4.5.0",
            "queryType": "table",
            "rawSql": "SELECT \navg(value) AS value\nFROM dbt.consensus_validators_waiting_times\nWHERE label = 'Median Exit'\nAND day >= ((SELECT MAX(day) FROM dbt.consensus_validators_waiting_times) - INTERVAL 14 DAYS)",
            "refId": "A"
          }
        ],
        "title": "Last 14 Days Median Exit Time",
        "type": "stat"
      }
    ],
    "refresh": "",
    "schemaVersion": 38,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": []
    },
    "time": {
      "from": "now-6h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Consensus Overview",
    "uid": "b0e1d65b-c5d9-4f58-9e2b-9c29779c2c53",
    "version": 28,
    "weekStart": ""
  }
}
